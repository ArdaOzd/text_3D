[
    {
        "function_id": "mathutils.interpolate.poly_3d_calc",
        "signature": "mathutils.interpolate.poly_3d_calc(veclist,pt)#",
        "description": "Calculate barycentric weights for a point on a polygon.",
        "parameters": [
            "veclist",
            "pt"
        ],
        "parameter_descriptions": [
            "veclist– list of vectors",
            "pt– point   :rtype: list of per-vector weights"
        ]
    },
    {
        "function_id": "bpy.ops.material.copy",
        "signature": "bpy.ops.material.copy()#",
        "description": "Copy the material settings and nodes",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.material.new",
        "signature": "bpy.ops.material.new()#",
        "description": "Add a new material",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.material.paste",
        "signature": "bpy.ops.material.paste()#",
        "description": "Paste the material settings and nodes",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.outliner.action_set",
        "signature": "bpy.ops.outliner.action_set(action='')#",
        "description": "Change the active action used",
        "parameters": [
            "action=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.outliner.animdata_operation",
        "signature": "bpy.ops.outliner.animdata_operation(type='CLEAR_ANIMDATA')#",
        "description": "Undocumented, considercontributing.",
        "parameters": [
            "type='CLEAR_ANIMDATA'"
        ],
        "parameter_descriptions": [
            "CLEAR_ANIMDATAClear Animation Data – Remove this animation data container.",
            "SET_ACTSet Action.",
            "CLEAR_ACTUnlink Action.",
            "REFRESH_DRIVERSRefresh Drivers.",
            "CLEAR_DRIVERSClear Drivers."
        ]
    },
    {
        "function_id": "bpy.ops.outliner.clear_filter",
        "signature": "bpy.ops.outliner.clear_filter()#",
        "description": "Clear the search filter",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.outliner.collection_color_tag_set",
        "signature": "bpy.ops.outliner.collection_color_tag_set(color='NONE')#",
        "description": "Set a color tag for the selected collections",
        "parameters": [
            "color='NONE'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.outliner.collection_disable",
        "signature": "bpy.ops.outliner.collection_disable()#",
        "description": "Disable viewport display in the view layers",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.outliner.collection_disable_render",
        "signature": "bpy.ops.outliner.collection_disable_render()#",
        "description": "Do not render this collection",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.outliner.collection_drop",
        "signature": "bpy.ops.outliner.collection_drop()#",
        "description": "Drag to move to collection in Outliner",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.outliner.collection_duplicate",
        "signature": "bpy.ops.outliner.collection_duplicate()#",
        "description": "Recursively duplicate the collection, all its children, objects and object data",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.outliner.collection_duplicate_linked",
        "signature": "bpy.ops.outliner.collection_duplicate_linked()#",
        "description": "Recursively duplicate the collection, all its children and objects, with linked object data",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.outliner.collection_enable",
        "signature": "bpy.ops.outliner.collection_enable()#",
        "description": "Enable viewport display in the view layers",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.outliner.collection_enable_render",
        "signature": "bpy.ops.outliner.collection_enable_render()#",
        "description": "Render the collection",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.outliner.collection_exclude_clear",
        "signature": "bpy.ops.outliner.collection_exclude_clear()#",
        "description": "Include collection in the active view layer",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.outliner.collection_exclude_set",
        "signature": "bpy.ops.outliner.collection_exclude_set()#",
        "description": "Exclude collection from the active view layer",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.outliner.collection_hide",
        "signature": "bpy.ops.outliner.collection_hide()#",
        "description": "Hide the collection in this view layer",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.outliner.collection_hide_inside",
        "signature": "bpy.ops.outliner.collection_hide_inside()#",
        "description": "Hide all the objects and collections inside the collection",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.outliner.collection_hierarchy_delete",
        "signature": "bpy.ops.outliner.collection_hierarchy_delete()#",
        "description": "Delete selected collection hierarchies",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.outliner.collection_holdout_clear",
        "signature": "bpy.ops.outliner.collection_holdout_clear()#",
        "description": "Clear masking of collection in the active view layer",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.outliner.collection_holdout_set",
        "signature": "bpy.ops.outliner.collection_holdout_set()#",
        "description": "Mask collection in the active view layer",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.outliner.collection_indirect_only_clear",
        "signature": "bpy.ops.outliner.collection_indirect_only_clear()#",
        "description": "Clear collection contributing only indirectly in the view layer",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.outliner.collection_indirect_only_set",
        "signature": "bpy.ops.outliner.collection_indirect_only_set()#",
        "description": "Set collection to only contribute indirectly (through shadows and reflections) in the view layer",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.outliner.collection_instance",
        "signature": "bpy.ops.outliner.collection_instance()#",
        "description": "Instance selected collections to active scene",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.outliner.collection_isolate",
        "signature": "bpy.ops.outliner.collection_isolate(extend=False)#",
        "description": "Hide all but this collection and its parents",
        "parameters": [
            "extend=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.outliner.collection_link",
        "signature": "bpy.ops.outliner.collection_link()#",
        "description": "Link selected collections to active scene",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.outliner.collection_new",
        "signature": "bpy.ops.outliner.collection_new(nested=True)#",
        "description": "Add a new collection inside selected collection",
        "parameters": [
            "nested=True"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.outliner.collection_objects_deselect",
        "signature": "bpy.ops.outliner.collection_objects_deselect()#",
        "description": "Deselect objects in collection",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.outliner.collection_objects_select",
        "signature": "bpy.ops.outliner.collection_objects_select()#",
        "description": "Select objects in collection",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.outliner.collection_show",
        "signature": "bpy.ops.outliner.collection_show()#",
        "description": "Show the collection in this view layer",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.outliner.collection_show_inside",
        "signature": "bpy.ops.outliner.collection_show_inside()#",
        "description": "Show all the objects and collections inside the collection",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.outliner.constraint_operation",
        "signature": "bpy.ops.outliner.constraint_operation(type='ENABLE')#",
        "description": "Undocumented, considercontributing.",
        "parameters": [
            "type='ENABLE'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.outliner.data_operation",
        "signature": "bpy.ops.outliner.data_operation(type='DEFAULT')#",
        "description": "Undocumented, considercontributing.",
        "parameters": [
            "type='DEFAULT'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.outliner.datastack_drop",
        "signature": "bpy.ops.outliner.datastack_drop()#",
        "description": "Copy or reorder modifiers, constraints, and effects",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.outliner.delete",
        "signature": "bpy.ops.outliner.delete(hierarchy=False)#",
        "description": "Delete selected objects and collections",
        "parameters": [
            "hierarchy=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.outliner.drivers_add_selected",
        "signature": "bpy.ops.outliner.drivers_add_selected()#",
        "description": "Add drivers to selected items",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.outliner.drivers_delete_selected",
        "signature": "bpy.ops.outliner.drivers_delete_selected()#",
        "description": "Delete drivers assigned to selected items",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.outliner.expanded_toggle",
        "signature": "bpy.ops.outliner.expanded_toggle()#",
        "description": "Expand/Collapse all items",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.outliner.hide",
        "signature": "bpy.ops.outliner.hide()#",
        "description": "Hide selected objects and collections",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.outliner.highlight_update",
        "signature": "bpy.ops.outliner.highlight_update()#",
        "description": "Update the item highlight based on the current mouse position",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.outliner.id_copy",
        "signature": "bpy.ops.outliner.id_copy()#",
        "description": "Copy the selected data-blocks to the internal clipboard",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.outliner.id_delete",
        "signature": "bpy.ops.outliner.id_delete()#",
        "description": "Delete the ID under cursor",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.outliner.id_operation",
        "signature": "bpy.ops.outliner.id_operation(type='UNLINK')#",
        "description": "General data-block management operations",
        "parameters": [
            "type='UNLINK'"
        ],
        "parameter_descriptions": [
            "UNLINKUnlink.",
            "LOCALMake Local.",
            "SINGLEMake Single User.",
            "DELETEDelete.",
            "REMAPRemap Users – Make all users of selected data-blocks to use instead current (clicked) one.",
            "COPYCopy.",
            "PASTEPaste.",
            "ADD_FAKEAdd Fake User – Ensure data-block gets saved even if it isn’t in use (e.g. for motion and material libraries).",
            "CLEAR_FAKEClear Fake User.",
            "RENAMERename.",
            "SELECT_LINKEDSelect Linked."
        ]
    },
    {
        "function_id": "bpy.ops.outliner.id_paste",
        "signature": "bpy.ops.outliner.id_paste()#",
        "description": "Paste data-blocks from the internal clipboard",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.outliner.id_remap",
        "signature": "bpy.ops.outliner.id_remap(id_type='OBJECT',old_id='',new_id='')#",
        "description": "Undocumented, considercontributing.",
        "parameters": [
            "id_type='OBJECT'",
            "old_id=''",
            "new_id=''"
        ],
        "parameter_descriptions": [
            "id_type(enum inId Type Items, (optional)) – ID Type",
            "old_id(enum in[],(optional)) – Old ID, Old ID to replace",
            "new_id(enum in[],(optional)) – New ID, New ID to remap all selected IDs’ users to"
        ]
    },
    {
        "function_id": "bpy.ops.outliner.item_activate",
        "signature": "bpy.ops.outliner.item_activate(extend=False,extend_range=False,deselect_all=False,recurse=False)#",
        "description": "Handle mouse clicks to select and activate items",
        "parameters": [
            "extend=False",
            "extend_range=False",
            "deselect_all=False",
            "recurse=False"
        ],
        "parameter_descriptions": [
            "extend(boolean,(optional)) – Extend, Extend selection for activation",
            "extend_range(boolean,(optional)) – Extend Range, Select a range from active element",
            "deselect_all(boolean,(optional)) – Deselect On Nothing, Deselect all when nothing under the cursor",
            "recurse(boolean,(optional)) – Recurse, Select objects recursively from active element"
        ]
    },
    {
        "function_id": "bpy.ops.outliner.item_drag_drop",
        "signature": "bpy.ops.outliner.item_drag_drop()#",
        "description": "Drag and drop element to another place",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.outliner.item_openclose",
        "signature": "bpy.ops.outliner.item_openclose(all=False)#",
        "description": "Toggle whether item under cursor is enabled or closed",
        "parameters": [
            "all=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.outliner.item_rename",
        "signature": "bpy.ops.outliner.item_rename(use_active=False)#",
        "description": "Rename the active element",
        "parameters": [
            "use_active=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.outliner.keyingset_add_selected",
        "signature": "bpy.ops.outliner.keyingset_add_selected()#",
        "description": "Add selected items (blue-gray rows) to active Keying Set",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.outliner.keyingset_remove_selected",
        "signature": "bpy.ops.outliner.keyingset_remove_selected()#",
        "description": "Remove selected items (blue-gray rows) from active Keying Set",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.outliner.lib_operation",
        "signature": "bpy.ops.outliner.lib_operation(type='DELETE')#",
        "description": "Undocumented, considercontributing.",
        "parameters": [
            "type='DELETE'"
        ],
        "parameter_descriptions": [
            "DELETEDelete – Delete this library and all its items.\nWarning: No undo.",
            "RELOCATERelocate – Select a new path for this library, and reload all its data.",
            "RELOADReload – Reload all data from this library."
        ]
    },
    {
        "function_id": "bpy.ops.outliner.lib_relocate",
        "signature": "bpy.ops.outliner.lib_relocate()#",
        "description": "Relocate the library under cursor",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.outliner.liboverride_operation",
        "signature": "bpy.ops.outliner.liboverride_operation(type='OVERRIDE_LIBRARY_CREATE_HIERARCHY',selection_set='SELECTED')#",
        "description": "Create, reset or clear library override hierarchies",
        "parameters": [
            "type='OVERRIDE_LIBRARY_CREATE_HIERARCHY'",
            "selection_set='SELECTED'"
        ],
        "parameter_descriptions": [
            "type(enum in['OVERRIDE_LIBRARY_CREATE_HIERARCHY','OVERRIDE_LIBRARY_RESET','OVERRIDE_LIBRARY_CLEAR_SINGLE'],(optional)) –Library Override OperationOVERRIDE_LIBRARY_CREATE_HIERARCHYMake – Create a local override of the selected linked data-blocks, and their hierarchy of dependencies.OVERRIDE_LIBRARY_RESETReset – Reset the selected local overrides to their linked references values.OVERRIDE_LIBRARY_CLEAR_SINGLEClear – Delete the selected local overrides and relink their usages to the linked data-blocks if possible, else reset them and mark them as non editable.",
            "OVERRIDE_LIBRARY_CREATE_HIERARCHYMake – Create a local override of the selected linked data-blocks, and their hierarchy of dependencies.",
            "OVERRIDE_LIBRARY_RESETReset – Reset the selected local overrides to their linked references values.",
            "OVERRIDE_LIBRARY_CLEAR_SINGLEClear – Delete the selected local overrides and relink their usages to the linked data-blocks if possible, else reset them and mark them as non editable.",
            "selection_set(enum in['SELECTED','CONTENT','SELECTED_AND_CONTENT'],(optional)) –Selection Set, Over which part of the tree items to apply the operationSELECTEDSelected – Apply the operation over selected data-blocks only.CONTENTContent – Apply the operation over content of the selected items only (the data-blocks in their sub-tree).SELECTED_AND_CONTENTSelected & Content – Apply the operation over selected data-blocks and all their dependencies.",
            "SELECTEDSelected – Apply the operation over selected data-blocks only.",
            "CONTENTContent – Apply the operation over content of the selected items only (the data-blocks in their sub-tree).",
            "SELECTED_AND_CONTENTSelected & Content – Apply the operation over selected data-blocks and all their dependencies."
        ]
    },
    {
        "function_id": "bpy.ops.outliner.liboverride_troubleshoot_operation",
        "signature": "bpy.ops.outliner.liboverride_troubleshoot_operation(type='OVERRIDE_LIBRARY_RESYNC_HIERARCHY',selection_set='SELECTED')#",
        "description": "Advanced operations over library override to help fix broken hierarchies",
        "parameters": [
            "type='OVERRIDE_LIBRARY_RESYNC_HIERARCHY'",
            "selection_set='SELECTED'"
        ],
        "parameter_descriptions": [
            "type(enum in['OVERRIDE_LIBRARY_RESYNC_HIERARCHY','OVERRIDE_LIBRARY_RESYNC_HIERARCHY_ENFORCE','OVERRIDE_LIBRARY_DELETE_HIERARCHY'],(optional)) –Library Override Troubleshoot OperationOVERRIDE_LIBRARY_RESYNC_HIERARCHYResync – Rebuild the selected local overrides from their linked references, as well as their hierarchies of dependencies.OVERRIDE_LIBRARY_RESYNC_HIERARCHY_ENFORCEResync Enforce – Rebuild the selected local overrides from their linked references, as well as their hierarchies of dependencies, enforcing these hierarchies to match the linked data (i.e. ignoring existing overrides on data-blocks pointer properties).OVERRIDE_LIBRARY_DELETE_HIERARCHYDelete – Delete the selected local overrides (including their hierarchies of override dependencies) and relink their usages to the linked data-blocks.",
            "OVERRIDE_LIBRARY_RESYNC_HIERARCHYResync – Rebuild the selected local overrides from their linked references, as well as their hierarchies of dependencies.",
            "OVERRIDE_LIBRARY_RESYNC_HIERARCHY_ENFORCEResync Enforce – Rebuild the selected local overrides from their linked references, as well as their hierarchies of dependencies, enforcing these hierarchies to match the linked data (i.e. ignoring existing overrides on data-blocks pointer properties).",
            "OVERRIDE_LIBRARY_DELETE_HIERARCHYDelete – Delete the selected local overrides (including their hierarchies of override dependencies) and relink their usages to the linked data-blocks.",
            "selection_set(enum in['SELECTED','CONTENT','SELECTED_AND_CONTENT'],(optional)) –Selection Set, Over which part of the tree items to apply the operationSELECTEDSelected – Apply the operation over selected data-blocks only.CONTENTContent – Apply the operation over content of the selected items only (the data-blocks in their sub-tree).SELECTED_AND_CONTENTSelected & Content – Apply the operation over selected data-blocks and all their dependencies.",
            "SELECTEDSelected – Apply the operation over selected data-blocks only.",
            "CONTENTContent – Apply the operation over content of the selected items only (the data-blocks in their sub-tree).",
            "SELECTED_AND_CONTENTSelected & Content – Apply the operation over selected data-blocks and all their dependencies."
        ]
    },
    {
        "function_id": "bpy.ops.outliner.material_drop",
        "signature": "bpy.ops.outliner.material_drop()#",
        "description": "Drag material to object in Outliner",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.outliner.modifier_operation",
        "signature": "bpy.ops.outliner.modifier_operation(type='APPLY')#",
        "description": "Undocumented, considercontributing.",
        "parameters": [
            "type='APPLY'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.outliner.object_operation",
        "signature": "bpy.ops.outliner.object_operation(type='SELECT')#",
        "description": "Undocumented, considercontributing.",
        "parameters": [
            "type='SELECT'"
        ],
        "parameter_descriptions": [
            "SELECTSelect.",
            "DESELECTDeselect.",
            "SELECT_HIERARCHYSelect Hierarchy.",
            "REMAPRemap Users – Make all users of selected data-blocks to use instead a new chosen one.",
            "RENAMERename."
        ]
    },
    {
        "function_id": "bpy.ops.outliner.operation",
        "signature": "bpy.ops.outliner.operation()#",
        "description": "Context menu for item operations",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.outliner.orphans_manage",
        "signature": "bpy.ops.outliner.orphans_manage()#",
        "description": "Open a window to manage unused data",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.outliner.orphans_purge",
        "signature": "bpy.ops.outliner.orphans_purge(do_local_ids=True,do_linked_ids=True,do_recursive=True)#",
        "description": "Clear all orphaned data-blocks without any users from the file",
        "parameters": [
            "do_local_ids=True",
            "do_linked_ids=True",
            "do_recursive=True"
        ],
        "parameter_descriptions": [
            "do_local_ids(boolean,(optional)) – Local Data-blocks, Include unused local data-blocks into deletion",
            "do_linked_ids(boolean,(optional)) – Linked Data-blocks, Include unused linked data-blocks into deletion",
            "do_recursive(boolean,(optional)) – Recursive Delete, Recursively check for indirectly unused data-blocks, ensuring that no orphaned data-blocks remain after execution"
        ]
    },
    {
        "function_id": "bpy.ops.outliner.parent_clear",
        "signature": "bpy.ops.outliner.parent_clear()#",
        "description": "Drag to clear parent in Outliner",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.outliner.parent_drop",
        "signature": "bpy.ops.outliner.parent_drop()#",
        "description": "Drag to parent in Outliner",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.outliner.scene_drop",
        "signature": "bpy.ops.outliner.scene_drop()#",
        "description": "Drag object to scene in Outliner",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.outliner.scene_operation",
        "signature": "bpy.ops.outliner.scene_operation(type='DELETE')#",
        "description": "Context menu for scene operations",
        "parameters": [
            "type='DELETE'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.outliner.scroll_page",
        "signature": "bpy.ops.outliner.scroll_page(up=False)#",
        "description": "Scroll page up or down",
        "parameters": [
            "up=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.outliner.select_all",
        "signature": "bpy.ops.outliner.select_all(action='TOGGLE')#",
        "description": "Toggle the Outliner selection of items",
        "parameters": [
            "action='TOGGLE'"
        ],
        "parameter_descriptions": [
            "TOGGLEToggle – Toggle selection for all elements.",
            "SELECTSelect – Select all elements.",
            "DESELECTDeselect – Deselect all elements.",
            "INVERTInvert – Invert selection of all elements."
        ]
    },
    {
        "function_id": "bpy.ops.outliner.select_box",
        "signature": "bpy.ops.outliner.select_box(tweak=False,xmin=0,xmax=0,ymin=0,ymax=0,wait_for_input=True,mode='SET')#",
        "description": "Use box selection to select tree elements",
        "parameters": [
            "tweak=False",
            "xmin=0",
            "xmax=0",
            "ymin=0",
            "ymax=0",
            "wait_for_input=True",
            "mode='SET'"
        ],
        "parameter_descriptions": [
            "tweak(boolean,(optional)) – Tweak, Tweak gesture from empty space for box selection",
            "xmin(int in[-inf,inf],(optional)) – X Min",
            "xmax(int in[-inf,inf],(optional)) – X Max",
            "ymin(int in[-inf,inf],(optional)) – Y Min",
            "ymax(int in[-inf,inf],(optional)) – Y Max",
            "wait_for_input(boolean,(optional)) – Wait for Input",
            "mode(enum in['SET','ADD','SUB'],(optional)) –ModeSETSet – Set a new selection.ADDExtend – Extend existing selection.SUBSubtract – Subtract existing selection.",
            "SETSet – Set a new selection.",
            "ADDExtend – Extend existing selection.",
            "SUBSubtract – Subtract existing selection."
        ]
    },
    {
        "function_id": "bpy.ops.outliner.select_walk",
        "signature": "bpy.ops.outliner.select_walk(direction='UP',extend=False,toggle_all=False)#",
        "description": "Use walk navigation to select tree elements",
        "parameters": [
            "direction='UP'",
            "extend=False",
            "toggle_all=False"
        ],
        "parameter_descriptions": [
            "direction(enum in['UP','DOWN','LEFT','RIGHT'],(optional)) – Walk Direction, Select/Deselect element in this direction",
            "extend(boolean,(optional)) – Extend, Extend selection on walk",
            "toggle_all(boolean,(optional)) – Toggle All, Toggle open/close hierarchy"
        ]
    },
    {
        "function_id": "bpy.ops.outliner.show_active",
        "signature": "bpy.ops.outliner.show_active()#",
        "description": "Open up the tree and adjust the view so that the active object is shown centered",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.outliner.show_hierarchy",
        "signature": "bpy.ops.outliner.show_hierarchy()#",
        "description": "Open all object entries and close all others",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.outliner.show_one_level",
        "signature": "bpy.ops.outliner.show_one_level(open=True)#",
        "description": "Expand/collapse all entries by one level",
        "parameters": [
            "open=True"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.outliner.start_filter",
        "signature": "bpy.ops.outliner.start_filter()#",
        "description": "Start entering filter text",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.outliner.unhide_all",
        "signature": "bpy.ops.outliner.unhide_all()#",
        "description": "Unhide all objects and collections",
        "parameters": []
    },
    {
        "function_id": "gpu.shader.create_from_info",
        "signature": "gpu.shader.create_from_info(shader_info)#",
        "description": "Create shader from a GPUShaderCreateInfo.",
        "parameters": [
            "shader_info"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "gpu.shader.from_builtin",
        "signature": "gpu.shader.from_builtin(shader_name,config='DEFAULT')#",
        "description": "Shaders that are embedded in the blender internal code (seeBuilt-in shaders).\nThey all read the uniformmat4ModelViewProjectionMatrix,\nwhich can be edited by thegpu.matrixmodule.",
        "parameters": [
            "shader_name",
            "config='DEFAULT'"
        ],
        "parameter_descriptions": [
            "shader_name(str) – One of the builtin shader names.",
            "config(str) –One of these types of shader configuration:DEFAULTCLIPPED",
            "DEFAULT",
            "CLIPPED"
        ]
    },
    {
        "function_id": "gpu.shader.unbind",
        "signature": "gpu.shader.unbind()#",
        "description": "Unbind the bound shader object.",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.pose.armature_apply",
        "signature": "bpy.ops.pose.armature_apply(selected=False)#",
        "description": "Apply the current pose as the new rest pose",
        "parameters": [
            "selected=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.pose.autoside_names",
        "signature": "bpy.ops.pose.autoside_names(axis='XAXIS')#",
        "description": "Automatically renames the selected bones according to which side of the target axis they fall on",
        "parameters": [
            "axis='XAXIS'"
        ],
        "parameter_descriptions": [
            "XAXISX-Axis – Left/Right.",
            "YAXISY-Axis – Front/Back.",
            "ZAXISZ-Axis – Top/Bottom."
        ]
    },
    {
        "function_id": "bpy.ops.pose.blend_to_neighbor",
        "signature": "bpy.ops.pose.blend_to_neighbor(factor=0.5,prev_frame=0,next_frame=0,channels='ALL',axis_lock='FREE')#",
        "description": "Blend from current position to previous or next keyframe",
        "parameters": [
            "factor=0.5",
            "prev_frame=0",
            "next_frame=0",
            "channels='ALL'",
            "axis_lock='FREE'"
        ],
        "parameter_descriptions": [
            "factor(float in[0,1],(optional)) – Factor, Weighting factor for which keyframe is favored more",
            "prev_frame(int in[-1048574,1048574],(optional)) – Previous Keyframe, Frame number of keyframe immediately before the current frame",
            "next_frame(int in[-1048574,1048574],(optional)) – Next Keyframe, Frame number of keyframe immediately after the current frame",
            "channels(enum in['ALL','LOC','ROT','SIZE','BBONE','CUSTOM'],(optional)) –Channels, Set of properties that are affectedALLAll Properties – All properties, including transforms, bendy bone shape, and custom properties.LOCLocation – Location only.ROTRotation – Rotation only.SIZEScale – Scale only.BBONEBendy Bone – Bendy Bone shape properties.CUSTOMCustom Properties – Custom properties.",
            "ALLAll Properties – All properties, including transforms, bendy bone shape, and custom properties.",
            "LOCLocation – Location only.",
            "ROTRotation – Rotation only.",
            "SIZEScale – Scale only.",
            "BBONEBendy Bone – Bendy Bone shape properties.",
            "CUSTOMCustom Properties – Custom properties.",
            "axis_lock(enum in['FREE','X','Y','Z'],(optional)) –Axis Lock, Transform axis to restrict effects toFREEFree – All axes are affected.XX – Only X-axis transforms are affected.YY – Only Y-axis transforms are affected.ZZ – Only Z-axis transforms are affected.",
            "FREEFree – All axes are affected.",
            "XX – Only X-axis transforms are affected.",
            "YY – Only Y-axis transforms are affected.",
            "ZZ – Only Z-axis transforms are affected."
        ]
    },
    {
        "function_id": "bpy.ops.pose.blend_with_rest",
        "signature": "bpy.ops.pose.blend_with_rest(factor=0.5,prev_frame=0,next_frame=0,channels='ALL',axis_lock='FREE')#",
        "description": "Make the current pose more similar to, or further away from, the rest pose",
        "parameters": [
            "factor=0.5",
            "prev_frame=0",
            "next_frame=0",
            "channels='ALL'",
            "axis_lock='FREE'"
        ],
        "parameter_descriptions": [
            "factor(float in[0,1],(optional)) – Factor, Weighting factor for which keyframe is favored more",
            "prev_frame(int in[-1048574,1048574],(optional)) – Previous Keyframe, Frame number of keyframe immediately before the current frame",
            "next_frame(int in[-1048574,1048574],(optional)) – Next Keyframe, Frame number of keyframe immediately after the current frame",
            "channels(enum in['ALL','LOC','ROT','SIZE','BBONE','CUSTOM'],(optional)) –Channels, Set of properties that are affectedALLAll Properties – All properties, including transforms, bendy bone shape, and custom properties.LOCLocation – Location only.ROTRotation – Rotation only.SIZEScale – Scale only.BBONEBendy Bone – Bendy Bone shape properties.CUSTOMCustom Properties – Custom properties.",
            "ALLAll Properties – All properties, including transforms, bendy bone shape, and custom properties.",
            "LOCLocation – Location only.",
            "ROTRotation – Rotation only.",
            "SIZEScale – Scale only.",
            "BBONEBendy Bone – Bendy Bone shape properties.",
            "CUSTOMCustom Properties – Custom properties.",
            "axis_lock(enum in['FREE','X','Y','Z'],(optional)) –Axis Lock, Transform axis to restrict effects toFREEFree – All axes are affected.XX – Only X-axis transforms are affected.YY – Only Y-axis transforms are affected.ZZ – Only Z-axis transforms are affected.",
            "FREEFree – All axes are affected.",
            "XX – Only X-axis transforms are affected.",
            "YY – Only Y-axis transforms are affected.",
            "ZZ – Only Z-axis transforms are affected."
        ]
    },
    {
        "function_id": "bpy.ops.pose.breakdown",
        "signature": "bpy.ops.pose.breakdown(factor=0.5,prev_frame=0,next_frame=0,channels='ALL',axis_lock='FREE')#",
        "description": "Create a suitable breakdown pose on the current frame",
        "parameters": [
            "factor=0.5",
            "prev_frame=0",
            "next_frame=0",
            "channels='ALL'",
            "axis_lock='FREE'"
        ],
        "parameter_descriptions": [
            "factor(float in[0,1],(optional)) – Factor, Weighting factor for which keyframe is favored more",
            "prev_frame(int in[-1048574,1048574],(optional)) – Previous Keyframe, Frame number of keyframe immediately before the current frame",
            "next_frame(int in[-1048574,1048574],(optional)) – Next Keyframe, Frame number of keyframe immediately after the current frame",
            "channels(enum in['ALL','LOC','ROT','SIZE','BBONE','CUSTOM'],(optional)) –Channels, Set of properties that are affectedALLAll Properties – All properties, including transforms, bendy bone shape, and custom properties.LOCLocation – Location only.ROTRotation – Rotation only.SIZEScale – Scale only.BBONEBendy Bone – Bendy Bone shape properties.CUSTOMCustom Properties – Custom properties.",
            "ALLAll Properties – All properties, including transforms, bendy bone shape, and custom properties.",
            "LOCLocation – Location only.",
            "ROTRotation – Rotation only.",
            "SIZEScale – Scale only.",
            "BBONEBendy Bone – Bendy Bone shape properties.",
            "CUSTOMCustom Properties – Custom properties.",
            "axis_lock(enum in['FREE','X','Y','Z'],(optional)) –Axis Lock, Transform axis to restrict effects toFREEFree – All axes are affected.XX – Only X-axis transforms are affected.YY – Only Y-axis transforms are affected.ZZ – Only Z-axis transforms are affected.",
            "FREEFree – All axes are affected.",
            "XX – Only X-axis transforms are affected.",
            "YY – Only Y-axis transforms are affected.",
            "ZZ – Only Z-axis transforms are affected."
        ]
    },
    {
        "function_id": "bpy.ops.pose.constraint_add",
        "signature": "bpy.ops.pose.constraint_add(type='')#",
        "description": "Add a constraint to the active bone",
        "parameters": [
            "type=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.pose.constraint_add_with_targets",
        "signature": "bpy.ops.pose.constraint_add_with_targets(type='')#",
        "description": "Add a constraint to the active bone, with target (where applicable) set to the selected Objects/Bones",
        "parameters": [
            "type=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.pose.constraints_clear",
        "signature": "bpy.ops.pose.constraints_clear()#",
        "description": "Clear all constraints from the selected bones",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.pose.constraints_copy",
        "signature": "bpy.ops.pose.constraints_copy()#",
        "description": "Copy constraints to other selected bones",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.pose.copy",
        "signature": "bpy.ops.pose.copy()#",
        "description": "Copy the current pose of the selected bones to the internal clipboard",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.pose.flip_names",
        "signature": "bpy.ops.pose.flip_names(do_strip_numbers=False)#",
        "description": "Flips (and corrects) the axis suffixes of the names of selected bones",
        "parameters": [
            "do_strip_numbers=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.pose.hide",
        "signature": "bpy.ops.pose.hide(unselected=False)#",
        "description": "Tag selected bones to not be visible in Pose Mode",
        "parameters": [
            "unselected=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.pose.ik_add",
        "signature": "bpy.ops.pose.ik_add(with_targets=True)#",
        "description": "Add IK Constraint to the active Bone",
        "parameters": [
            "with_targets=True"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.pose.ik_clear",
        "signature": "bpy.ops.pose.ik_clear()#",
        "description": "Remove all IK Constraints from selected bones",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.pose.loc_clear",
        "signature": "bpy.ops.pose.loc_clear()#",
        "description": "Reset locations of selected bones to their default values",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.pose.paste",
        "signature": "bpy.ops.pose.paste(flipped=False,selected_mask=False)#",
        "description": "Paste the stored pose on to the current pose",
        "parameters": [
            "flipped=False",
            "selected_mask=False"
        ],
        "parameter_descriptions": [
            "flipped(boolean,(optional)) – Flipped on X-Axis, Paste the stored pose flipped on to current pose",
            "selected_mask(boolean,(optional)) – On Selected Only, Only paste the stored pose on to selected bones in the current pose"
        ]
    },
    {
        "function_id": "bpy.ops.pose.paths_calculate",
        "signature": "bpy.ops.pose.paths_calculate(display_type='RANGE',range='SCENE',bake_location='HEADS')#",
        "description": "Calculate paths for the selected bones",
        "parameters": [
            "display_type='RANGE'",
            "range='SCENE'",
            "bake_location='HEADS'"
        ],
        "parameter_descriptions": [
            "display_type(enum inMotionpath Display Type Items, (optional)) – Display type",
            "range(enum inMotionpath Range Items, (optional)) – Computation Range",
            "bake_location(enum inMotionpath Bake Location Items, (optional)) – Bake Location, Which point on the bones is used when calculating paths"
        ]
    },
    {
        "function_id": "bpy.ops.pose.paths_clear",
        "signature": "bpy.ops.pose.paths_clear(only_selected=False)#",
        "description": "Undocumented, considercontributing.",
        "parameters": [
            "only_selected=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.pose.paths_range_update",
        "signature": "bpy.ops.pose.paths_range_update()#",
        "description": "Update frame range for motion paths from the Scene’s current frame range",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.pose.paths_update",
        "signature": "bpy.ops.pose.paths_update()#",
        "description": "Recalculate paths for bones that already have them",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.pose.propagate",
        "signature": "bpy.ops.pose.propagate(mode='NEXT_KEY',end_frame=250.0)#",
        "description": "Copy selected aspects of the current pose to subsequent poses already keyframed",
        "parameters": [
            "mode='NEXT_KEY'",
            "end_frame=250.0"
        ],
        "parameter_descriptions": [
            "mode(enum in['NEXT_KEY','LAST_KEY','BEFORE_FRAME','BEFORE_END','SELECTED_KEYS','SELECTED_MARKERS'],(optional)) –Terminate Mode, Method used to determine when to stop propagating pose to keyframesNEXT_KEYTo Next Keyframe – Propagate pose to first keyframe following the current frame only.LAST_KEYTo Last Keyframe – Propagate pose to the last keyframe only (i.e. making action cyclic).BEFORE_FRAMEBefore Frame – Propagate pose to all keyframes between current frame and ‘Frame’ property.BEFORE_ENDBefore Last Keyframe – Propagate pose to all keyframes from current frame until no more are found.SELECTED_KEYSOn Selected Keyframes – Propagate pose to all selected keyframes.SELECTED_MARKERSOn Selected Markers – Propagate pose to all keyframes occurring on frames with Scene Markers after the current frame.",
            "NEXT_KEYTo Next Keyframe – Propagate pose to first keyframe following the current frame only.",
            "LAST_KEYTo Last Keyframe – Propagate pose to the last keyframe only (i.e. making action cyclic).",
            "BEFORE_FRAMEBefore Frame – Propagate pose to all keyframes between current frame and ‘Frame’ property.",
            "BEFORE_ENDBefore Last Keyframe – Propagate pose to all keyframes from current frame until no more are found.",
            "SELECTED_KEYSOn Selected Keyframes – Propagate pose to all selected keyframes.",
            "SELECTED_MARKERSOn Selected Markers – Propagate pose to all keyframes occurring on frames with Scene Markers after the current frame.",
            "end_frame(float in[1.17549e-38,inf],(optional)) – End Frame, Frame to stop propagating frames to (for ‘Before Frame’ mode)"
        ]
    },
    {
        "function_id": "bpy.ops.pose.push",
        "signature": "bpy.ops.pose.push(factor=0.5,prev_frame=0,next_frame=0,channels='ALL',axis_lock='FREE')#",
        "description": "Exaggerate the current pose in regards to the breakdown pose",
        "parameters": [
            "factor=0.5",
            "prev_frame=0",
            "next_frame=0",
            "channels='ALL'",
            "axis_lock='FREE'"
        ],
        "parameter_descriptions": [
            "factor(float in[0,1],(optional)) – Factor, Weighting factor for which keyframe is favored more",
            "prev_frame(int in[-1048574,1048574],(optional)) – Previous Keyframe, Frame number of keyframe immediately before the current frame",
            "next_frame(int in[-1048574,1048574],(optional)) – Next Keyframe, Frame number of keyframe immediately after the current frame",
            "channels(enum in['ALL','LOC','ROT','SIZE','BBONE','CUSTOM'],(optional)) –Channels, Set of properties that are affectedALLAll Properties – All properties, including transforms, bendy bone shape, and custom properties.LOCLocation – Location only.ROTRotation – Rotation only.SIZEScale – Scale only.BBONEBendy Bone – Bendy Bone shape properties.CUSTOMCustom Properties – Custom properties.",
            "ALLAll Properties – All properties, including transforms, bendy bone shape, and custom properties.",
            "LOCLocation – Location only.",
            "ROTRotation – Rotation only.",
            "SIZEScale – Scale only.",
            "BBONEBendy Bone – Bendy Bone shape properties.",
            "CUSTOMCustom Properties – Custom properties.",
            "axis_lock(enum in['FREE','X','Y','Z'],(optional)) –Axis Lock, Transform axis to restrict effects toFREEFree – All axes are affected.XX – Only X-axis transforms are affected.YY – Only Y-axis transforms are affected.ZZ – Only Z-axis transforms are affected.",
            "FREEFree – All axes are affected.",
            "XX – Only X-axis transforms are affected.",
            "YY – Only Y-axis transforms are affected.",
            "ZZ – Only Z-axis transforms are affected."
        ]
    },
    {
        "function_id": "bpy.ops.pose.quaternions_flip",
        "signature": "bpy.ops.pose.quaternions_flip()#",
        "description": "Flip quaternion values to achieve desired rotations, while maintaining the same orientations",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.pose.relax",
        "signature": "bpy.ops.pose.relax(factor=0.5,prev_frame=0,next_frame=0,channels='ALL',axis_lock='FREE')#",
        "description": "Make the current pose more similar to its breakdown pose",
        "parameters": [
            "factor=0.5",
            "prev_frame=0",
            "next_frame=0",
            "channels='ALL'",
            "axis_lock='FREE'"
        ],
        "parameter_descriptions": [
            "factor(float in[0,1],(optional)) – Factor, Weighting factor for which keyframe is favored more",
            "prev_frame(int in[-1048574,1048574],(optional)) – Previous Keyframe, Frame number of keyframe immediately before the current frame",
            "next_frame(int in[-1048574,1048574],(optional)) – Next Keyframe, Frame number of keyframe immediately after the current frame",
            "channels(enum in['ALL','LOC','ROT','SIZE','BBONE','CUSTOM'],(optional)) –Channels, Set of properties that are affectedALLAll Properties – All properties, including transforms, bendy bone shape, and custom properties.LOCLocation – Location only.ROTRotation – Rotation only.SIZEScale – Scale only.BBONEBendy Bone – Bendy Bone shape properties.CUSTOMCustom Properties – Custom properties.",
            "ALLAll Properties – All properties, including transforms, bendy bone shape, and custom properties.",
            "LOCLocation – Location only.",
            "ROTRotation – Rotation only.",
            "SIZEScale – Scale only.",
            "BBONEBendy Bone – Bendy Bone shape properties.",
            "CUSTOMCustom Properties – Custom properties.",
            "axis_lock(enum in['FREE','X','Y','Z'],(optional)) –Axis Lock, Transform axis to restrict effects toFREEFree – All axes are affected.XX – Only X-axis transforms are affected.YY – Only Y-axis transforms are affected.ZZ – Only Z-axis transforms are affected.",
            "FREEFree – All axes are affected.",
            "XX – Only X-axis transforms are affected.",
            "YY – Only Y-axis transforms are affected.",
            "ZZ – Only Z-axis transforms are affected."
        ]
    },
    {
        "function_id": "bpy.ops.pose.reveal",
        "signature": "bpy.ops.pose.reveal(select=True)#",
        "description": "Reveal all bones hidden in Pose Mode",
        "parameters": [
            "select=True"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.pose.rot_clear",
        "signature": "bpy.ops.pose.rot_clear()#",
        "description": "Reset rotations of selected bones to their default values",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.pose.rotation_mode_set",
        "signature": "bpy.ops.pose.rotation_mode_set(type='QUATERNION')#",
        "description": "Set the rotation representation used by selected bones",
        "parameters": [
            "type='QUATERNION'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.pose.scale_clear",
        "signature": "bpy.ops.pose.scale_clear()#",
        "description": "Reset scaling of selected bones to their default values",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.pose.select_all",
        "signature": "bpy.ops.pose.select_all(action='TOGGLE')#",
        "description": "Toggle selection status of all bones",
        "parameters": [
            "action='TOGGLE'"
        ],
        "parameter_descriptions": [
            "TOGGLEToggle – Toggle selection for all elements.",
            "SELECTSelect – Select all elements.",
            "DESELECTDeselect – Deselect all elements.",
            "INVERTInvert – Invert selection of all elements."
        ]
    },
    {
        "function_id": "bpy.ops.pose.select_constraint_target",
        "signature": "bpy.ops.pose.select_constraint_target()#",
        "description": "Select bones used as targets for the currently selected bones",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.pose.select_grouped",
        "signature": "bpy.ops.pose.select_grouped(extend=False,type='COLLECTION')#",
        "description": "Select all visible bones grouped by similar properties",
        "parameters": [
            "extend=False",
            "type='COLLECTION'"
        ],
        "parameter_descriptions": [
            "extend(boolean,(optional)) – Extend, Extend selection instead of deselecting everything first",
            "type(enum in['COLLECTION','COLOR','KEYINGSET'],(optional)) –TypeCOLLECTIONCollection – Same collections as the active bone.COLORColor – Same color as the active bone.KEYINGSETKeying Set – All bones affected by active Keying Set.",
            "COLLECTIONCollection – Same collections as the active bone.",
            "COLORColor – Same color as the active bone.",
            "KEYINGSETKeying Set – All bones affected by active Keying Set."
        ]
    },
    {
        "function_id": "bpy.ops.pose.select_hierarchy",
        "signature": "bpy.ops.pose.select_hierarchy(direction='PARENT',extend=False)#",
        "description": "Select immediate parent/children of selected bones",
        "parameters": [
            "direction='PARENT'",
            "extend=False"
        ],
        "parameter_descriptions": [
            "direction(enum in['PARENT','CHILD'],(optional)) – Direction",
            "extend(boolean,(optional)) – Extend, Extend the selection"
        ]
    },
    {
        "function_id": "bpy.ops.pose.select_linked",
        "signature": "bpy.ops.pose.select_linked()#",
        "description": "Select all bones linked by parent/child connections to the current selection",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.pose.select_linked_pick",
        "signature": "bpy.ops.pose.select_linked_pick(extend=False)#",
        "description": "Select bones linked by parent/child connections under the mouse cursor",
        "parameters": [
            "extend=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.pose.select_mirror",
        "signature": "bpy.ops.pose.select_mirror(only_active=False,extend=False)#",
        "description": "Mirror the bone selection",
        "parameters": [
            "only_active=False",
            "extend=False"
        ],
        "parameter_descriptions": [
            "only_active(boolean,(optional)) – Active Only, Only operate on the active bone",
            "extend(boolean,(optional)) – Extend, Extend the selection"
        ]
    },
    {
        "function_id": "bpy.ops.pose.select_parent",
        "signature": "bpy.ops.pose.select_parent()#",
        "description": "Select bones that are parents of the currently selected bones",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.pose.selection_set_add",
        "signature": "bpy.ops.pose.selection_set_add()#",
        "description": "Create a new empty Selection Set",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.pose.selection_set_add_and_assign",
        "signature": "bpy.ops.pose.selection_set_add_and_assign()#",
        "description": "Create a new Selection Set with the currently selected bones",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.pose.selection_set_assign",
        "signature": "bpy.ops.pose.selection_set_assign()#",
        "description": "Add selected bones to Selection Set",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.pose.selection_set_copy",
        "signature": "bpy.ops.pose.selection_set_copy()#",
        "description": "Copy the selected Selection Set(s) to the clipboard",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.pose.selection_set_delete_all",
        "signature": "bpy.ops.pose.selection_set_delete_all()#",
        "description": "Remove all Selection Sets from this Armature",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.pose.selection_set_deselect",
        "signature": "bpy.ops.pose.selection_set_deselect()#",
        "description": "Remove Selection Set bones from current selection",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.pose.selection_set_move",
        "signature": "bpy.ops.pose.selection_set_move(direction='UP')#",
        "description": "Move the active Selection Set up/down the list of sets",
        "parameters": [
            "direction='UP'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.pose.selection_set_paste",
        "signature": "bpy.ops.pose.selection_set_paste()#",
        "description": "Add new Selection Set(s) from the clipboard",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.pose.selection_set_remove",
        "signature": "bpy.ops.pose.selection_set_remove()#",
        "description": "Remove a Selection Set from this Armature",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.pose.selection_set_remove_bones",
        "signature": "bpy.ops.pose.selection_set_remove_bones()#",
        "description": "Remove the selected bones from all Selection Sets",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.pose.selection_set_select",
        "signature": "bpy.ops.pose.selection_set_select(selection_set_index=-1)#",
        "description": "Select the bones from this Selection Set",
        "parameters": [
            "selection_set_index=-1"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.pose.selection_set_unassign",
        "signature": "bpy.ops.pose.selection_set_unassign()#",
        "description": "Remove selected bones from Selection Set",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.pose.transforms_clear",
        "signature": "bpy.ops.pose.transforms_clear()#",
        "description": "Reset location, rotation, and scaling of selected bones to their default values",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.pose.user_transforms_clear",
        "signature": "bpy.ops.pose.user_transforms_clear(only_selected=True)#",
        "description": "Reset pose bone transforms to keyframed state",
        "parameters": [
            "only_selected=True"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.pose.visual_transform_apply",
        "signature": "bpy.ops.pose.visual_transform_apply()#",
        "description": "Apply final constrained position of pose bones to their transform",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.armature.align",
        "signature": "bpy.ops.armature.align()#",
        "description": "Align selected bones to the active bone (or to their parent)",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.armature.assign_to_collection",
        "signature": "bpy.ops.armature.assign_to_collection(collection_index=-1,new_collection_name='')#",
        "description": "Assign all selected bones to a collection, or unassign them, depending on whether the active bone is already assigned or not",
        "parameters": [
            "collection_index=-1",
            "new_collection_name=''"
        ],
        "parameter_descriptions": [
            "collection_index(int in[-1,inf],(optional)) – Collection Index, Index of the collection to assign selected bones to. When the operator should create a new bone collection, use new_collection_name to define the collection name, and set this parameter to the parent index of the new bone collection",
            "new_collection_name(string,(optional,never None)) – Name, Name of a to-be-added bone collection. Only pass this if you want to create a new bone collection and assign the selected bones to it. To assign to an existing collection, do not include this parameter and use collection_index"
        ]
    },
    {
        "function_id": "bpy.ops.armature.autoside_names",
        "signature": "bpy.ops.armature.autoside_names(type='XAXIS')#",
        "description": "Automatically renames the selected bones according to which side of the target axis they fall on",
        "parameters": [
            "type='XAXIS'"
        ],
        "parameter_descriptions": [
            "XAXISX-Axis – Left/Right.",
            "YAXISY-Axis – Front/Back.",
            "ZAXISZ-Axis – Top/Bottom."
        ]
    },
    {
        "function_id": "bpy.ops.armature.bone_primitive_add",
        "signature": "bpy.ops.armature.bone_primitive_add(name='')#",
        "description": "Add a new bone located at the 3D cursor",
        "parameters": [
            "name=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.armature.calculate_roll",
        "signature": "bpy.ops.armature.calculate_roll(type='POS_X',axis_flip=False,axis_only=False)#",
        "description": "Automatically fix alignment of select bones’ axes",
        "parameters": [
            "type='POS_X'",
            "axis_flip=False",
            "axis_only=False"
        ],
        "parameter_descriptions": [
            "type(enum in['POS_X','POS_Z','GLOBAL_POS_X','GLOBAL_POS_Y','GLOBAL_POS_Z','NEG_X','NEG_Z','GLOBAL_NEG_X','GLOBAL_NEG_Y','GLOBAL_NEG_Z','ACTIVE','VIEW','CURSOR'],(optional)) – Type",
            "axis_flip(boolean,(optional)) – Flip Axis, Negate the alignment axis",
            "axis_only(boolean,(optional)) – Shortest Rotation, Ignore the axis direction, use the shortest rotation to align"
        ]
    },
    {
        "function_id": "bpy.ops.armature.click_extrude",
        "signature": "bpy.ops.armature.click_extrude()#",
        "description": "Create a new bone going from the last selected joint to the mouse position",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.armature.collection_add",
        "signature": "bpy.ops.armature.collection_add()#",
        "description": "Add a new bone collection",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.armature.collection_assign",
        "signature": "bpy.ops.armature.collection_assign(name='')#",
        "description": "Add selected bones to the chosen bone collection",
        "parameters": [
            "name=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.armature.collection_create_and_assign",
        "signature": "bpy.ops.armature.collection_create_and_assign(name='')#",
        "description": "Create a new bone collection and assign all selected bones",
        "parameters": [
            "name=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.armature.collection_deselect",
        "signature": "bpy.ops.armature.collection_deselect()#",
        "description": "Deselect bones of active Bone Collection",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.armature.collection_move",
        "signature": "bpy.ops.armature.collection_move(direction='UP')#",
        "description": "Change position of active Bone Collection in list of Bone collections",
        "parameters": [
            "direction='UP'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.armature.collection_remove",
        "signature": "bpy.ops.armature.collection_remove()#",
        "description": "Remove the active bone collection",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.armature.collection_remove_unused",
        "signature": "bpy.ops.armature.collection_remove_unused()#",
        "description": "Remove all bone collections that have neither bones nor children. This is done recursively, so bone collections that only have unused children are also removed",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.armature.collection_select",
        "signature": "bpy.ops.armature.collection_select()#",
        "description": "Select bones in active Bone Collection",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.armature.collection_show_all",
        "signature": "bpy.ops.armature.collection_show_all()#",
        "description": "Show all bone collections",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.armature.collection_unassign",
        "signature": "bpy.ops.armature.collection_unassign(name='')#",
        "description": "Remove selected bones from the active bone collection",
        "parameters": [
            "name=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.armature.collection_unassign_named",
        "signature": "bpy.ops.armature.collection_unassign_named(name='',bone_name='')#",
        "description": "Unassign the named bone from this bone collection",
        "parameters": [
            "name=''",
            "bone_name=''"
        ],
        "parameter_descriptions": [
            "name(string,(optional,never None)) – Bone Collection, Name of the bone collection to unassign this bone from; empty to unassign from the active bone collection",
            "bone_name(string,(optional,never None)) – Bone Name, Name of the bone to unassign from the collection; empty to use the active bone"
        ]
    },
    {
        "function_id": "bpy.ops.armature.collection_unsolo_all",
        "signature": "bpy.ops.armature.collection_unsolo_all()#",
        "description": "Clear the ‘solo’ setting on all bone collections",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.armature.copy_bone_color_to_selected",
        "signature": "bpy.ops.armature.copy_bone_color_to_selected(bone_type='EDIT')#",
        "description": "Copy the bone color of the active bone to all selected bones",
        "parameters": [
            "bone_type='EDIT'"
        ],
        "parameter_descriptions": [
            "EDITBone – Copy Bone colors from the active bone to all selected bones.",
            "POSEPose Bone – Copy Pose Bone colors from the active pose bone to all selected pose bones."
        ]
    },
    {
        "function_id": "bpy.ops.armature.delete",
        "signature": "bpy.ops.armature.delete(confirm=True)#",
        "description": "Remove selected bones from the armature",
        "parameters": [
            "confirm=True"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.armature.dissolve",
        "signature": "bpy.ops.armature.dissolve()#",
        "description": "Dissolve selected bones from the armature",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.armature.duplicate",
        "signature": "bpy.ops.armature.duplicate(do_flip_names=False)#",
        "description": "Make copies of the selected bones within the same armature",
        "parameters": [
            "do_flip_names=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.armature.duplicate_move",
        "signature": "bpy.ops.armature.duplicate_move(ARMATURE_OT_duplicate=None,TRANSFORM_OT_translate=None)#",
        "description": "Make copies of the selected bones within the same armature and move them",
        "parameters": [
            "ARMATURE_OT_duplicate=None",
            "TRANSFORM_OT_translate=None"
        ],
        "parameter_descriptions": [
            "ARMATURE_OT_duplicate(ARMATURE_OT_duplicate, (optional)) – Duplicate Selected Bone(s), Make copies of the selected bones within the same armature",
            "TRANSFORM_OT_translate(TRANSFORM_OT_translate, (optional)) – Move, Move selected items"
        ]
    },
    {
        "function_id": "bpy.ops.armature.extrude",
        "signature": "bpy.ops.armature.extrude(forked=False)#",
        "description": "Create new bones from the selected joints",
        "parameters": [
            "forked=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.armature.extrude_forked",
        "signature": "bpy.ops.armature.extrude_forked(ARMATURE_OT_extrude=None,TRANSFORM_OT_translate=None)#",
        "description": "Create new bones from the selected joints and move them",
        "parameters": [
            "ARMATURE_OT_extrude=None",
            "TRANSFORM_OT_translate=None"
        ],
        "parameter_descriptions": [
            "ARMATURE_OT_extrude(ARMATURE_OT_extrude, (optional)) – Extrude, Create new bones from the selected joints",
            "TRANSFORM_OT_translate(TRANSFORM_OT_translate, (optional)) – Move, Move selected items"
        ]
    },
    {
        "function_id": "bpy.ops.armature.extrude_move",
        "signature": "bpy.ops.armature.extrude_move(ARMATURE_OT_extrude=None,TRANSFORM_OT_translate=None)#",
        "description": "Create new bones from the selected joints and move them",
        "parameters": [
            "ARMATURE_OT_extrude=None",
            "TRANSFORM_OT_translate=None"
        ],
        "parameter_descriptions": [
            "ARMATURE_OT_extrude(ARMATURE_OT_extrude, (optional)) – Extrude, Create new bones from the selected joints",
            "TRANSFORM_OT_translate(TRANSFORM_OT_translate, (optional)) – Move, Move selected items"
        ]
    },
    {
        "function_id": "bpy.ops.armature.fill",
        "signature": "bpy.ops.armature.fill()#",
        "description": "Add bone between selected joint(s) and/or 3D cursor",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.armature.flip_names",
        "signature": "bpy.ops.armature.flip_names(do_strip_numbers=False)#",
        "description": "Flips (and corrects) the axis suffixes of the names of selected bones",
        "parameters": [
            "do_strip_numbers=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.armature.hide",
        "signature": "bpy.ops.armature.hide(unselected=False)#",
        "description": "Tag selected bones to not be visible in Edit Mode",
        "parameters": [
            "unselected=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.armature.move_to_collection",
        "signature": "bpy.ops.armature.move_to_collection(collection_index=-1,new_collection_name='')#",
        "description": "Move bones to a collection",
        "parameters": [
            "collection_index=-1",
            "new_collection_name=''"
        ],
        "parameter_descriptions": [
            "collection_index(int in[-1,inf],(optional)) – Collection Index, Index of the collection to move selected bones to. When the operator should create a new bone collection, do not include this parameter and pass new_collection_name",
            "new_collection_name(string,(optional,never None)) – Name, Name of a to-be-added bone collection. Only pass this if you want to create a new bone collection and move the selected bones to it. To move to an existing collection, do not include this parameter and use collection_index"
        ]
    },
    {
        "function_id": "bpy.ops.armature.parent_clear",
        "signature": "bpy.ops.armature.parent_clear(type='CLEAR')#",
        "description": "Remove the parent-child relationship between selected bones and their parents",
        "parameters": [
            "type='CLEAR'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.armature.parent_set",
        "signature": "bpy.ops.armature.parent_set(type='CONNECTED')#",
        "description": "Set the active bone as the parent of the selected bones",
        "parameters": [
            "type='CONNECTED'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.armature.reveal",
        "signature": "bpy.ops.armature.reveal(select=True)#",
        "description": "Reveal all bones hidden in Edit Mode",
        "parameters": [
            "select=True"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.armature.roll_clear",
        "signature": "bpy.ops.armature.roll_clear(roll=0.0)#",
        "description": "Clear roll for selected bones",
        "parameters": [
            "roll=0.0"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.armature.select_all",
        "signature": "bpy.ops.armature.select_all(action='TOGGLE')#",
        "description": "Toggle selection status of all bones",
        "parameters": [
            "action='TOGGLE'"
        ],
        "parameter_descriptions": [
            "TOGGLEToggle – Toggle selection for all elements.",
            "SELECTSelect – Select all elements.",
            "DESELECTDeselect – Deselect all elements.",
            "INVERTInvert – Invert selection of all elements."
        ]
    },
    {
        "function_id": "bpy.ops.armature.select_hierarchy",
        "signature": "bpy.ops.armature.select_hierarchy(direction='PARENT',extend=False)#",
        "description": "Select immediate parent/children of selected bones",
        "parameters": [
            "direction='PARENT'",
            "extend=False"
        ],
        "parameter_descriptions": [
            "direction(enum in['PARENT','CHILD'],(optional)) – Direction",
            "extend(boolean,(optional)) – Extend, Extend the selection"
        ]
    },
    {
        "function_id": "bpy.ops.armature.select_less",
        "signature": "bpy.ops.armature.select_less()#",
        "description": "Deselect those bones at the boundary of each selection region",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.armature.select_linked",
        "signature": "bpy.ops.armature.select_linked(all_forks=False)#",
        "description": "Select all bones linked by parent/child connections to the current selection",
        "parameters": [
            "all_forks=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.armature.select_linked_pick",
        "signature": "bpy.ops.armature.select_linked_pick(deselect=False,all_forks=False)#",
        "description": "(De)select bones linked by parent/child connections under the mouse cursor",
        "parameters": [
            "deselect=False",
            "all_forks=False"
        ],
        "parameter_descriptions": [
            "deselect(boolean,(optional)) – Deselect",
            "all_forks(boolean,(optional)) – All Forks, Follow forks in the parents chain"
        ]
    },
    {
        "function_id": "bpy.ops.armature.select_mirror",
        "signature": "bpy.ops.armature.select_mirror(only_active=False,extend=False)#",
        "description": "Mirror the bone selection",
        "parameters": [
            "only_active=False",
            "extend=False"
        ],
        "parameter_descriptions": [
            "only_active(boolean,(optional)) – Active Only, Only operate on the active bone",
            "extend(boolean,(optional)) – Extend, Extend the selection"
        ]
    },
    {
        "function_id": "bpy.ops.armature.select_more",
        "signature": "bpy.ops.armature.select_more()#",
        "description": "Select those bones connected to the initial selection",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.armature.select_similar",
        "signature": "bpy.ops.armature.select_similar(type='LENGTH',threshold=0.1)#",
        "description": "Select similar bones by property types",
        "parameters": [
            "type='LENGTH'",
            "threshold=0.1"
        ],
        "parameter_descriptions": [
            "type(enum in['CHILDREN','CHILDREN_IMMEDIATE','SIBLINGS','LENGTH','DIRECTION','PREFIX','SUFFIX','BONE_COLLECTION','COLOR','SHAPE'],(optional)) – Type",
            "threshold(float in[0,1],(optional)) – Threshold"
        ]
    },
    {
        "function_id": "bpy.ops.armature.separate",
        "signature": "bpy.ops.armature.separate()#",
        "description": "Isolate selected bones into a separate armature",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.armature.shortest_path_pick",
        "signature": "bpy.ops.armature.shortest_path_pick()#",
        "description": "Select shortest path between two bones",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.armature.split",
        "signature": "bpy.ops.armature.split()#",
        "description": "Split off selected bones from connected unselected bones",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.armature.subdivide",
        "signature": "bpy.ops.armature.subdivide(number_cuts=1)#",
        "description": "Break selected bones into chains of smaller bones",
        "parameters": [
            "number_cuts=1"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.armature.switch_direction",
        "signature": "bpy.ops.armature.switch_direction()#",
        "description": "Change the direction that a chain of bones points in (head and tail swap)",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.armature.symmetrize",
        "signature": "bpy.ops.armature.symmetrize(direction='NEGATIVE_X')#",
        "description": "Enforce symmetry, make copies of the selection or use existing",
        "parameters": [
            "direction='NEGATIVE_X'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.cachefile.layer_add",
        "signature": "bpy.ops.cachefile.layer_add(filepath='',hide_props_region=True,check_existing=False,filter_blender=False,filter_backup=False,filter_image=False,filter_movie=False,filter_python=False,filter_font=False,filter_sound=False,filter_text=False,filter_archive=False,filter_btx=False,filter_collada=False,filter_alembic=True,filter_usd=True,filter_obj=False,filter_volume=False,filter_folder=True,filter_blenlib=False,filemode=8,relative_path=True,display_type='DEFAULT',sort_method='')#",
        "description": "Add an override layer to the archive",
        "parameters": [
            "filepath=''",
            "hide_props_region=True",
            "check_existing=False",
            "filter_blender=False",
            "filter_backup=False",
            "filter_image=False",
            "filter_movie=False",
            "filter_python=False",
            "filter_font=False",
            "filter_sound=False",
            "filter_text=False",
            "filter_archive=False",
            "filter_btx=False",
            "filter_collada=False",
            "filter_alembic=True",
            "filter_usd=True",
            "filter_obj=False",
            "filter_volume=False",
            "filter_folder=True",
            "filter_blenlib=False",
            "filemode=8",
            "relative_path=True",
            "display_type='DEFAULT'",
            "sort_method=''"
        ],
        "parameter_descriptions": [
            "filepath(string,(optional,never None)) – File Path, Path to file",
            "hide_props_region(boolean,(optional)) – Hide Operator Properties, Collapse the region displaying the operator settings",
            "check_existing(boolean,(optional)) – Check Existing, Check and warn on overwriting existing files",
            "filter_blender(boolean,(optional)) – Filter .blend files",
            "filter_backup(boolean,(optional)) – Filter .blend files",
            "filter_image(boolean,(optional)) – Filter image files",
            "filter_movie(boolean,(optional)) – Filter movie files",
            "filter_python(boolean,(optional)) – Filter Python files",
            "filter_font(boolean,(optional)) – Filter font files",
            "filter_sound(boolean,(optional)) – Filter sound files",
            "filter_text(boolean,(optional)) – Filter text files",
            "filter_archive(boolean,(optional)) – Filter archive files",
            "filter_btx(boolean,(optional)) – Filter btx files",
            "filter_collada(boolean,(optional)) – Filter COLLADA files",
            "filter_alembic(boolean,(optional)) – Filter Alembic files",
            "filter_usd(boolean,(optional)) – Filter USD files",
            "filter_obj(boolean,(optional)) – Filter OBJ files",
            "filter_volume(boolean,(optional)) – Filter OpenVDB volume files",
            "filter_folder(boolean,(optional)) – Filter folders",
            "filter_blenlib(boolean,(optional)) – Filter Blender IDs",
            "filemode(int in[1,9],(optional)) – File Browser Mode, The setting for the file browser mode to load a .blend file, a library or a special file",
            "relative_path(boolean,(optional)) – Relative Path, Select the file relative to the blend file",
            "display_type(enum in['DEFAULT','LIST_VERTICAL','LIST_HORIZONTAL','THUMBNAIL'],(optional)) –Display TypeDEFAULTDefault – Automatically determine display type for files.LIST_VERTICALShort List – Display files as short list.LIST_HORIZONTALLong List – Display files as a detailed list.THUMBNAILThumbnails – Display files as thumbnails.",
            "DEFAULTDefault – Automatically determine display type for files.",
            "LIST_VERTICALShort List – Display files as short list.",
            "LIST_HORIZONTALLong List – Display files as a detailed list.",
            "THUMBNAILThumbnails – Display files as thumbnails.",
            "sort_method(enum in[],(optional)) – File sorting mode"
        ]
    },
    {
        "function_id": "bpy.ops.cachefile.layer_move",
        "signature": "bpy.ops.cachefile.layer_move(direction='UP')#",
        "description": "Move layer in the list, layers further down the list will overwrite data from the layers higher up",
        "parameters": [
            "direction='UP'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.cachefile.layer_remove",
        "signature": "bpy.ops.cachefile.layer_remove()#",
        "description": "Remove an override layer from the archive",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.cachefile.open",
        "signature": "bpy.ops.cachefile.open(filepath='',hide_props_region=True,check_existing=False,filter_blender=False,filter_backup=False,filter_image=False,filter_movie=False,filter_python=False,filter_font=False,filter_sound=False,filter_text=False,filter_archive=False,filter_btx=False,filter_collada=False,filter_alembic=True,filter_usd=True,filter_obj=False,filter_volume=False,filter_folder=True,filter_blenlib=False,filemode=8,relative_path=True,display_type='DEFAULT',sort_method='')#",
        "description": "Load a cache file",
        "parameters": [
            "filepath=''",
            "hide_props_region=True",
            "check_existing=False",
            "filter_blender=False",
            "filter_backup=False",
            "filter_image=False",
            "filter_movie=False",
            "filter_python=False",
            "filter_font=False",
            "filter_sound=False",
            "filter_text=False",
            "filter_archive=False",
            "filter_btx=False",
            "filter_collada=False",
            "filter_alembic=True",
            "filter_usd=True",
            "filter_obj=False",
            "filter_volume=False",
            "filter_folder=True",
            "filter_blenlib=False",
            "filemode=8",
            "relative_path=True",
            "display_type='DEFAULT'",
            "sort_method=''"
        ],
        "parameter_descriptions": [
            "filepath(string,(optional,never None)) – File Path, Path to file",
            "hide_props_region(boolean,(optional)) – Hide Operator Properties, Collapse the region displaying the operator settings",
            "check_existing(boolean,(optional)) – Check Existing, Check and warn on overwriting existing files",
            "filter_blender(boolean,(optional)) – Filter .blend files",
            "filter_backup(boolean,(optional)) – Filter .blend files",
            "filter_image(boolean,(optional)) – Filter image files",
            "filter_movie(boolean,(optional)) – Filter movie files",
            "filter_python(boolean,(optional)) – Filter Python files",
            "filter_font(boolean,(optional)) – Filter font files",
            "filter_sound(boolean,(optional)) – Filter sound files",
            "filter_text(boolean,(optional)) – Filter text files",
            "filter_archive(boolean,(optional)) – Filter archive files",
            "filter_btx(boolean,(optional)) – Filter btx files",
            "filter_collada(boolean,(optional)) – Filter COLLADA files",
            "filter_alembic(boolean,(optional)) – Filter Alembic files",
            "filter_usd(boolean,(optional)) – Filter USD files",
            "filter_obj(boolean,(optional)) – Filter OBJ files",
            "filter_volume(boolean,(optional)) – Filter OpenVDB volume files",
            "filter_folder(boolean,(optional)) – Filter folders",
            "filter_blenlib(boolean,(optional)) – Filter Blender IDs",
            "filemode(int in[1,9],(optional)) – File Browser Mode, The setting for the file browser mode to load a .blend file, a library or a special file",
            "relative_path(boolean,(optional)) – Relative Path, Select the file relative to the blend file",
            "display_type(enum in['DEFAULT','LIST_VERTICAL','LIST_HORIZONTAL','THUMBNAIL'],(optional)) –Display TypeDEFAULTDefault – Automatically determine display type for files.LIST_VERTICALShort List – Display files as short list.LIST_HORIZONTALLong List – Display files as a detailed list.THUMBNAILThumbnails – Display files as thumbnails.",
            "DEFAULTDefault – Automatically determine display type for files.",
            "LIST_VERTICALShort List – Display files as short list.",
            "LIST_HORIZONTALLong List – Display files as a detailed list.",
            "THUMBNAILThumbnails – Display files as thumbnails.",
            "sort_method(enum in[],(optional)) – File sorting mode"
        ]
    },
    {
        "function_id": "bpy.ops.cachefile.reload",
        "signature": "bpy.ops.cachefile.reload()#",
        "description": "Update objects paths list with new data from the archive",
        "parameters": []
    },
    {
        "function_id": "gpu.matrix.get_model_view_matrix",
        "signature": "gpu.matrix.get_model_view_matrix()#",
        "description": "Return a copy of the model-view matrix.",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "gpu.matrix.get_normal_matrix",
        "signature": "gpu.matrix.get_normal_matrix()#",
        "description": "Return a copy of the normal matrix.",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "gpu.matrix.get_projection_matrix",
        "signature": "gpu.matrix.get_projection_matrix()#",
        "description": "Return a copy of the projection matrix.",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "gpu.matrix.load_identity",
        "signature": "gpu.matrix.load_identity()#",
        "description": "Load an identity matrix into the stack.",
        "parameters": []
    },
    {
        "function_id": "gpu.matrix.load_matrix",
        "signature": "gpu.matrix.load_matrix(matrix)#",
        "description": "Load a matrix into the stack.",
        "parameters": [
            "matrix"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "gpu.matrix.load_projection_matrix",
        "signature": "gpu.matrix.load_projection_matrix(matrix)#",
        "description": "Load a projection matrix into the stack.",
        "parameters": [
            "matrix"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "gpu.matrix.multiply_matrix",
        "signature": "gpu.matrix.multiply_matrix(matrix)#",
        "description": "Multiply the current stack matrix.",
        "parameters": [
            "matrix"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "gpu.matrix.pop",
        "signature": "gpu.matrix.pop()#",
        "description": "Remove the last model-view matrix from the stack.",
        "parameters": []
    },
    {
        "function_id": "gpu.matrix.pop_projection",
        "signature": "gpu.matrix.pop_projection()#",
        "description": "Remove the last projection matrix from the stack.",
        "parameters": []
    },
    {
        "function_id": "gpu.matrix.push",
        "signature": "gpu.matrix.push()#",
        "description": "Add to the model-view matrix stack.",
        "parameters": []
    },
    {
        "function_id": "gpu.matrix.push_pop",
        "signature": "gpu.matrix.push_pop()#",
        "description": "Context manager to ensure balanced push/pop calls, even in the case of an error.",
        "parameters": []
    },
    {
        "function_id": "gpu.matrix.push_pop_projection",
        "signature": "gpu.matrix.push_pop_projection()#",
        "description": "Context manager to ensure balanced push/pop calls, even in the case of an error.",
        "parameters": []
    },
    {
        "function_id": "gpu.matrix.push_projection",
        "signature": "gpu.matrix.push_projection()#",
        "description": "Add to the projection matrix stack.",
        "parameters": []
    },
    {
        "function_id": "gpu.matrix.reset",
        "signature": "gpu.matrix.reset()#",
        "description": "Empty stack and set to identity.",
        "parameters": []
    },
    {
        "function_id": "gpu.matrix.scale",
        "signature": "gpu.matrix.scale(scale)#",
        "description": "Scale the current stack matrix.",
        "parameters": [
            "scale"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "gpu.matrix.scale_uniform",
        "signature": "gpu.matrix.scale_uniform(scale)#",
        "description": "scale(float) – Scale the current stack matrix.",
        "parameters": [
            "scale"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "gpu.matrix.translate",
        "signature": "gpu.matrix.translate(offset)#",
        "description": "Scale the current stack matrix.",
        "parameters": [
            "offset"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.buttons.clear_filter",
        "signature": "bpy.ops.buttons.clear_filter()#",
        "description": "Clear the search filter",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.buttons.context_menu",
        "signature": "bpy.ops.buttons.context_menu()#",
        "description": "Display properties editor context_menu",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.buttons.directory_browse",
        "signature": "bpy.ops.buttons.directory_browse(directory='',hide_props_region=True,check_existing=False,filter_blender=False,filter_backup=False,filter_image=False,filter_movie=False,filter_python=False,filter_font=False,filter_sound=False,filter_text=False,filter_archive=False,filter_btx=False,filter_collada=False,filter_alembic=False,filter_usd=False,filter_obj=False,filter_volume=False,filter_folder=False,filter_blenlib=False,filemode=9,relative_path=True,display_type='DEFAULT',sort_method='')#",
        "description": "Open a directory browser, hold Shift to open the file, Alt to browse containing directory",
        "parameters": [
            "directory=''",
            "hide_props_region=True",
            "check_existing=False",
            "filter_blender=False",
            "filter_backup=False",
            "filter_image=False",
            "filter_movie=False",
            "filter_python=False",
            "filter_font=False",
            "filter_sound=False",
            "filter_text=False",
            "filter_archive=False",
            "filter_btx=False",
            "filter_collada=False",
            "filter_alembic=False",
            "filter_usd=False",
            "filter_obj=False",
            "filter_volume=False",
            "filter_folder=False",
            "filter_blenlib=False",
            "filemode=9",
            "relative_path=True",
            "display_type='DEFAULT'",
            "sort_method=''"
        ],
        "parameter_descriptions": [
            "directory(string,(optional,never None)) – Directory, Directory of the file",
            "hide_props_region(boolean,(optional)) – Hide Operator Properties, Collapse the region displaying the operator settings",
            "check_existing(boolean,(optional)) – Check Existing, Check and warn on overwriting existing files",
            "filter_blender(boolean,(optional)) – Filter .blend files",
            "filter_backup(boolean,(optional)) – Filter .blend files",
            "filter_image(boolean,(optional)) – Filter image files",
            "filter_movie(boolean,(optional)) – Filter movie files",
            "filter_python(boolean,(optional)) – Filter Python files",
            "filter_font(boolean,(optional)) – Filter font files",
            "filter_sound(boolean,(optional)) – Filter sound files",
            "filter_text(boolean,(optional)) – Filter text files",
            "filter_archive(boolean,(optional)) – Filter archive files",
            "filter_btx(boolean,(optional)) – Filter btx files",
            "filter_collada(boolean,(optional)) – Filter COLLADA files",
            "filter_alembic(boolean,(optional)) – Filter Alembic files",
            "filter_usd(boolean,(optional)) – Filter USD files",
            "filter_obj(boolean,(optional)) – Filter OBJ files",
            "filter_volume(boolean,(optional)) – Filter OpenVDB volume files",
            "filter_folder(boolean,(optional)) – Filter folders",
            "filter_blenlib(boolean,(optional)) – Filter Blender IDs",
            "filemode(int in[1,9],(optional)) – File Browser Mode, The setting for the file browser mode to load a .blend file, a library or a special file",
            "relative_path(boolean,(optional)) – Relative Path, Select the file relative to the blend file",
            "display_type(enum in['DEFAULT','LIST_VERTICAL','LIST_HORIZONTAL','THUMBNAIL'],(optional)) –Display TypeDEFAULTDefault – Automatically determine display type for files.LIST_VERTICALShort List – Display files as short list.LIST_HORIZONTALLong List – Display files as a detailed list.THUMBNAILThumbnails – Display files as thumbnails.",
            "DEFAULTDefault – Automatically determine display type for files.",
            "LIST_VERTICALShort List – Display files as short list.",
            "LIST_HORIZONTALLong List – Display files as a detailed list.",
            "THUMBNAILThumbnails – Display files as thumbnails.",
            "sort_method(enum in[],(optional)) – File sorting mode"
        ]
    },
    {
        "function_id": "bpy.ops.buttons.file_browse",
        "signature": "bpy.ops.buttons.file_browse(filepath='',hide_props_region=True,check_existing=False,filter_blender=False,filter_backup=False,filter_image=False,filter_movie=False,filter_python=False,filter_font=False,filter_sound=False,filter_text=False,filter_archive=False,filter_btx=False,filter_collada=False,filter_alembic=False,filter_usd=False,filter_obj=False,filter_volume=False,filter_folder=False,filter_blenlib=False,filemode=9,relative_path=True,display_type='DEFAULT',sort_method='')#",
        "description": "Open a file browser, hold Shift to open the file, Alt to browse containing directory",
        "parameters": [
            "filepath=''",
            "hide_props_region=True",
            "check_existing=False",
            "filter_blender=False",
            "filter_backup=False",
            "filter_image=False",
            "filter_movie=False",
            "filter_python=False",
            "filter_font=False",
            "filter_sound=False",
            "filter_text=False",
            "filter_archive=False",
            "filter_btx=False",
            "filter_collada=False",
            "filter_alembic=False",
            "filter_usd=False",
            "filter_obj=False",
            "filter_volume=False",
            "filter_folder=False",
            "filter_blenlib=False",
            "filemode=9",
            "relative_path=True",
            "display_type='DEFAULT'",
            "sort_method=''"
        ],
        "parameter_descriptions": [
            "filepath(string,(optional,never None)) – File Path, Path to file",
            "hide_props_region(boolean,(optional)) – Hide Operator Properties, Collapse the region displaying the operator settings",
            "check_existing(boolean,(optional)) – Check Existing, Check and warn on overwriting existing files",
            "filter_blender(boolean,(optional)) – Filter .blend files",
            "filter_backup(boolean,(optional)) – Filter .blend files",
            "filter_image(boolean,(optional)) – Filter image files",
            "filter_movie(boolean,(optional)) – Filter movie files",
            "filter_python(boolean,(optional)) – Filter Python files",
            "filter_font(boolean,(optional)) – Filter font files",
            "filter_sound(boolean,(optional)) – Filter sound files",
            "filter_text(boolean,(optional)) – Filter text files",
            "filter_archive(boolean,(optional)) – Filter archive files",
            "filter_btx(boolean,(optional)) – Filter btx files",
            "filter_collada(boolean,(optional)) – Filter COLLADA files",
            "filter_alembic(boolean,(optional)) – Filter Alembic files",
            "filter_usd(boolean,(optional)) – Filter USD files",
            "filter_obj(boolean,(optional)) – Filter OBJ files",
            "filter_volume(boolean,(optional)) – Filter OpenVDB volume files",
            "filter_folder(boolean,(optional)) – Filter folders",
            "filter_blenlib(boolean,(optional)) – Filter Blender IDs",
            "filemode(int in[1,9],(optional)) – File Browser Mode, The setting for the file browser mode to load a .blend file, a library or a special file",
            "relative_path(boolean,(optional)) – Relative Path, Select the file relative to the blend file",
            "display_type(enum in['DEFAULT','LIST_VERTICAL','LIST_HORIZONTAL','THUMBNAIL'],(optional)) –Display TypeDEFAULTDefault – Automatically determine display type for files.LIST_VERTICALShort List – Display files as short list.LIST_HORIZONTALLong List – Display files as a detailed list.THUMBNAILThumbnails – Display files as thumbnails.",
            "DEFAULTDefault – Automatically determine display type for files.",
            "LIST_VERTICALShort List – Display files as short list.",
            "LIST_HORIZONTALLong List – Display files as a detailed list.",
            "THUMBNAILThumbnails – Display files as thumbnails.",
            "sort_method(enum in[],(optional)) – File sorting mode"
        ]
    },
    {
        "function_id": "bpy.ops.buttons.start_filter",
        "signature": "bpy.ops.buttons.start_filter()#",
        "description": "Start entering filter text",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.buttons.toggle_pin",
        "signature": "bpy.ops.buttons.toggle_pin()#",
        "description": "Keep the current data-block displayed",
        "parameters": []
    },
    {
        "function_id": "gpu.types.GPUFrameBuffer.bind",
        "signature": "bind()#",
        "description": "Context manager to ensure balanced bind calls, even in the case of an error.",
        "parameters": []
    },
    {
        "function_id": "gpu.types.GPUFrameBuffer.read_color",
        "signature": "read_color(x,y,xsize,ysize,channels,slot,format,data=data)#",
        "description": "Read a block of pixels from the frame buffer.",
        "parameters": [
            "x",
            "y",
            "xsize",
            "ysize",
            "channels",
            "slot",
            "format",
            "data=data"
        ],
        "parameter_descriptions": [
            "y(x,) – Lower left corner of a rectangular block of pixels.",
            "ysize(xsize,) – Dimensions of the pixel rectangle.",
            "channels(int) – Number of components to read.",
            "slot(int) – The framebuffer slot to read data from.",
            "format(str) – The format that describes the content of a single channel.\nPossible values areFLOAT,INT,UINT,UBYTE,UINT_24_8and10_11_11_REV.",
            "data(gpu.types.Buffer) – Optional Buffer object to fill with the pixels values."
        ]
    },
    {
        "function_id": "gpu.types.GPUFrameBuffer.read_depth",
        "signature": "read_depth(x,y,xsize,ysize,data=data)#",
        "description": "Read a pixel depth block from the frame buffer.",
        "parameters": [
            "x",
            "y",
            "xsize",
            "ysize",
            "data=data"
        ],
        "parameter_descriptions": [
            "y(x,) – Lower left corner of a rectangular block of pixels.",
            "ysize(xsize,) – Dimensions of the pixel rectangle.",
            "data(gpu.types.Buffer) – Optional Buffer object to fill with the pixels values."
        ]
    },
    {
        "function_id": "gpu.types.GPUFrameBuffer.viewport_get",
        "signature": "viewport_get()#",
        "description": "Returns position and dimension to current viewport.",
        "parameters": []
    },
    {
        "function_id": "gpu.types.GPUFrameBuffer.viewport_set",
        "signature": "viewport_set(x,y,xsize,ysize)#",
        "description": "Set the viewport for this framebuffer object.\nNote: The viewport state is not saved upon framebuffer rebind.",
        "parameters": [
            "x",
            "y",
            "xsize",
            "ysize"
        ],
        "parameter_descriptions": [
            "y(x,) – lower left corner of the viewport_set rectangle, in pixels.",
            "ysize(xsize,) – width and height of the viewport_set."
        ]
    },
    {
        "function_id": "gpu.types.GPUOffScreen.bind",
        "signature": "bind()#",
        "description": "Context manager to ensure balanced bind calls, even in the case of an error.",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.texture.new",
        "signature": "bpy.ops.texture.new()#",
        "description": "Add a new texture",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.texture.slot_copy",
        "signature": "bpy.ops.texture.slot_copy()#",
        "description": "Copy the material texture settings and nodes",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.texture.slot_move",
        "signature": "bpy.ops.texture.slot_move(type='UP')#",
        "description": "Move texture slots up and down",
        "parameters": [
            "type='UP'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.texture.slot_paste",
        "signature": "bpy.ops.texture.slot_paste()#",
        "description": "Copy the texture settings and nodes",
        "parameters": []
    },
    {
        "function_id": "gpu_extras.batch.batch_for_shader",
        "signature": "gpu_extras.batch.batch_for_shader(shader,type,content,*,indices=None)#",
        "description": "Return a batch already configured and compatible with the shader.",
        "parameters": [
            "shader",
            "type",
            "content",
            "*",
            "indices=None"
        ],
        "parameter_descriptions": [
            "shader(gpu.types.GPUShader) – shader for which a compatible format will be computed.",
            "type(str) – “‘POINTS’, ‘LINES’, ‘TRIS’ or ‘LINES_ADJ’”.",
            "content(dict) – Maps the name of the shader attribute with the data to fill the vertex buffer."
        ]
    },
    {
        "function_id": "bpy.ops.constraint.add_target",
        "signature": "bpy.ops.constraint.add_target()#",
        "description": "Add a target to the constraint",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.constraint.apply",
        "signature": "bpy.ops.constraint.apply(constraint='',owner='OBJECT',report=False)#",
        "description": "Apply constraint and remove from the stack",
        "parameters": [
            "constraint=''",
            "owner='OBJECT'",
            "report=False"
        ],
        "parameter_descriptions": [
            "constraint(string,(optional,never None)) – Constraint, Name of the constraint to edit",
            "owner(enum in['OBJECT','BONE'],(optional)) –Owner, The owner of this constraintOBJECTObject – Edit a constraint on the active object.BONEBone – Edit a constraint on the active bone.",
            "OBJECTObject – Edit a constraint on the active object.",
            "BONEBone – Edit a constraint on the active bone.",
            "report(boolean,(optional)) – Report, Create a notification after the operation"
        ]
    },
    {
        "function_id": "bpy.ops.constraint.childof_clear_inverse",
        "signature": "bpy.ops.constraint.childof_clear_inverse(constraint='',owner='OBJECT')#",
        "description": "Clear inverse correction for Child Of constraint",
        "parameters": [
            "constraint=''",
            "owner='OBJECT'"
        ],
        "parameter_descriptions": [
            "constraint(string,(optional,never None)) – Constraint, Name of the constraint to edit",
            "owner(enum in['OBJECT','BONE'],(optional)) –Owner, The owner of this constraintOBJECTObject – Edit a constraint on the active object.BONEBone – Edit a constraint on the active bone.",
            "OBJECTObject – Edit a constraint on the active object.",
            "BONEBone – Edit a constraint on the active bone."
        ]
    },
    {
        "function_id": "bpy.ops.constraint.childof_set_inverse",
        "signature": "bpy.ops.constraint.childof_set_inverse(constraint='',owner='OBJECT')#",
        "description": "Set inverse correction for Child Of constraint",
        "parameters": [
            "constraint=''",
            "owner='OBJECT'"
        ],
        "parameter_descriptions": [
            "constraint(string,(optional,never None)) – Constraint, Name of the constraint to edit",
            "owner(enum in['OBJECT','BONE'],(optional)) –Owner, The owner of this constraintOBJECTObject – Edit a constraint on the active object.BONEBone – Edit a constraint on the active bone.",
            "OBJECTObject – Edit a constraint on the active object.",
            "BONEBone – Edit a constraint on the active bone."
        ]
    },
    {
        "function_id": "bpy.ops.constraint.copy",
        "signature": "bpy.ops.constraint.copy(constraint='',owner='OBJECT',report=False)#",
        "description": "Duplicate constraint at the same position in the stack",
        "parameters": [
            "constraint=''",
            "owner='OBJECT'",
            "report=False"
        ],
        "parameter_descriptions": [
            "constraint(string,(optional,never None)) – Constraint, Name of the constraint to edit",
            "owner(enum in['OBJECT','BONE'],(optional)) –Owner, The owner of this constraintOBJECTObject – Edit a constraint on the active object.BONEBone – Edit a constraint on the active bone.",
            "OBJECTObject – Edit a constraint on the active object.",
            "BONEBone – Edit a constraint on the active bone.",
            "report(boolean,(optional)) – Report, Create a notification after the operation"
        ]
    },
    {
        "function_id": "bpy.ops.constraint.copy_to_selected",
        "signature": "bpy.ops.constraint.copy_to_selected(constraint='',owner='OBJECT')#",
        "description": "Copy constraint to other selected objects/bones",
        "parameters": [
            "constraint=''",
            "owner='OBJECT'"
        ],
        "parameter_descriptions": [
            "constraint(string,(optional,never None)) – Constraint, Name of the constraint to edit",
            "owner(enum in['OBJECT','BONE'],(optional)) –Owner, The owner of this constraintOBJECTObject – Edit a constraint on the active object.BONEBone – Edit a constraint on the active bone.",
            "OBJECTObject – Edit a constraint on the active object.",
            "BONEBone – Edit a constraint on the active bone."
        ]
    },
    {
        "function_id": "bpy.ops.constraint.delete",
        "signature": "bpy.ops.constraint.delete(constraint='',owner='OBJECT',report=False)#",
        "description": "Remove constraint from constraint stack",
        "parameters": [
            "constraint=''",
            "owner='OBJECT'",
            "report=False"
        ],
        "parameter_descriptions": [
            "constraint(string,(optional,never None)) – Constraint, Name of the constraint to edit",
            "owner(enum in['OBJECT','BONE'],(optional)) –Owner, The owner of this constraintOBJECTObject – Edit a constraint on the active object.BONEBone – Edit a constraint on the active bone.",
            "OBJECTObject – Edit a constraint on the active object.",
            "BONEBone – Edit a constraint on the active bone.",
            "report(boolean,(optional)) – Report, Create a notification after the operation"
        ]
    },
    {
        "function_id": "bpy.ops.constraint.disable_keep_transform",
        "signature": "bpy.ops.constraint.disable_keep_transform()#",
        "description": "Set the influence of this constraint to zero while trying to maintain the object’s transformation. Other active constraints can still influence the final transformation",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.constraint.followpath_path_animate",
        "signature": "bpy.ops.constraint.followpath_path_animate(constraint='',owner='OBJECT',frame_start=1,length=100)#",
        "description": "Add default animation for path used by constraint if it isn’t animated already",
        "parameters": [
            "constraint=''",
            "owner='OBJECT'",
            "frame_start=1",
            "length=100"
        ],
        "parameter_descriptions": [
            "constraint(string,(optional,never None)) – Constraint, Name of the constraint to edit",
            "owner(enum in['OBJECT','BONE'],(optional)) –Owner, The owner of this constraintOBJECTObject – Edit a constraint on the active object.BONEBone – Edit a constraint on the active bone.",
            "OBJECTObject – Edit a constraint on the active object.",
            "BONEBone – Edit a constraint on the active bone.",
            "frame_start(int in[-1048574,1048574],(optional)) – Start Frame, First frame of path animation",
            "length(int in[0,1048574],(optional)) – Length, Number of frames that path animation should take"
        ]
    },
    {
        "function_id": "bpy.ops.constraint.limitdistance_reset",
        "signature": "bpy.ops.constraint.limitdistance_reset(constraint='',owner='OBJECT')#",
        "description": "Reset limiting distance for Limit Distance Constraint",
        "parameters": [
            "constraint=''",
            "owner='OBJECT'"
        ],
        "parameter_descriptions": [
            "constraint(string,(optional,never None)) – Constraint, Name of the constraint to edit",
            "owner(enum in['OBJECT','BONE'],(optional)) –Owner, The owner of this constraintOBJECTObject – Edit a constraint on the active object.BONEBone – Edit a constraint on the active bone.",
            "OBJECTObject – Edit a constraint on the active object.",
            "BONEBone – Edit a constraint on the active bone."
        ]
    },
    {
        "function_id": "bpy.ops.constraint.move_down",
        "signature": "bpy.ops.constraint.move_down(constraint='',owner='OBJECT')#",
        "description": "Move constraint down in constraint stack",
        "parameters": [
            "constraint=''",
            "owner='OBJECT'"
        ],
        "parameter_descriptions": [
            "constraint(string,(optional,never None)) – Constraint, Name of the constraint to edit",
            "owner(enum in['OBJECT','BONE'],(optional)) –Owner, The owner of this constraintOBJECTObject – Edit a constraint on the active object.BONEBone – Edit a constraint on the active bone.",
            "OBJECTObject – Edit a constraint on the active object.",
            "BONEBone – Edit a constraint on the active bone."
        ]
    },
    {
        "function_id": "bpy.ops.constraint.move_to_index",
        "signature": "bpy.ops.constraint.move_to_index(constraint='',owner='OBJECT',index=0)#",
        "description": "Change the constraint’s position in the list so it evaluates after the set number of others",
        "parameters": [
            "constraint=''",
            "owner='OBJECT'",
            "index=0"
        ],
        "parameter_descriptions": [
            "constraint(string,(optional,never None)) – Constraint, Name of the constraint to edit",
            "owner(enum in['OBJECT','BONE'],(optional)) –Owner, The owner of this constraintOBJECTObject – Edit a constraint on the active object.BONEBone – Edit a constraint on the active bone.",
            "OBJECTObject – Edit a constraint on the active object.",
            "BONEBone – Edit a constraint on the active bone.",
            "index(int in[0,inf],(optional)) – Index, The index to move the constraint to"
        ]
    },
    {
        "function_id": "bpy.ops.constraint.move_up",
        "signature": "bpy.ops.constraint.move_up(constraint='',owner='OBJECT')#",
        "description": "Move constraint up in constraint stack",
        "parameters": [
            "constraint=''",
            "owner='OBJECT'"
        ],
        "parameter_descriptions": [
            "constraint(string,(optional,never None)) – Constraint, Name of the constraint to edit",
            "owner(enum in['OBJECT','BONE'],(optional)) –Owner, The owner of this constraintOBJECTObject – Edit a constraint on the active object.BONEBone – Edit a constraint on the active bone.",
            "OBJECTObject – Edit a constraint on the active object.",
            "BONEBone – Edit a constraint on the active bone."
        ]
    },
    {
        "function_id": "bpy.ops.constraint.normalize_target_weights",
        "signature": "bpy.ops.constraint.normalize_target_weights()#",
        "description": "Normalize weights of all target bones",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.constraint.objectsolver_clear_inverse",
        "signature": "bpy.ops.constraint.objectsolver_clear_inverse(constraint='',owner='OBJECT')#",
        "description": "Clear inverse correction for Object Solver constraint",
        "parameters": [
            "constraint=''",
            "owner='OBJECT'"
        ],
        "parameter_descriptions": [
            "constraint(string,(optional,never None)) – Constraint, Name of the constraint to edit",
            "owner(enum in['OBJECT','BONE'],(optional)) –Owner, The owner of this constraintOBJECTObject – Edit a constraint on the active object.BONEBone – Edit a constraint on the active bone.",
            "OBJECTObject – Edit a constraint on the active object.",
            "BONEBone – Edit a constraint on the active bone."
        ]
    },
    {
        "function_id": "bpy.ops.constraint.objectsolver_set_inverse",
        "signature": "bpy.ops.constraint.objectsolver_set_inverse(constraint='',owner='OBJECT')#",
        "description": "Set inverse correction for Object Solver constraint",
        "parameters": [
            "constraint=''",
            "owner='OBJECT'"
        ],
        "parameter_descriptions": [
            "constraint(string,(optional,never None)) – Constraint, Name of the constraint to edit",
            "owner(enum in['OBJECT','BONE'],(optional)) –Owner, The owner of this constraintOBJECTObject – Edit a constraint on the active object.BONEBone – Edit a constraint on the active bone.",
            "OBJECTObject – Edit a constraint on the active object.",
            "BONEBone – Edit a constraint on the active bone."
        ]
    },
    {
        "function_id": "bpy.ops.constraint.remove_target",
        "signature": "bpy.ops.constraint.remove_target(index=0)#",
        "description": "Remove the target from the constraint",
        "parameters": [
            "index=0"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.constraint.stretchto_reset",
        "signature": "bpy.ops.constraint.stretchto_reset(constraint='',owner='OBJECT')#",
        "description": "Reset original length of bone for Stretch To Constraint",
        "parameters": [
            "constraint=''",
            "owner='OBJECT'"
        ],
        "parameter_descriptions": [
            "constraint(string,(optional,never None)) – Constraint, Name of the constraint to edit",
            "owner(enum in['OBJECT','BONE'],(optional)) –Owner, The owner of this constraintOBJECTObject – Edit a constraint on the active object.BONEBone – Edit a constraint on the active bone.",
            "OBJECTObject – Edit a constraint on the active object.",
            "BONEBone – Edit a constraint on the active bone."
        ]
    },
    {
        "function_id": "bpy.ops.object.add",
        "signature": "bpy.ops.object.add(radius=1.0,type='EMPTY',enter_editmode=False,align='WORLD',location=(0.0,0.0,0.0),rotation=(0.0,0.0,0.0),scale=(0.0,0.0,0.0))#",
        "description": "Add an object to the scene",
        "parameters": [
            "radius=1.0",
            "type='EMPTY'",
            "enter_editmode=False",
            "align='WORLD'",
            "location=(0.0,0.0,0.0)",
            "rotation=(0.0,0.0,0.0)",
            "scale=(0.0,0.0,0.0)"
        ],
        "parameter_descriptions": [
            "radius(float in[0,inf],(optional)) – Radius",
            "type(enum inObject Type Items, (optional)) – Type",
            "enter_editmode(boolean,(optional)) – Enter Edit Mode, Enter edit mode when adding this object",
            "align(enum in['WORLD','VIEW','CURSOR'],(optional)) –Align, The alignment of the new objectWORLDWorld – Align the new object to the world.VIEWView – Align the new object to the view.CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "WORLDWorld – Align the new object to the world.",
            "VIEWView – Align the new object to the view.",
            "CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "location(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Location, Location for the newly added object",
            "rotation(mathutils.Eulerrotation of 3 items in [-inf, inf], (optional)) – Rotation, Rotation for the newly added object",
            "scale(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Scale, Scale for the newly added object"
        ]
    },
    {
        "function_id": "bpy.ops.object.add_modifier_menu",
        "signature": "bpy.ops.object.add_modifier_menu()#",
        "description": "Undocumented, considercontributing.",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.object.add_named",
        "signature": "bpy.ops.object.add_named(linked=False,name='',session_uid=0,matrix=((0.0,0.0,0.0,0.0),(0.0,0.0,0.0,0.0),(0.0,0.0,0.0,0.0),(0.0,0.0,0.0,0.0)),drop_x=0,drop_y=0)#",
        "description": "Add named object",
        "parameters": [
            "linked=False",
            "name=''",
            "session_uid=0",
            "matrix=((0.0,0.0,0.0,0.0),(0.0,0.0,0.0,0.0),(0.0,0.0,0.0,0.0),(0.0,0.0,0.0,0.0))",
            "drop_x=0",
            "drop_y=0"
        ],
        "parameter_descriptions": [
            "linked(boolean,(optional)) – Linked, Duplicate object but not object data, linking to the original data",
            "name(string,(optional,never None)) – Name, Name of the data-block to use by the operator",
            "session_uid(int in[-inf,inf],(optional)) – Session UID, Session UID of the data-block to use by the operator",
            "matrix(mathutils.Matrixof 4 * 4 items in [-inf, inf], (optional)) – Matrix",
            "drop_x(int in[-inf,inf],(optional)) – Drop X, X-coordinate (screen space) to place the new object under",
            "drop_y(int in[-inf,inf],(optional)) – Drop Y, Y-coordinate (screen space) to place the new object under"
        ]
    },
    {
        "function_id": "bpy.ops.object.align",
        "signature": "bpy.ops.object.align(bb_quality=True,align_mode='OPT_2',relative_to='OPT_4',align_axis={})#",
        "description": "Align objects",
        "parameters": [
            "bb_quality=True",
            "align_mode='OPT_2'",
            "relative_to='OPT_4'",
            "align_axis={}"
        ],
        "parameter_descriptions": [
            "bb_quality(boolean,(optional)) – High Quality, Enables high quality but slow calculation of the bounding box for perfect results on complex shape meshes with rotation/scale",
            "align_mode(enum in['OPT_1','OPT_2','OPT_3'],(optional)) – Align Mode, Side of object to use for alignment",
            "relative_to(enum in['OPT_1','OPT_2','OPT_3','OPT_4'],(optional)) –Relative To, Reference location to align toOPT_1Scene Origin – Use the scene origin as the position for the selected objects to align to.OPT_23D Cursor – Use the 3D cursor as the position for the selected objects to align to.OPT_3Selection – Use the selected objects as the position for the selected objects to align to.OPT_4Active – Use the active object as the position for the selected objects to align to.",
            "OPT_1Scene Origin – Use the scene origin as the position for the selected objects to align to.",
            "OPT_23D Cursor – Use the 3D cursor as the position for the selected objects to align to.",
            "OPT_3Selection – Use the selected objects as the position for the selected objects to align to.",
            "OPT_4Active – Use the active object as the position for the selected objects to align to.",
            "align_axis(enum set in {'X','Y','Z'},(optional)) – Align, Align to axis"
        ]
    },
    {
        "function_id": "bpy.ops.object.anim_transforms_to_deltas",
        "signature": "bpy.ops.object.anim_transforms_to_deltas()#",
        "description": "Convert object animation for normal transforms to delta transforms",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.object.armature_add",
        "signature": "bpy.ops.object.armature_add(radius=1.0,enter_editmode=False,align='WORLD',location=(0.0,0.0,0.0),rotation=(0.0,0.0,0.0),scale=(0.0,0.0,0.0))#",
        "description": "Add an armature object to the scene",
        "parameters": [
            "radius=1.0",
            "enter_editmode=False",
            "align='WORLD'",
            "location=(0.0,0.0,0.0)",
            "rotation=(0.0,0.0,0.0)",
            "scale=(0.0,0.0,0.0)"
        ],
        "parameter_descriptions": [
            "radius(float in[0,inf],(optional)) – Radius",
            "enter_editmode(boolean,(optional)) – Enter Edit Mode, Enter edit mode when adding this object",
            "align(enum in['WORLD','VIEW','CURSOR'],(optional)) –Align, The alignment of the new objectWORLDWorld – Align the new object to the world.VIEWView – Align the new object to the view.CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "WORLDWorld – Align the new object to the world.",
            "VIEWView – Align the new object to the view.",
            "CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "location(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Location, Location for the newly added object",
            "rotation(mathutils.Eulerrotation of 3 items in [-inf, inf], (optional)) – Rotation, Rotation for the newly added object",
            "scale(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Scale, Scale for the newly added object"
        ]
    },
    {
        "function_id": "bpy.ops.object.assign_property_defaults",
        "signature": "bpy.ops.object.assign_property_defaults(process_data=True,process_bones=True)#",
        "description": "Assign the current values of custom properties as their defaults, for use as part of the rest pose state in NLA track mixing",
        "parameters": [
            "process_data=True",
            "process_bones=True"
        ],
        "parameter_descriptions": [
            "process_data(boolean,(optional)) – Process data properties",
            "process_bones(boolean,(optional)) – Process bone properties"
        ]
    },
    {
        "function_id": "bpy.ops.object.bake",
        "signature": "bpy.ops.object.bake(type='COMBINED',pass_filter={},filepath='',width=512,height=512,margin=16,margin_type='EXTEND',use_selected_to_active=False,max_ray_distance=0.0,cage_extrusion=0.0,cage_object='',normal_space='TANGENT',normal_r='POS_X',normal_g='POS_Y',normal_b='POS_Z',target='IMAGE_TEXTURES',save_mode='INTERNAL',use_clear=False,use_cage=False,use_split_materials=False,use_automatic_name=False,uv_layer='')#",
        "description": "Bake image textures of selected objects",
        "parameters": [
            "type='COMBINED'",
            "pass_filter={}",
            "filepath=''",
            "width=512",
            "height=512",
            "margin=16",
            "margin_type='EXTEND'",
            "use_selected_to_active=False",
            "max_ray_distance=0.0",
            "cage_extrusion=0.0",
            "cage_object=''",
            "normal_space='TANGENT'",
            "normal_r='POS_X'",
            "normal_g='POS_Y'",
            "normal_b='POS_Z'",
            "target='IMAGE_TEXTURES'",
            "save_mode='INTERNAL'",
            "use_clear=False",
            "use_cage=False",
            "use_split_materials=False",
            "use_automatic_name=False",
            "uv_layer=''"
        ],
        "parameter_descriptions": [
            "type(enum inBake Pass Type Items, (optional)) – Type, Type of pass to bake, some of them may not be supported by the current render engine",
            "pass_filter(enum set inBake Pass Filter Type Items, (optional)) – Pass Filter, Filter to combined, diffuse, glossy, transmission and subsurface passes",
            "filepath(string,(optional,never None)) – File Path, Image filepath to use when saving externally",
            "width(int in[1,inf],(optional)) – Width, Horizontal dimension of the baking map (external only)",
            "height(int in[1,inf],(optional)) – Height, Vertical dimension of the baking map (external only)",
            "margin(int in[0,inf],(optional)) – Margin, Extends the baked result as a post process filter",
            "margin_type(enum inBake Margin Type Items, (optional)) – Margin Type, Which algorithm to use to generate the margin",
            "use_selected_to_active(boolean,(optional)) – Selected to Active, Bake shading on the surface of selected objects to the active object",
            "max_ray_distance(float in[0,inf],(optional)) – Max Ray Distance, The maximum ray distance for matching points between the active and selected objects. If zero, there is no limit",
            "cage_extrusion(float in[0,inf],(optional)) – Cage Extrusion, Inflate the active object by the specified distance for baking. This helps matching to points nearer to the outside of the selected object meshes",
            "cage_object(string,(optional,never None)) – Cage Object, Object to use as cage, instead of calculating the cage from the active object with cage extrusion",
            "normal_space(enum inNormal Space Items, (optional)) – Normal Space, Choose normal space for baking",
            "normal_r(enum inNormal Swizzle Items, (optional)) – R, Axis to bake in red channel",
            "normal_g(enum inNormal Swizzle Items, (optional)) – G, Axis to bake in green channel",
            "normal_b(enum inNormal Swizzle Items, (optional)) – B, Axis to bake in blue channel",
            "target(enum inBake Target Items, (optional)) – Target, Where to output the baked map",
            "save_mode(enum inBake Save Mode Items, (optional)) – Save Mode, Where to save baked image textures",
            "use_clear(boolean,(optional)) – Clear, Clear images before baking (only for internal saving)",
            "use_cage(boolean,(optional)) – Cage, Cast rays to active object from a cage",
            "use_split_materials(boolean,(optional)) – Split Materials, Split baked maps per material, using material name in output file (external only)",
            "use_automatic_name(boolean,(optional)) – Automatic Name, Automatically name the output file with the pass type",
            "uv_layer(string,(optional,never None)) – UV Layer, UV layer to override active"
        ]
    },
    {
        "function_id": "bpy.ops.object.bake_image",
        "signature": "bpy.ops.object.bake_image()#",
        "description": "Bake image textures of selected objects",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.object.camera_add",
        "signature": "bpy.ops.object.camera_add(enter_editmode=False,align='WORLD',location=(0.0,0.0,0.0),rotation=(0.0,0.0,0.0),scale=(0.0,0.0,0.0))#",
        "description": "Add a camera object to the scene",
        "parameters": [
            "enter_editmode=False",
            "align='WORLD'",
            "location=(0.0,0.0,0.0)",
            "rotation=(0.0,0.0,0.0)",
            "scale=(0.0,0.0,0.0)"
        ],
        "parameter_descriptions": [
            "enter_editmode(boolean,(optional)) – Enter Edit Mode, Enter edit mode when adding this object",
            "align(enum in['WORLD','VIEW','CURSOR'],(optional)) –Align, The alignment of the new objectWORLDWorld – Align the new object to the world.VIEWView – Align the new object to the view.CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "WORLDWorld – Align the new object to the world.",
            "VIEWView – Align the new object to the view.",
            "CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "location(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Location, Location for the newly added object",
            "rotation(mathutils.Eulerrotation of 3 items in [-inf, inf], (optional)) – Rotation, Rotation for the newly added object",
            "scale(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Scale, Scale for the newly added object"
        ]
    },
    {
        "function_id": "bpy.ops.object.clear_override_library",
        "signature": "bpy.ops.object.clear_override_library()#",
        "description": "Delete the selected local overrides and relink their usages to the linked data-blocks if possible, else reset them and mark them as non editable",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.object.collection_add",
        "signature": "bpy.ops.object.collection_add()#",
        "description": "Add an object to a new collection",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.object.collection_external_asset_drop",
        "signature": "bpy.ops.object.collection_external_asset_drop(session_uid=0,align='WORLD',location=(0.0,0.0,0.0),rotation=(0.0,0.0,0.0),scale=(0.0,0.0,0.0),use_instance=True,drop_x=0,drop_y=0,collection='')#",
        "description": "Add the dragged collection to the scene",
        "parameters": [
            "session_uid=0",
            "align='WORLD'",
            "location=(0.0,0.0,0.0)",
            "rotation=(0.0,0.0,0.0)",
            "scale=(0.0,0.0,0.0)",
            "use_instance=True",
            "drop_x=0",
            "drop_y=0",
            "collection=''"
        ],
        "parameter_descriptions": [
            "session_uid(int in[-inf,inf],(optional)) – Session UID, Session UID of the data-block to use by the operator",
            "align(enum in['WORLD','VIEW','CURSOR'],(optional)) –Align, The alignment of the new objectWORLDWorld – Align the new object to the world.VIEWView – Align the new object to the view.CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "WORLDWorld – Align the new object to the world.",
            "VIEWView – Align the new object to the view.",
            "CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "location(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Location, Location for the newly added object",
            "rotation(mathutils.Eulerrotation of 3 items in [-inf, inf], (optional)) – Rotation, Rotation for the newly added object",
            "scale(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Scale, Scale for the newly added object",
            "use_instance(boolean,(optional)) – Instance, Add the dropped collection as collection instance",
            "drop_x(int in[-inf,inf],(optional)) – Drop X, X-coordinate (screen space) to place the new object under",
            "drop_y(int in[-inf,inf],(optional)) – Drop Y, Y-coordinate (screen space) to place the new object under",
            "collection(enum in[],(optional)) – Collection"
        ]
    },
    {
        "function_id": "bpy.ops.object.collection_instance_add",
        "signature": "bpy.ops.object.collection_instance_add(name='Collection',collection='',align='WORLD',location=(0.0,0.0,0.0),rotation=(0.0,0.0,0.0),scale=(0.0,0.0,0.0),session_uid=0,drop_x=0,drop_y=0)#",
        "description": "Add a collection instance",
        "parameters": [
            "name='Collection'",
            "collection=''",
            "align='WORLD'",
            "location=(0.0,0.0,0.0)",
            "rotation=(0.0,0.0,0.0)",
            "scale=(0.0,0.0,0.0)",
            "session_uid=0",
            "drop_x=0",
            "drop_y=0"
        ],
        "parameter_descriptions": [
            "name(string,(optional,never None)) – Name, Collection name to add",
            "collection(enum in[],(optional)) – Collection",
            "align(enum in['WORLD','VIEW','CURSOR'],(optional)) –Align, The alignment of the new objectWORLDWorld – Align the new object to the world.VIEWView – Align the new object to the view.CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "WORLDWorld – Align the new object to the world.",
            "VIEWView – Align the new object to the view.",
            "CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "location(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Location, Location for the newly added object",
            "rotation(mathutils.Eulerrotation of 3 items in [-inf, inf], (optional)) – Rotation, Rotation for the newly added object",
            "scale(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Scale, Scale for the newly added object",
            "session_uid(int in[-inf,inf],(optional)) – Session UID, Session UID of the data-block to use by the operator",
            "drop_x(int in[-inf,inf],(optional)) – Drop X, X-coordinate (screen space) to place the new object under",
            "drop_y(int in[-inf,inf],(optional)) – Drop Y, Y-coordinate (screen space) to place the new object under"
        ]
    },
    {
        "function_id": "bpy.ops.object.collection_link",
        "signature": "bpy.ops.object.collection_link(collection='')#",
        "description": "Add an object to an existing collection",
        "parameters": [
            "collection=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.object.collection_objects_select",
        "signature": "bpy.ops.object.collection_objects_select()#",
        "description": "Select all objects in collection",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.object.collection_remove",
        "signature": "bpy.ops.object.collection_remove()#",
        "description": "Remove the active object from this collection",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.object.collection_unlink",
        "signature": "bpy.ops.object.collection_unlink()#",
        "description": "Unlink the collection from all objects",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.object.constraint_add",
        "signature": "bpy.ops.object.constraint_add(type='')#",
        "description": "Add a constraint to the active object",
        "parameters": [
            "type=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.object.constraint_add_with_targets",
        "signature": "bpy.ops.object.constraint_add_with_targets(type='')#",
        "description": "Add a constraint to the active object, with target (where applicable) set to the selected objects/bones",
        "parameters": [
            "type=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.object.constraints_clear",
        "signature": "bpy.ops.object.constraints_clear()#",
        "description": "Clear all constraints from the selected objects",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.object.constraints_copy",
        "signature": "bpy.ops.object.constraints_copy()#",
        "description": "Copy constraints to other selected objects",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.object.convert",
        "signature": "bpy.ops.object.convert(target='MESH',keep_original=False,merge_customdata=True,angle=1.22173,thickness=5,seams=False,faces=True,offset=0.01)#",
        "description": "Convert selected objects to another type",
        "parameters": [
            "target='MESH'",
            "keep_original=False",
            "merge_customdata=True",
            "angle=1.22173",
            "thickness=5",
            "seams=False",
            "faces=True",
            "offset=0.01"
        ],
        "parameter_descriptions": [
            "target(enum in['CURVE','MESH','GPENCIL','CURVES'],(optional)) –Target, Type of object to convert toCURVECurve – Curve from Mesh or Text objects.MESHMesh – Mesh from Curve, Surface, Metaball, or Text objects.GPENCILGrease Pencil – Grease Pencil from Curve or Mesh objects.CURVESCurves – Curves from evaluated curve data.",
            "CURVECurve – Curve from Mesh or Text objects.",
            "MESHMesh – Mesh from Curve, Surface, Metaball, or Text objects.",
            "GPENCILGrease Pencil – Grease Pencil from Curve or Mesh objects.",
            "CURVESCurves – Curves from evaluated curve data.",
            "keep_original(boolean,(optional)) – Keep Original, Keep original objects instead of replacing them",
            "merge_customdata(boolean,(optional)) – Merge UVs, Merge UV coordinates that share a vertex to account for imprecision in some modifiers",
            "angle(float in[0,3.14159],(optional)) – Threshold Angle, Threshold to determine ends of the strokes",
            "thickness(int in[1,100],(optional)) – Thickness",
            "seams(boolean,(optional)) – Only Seam Edges, Convert only seam edges",
            "faces(boolean,(optional)) – Export Faces, Export faces as filled strokes",
            "offset(float in[0,inf],(optional)) – Stroke Offset, Offset strokes from fill"
        ]
    },
    {
        "function_id": "bpy.ops.object.correctivesmooth_bind",
        "signature": "bpy.ops.object.correctivesmooth_bind(modifier='')#",
        "description": "Bind base pose in Corrective Smooth modifier",
        "parameters": [
            "modifier=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.object.curves_empty_hair_add",
        "signature": "bpy.ops.object.curves_empty_hair_add(align='WORLD',location=(0.0,0.0,0.0),rotation=(0.0,0.0,0.0),scale=(0.0,0.0,0.0))#",
        "description": "Add an empty curve object to the scene with the selected mesh as surface",
        "parameters": [
            "align='WORLD'",
            "location=(0.0,0.0,0.0)",
            "rotation=(0.0,0.0,0.0)",
            "scale=(0.0,0.0,0.0)"
        ],
        "parameter_descriptions": [
            "align(enum in['WORLD','VIEW','CURSOR'],(optional)) –Align, The alignment of the new objectWORLDWorld – Align the new object to the world.VIEWView – Align the new object to the view.CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "WORLDWorld – Align the new object to the world.",
            "VIEWView – Align the new object to the view.",
            "CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "location(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Location, Location for the newly added object",
            "rotation(mathutils.Eulerrotation of 3 items in [-inf, inf], (optional)) – Rotation, Rotation for the newly added object",
            "scale(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Scale, Scale for the newly added object"
        ]
    },
    {
        "function_id": "bpy.ops.object.curves_random_add",
        "signature": "bpy.ops.object.curves_random_add(align='WORLD',location=(0.0,0.0,0.0),rotation=(0.0,0.0,0.0),scale=(0.0,0.0,0.0))#",
        "description": "Add a curves object with random curves to the scene",
        "parameters": [
            "align='WORLD'",
            "location=(0.0,0.0,0.0)",
            "rotation=(0.0,0.0,0.0)",
            "scale=(0.0,0.0,0.0)"
        ],
        "parameter_descriptions": [
            "align(enum in['WORLD','VIEW','CURSOR'],(optional)) –Align, The alignment of the new objectWORLDWorld – Align the new object to the world.VIEWView – Align the new object to the view.CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "WORLDWorld – Align the new object to the world.",
            "VIEWView – Align the new object to the view.",
            "CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "location(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Location, Location for the newly added object",
            "rotation(mathutils.Eulerrotation of 3 items in [-inf, inf], (optional)) – Rotation, Rotation for the newly added object",
            "scale(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Scale, Scale for the newly added object"
        ]
    },
    {
        "function_id": "bpy.ops.object.data_instance_add",
        "signature": "bpy.ops.object.data_instance_add(name='',session_uid=0,type='ACTION',align='WORLD',location=(0.0,0.0,0.0),rotation=(0.0,0.0,0.0),scale=(0.0,0.0,0.0),drop_x=0,drop_y=0)#",
        "description": "Add an object data instance",
        "parameters": [
            "name=''",
            "session_uid=0",
            "type='ACTION'",
            "align='WORLD'",
            "location=(0.0,0.0,0.0)",
            "rotation=(0.0,0.0,0.0)",
            "scale=(0.0,0.0,0.0)",
            "drop_x=0",
            "drop_y=0"
        ],
        "parameter_descriptions": [
            "name(string,(optional,never None)) – Name, Name of the data-block to use by the operator",
            "session_uid(int in[-inf,inf],(optional)) – Session UID, Session UID of the data-block to use by the operator",
            "type(enum inId Type Items, (optional)) – Type",
            "align(enum in['WORLD','VIEW','CURSOR'],(optional)) –Align, The alignment of the new objectWORLDWorld – Align the new object to the world.VIEWView – Align the new object to the view.CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "WORLDWorld – Align the new object to the world.",
            "VIEWView – Align the new object to the view.",
            "CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "location(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Location, Location for the newly added object",
            "rotation(mathutils.Eulerrotation of 3 items in [-inf, inf], (optional)) – Rotation, Rotation for the newly added object",
            "scale(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Scale, Scale for the newly added object",
            "drop_x(int in[-inf,inf],(optional)) – Drop X, X-coordinate (screen space) to place the new object under",
            "drop_y(int in[-inf,inf],(optional)) – Drop Y, Y-coordinate (screen space) to place the new object under"
        ]
    },
    {
        "function_id": "bpy.ops.object.data_transfer",
        "signature": "bpy.ops.object.data_transfer(use_reverse_transfer=False,use_freeze=False,data_type='',use_create=True,vert_mapping='NEAREST',edge_mapping='NEAREST',loop_mapping='NEAREST_POLYNOR',poly_mapping='NEAREST',use_auto_transform=False,use_object_transform=True,use_max_distance=False,max_distance=1.0,ray_radius=0.0,islands_precision=0.1,layers_select_src='ACTIVE',layers_select_dst='ACTIVE',mix_mode='REPLACE',mix_factor=1.0)#",
        "description": "Transfer data layer(s) (weights, edge sharp, etc.) from active to selected meshes",
        "parameters": [
            "use_reverse_transfer=False",
            "use_freeze=False",
            "data_type=''",
            "use_create=True",
            "vert_mapping='NEAREST'",
            "edge_mapping='NEAREST'",
            "loop_mapping='NEAREST_POLYNOR'",
            "poly_mapping='NEAREST'",
            "use_auto_transform=False",
            "use_object_transform=True",
            "use_max_distance=False",
            "max_distance=1.0",
            "ray_radius=0.0",
            "islands_precision=0.1",
            "layers_select_src='ACTIVE'",
            "layers_select_dst='ACTIVE'",
            "mix_mode='REPLACE'",
            "mix_factor=1.0"
        ],
        "parameter_descriptions": [
            "use_reverse_transfer(boolean,(optional)) – Reverse Transfer, Transfer from selected objects to active one",
            "use_freeze(boolean,(optional)) – Freeze Operator, Prevent changes to settings to re-run the operator, handy to change several things at once with heavy geometry",
            "data_type(enum in['VGROUP_WEIGHTS','BEVEL_WEIGHT_VERT','COLOR_VERTEX','SHARP_EDGE','SEAM','CREASE','BEVEL_WEIGHT_EDGE','FREESTYLE_EDGE','CUSTOM_NORMAL','COLOR_CORNER','UV','SMOOTH','FREESTYLE_FACE'],(optional)) –Data Type, Which data to transferVGROUP_WEIGHTSVertex Group(s) – Transfer active or all vertex groups.BEVEL_WEIGHT_VERTBevel Weight – Transfer bevel weights.COLOR_VERTEXColors – Color Attributes.SHARP_EDGESharp – Transfer sharp mark.SEAMUV Seam – Transfer UV seam mark.CREASESubdivision Crease – Transfer crease values.BEVEL_WEIGHT_EDGEBevel Weight – Transfer bevel weights.FREESTYLE_EDGEFreestyle Mark – Transfer Freestyle edge mark.CUSTOM_NORMALCustom Normals – Transfer custom normals.COLOR_CORNERColors – Color Attributes.UVUVs – Transfer UV layers.SMOOTHSmooth – Transfer flat/smooth mark.FREESTYLE_FACEFreestyle Mark – Transfer Freestyle face mark.",
            "VGROUP_WEIGHTSVertex Group(s) – Transfer active or all vertex groups.",
            "BEVEL_WEIGHT_VERTBevel Weight – Transfer bevel weights.",
            "COLOR_VERTEXColors – Color Attributes.",
            "SHARP_EDGESharp – Transfer sharp mark.",
            "SEAMUV Seam – Transfer UV seam mark.",
            "CREASESubdivision Crease – Transfer crease values.",
            "BEVEL_WEIGHT_EDGEBevel Weight – Transfer bevel weights.",
            "FREESTYLE_EDGEFreestyle Mark – Transfer Freestyle edge mark.",
            "CUSTOM_NORMALCustom Normals – Transfer custom normals.",
            "COLOR_CORNERColors – Color Attributes.",
            "UVUVs – Transfer UV layers.",
            "SMOOTHSmooth – Transfer flat/smooth mark.",
            "FREESTYLE_FACEFreestyle Mark – Transfer Freestyle face mark.",
            "use_create(boolean,(optional)) – Create Data, Add data layers on destination meshes if needed",
            "vert_mapping(enum inDt Method Vertex Items, (optional)) – Vertex Mapping, Method used to map source vertices to destination ones",
            "edge_mapping(enum inDt Method Edge Items, (optional)) – Edge Mapping, Method used to map source edges to destination ones",
            "loop_mapping(enum inDt Method Loop Items, (optional)) – Face Corner Mapping, Method used to map source faces’ corners to destination ones",
            "poly_mapping(enum inDt Method Poly Items, (optional)) – Face Mapping, Method used to map source faces to destination ones",
            "use_auto_transform(boolean,(optional)) – Auto Transform, Automatically compute transformation to get the best possible match between source and destination meshes.Warning: Results will never be as good as manual matching of objects",
            "use_object_transform(boolean,(optional)) – Object Transform, Evaluate source and destination meshes in global space",
            "use_max_distance(boolean,(optional)) – Only Neighbor Geometry, Source elements must be closer than given distance from destination one",
            "max_distance(float in[0,inf],(optional)) – Max Distance, Maximum allowed distance between source and destination element, for non-topology mappings",
            "ray_radius(float in[0,inf],(optional)) – Ray Radius, ‘Width’ of rays (especially useful when raycasting against vertices or edges)",
            "islands_precision(float in[0,10],(optional)) – Islands Precision, Factor controlling precision of islands handling (the higher, the better the results)",
            "layers_select_src(enum inDt Layers Select Src Items, (optional)) – Source Layers Selection, Which layers to transfer, in case of multi-layers types",
            "layers_select_dst(enum inDt Layers Select Dst Items, (optional)) – Destination Layers Matching, How to match source and destination layers",
            "mix_mode(enum inDt Mix Mode Items, (optional)) – Mix Mode, How to affect destination elements with source values",
            "mix_factor(float in[0,1],(optional)) – Mix Factor, Factor to use when applying data to destination (exact behavior depends on mix mode)"
        ]
    },
    {
        "function_id": "bpy.ops.object.datalayout_transfer",
        "signature": "bpy.ops.object.datalayout_transfer(modifier='',data_type='',use_delete=False,layers_select_src='ACTIVE',layers_select_dst='ACTIVE')#",
        "description": "Transfer layout of data layer(s) from active to selected meshes",
        "parameters": [
            "modifier=''",
            "data_type=''",
            "use_delete=False",
            "layers_select_src='ACTIVE'",
            "layers_select_dst='ACTIVE'"
        ],
        "parameter_descriptions": [
            "modifier(string,(optional,never None)) – Modifier, Name of the modifier to edit",
            "data_type(enum in['VGROUP_WEIGHTS','BEVEL_WEIGHT_VERT','COLOR_VERTEX','SHARP_EDGE','SEAM','CREASE','BEVEL_WEIGHT_EDGE','FREESTYLE_EDGE','CUSTOM_NORMAL','COLOR_CORNER','UV','SMOOTH','FREESTYLE_FACE'],(optional)) –Data Type, Which data to transferVGROUP_WEIGHTSVertex Group(s) – Transfer active or all vertex groups.BEVEL_WEIGHT_VERTBevel Weight – Transfer bevel weights.COLOR_VERTEXColors – Color Attributes.SHARP_EDGESharp – Transfer sharp mark.SEAMUV Seam – Transfer UV seam mark.CREASESubdivision Crease – Transfer crease values.BEVEL_WEIGHT_EDGEBevel Weight – Transfer bevel weights.FREESTYLE_EDGEFreestyle Mark – Transfer Freestyle edge mark.CUSTOM_NORMALCustom Normals – Transfer custom normals.COLOR_CORNERColors – Color Attributes.UVUVs – Transfer UV layers.SMOOTHSmooth – Transfer flat/smooth mark.FREESTYLE_FACEFreestyle Mark – Transfer Freestyle face mark.",
            "VGROUP_WEIGHTSVertex Group(s) – Transfer active or all vertex groups.",
            "BEVEL_WEIGHT_VERTBevel Weight – Transfer bevel weights.",
            "COLOR_VERTEXColors – Color Attributes.",
            "SHARP_EDGESharp – Transfer sharp mark.",
            "SEAMUV Seam – Transfer UV seam mark.",
            "CREASESubdivision Crease – Transfer crease values.",
            "BEVEL_WEIGHT_EDGEBevel Weight – Transfer bevel weights.",
            "FREESTYLE_EDGEFreestyle Mark – Transfer Freestyle edge mark.",
            "CUSTOM_NORMALCustom Normals – Transfer custom normals.",
            "COLOR_CORNERColors – Color Attributes.",
            "UVUVs – Transfer UV layers.",
            "SMOOTHSmooth – Transfer flat/smooth mark.",
            "FREESTYLE_FACEFreestyle Mark – Transfer Freestyle face mark.",
            "use_delete(boolean,(optional)) – Exact Match, Also delete some data layers from destination if necessary, so that it matches exactly source",
            "layers_select_src(enum inDt Layers Select Src Items, (optional)) – Source Layers Selection, Which layers to transfer, in case of multi-layers types",
            "layers_select_dst(enum inDt Layers Select Dst Items, (optional)) – Destination Layers Matching, How to match source and destination layers"
        ]
    },
    {
        "function_id": "bpy.ops.object.delete",
        "signature": "bpy.ops.object.delete(use_global=False,confirm=True)#",
        "description": "Delete selected objects",
        "parameters": [
            "use_global=False",
            "confirm=True"
        ],
        "parameter_descriptions": [
            "use_global(boolean,(optional)) – Delete Globally, Remove object from all scenes",
            "confirm(boolean,(optional)) – Confirm, Prompt for confirmation"
        ]
    },
    {
        "function_id": "bpy.ops.object.drop_geometry_nodes",
        "signature": "bpy.ops.object.drop_geometry_nodes(session_uid=0,show_datablock_in_modifier=True)#",
        "description": "Undocumented, considercontributing.",
        "parameters": [
            "session_uid=0",
            "show_datablock_in_modifier=True"
        ],
        "parameter_descriptions": [
            "session_uid(int in[-inf,inf],(optional)) – Session UID, Session UID of the geometry node group being dropped",
            "show_datablock_in_modifier(boolean,(optional)) – Show the datablock selector in the modifier"
        ]
    },
    {
        "function_id": "bpy.ops.object.drop_named_material",
        "signature": "bpy.ops.object.drop_named_material(name='',session_uid=0)#",
        "description": "Undocumented, considercontributing.",
        "parameters": [
            "name=''",
            "session_uid=0"
        ],
        "parameter_descriptions": [
            "name(string,(optional,never None)) – Name, Name of the data-block to use by the operator",
            "session_uid(int in[-inf,inf],(optional)) – Session UID, Session UID of the data-block to use by the operator"
        ]
    },
    {
        "function_id": "bpy.ops.object.duplicate",
        "signature": "bpy.ops.object.duplicate(linked=False,mode='TRANSLATION')#",
        "description": "Duplicate selected objects",
        "parameters": [
            "linked=False",
            "mode='TRANSLATION'"
        ],
        "parameter_descriptions": [
            "linked(boolean,(optional)) – Linked, Duplicate object but not object data, linking to the original data",
            "mode(enum inTransform Mode Type Items, (optional)) – Mode"
        ]
    },
    {
        "function_id": "bpy.ops.object.duplicate_move",
        "signature": "bpy.ops.object.duplicate_move(OBJECT_OT_duplicate=None,TRANSFORM_OT_translate=None)#",
        "description": "Duplicate the selected objects and move them",
        "parameters": [
            "OBJECT_OT_duplicate=None",
            "TRANSFORM_OT_translate=None"
        ],
        "parameter_descriptions": [
            "OBJECT_OT_duplicate(OBJECT_OT_duplicate, (optional)) – Duplicate Objects, Duplicate selected objects",
            "TRANSFORM_OT_translate(TRANSFORM_OT_translate, (optional)) – Move, Move selected items"
        ]
    },
    {
        "function_id": "bpy.ops.object.duplicate_move_linked",
        "signature": "bpy.ops.object.duplicate_move_linked(OBJECT_OT_duplicate=None,TRANSFORM_OT_translate=None)#",
        "description": "Duplicate the selected objects, but not their object data, and move them",
        "parameters": [
            "OBJECT_OT_duplicate=None",
            "TRANSFORM_OT_translate=None"
        ],
        "parameter_descriptions": [
            "OBJECT_OT_duplicate(OBJECT_OT_duplicate, (optional)) – Duplicate Objects, Duplicate selected objects",
            "TRANSFORM_OT_translate(TRANSFORM_OT_translate, (optional)) – Move, Move selected items"
        ]
    },
    {
        "function_id": "bpy.ops.object.duplicates_make_real",
        "signature": "bpy.ops.object.duplicates_make_real(use_base_parent=False,use_hierarchy=False)#",
        "description": "Make instanced objects attached to this object real",
        "parameters": [
            "use_base_parent=False",
            "use_hierarchy=False"
        ],
        "parameter_descriptions": [
            "use_base_parent(boolean,(optional)) – Parent, Parent newly created objects to the original instancer",
            "use_hierarchy(boolean,(optional)) – Keep Hierarchy, Maintain parent child relationships"
        ]
    },
    {
        "function_id": "bpy.ops.object.editmode_toggle",
        "signature": "bpy.ops.object.editmode_toggle()#",
        "description": "Toggle object’s edit mode",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.object.effector_add",
        "signature": "bpy.ops.object.effector_add(type='FORCE',radius=1.0,enter_editmode=False,align='WORLD',location=(0.0,0.0,0.0),rotation=(0.0,0.0,0.0),scale=(0.0,0.0,0.0))#",
        "description": "Add an empty object with a physics effector to the scene",
        "parameters": [
            "type='FORCE'",
            "radius=1.0",
            "enter_editmode=False",
            "align='WORLD'",
            "location=(0.0,0.0,0.0)",
            "rotation=(0.0,0.0,0.0)",
            "scale=(0.0,0.0,0.0)"
        ],
        "parameter_descriptions": [
            "type(enum in['FORCE','WIND','VORTEX','MAGNET','HARMONIC','CHARGE','LENNARDJ','TEXTURE','GUIDE','BOID','TURBULENCE','DRAG','FLUID'],(optional)) – Type",
            "radius(float in[0,inf],(optional)) – Radius",
            "enter_editmode(boolean,(optional)) – Enter Edit Mode, Enter edit mode when adding this object",
            "align(enum in['WORLD','VIEW','CURSOR'],(optional)) –Align, The alignment of the new objectWORLDWorld – Align the new object to the world.VIEWView – Align the new object to the view.CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "WORLDWorld – Align the new object to the world.",
            "VIEWView – Align the new object to the view.",
            "CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "location(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Location, Location for the newly added object",
            "rotation(mathutils.Eulerrotation of 3 items in [-inf, inf], (optional)) – Rotation, Rotation for the newly added object",
            "scale(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Scale, Scale for the newly added object"
        ]
    },
    {
        "function_id": "bpy.ops.object.empty_add",
        "signature": "bpy.ops.object.empty_add(type='PLAIN_AXES',radius=1.0,align='WORLD',location=(0.0,0.0,0.0),rotation=(0.0,0.0,0.0),scale=(0.0,0.0,0.0))#",
        "description": "Add an empty object to the scene",
        "parameters": [
            "type='PLAIN_AXES'",
            "radius=1.0",
            "align='WORLD'",
            "location=(0.0,0.0,0.0)",
            "rotation=(0.0,0.0,0.0)",
            "scale=(0.0,0.0,0.0)"
        ],
        "parameter_descriptions": [
            "type(enum inObject Empty Drawtype Items, (optional)) – Type",
            "radius(float in[0,inf],(optional)) – Radius",
            "align(enum in['WORLD','VIEW','CURSOR'],(optional)) –Align, The alignment of the new objectWORLDWorld – Align the new object to the world.VIEWView – Align the new object to the view.CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "WORLDWorld – Align the new object to the world.",
            "VIEWView – Align the new object to the view.",
            "CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "location(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Location, Location for the newly added object",
            "rotation(mathutils.Eulerrotation of 3 items in [-inf, inf], (optional)) – Rotation, Rotation for the newly added object",
            "scale(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Scale, Scale for the newly added object"
        ]
    },
    {
        "function_id": "bpy.ops.object.empty_image_add",
        "signature": "bpy.ops.object.empty_image_add(filepath='',hide_props_region=True,check_existing=False,filter_blender=False,filter_backup=False,filter_image=True,filter_movie=True,filter_python=False,filter_font=False,filter_sound=False,filter_text=False,filter_archive=False,filter_btx=False,filter_collada=False,filter_alembic=False,filter_usd=False,filter_obj=False,filter_volume=False,filter_folder=True,filter_blenlib=False,filemode=9,relative_path=True,show_multiview=False,use_multiview=False,display_type='DEFAULT',sort_method='',name='',session_uid=0,align='WORLD',location=(0.0,0.0,0.0),rotation=(0.0,0.0,0.0),scale=(0.0,0.0,0.0),background=False)#",
        "description": "Add an empty image type to scene with data",
        "parameters": [
            "filepath=''",
            "hide_props_region=True",
            "check_existing=False",
            "filter_blender=False",
            "filter_backup=False",
            "filter_image=True",
            "filter_movie=True",
            "filter_python=False",
            "filter_font=False",
            "filter_sound=False",
            "filter_text=False",
            "filter_archive=False",
            "filter_btx=False",
            "filter_collada=False",
            "filter_alembic=False",
            "filter_usd=False",
            "filter_obj=False",
            "filter_volume=False",
            "filter_folder=True",
            "filter_blenlib=False",
            "filemode=9",
            "relative_path=True",
            "show_multiview=False",
            "use_multiview=False",
            "display_type='DEFAULT'",
            "sort_method=''",
            "name=''",
            "session_uid=0",
            "align='WORLD'",
            "location=(0.0,0.0,0.0)",
            "rotation=(0.0,0.0,0.0)",
            "scale=(0.0,0.0,0.0)",
            "background=False"
        ],
        "parameter_descriptions": [
            "filepath(string,(optional,never None)) – File Path, Path to file",
            "hide_props_region(boolean,(optional)) – Hide Operator Properties, Collapse the region displaying the operator settings",
            "check_existing(boolean,(optional)) – Check Existing, Check and warn on overwriting existing files",
            "filter_blender(boolean,(optional)) – Filter .blend files",
            "filter_backup(boolean,(optional)) – Filter .blend files",
            "filter_image(boolean,(optional)) – Filter image files",
            "filter_movie(boolean,(optional)) – Filter movie files",
            "filter_python(boolean,(optional)) – Filter Python files",
            "filter_font(boolean,(optional)) – Filter font files",
            "filter_sound(boolean,(optional)) – Filter sound files",
            "filter_text(boolean,(optional)) – Filter text files",
            "filter_archive(boolean,(optional)) – Filter archive files",
            "filter_btx(boolean,(optional)) – Filter btx files",
            "filter_collada(boolean,(optional)) – Filter COLLADA files",
            "filter_alembic(boolean,(optional)) – Filter Alembic files",
            "filter_usd(boolean,(optional)) – Filter USD files",
            "filter_obj(boolean,(optional)) – Filter OBJ files",
            "filter_volume(boolean,(optional)) – Filter OpenVDB volume files",
            "filter_folder(boolean,(optional)) – Filter folders",
            "filter_blenlib(boolean,(optional)) – Filter Blender IDs",
            "filemode(int in[1,9],(optional)) – File Browser Mode, The setting for the file browser mode to load a .blend file, a library or a special file",
            "relative_path(boolean,(optional)) – Relative Path, Select the file relative to the blend file",
            "show_multiview(boolean,(optional)) – Enable Multi-View",
            "use_multiview(boolean,(optional)) – Use Multi-View",
            "display_type(enum in['DEFAULT','LIST_VERTICAL','LIST_HORIZONTAL','THUMBNAIL'],(optional)) –Display TypeDEFAULTDefault – Automatically determine display type for files.LIST_VERTICALShort List – Display files as short list.LIST_HORIZONTALLong List – Display files as a detailed list.THUMBNAILThumbnails – Display files as thumbnails.",
            "DEFAULTDefault – Automatically determine display type for files.",
            "LIST_VERTICALShort List – Display files as short list.",
            "LIST_HORIZONTALLong List – Display files as a detailed list.",
            "THUMBNAILThumbnails – Display files as thumbnails.",
            "sort_method(enum in['DEFAULT','FILE_SORT_ALPHA','FILE_SORT_EXTENSION','FILE_SORT_TIME','FILE_SORT_SIZE'],(optional)) –File sorting modeDEFAULTDefault – Automatically determine sort method for files.FILE_SORT_ALPHAName – Sort the file list alphabetically.FILE_SORT_EXTENSIONExtension – Sort the file list by extension/type.FILE_SORT_TIMEModified Date – Sort files by modification time.FILE_SORT_SIZESize – Sort files by size.",
            "DEFAULTDefault – Automatically determine sort method for files.",
            "FILE_SORT_ALPHAName – Sort the file list alphabetically.",
            "FILE_SORT_EXTENSIONExtension – Sort the file list by extension/type.",
            "FILE_SORT_TIMEModified Date – Sort files by modification time.",
            "FILE_SORT_SIZESize – Sort files by size.",
            "name(string,(optional,never None)) – Name, Name of the data-block to use by the operator",
            "session_uid(int in[-inf,inf],(optional)) – Session UID, Session UID of the data-block to use by the operator",
            "align(enum in['WORLD','VIEW','CURSOR'],(optional)) –Align, The alignment of the new objectWORLDWorld – Align the new object to the world.VIEWView – Align the new object to the view.CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "WORLDWorld – Align the new object to the world.",
            "VIEWView – Align the new object to the view.",
            "CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "location(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Location, Location for the newly added object",
            "rotation(mathutils.Eulerrotation of 3 items in [-inf, inf], (optional)) – Rotation, Rotation for the newly added object",
            "scale(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Scale, Scale for the newly added object",
            "background(boolean,(optional)) – Put in Background, Make the image render behind all objects"
        ]
    },
    {
        "function_id": "bpy.ops.object.explode_refresh",
        "signature": "bpy.ops.object.explode_refresh(modifier='')#",
        "description": "Refresh data in the Explode modifier",
        "parameters": [
            "modifier=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.object.forcefield_toggle",
        "signature": "bpy.ops.object.forcefield_toggle()#",
        "description": "Toggle object’s force field",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.object.geometry_node_bake_delete_single",
        "signature": "bpy.ops.object.geometry_node_bake_delete_single(session_uid=0,modifier_name='',bake_id=0)#",
        "description": "Delete baked data of a single bake node or simulation",
        "parameters": [
            "session_uid=0",
            "modifier_name=''",
            "bake_id=0"
        ],
        "parameter_descriptions": [
            "session_uid(int in[-inf,inf],(optional)) – Session UID, Session UID of the data-block to use by the operator",
            "modifier_name(string,(optional,never None)) – Modifier Name, Name of the modifier that contains the node",
            "bake_id(int in[0,inf],(optional)) – Bake ID, Nested node id of the node"
        ]
    },
    {
        "function_id": "bpy.ops.object.geometry_node_bake_single",
        "signature": "bpy.ops.object.geometry_node_bake_single(session_uid=0,modifier_name='',bake_id=0)#",
        "description": "Bake a single bake node or simulation",
        "parameters": [
            "session_uid=0",
            "modifier_name=''",
            "bake_id=0"
        ],
        "parameter_descriptions": [
            "session_uid(int in[-inf,inf],(optional)) – Session UID, Session UID of the data-block to use by the operator",
            "modifier_name(string,(optional,never None)) – Modifier Name, Name of the modifier that contains the node",
            "bake_id(int in[0,inf],(optional)) – Bake ID, Nested node id of the node"
        ]
    },
    {
        "function_id": "bpy.ops.object.geometry_node_tree_copy_assign",
        "signature": "bpy.ops.object.geometry_node_tree_copy_assign()#",
        "description": "Copy the active geometry node group and assign it to the active modifier",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.object.geometry_nodes_input_attribute_toggle",
        "signature": "bpy.ops.object.geometry_nodes_input_attribute_toggle(input_name='',modifier_name='')#",
        "description": "Switch between an attribute and a single value to define the data for every element",
        "parameters": [
            "input_name=''",
            "modifier_name=''"
        ],
        "parameter_descriptions": [
            "input_name(string,(optional,never None)) – Input Name",
            "modifier_name(string,(optional,never None)) – Modifier Name"
        ]
    },
    {
        "function_id": "bpy.ops.object.geometry_nodes_move_to_nodes",
        "signature": "bpy.ops.object.geometry_nodes_move_to_nodes(use_selected_objects=False)#",
        "description": "Move inputs and outputs from in the modifier to a new node group",
        "parameters": [
            "use_selected_objects=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.object.gpencil_add",
        "signature": "bpy.ops.object.gpencil_add(radius=1.0,align='WORLD',location=(0.0,0.0,0.0),rotation=(0.0,0.0,0.0),scale=(0.0,0.0,0.0),type='EMPTY',use_in_front=True,stroke_depth_offset=0.05,use_lights=False,stroke_depth_order='3D')#",
        "description": "Add a Grease Pencil object to the scene",
        "parameters": [
            "radius=1.0",
            "align='WORLD'",
            "location=(0.0,0.0,0.0)",
            "rotation=(0.0,0.0,0.0)",
            "scale=(0.0,0.0,0.0)",
            "type='EMPTY'",
            "use_in_front=True",
            "stroke_depth_offset=0.05",
            "use_lights=False",
            "stroke_depth_order='3D'"
        ],
        "parameter_descriptions": [
            "radius(float in[0,inf],(optional)) – Radius",
            "align(enum in['WORLD','VIEW','CURSOR'],(optional)) –Align, The alignment of the new objectWORLDWorld – Align the new object to the world.VIEWView – Align the new object to the view.CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "WORLDWorld – Align the new object to the world.",
            "VIEWView – Align the new object to the view.",
            "CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "location(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Location, Location for the newly added object",
            "rotation(mathutils.Eulerrotation of 3 items in [-inf, inf], (optional)) – Rotation, Rotation for the newly added object",
            "scale(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Scale, Scale for the newly added object",
            "type(enum inObject Gpencil Type Items, (optional)) – Type",
            "use_in_front(boolean,(optional)) – Show In Front, Show Line Art grease pencil in front of everything",
            "stroke_depth_offset(float in[0,inf],(optional)) – Stroke Offset, Stroke offset for the Line Art modifier",
            "use_lights(boolean,(optional)) – Use Lights, Use lights for this grease pencil object",
            "stroke_depth_order(enum in['2D','3D'],(optional)) –Stroke Depth Order, Defines how the strokes are ordered in 3D space (for objects not displayed ‘In Front’)2D2D Layers – Display strokes using grease pencil layers to define order.3D3D Location – Display strokes using real 3D position in 3D space.",
            "2D2D Layers – Display strokes using grease pencil layers to define order.",
            "3D3D Location – Display strokes using real 3D position in 3D space."
        ]
    },
    {
        "function_id": "bpy.ops.object.gpencil_modifier_add",
        "signature": "bpy.ops.object.gpencil_modifier_add(type='GP_THICK')#",
        "description": "Add a procedural operation/effect to the active grease pencil object",
        "parameters": [
            "type='GP_THICK'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.object.gpencil_modifier_apply",
        "signature": "bpy.ops.object.gpencil_modifier_apply(apply_as='DATA',modifier='',report=False)#",
        "description": "Apply modifier and remove from the stack",
        "parameters": [
            "apply_as='DATA'",
            "modifier=''",
            "report=False"
        ],
        "parameter_descriptions": [
            "apply_as(enum in['DATA','SHAPE'],(optional)) –Apply As, How to apply the modifier to the geometryDATAObject Data – Apply modifier to the object’s data.SHAPENew Shape – Apply deform-only modifier to a new shape on this object.",
            "DATAObject Data – Apply modifier to the object’s data.",
            "SHAPENew Shape – Apply deform-only modifier to a new shape on this object.",
            "modifier(string,(optional,never None)) – Modifier, Name of the modifier to edit",
            "report(boolean,(optional)) – Report, Create a notification after the operation"
        ]
    },
    {
        "function_id": "bpy.ops.object.gpencil_modifier_copy",
        "signature": "bpy.ops.object.gpencil_modifier_copy(modifier='')#",
        "description": "Duplicate modifier at the same position in the stack",
        "parameters": [
            "modifier=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.object.gpencil_modifier_copy_to_selected",
        "signature": "bpy.ops.object.gpencil_modifier_copy_to_selected(modifier='')#",
        "description": "Copy the modifier from the active object to all selected objects",
        "parameters": [
            "modifier=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.object.gpencil_modifier_move_down",
        "signature": "bpy.ops.object.gpencil_modifier_move_down(modifier='')#",
        "description": "Move modifier down in the stack",
        "parameters": [
            "modifier=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.object.gpencil_modifier_move_to_index",
        "signature": "bpy.ops.object.gpencil_modifier_move_to_index(modifier='',index=0)#",
        "description": "Change the modifier’s position in the list so it evaluates after the set number of others",
        "parameters": [
            "modifier=''",
            "index=0"
        ],
        "parameter_descriptions": [
            "modifier(string,(optional,never None)) – Modifier, Name of the modifier to edit",
            "index(int in[0,inf],(optional)) – Index, The index to move the modifier to"
        ]
    },
    {
        "function_id": "bpy.ops.object.gpencil_modifier_move_up",
        "signature": "bpy.ops.object.gpencil_modifier_move_up(modifier='')#",
        "description": "Move modifier up in the stack",
        "parameters": [
            "modifier=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.object.gpencil_modifier_remove",
        "signature": "bpy.ops.object.gpencil_modifier_remove(modifier='',report=False)#",
        "description": "Remove a modifier from the active grease pencil object",
        "parameters": [
            "modifier=''",
            "report=False"
        ],
        "parameter_descriptions": [
            "modifier(string,(optional,never None)) – Modifier, Name of the modifier to edit",
            "report(boolean,(optional)) – Report, Create a notification after the operation"
        ]
    },
    {
        "function_id": "bpy.ops.object.grease_pencil_add",
        "signature": "bpy.ops.object.grease_pencil_add(type='EMPTY',use_in_front=True,stroke_depth_offset=0.05,use_lights=False,stroke_depth_order='3D',radius=1.0,align='WORLD',location=(0.0,0.0,0.0),rotation=(0.0,0.0,0.0),scale=(0.0,0.0,0.0))#",
        "description": "Add a Grease Pencil object to the scene",
        "parameters": [
            "type='EMPTY'",
            "use_in_front=True",
            "stroke_depth_offset=0.05",
            "use_lights=False",
            "stroke_depth_order='3D'",
            "radius=1.0",
            "align='WORLD'",
            "location=(0.0,0.0,0.0)",
            "rotation=(0.0,0.0,0.0)",
            "scale=(0.0,0.0,0.0)"
        ],
        "parameter_descriptions": [
            "type(enum inObject Gpencil Type Items, (optional)) – Type",
            "use_in_front(boolean,(optional)) – Show In Front, Show Line Art grease pencil in front of everything",
            "stroke_depth_offset(float in[0,inf],(optional)) – Stroke Offset, Stroke offset for the Line Art modifier",
            "use_lights(boolean,(optional)) – Use Lights, Use lights for this grease pencil object",
            "stroke_depth_order(enum in['2D','3D'],(optional)) –Stroke Depth Order, Defines how the strokes are ordered in 3D space (for objects not displayed ‘In Front’)2D2D Layers – Display strokes using grease pencil layers to define order.3D3D Location – Display strokes using real 3D position in 3D space.",
            "2D2D Layers – Display strokes using grease pencil layers to define order.",
            "3D3D Location – Display strokes using real 3D position in 3D space.",
            "radius(float in[0,inf],(optional)) – Radius",
            "align(enum in['WORLD','VIEW','CURSOR'],(optional)) –Align, The alignment of the new objectWORLDWorld – Align the new object to the world.VIEWView – Align the new object to the view.CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "WORLDWorld – Align the new object to the world.",
            "VIEWView – Align the new object to the view.",
            "CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "location(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Location, Location for the newly added object",
            "rotation(mathutils.Eulerrotation of 3 items in [-inf, inf], (optional)) – Rotation, Rotation for the newly added object",
            "scale(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Scale, Scale for the newly added object"
        ]
    },
    {
        "function_id": "bpy.ops.object.grease_pencil_dash_modifier_segment_add",
        "signature": "bpy.ops.object.grease_pencil_dash_modifier_segment_add(modifier='')#",
        "description": "Add a segment to the dash modifier",
        "parameters": [
            "modifier=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.object.grease_pencil_dash_modifier_segment_move",
        "signature": "bpy.ops.object.grease_pencil_dash_modifier_segment_move(modifier='',type='UP')#",
        "description": "Move the active dash segment up or down",
        "parameters": [
            "modifier=''",
            "type='UP'"
        ],
        "parameter_descriptions": [
            "modifier(string,(optional,never None)) – Modifier, Name of the modifier to edit",
            "type(enum in['UP','DOWN'],(optional)) – Type"
        ]
    },
    {
        "function_id": "bpy.ops.object.grease_pencil_dash_modifier_segment_remove",
        "signature": "bpy.ops.object.grease_pencil_dash_modifier_segment_remove(modifier='',index=0)#",
        "description": "Remove the active segment from the dash modifier",
        "parameters": [
            "modifier=''",
            "index=0"
        ],
        "parameter_descriptions": [
            "modifier(string,(optional,never None)) – Modifier, Name of the modifier to edit",
            "index(int in[0,inf],(optional)) – Index, Index of the segment to remove"
        ]
    },
    {
        "function_id": "bpy.ops.object.grease_pencil_time_modifier_segment_add",
        "signature": "bpy.ops.object.grease_pencil_time_modifier_segment_add(modifier='')#",
        "description": "Add a segment to the time modifier",
        "parameters": [
            "modifier=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.object.grease_pencil_time_modifier_segment_move",
        "signature": "bpy.ops.object.grease_pencil_time_modifier_segment_move(modifier='',type='UP')#",
        "description": "Move the active time segment up or down",
        "parameters": [
            "modifier=''",
            "type='UP'"
        ],
        "parameter_descriptions": [
            "modifier(string,(optional,never None)) – Modifier, Name of the modifier to edit",
            "type(enum in['UP','DOWN'],(optional)) – Type"
        ]
    },
    {
        "function_id": "bpy.ops.object.grease_pencil_time_modifier_segment_remove",
        "signature": "bpy.ops.object.grease_pencil_time_modifier_segment_remove(modifier='',index=0)#",
        "description": "Remove the active segment from the time modifier",
        "parameters": [
            "modifier=''",
            "index=0"
        ],
        "parameter_descriptions": [
            "modifier(string,(optional,never None)) – Modifier, Name of the modifier to edit",
            "index(int in[0,inf],(optional)) – Index, Index of the segment to remove"
        ]
    },
    {
        "function_id": "bpy.ops.object.hide_collection",
        "signature": "bpy.ops.object.hide_collection(collection_index=-1,toggle=False,extend=False)#",
        "description": "Show only objects in collection (Shift to extend)",
        "parameters": [
            "collection_index=-1",
            "toggle=False",
            "extend=False"
        ],
        "parameter_descriptions": [
            "collection_index(int in[-1,inf],(optional)) – Collection Index, Index of the collection to change visibility",
            "toggle(boolean,(optional)) – Toggle, Toggle visibility",
            "extend(boolean,(optional)) – Extend, Extend visibility"
        ]
    },
    {
        "function_id": "bpy.ops.object.hide_render_clear_all",
        "signature": "bpy.ops.object.hide_render_clear_all()#",
        "description": "Reveal all render objects by setting the hide render flag",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.object.hide_view_clear",
        "signature": "bpy.ops.object.hide_view_clear(select=True)#",
        "description": "Reveal temporarily hidden objects",
        "parameters": [
            "select=True"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.object.hide_view_set",
        "signature": "bpy.ops.object.hide_view_set(unselected=False)#",
        "description": "Temporarily hide objects from the viewport",
        "parameters": [
            "unselected=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.object.hook_add_newob",
        "signature": "bpy.ops.object.hook_add_newob()#",
        "description": "Hook selected vertices to a newly created object",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.object.hook_add_selob",
        "signature": "bpy.ops.object.hook_add_selob(use_bone=False)#",
        "description": "Hook selected vertices to the first selected object",
        "parameters": [
            "use_bone=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.object.hook_assign",
        "signature": "bpy.ops.object.hook_assign(modifier='')#",
        "description": "Assign the selected vertices to a hook",
        "parameters": [
            "modifier=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.object.hook_recenter",
        "signature": "bpy.ops.object.hook_recenter(modifier='')#",
        "description": "Set hook center to cursor position",
        "parameters": [
            "modifier=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.object.hook_remove",
        "signature": "bpy.ops.object.hook_remove(modifier='')#",
        "description": "Remove a hook from the active object",
        "parameters": [
            "modifier=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.object.hook_reset",
        "signature": "bpy.ops.object.hook_reset(modifier='')#",
        "description": "Recalculate and clear offset transformation",
        "parameters": [
            "modifier=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.object.hook_select",
        "signature": "bpy.ops.object.hook_select(modifier='')#",
        "description": "Select affected vertices on mesh",
        "parameters": [
            "modifier=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.object.instance_offset_from_cursor",
        "signature": "bpy.ops.object.instance_offset_from_cursor()#",
        "description": "Set offset used for collection instances based on cursor position",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.object.instance_offset_from_object",
        "signature": "bpy.ops.object.instance_offset_from_object()#",
        "description": "Set offset used for collection instances based on the active object position",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.object.instance_offset_to_cursor",
        "signature": "bpy.ops.object.instance_offset_to_cursor()#",
        "description": "Set cursor position to the offset used for collection instances",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.object.isolate_type_render",
        "signature": "bpy.ops.object.isolate_type_render()#",
        "description": "Hide unselected render objects of same type as active by setting the hide render flag",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.object.join",
        "signature": "bpy.ops.object.join()#",
        "description": "Join selected objects into active object",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.object.join_shapes",
        "signature": "bpy.ops.object.join_shapes()#",
        "description": "Copy the current resulting shape of another selected object to this one",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.object.join_uvs",
        "signature": "bpy.ops.object.join_uvs()#",
        "description": "Transfer UV Maps from active to selected objects (needs matching geometry)",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.object.laplaciandeform_bind",
        "signature": "bpy.ops.object.laplaciandeform_bind(modifier='')#",
        "description": "Bind mesh to system in laplacian deform modifier",
        "parameters": [
            "modifier=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.object.light_add",
        "signature": "bpy.ops.object.light_add(type='POINT',radius=1.0,align='WORLD',location=(0.0,0.0,0.0),rotation=(0.0,0.0,0.0),scale=(0.0,0.0,0.0))#",
        "description": "Add a light object to the scene",
        "parameters": [
            "type='POINT'",
            "radius=1.0",
            "align='WORLD'",
            "location=(0.0,0.0,0.0)",
            "rotation=(0.0,0.0,0.0)",
            "scale=(0.0,0.0,0.0)"
        ],
        "parameter_descriptions": [
            "type(enum inLight Type Items, (optional)) – Type",
            "radius(float in[0,inf],(optional)) – Radius",
            "align(enum in['WORLD','VIEW','CURSOR'],(optional)) –Align, The alignment of the new objectWORLDWorld – Align the new object to the world.VIEWView – Align the new object to the view.CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "WORLDWorld – Align the new object to the world.",
            "VIEWView – Align the new object to the view.",
            "CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "location(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Location, Location for the newly added object",
            "rotation(mathutils.Eulerrotation of 3 items in [-inf, inf], (optional)) – Rotation, Rotation for the newly added object",
            "scale(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Scale, Scale for the newly added object"
        ]
    },
    {
        "function_id": "bpy.ops.object.light_linking_blocker_collection_new",
        "signature": "bpy.ops.object.light_linking_blocker_collection_new()#",
        "description": "Create new light linking collection used by the active emitter",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.object.light_linking_blockers_link",
        "signature": "bpy.ops.object.light_linking_blockers_link(link_state='INCLUDE')#",
        "description": "Light link selected blockers to the active emitter object",
        "parameters": [
            "link_state='INCLUDE'"
        ],
        "parameter_descriptions": [
            "INCLUDEInclude – Include selected blockers to cast shadows from the active emitter.",
            "EXCLUDEExclude – Exclude selected blockers from casting shadows from the active emitter."
        ]
    },
    {
        "function_id": "bpy.ops.object.light_linking_blockers_select",
        "signature": "bpy.ops.object.light_linking_blockers_select()#",
        "description": "Select all objects which block light from this emitter",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.object.light_linking_receiver_collection_new",
        "signature": "bpy.ops.object.light_linking_receiver_collection_new()#",
        "description": "Create new light linking collection used by the active emitter",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.object.light_linking_receivers_link",
        "signature": "bpy.ops.object.light_linking_receivers_link(link_state='INCLUDE')#",
        "description": "Light link selected receivers to the active emitter object",
        "parameters": [
            "link_state='INCLUDE'"
        ],
        "parameter_descriptions": [
            "INCLUDEInclude – Include selected receivers to receive light from the active emitter.",
            "EXCLUDEExclude – Exclude selected receivers from receiving light from the active emitter."
        ]
    },
    {
        "function_id": "bpy.ops.object.light_linking_receivers_select",
        "signature": "bpy.ops.object.light_linking_receivers_select()#",
        "description": "Select all objects which receive light from this emitter",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.object.light_linking_unlink_from_collection",
        "signature": "bpy.ops.object.light_linking_unlink_from_collection()#",
        "description": "Remove this object or collection from the light linking collection",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.object.lightprobe_add",
        "signature": "bpy.ops.object.lightprobe_add(type='SPHERE',radius=1.0,enter_editmode=False,align='WORLD',location=(0.0,0.0,0.0),rotation=(0.0,0.0,0.0),scale=(0.0,0.0,0.0))#",
        "description": "Add a light probe object",
        "parameters": [
            "type='SPHERE'",
            "radius=1.0",
            "enter_editmode=False",
            "align='WORLD'",
            "location=(0.0,0.0,0.0)",
            "rotation=(0.0,0.0,0.0)",
            "scale=(0.0,0.0,0.0)"
        ],
        "parameter_descriptions": [
            "type(enum in['SPHERE','PLANE','VOLUME'],(optional)) –TypeSPHERESphere – Light probe that captures precise lighting from all directions at a single point in space.PLANEPlane – Light probe that captures incoming light from a single direction on a plane.VOLUMEVolume – Light probe that captures low frequency lighting inside a volume.",
            "SPHERESphere – Light probe that captures precise lighting from all directions at a single point in space.",
            "PLANEPlane – Light probe that captures incoming light from a single direction on a plane.",
            "VOLUMEVolume – Light probe that captures low frequency lighting inside a volume.",
            "radius(float in[0,inf],(optional)) – Radius",
            "enter_editmode(boolean,(optional)) – Enter Edit Mode, Enter edit mode when adding this object",
            "align(enum in['WORLD','VIEW','CURSOR'],(optional)) –Align, The alignment of the new objectWORLDWorld – Align the new object to the world.VIEWView – Align the new object to the view.CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "WORLDWorld – Align the new object to the world.",
            "VIEWView – Align the new object to the view.",
            "CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "location(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Location, Location for the newly added object",
            "rotation(mathutils.Eulerrotation of 3 items in [-inf, inf], (optional)) – Rotation, Rotation for the newly added object",
            "scale(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Scale, Scale for the newly added object"
        ]
    },
    {
        "function_id": "bpy.ops.object.lightprobe_cache_bake",
        "signature": "bpy.ops.object.lightprobe_cache_bake(subset='ALL')#",
        "description": "Bake irradiance volume light cache",
        "parameters": [
            "subset='ALL'"
        ],
        "parameter_descriptions": [
            "ALLAll Volumes – Bake all light probe volumes.",
            "SELECTEDSelected Only – Only bake selected light probe volumes.",
            "ACTIVEActive Only – Only bake the active light probe volume."
        ]
    },
    {
        "function_id": "bpy.ops.object.lightprobe_cache_free",
        "signature": "bpy.ops.object.lightprobe_cache_free(subset='SELECTED')#",
        "description": "Delete cached indirect lighting",
        "parameters": [
            "subset='SELECTED'"
        ],
        "parameter_descriptions": [
            "ALLAll Light Probes – Delete all light probes’ baked lighting data.",
            "SELECTEDSelected Only – Only delete selected light probes’ baked lighting data.",
            "ACTIVEActive Only – Only delete the active light probe’s baked lighting data."
        ]
    },
    {
        "function_id": "bpy.ops.object.lineart_bake_strokes",
        "signature": "bpy.ops.object.lineart_bake_strokes()#",
        "description": "Bake Line Art for current Grease Pencil object",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.object.lineart_bake_strokes_all",
        "signature": "bpy.ops.object.lineart_bake_strokes_all()#",
        "description": "Bake all Grease Pencil objects that have a Line Art modifier",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.object.lineart_clear",
        "signature": "bpy.ops.object.lineart_clear()#",
        "description": "Clear all strokes in current Grease Pencil object",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.object.lineart_clear_all",
        "signature": "bpy.ops.object.lineart_clear_all()#",
        "description": "Clear all strokes in all Grease Pencil objects that have a Line Art modifier",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.object.link_to_collection",
        "signature": "bpy.ops.object.link_to_collection(collection_index=-1,is_new=False,new_collection_name='')#",
        "description": "Link objects to a collection",
        "parameters": [
            "collection_index=-1",
            "is_new=False",
            "new_collection_name=''"
        ],
        "parameter_descriptions": [
            "collection_index(int in[-1,inf],(optional)) – Collection Index, Index of the collection to move to",
            "is_new(boolean,(optional)) – New, Move objects to a new collection",
            "new_collection_name(string,(optional,never None)) – Name, Name of the newly added collection"
        ]
    },
    {
        "function_id": "bpy.ops.object.location_clear",
        "signature": "bpy.ops.object.location_clear(clear_delta=False)#",
        "description": "Clear the object’s location",
        "parameters": [
            "clear_delta=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.object.make_dupli_face",
        "signature": "bpy.ops.object.make_dupli_face()#",
        "description": "Convert objects into instanced faces",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.object.make_links_data",
        "signature": "bpy.ops.object.make_links_data(type='OBDATA')#",
        "description": "Transfer data from active object to selected objects",
        "parameters": [
            "type='OBDATA'"
        ],
        "parameter_descriptions": [
            "OBDATALink Object Data – Replace assigned Object Data.",
            "MATERIALLink Materials – Replace assigned Materials.",
            "ANIMATIONLink Animation Data – Replace assigned Animation Data.",
            "GROUPSLink Collections – Replace assigned Collections.",
            "DUPLICOLLECTIONLink Instance Collection – Replace assigned Collection Instance.",
            "FONTSLink Fonts to Text – Replace Text object Fonts.",
            "MODIFIERSCopy Modifiers – Replace Modifiers.",
            "EFFECTSCopy Grease Pencil Effects – Replace Grease Pencil Effects."
        ]
    },
    {
        "function_id": "bpy.ops.object.make_links_scene",
        "signature": "bpy.ops.object.make_links_scene(scene='')#",
        "description": "Link selection to another scene",
        "parameters": [
            "scene=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.object.make_local",
        "signature": "bpy.ops.object.make_local(type='SELECT_OBJECT')#",
        "description": "Make library linked data-blocks local to this file",
        "parameters": [
            "type='SELECT_OBJECT'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.object.make_override_library",
        "signature": "bpy.ops.object.make_override_library(collection=0)#",
        "description": "Create a local override of the selected linked objects, and their hierarchy of dependencies",
        "parameters": [
            "collection=0"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.object.make_single_user",
        "signature": "bpy.ops.object.make_single_user(type='SELECTED_OBJECTS',object=False,obdata=False,material=False,animation=False,obdata_animation=False)#",
        "description": "Make linked data local to each object",
        "parameters": [
            "type='SELECTED_OBJECTS'",
            "object=False",
            "obdata=False",
            "material=False",
            "animation=False",
            "obdata_animation=False"
        ],
        "parameter_descriptions": [
            "type(enum in['SELECTED_OBJECTS','ALL'],(optional)) – Type",
            "object(boolean,(optional)) – Object, Make single user objects",
            "obdata(boolean,(optional)) – Object Data, Make single user object data",
            "material(boolean,(optional)) – Materials, Make materials local to each data-block",
            "animation(boolean,(optional)) – Object Animation, Make object animation data local to each object",
            "obdata_animation(boolean,(optional)) – Object Data Animation, Make object data (mesh, curve etc.) animation data local to each object"
        ]
    },
    {
        "function_id": "bpy.ops.object.material_slot_add",
        "signature": "bpy.ops.object.material_slot_add()#",
        "description": "Add a new material slot",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.object.material_slot_assign",
        "signature": "bpy.ops.object.material_slot_assign()#",
        "description": "Assign active material slot to selection",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.object.material_slot_copy",
        "signature": "bpy.ops.object.material_slot_copy()#",
        "description": "Copy material to selected objects",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.object.material_slot_deselect",
        "signature": "bpy.ops.object.material_slot_deselect()#",
        "description": "Deselect by active material slot",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.object.material_slot_move",
        "signature": "bpy.ops.object.material_slot_move(direction='UP')#",
        "description": "Move the active material up/down in the list",
        "parameters": [
            "direction='UP'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.object.material_slot_remove",
        "signature": "bpy.ops.object.material_slot_remove()#",
        "description": "Remove the selected material slot",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.object.material_slot_remove_unused",
        "signature": "bpy.ops.object.material_slot_remove_unused()#",
        "description": "Remove unused material slots",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.object.material_slot_select",
        "signature": "bpy.ops.object.material_slot_select()#",
        "description": "Select by active material slot",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.object.meshdeform_bind",
        "signature": "bpy.ops.object.meshdeform_bind(modifier='')#",
        "description": "Bind mesh to cage in mesh deform modifier",
        "parameters": [
            "modifier=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.object.metaball_add",
        "signature": "bpy.ops.object.metaball_add(type='BALL',radius=2.0,enter_editmode=False,align='WORLD',location=(0.0,0.0,0.0),rotation=(0.0,0.0,0.0),scale=(0.0,0.0,0.0))#",
        "description": "Add an metaball object to the scene",
        "parameters": [
            "type='BALL'",
            "radius=2.0",
            "enter_editmode=False",
            "align='WORLD'",
            "location=(0.0,0.0,0.0)",
            "rotation=(0.0,0.0,0.0)",
            "scale=(0.0,0.0,0.0)"
        ],
        "parameter_descriptions": [
            "type(enum inMetaelem Type Items, (optional)) – Primitive",
            "radius(float in[0,inf],(optional)) – Radius",
            "enter_editmode(boolean,(optional)) – Enter Edit Mode, Enter edit mode when adding this object",
            "align(enum in['WORLD','VIEW','CURSOR'],(optional)) –Align, The alignment of the new objectWORLDWorld – Align the new object to the world.VIEWView – Align the new object to the view.CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "WORLDWorld – Align the new object to the world.",
            "VIEWView – Align the new object to the view.",
            "CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "location(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Location, Location for the newly added object",
            "rotation(mathutils.Eulerrotation of 3 items in [-inf, inf], (optional)) – Rotation, Rotation for the newly added object",
            "scale(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Scale, Scale for the newly added object"
        ]
    },
    {
        "function_id": "bpy.ops.object.mode_set",
        "signature": "bpy.ops.object.mode_set(mode='OBJECT',toggle=False)#",
        "description": "Sets the object interaction mode",
        "parameters": [
            "mode='OBJECT'",
            "toggle=False"
        ],
        "parameter_descriptions": [
            "mode(enum inObject Mode Items, (optional)) – Mode",
            "toggle(boolean,(optional)) – Toggle"
        ]
    },
    {
        "function_id": "bpy.ops.object.mode_set_with_submode",
        "signature": "bpy.ops.object.mode_set_with_submode(mode='OBJECT',toggle=False,mesh_select_mode={})#",
        "description": "Sets the object interaction mode",
        "parameters": [
            "mode='OBJECT'",
            "toggle=False",
            "mesh_select_mode={}"
        ],
        "parameter_descriptions": [
            "mode(enum inObject Mode Items, (optional)) – Mode",
            "toggle(boolean,(optional)) – Toggle",
            "mesh_select_mode(enum set inMesh Select Mode Items, (optional)) – Mesh Mode"
        ]
    },
    {
        "function_id": "bpy.ops.object.modifier_add",
        "signature": "bpy.ops.object.modifier_add(type='SUBSURF',use_selected_objects=False)#",
        "description": "Add a procedural operation/effect to the active object",
        "parameters": [
            "type='SUBSURF'",
            "use_selected_objects=False"
        ],
        "parameter_descriptions": [
            "type(enum inObject Modifier Type Items, (optional)) – Type",
            "use_selected_objects(boolean,(optional)) – Selected Objects, Affect all selected objects instead of just the active object"
        ]
    },
    {
        "function_id": "bpy.ops.object.modifier_add_node_group",
        "signature": "bpy.ops.object.modifier_add_node_group(asset_library_type='LOCAL',asset_library_identifier='',relative_asset_identifier='',session_uid=0,use_selected_objects=False)#",
        "description": "Add a procedural operation/effect to the active object",
        "parameters": [
            "asset_library_type='LOCAL'",
            "asset_library_identifier=''",
            "relative_asset_identifier=''",
            "session_uid=0",
            "use_selected_objects=False"
        ],
        "parameter_descriptions": [
            "asset_library_type(enum inAsset Library Type Items, (optional)) – Asset Library Type",
            "asset_library_identifier(string,(optional,never None)) – Asset Library Identifier",
            "relative_asset_identifier(string,(optional,never None)) – Relative Asset Identifier",
            "session_uid(int in[-inf,inf],(optional)) – Session UID, Session UID of the data-block to use by the operator",
            "use_selected_objects(boolean,(optional)) – Selected Objects, Affect all selected objects instead of just the active object"
        ]
    },
    {
        "function_id": "bpy.ops.object.modifier_apply",
        "signature": "bpy.ops.object.modifier_apply(modifier='',report=False,merge_customdata=True,single_user=False,use_selected_objects=False)#",
        "description": "Apply modifier and remove from the stack",
        "parameters": [
            "modifier=''",
            "report=False",
            "merge_customdata=True",
            "single_user=False",
            "use_selected_objects=False"
        ],
        "parameter_descriptions": [
            "modifier(string,(optional,never None)) – Modifier, Name of the modifier to edit",
            "report(boolean,(optional)) – Report, Create a notification after the operation",
            "merge_customdata(boolean,(optional)) – Merge UVs, For mesh objects, merge UV coordinates that share a vertex to account for imprecision in some modifiers",
            "single_user(boolean,(optional)) – Make Data Single User, Make the object’s data single user if needed",
            "use_selected_objects(boolean,(optional)) – Selected Objects, Affect all selected objects instead of just the active object"
        ]
    },
    {
        "function_id": "bpy.ops.object.modifier_apply_as_shapekey",
        "signature": "bpy.ops.object.modifier_apply_as_shapekey(keep_modifier=False,modifier='',report=False)#",
        "description": "Apply modifier as a new shape key and remove from the stack",
        "parameters": [
            "keep_modifier=False",
            "modifier=''",
            "report=False"
        ],
        "parameter_descriptions": [
            "keep_modifier(boolean,(optional)) – Keep Modifier, Do not remove the modifier from stack",
            "modifier(string,(optional,never None)) – Modifier, Name of the modifier to edit",
            "report(boolean,(optional)) – Report, Create a notification after the operation"
        ]
    },
    {
        "function_id": "bpy.ops.object.modifier_convert",
        "signature": "bpy.ops.object.modifier_convert(modifier='')#",
        "description": "Convert particles to a mesh object",
        "parameters": [
            "modifier=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.object.modifier_copy",
        "signature": "bpy.ops.object.modifier_copy(modifier='',use_selected_objects=False)#",
        "description": "Duplicate modifier at the same position in the stack",
        "parameters": [
            "modifier=''",
            "use_selected_objects=False"
        ],
        "parameter_descriptions": [
            "modifier(string,(optional,never None)) – Modifier, Name of the modifier to edit",
            "use_selected_objects(boolean,(optional)) – Selected Objects, Affect all selected objects instead of just the active object"
        ]
    },
    {
        "function_id": "bpy.ops.object.modifier_copy_to_selected",
        "signature": "bpy.ops.object.modifier_copy_to_selected(modifier='')#",
        "description": "Copy the modifier from the active object to all selected objects",
        "parameters": [
            "modifier=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.object.modifier_move_down",
        "signature": "bpy.ops.object.modifier_move_down(modifier='')#",
        "description": "Move modifier down in the stack",
        "parameters": [
            "modifier=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.object.modifier_move_to_index",
        "signature": "bpy.ops.object.modifier_move_to_index(modifier='',index=0,use_selected_objects=False)#",
        "description": "Change the modifier’s index in the stack so it evaluates after the set number of others",
        "parameters": [
            "modifier=''",
            "index=0",
            "use_selected_objects=False"
        ],
        "parameter_descriptions": [
            "modifier(string,(optional,never None)) – Modifier, Name of the modifier to edit",
            "index(int in[0,inf],(optional)) – Index, The index to move the modifier to",
            "use_selected_objects(boolean,(optional)) – Selected Objects, Affect all selected objects instead of just the active object"
        ]
    },
    {
        "function_id": "bpy.ops.object.modifier_move_up",
        "signature": "bpy.ops.object.modifier_move_up(modifier='')#",
        "description": "Move modifier up in the stack",
        "parameters": [
            "modifier=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.object.modifier_remove",
        "signature": "bpy.ops.object.modifier_remove(modifier='',report=False,use_selected_objects=False)#",
        "description": "Remove a modifier from the active object",
        "parameters": [
            "modifier=''",
            "report=False",
            "use_selected_objects=False"
        ],
        "parameter_descriptions": [
            "modifier(string,(optional,never None)) – Modifier, Name of the modifier to edit",
            "report(boolean,(optional)) – Report, Create a notification after the operation",
            "use_selected_objects(boolean,(optional)) – Selected Objects, Affect all selected objects instead of just the active object"
        ]
    },
    {
        "function_id": "bpy.ops.object.modifier_set_active",
        "signature": "bpy.ops.object.modifier_set_active(modifier='')#",
        "description": "Activate the modifier to use as the context",
        "parameters": [
            "modifier=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.object.modifiers_clear",
        "signature": "bpy.ops.object.modifiers_clear()#",
        "description": "Clear all modifiers from the selected objects",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.object.modifiers_copy_to_selected",
        "signature": "bpy.ops.object.modifiers_copy_to_selected()#",
        "description": "Copy modifiers to other selected objects",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.object.move_to_collection",
        "signature": "bpy.ops.object.move_to_collection(collection_index=-1,is_new=False,new_collection_name='')#",
        "description": "Move objects to a collection",
        "parameters": [
            "collection_index=-1",
            "is_new=False",
            "new_collection_name=''"
        ],
        "parameter_descriptions": [
            "collection_index(int in[-1,inf],(optional)) – Collection Index, Index of the collection to move to",
            "is_new(boolean,(optional)) – New, Move objects to a new collection",
            "new_collection_name(string,(optional,never None)) – Name, Name of the newly added collection"
        ]
    },
    {
        "function_id": "bpy.ops.object.multires_base_apply",
        "signature": "bpy.ops.object.multires_base_apply(modifier='')#",
        "description": "Modify the base mesh to conform to the displaced mesh",
        "parameters": [
            "modifier=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.object.multires_external_pack",
        "signature": "bpy.ops.object.multires_external_pack()#",
        "description": "Pack displacements from an external file",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.object.multires_external_save",
        "signature": "bpy.ops.object.multires_external_save(filepath='',hide_props_region=True,check_existing=True,filter_blender=False,filter_backup=False,filter_image=False,filter_movie=False,filter_python=False,filter_font=False,filter_sound=False,filter_text=False,filter_archive=False,filter_btx=True,filter_collada=False,filter_alembic=False,filter_usd=False,filter_obj=False,filter_volume=False,filter_folder=True,filter_blenlib=False,filemode=9,relative_path=True,display_type='DEFAULT',sort_method='',modifier='')#",
        "description": "Save displacements to an external file",
        "parameters": [
            "filepath=''",
            "hide_props_region=True",
            "check_existing=True",
            "filter_blender=False",
            "filter_backup=False",
            "filter_image=False",
            "filter_movie=False",
            "filter_python=False",
            "filter_font=False",
            "filter_sound=False",
            "filter_text=False",
            "filter_archive=False",
            "filter_btx=True",
            "filter_collada=False",
            "filter_alembic=False",
            "filter_usd=False",
            "filter_obj=False",
            "filter_volume=False",
            "filter_folder=True",
            "filter_blenlib=False",
            "filemode=9",
            "relative_path=True",
            "display_type='DEFAULT'",
            "sort_method=''",
            "modifier=''"
        ],
        "parameter_descriptions": [
            "filepath(string,(optional,never None)) – File Path, Path to file",
            "hide_props_region(boolean,(optional)) – Hide Operator Properties, Collapse the region displaying the operator settings",
            "check_existing(boolean,(optional)) – Check Existing, Check and warn on overwriting existing files",
            "filter_blender(boolean,(optional)) – Filter .blend files",
            "filter_backup(boolean,(optional)) – Filter .blend files",
            "filter_image(boolean,(optional)) – Filter image files",
            "filter_movie(boolean,(optional)) – Filter movie files",
            "filter_python(boolean,(optional)) – Filter Python files",
            "filter_font(boolean,(optional)) – Filter font files",
            "filter_sound(boolean,(optional)) – Filter sound files",
            "filter_text(boolean,(optional)) – Filter text files",
            "filter_archive(boolean,(optional)) – Filter archive files",
            "filter_btx(boolean,(optional)) – Filter btx files",
            "filter_collada(boolean,(optional)) – Filter COLLADA files",
            "filter_alembic(boolean,(optional)) – Filter Alembic files",
            "filter_usd(boolean,(optional)) – Filter USD files",
            "filter_obj(boolean,(optional)) – Filter OBJ files",
            "filter_volume(boolean,(optional)) – Filter OpenVDB volume files",
            "filter_folder(boolean,(optional)) – Filter folders",
            "filter_blenlib(boolean,(optional)) – Filter Blender IDs",
            "filemode(int in[1,9],(optional)) – File Browser Mode, The setting for the file browser mode to load a .blend file, a library or a special file",
            "relative_path(boolean,(optional)) – Relative Path, Select the file relative to the blend file",
            "display_type(enum in['DEFAULT','LIST_VERTICAL','LIST_HORIZONTAL','THUMBNAIL'],(optional)) –Display TypeDEFAULTDefault – Automatically determine display type for files.LIST_VERTICALShort List – Display files as short list.LIST_HORIZONTALLong List – Display files as a detailed list.THUMBNAILThumbnails – Display files as thumbnails.",
            "DEFAULTDefault – Automatically determine display type for files.",
            "LIST_VERTICALShort List – Display files as short list.",
            "LIST_HORIZONTALLong List – Display files as a detailed list.",
            "THUMBNAILThumbnails – Display files as thumbnails.",
            "sort_method(enum in[],(optional)) – File sorting mode",
            "modifier(string,(optional,never None)) – Modifier, Name of the modifier to edit"
        ]
    },
    {
        "function_id": "bpy.ops.object.multires_higher_levels_delete",
        "signature": "bpy.ops.object.multires_higher_levels_delete(modifier='')#",
        "description": "Deletes the higher resolution mesh, potential loss of detail",
        "parameters": [
            "modifier=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.object.multires_rebuild_subdiv",
        "signature": "bpy.ops.object.multires_rebuild_subdiv(modifier='')#",
        "description": "Rebuilds all possible subdivisions levels to generate a lower resolution base mesh",
        "parameters": [
            "modifier=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.object.multires_reshape",
        "signature": "bpy.ops.object.multires_reshape(modifier='')#",
        "description": "Copy vertex coordinates from other object",
        "parameters": [
            "modifier=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.object.multires_subdivide",
        "signature": "bpy.ops.object.multires_subdivide(modifier='',mode='CATMULL_CLARK')#",
        "description": "Add a new level of subdivision",
        "parameters": [
            "modifier=''",
            "mode='CATMULL_CLARK'"
        ],
        "parameter_descriptions": [
            "modifier(string,(optional,never None)) – Modifier, Name of the modifier to edit",
            "mode(enum in['CATMULL_CLARK','SIMPLE','LINEAR'],(optional)) –Subdivision Mode, How the mesh is going to be subdivided to create a new levelCATMULL_CLARKCatmull-Clark – Create a new level using Catmull-Clark subdivisions.SIMPLESimple – Create a new level using simple subdivisions.LINEARLinear – Create a new level using linear interpolation of the sculpted displacement.",
            "CATMULL_CLARKCatmull-Clark – Create a new level using Catmull-Clark subdivisions.",
            "SIMPLESimple – Create a new level using simple subdivisions.",
            "LINEARLinear – Create a new level using linear interpolation of the sculpted displacement."
        ]
    },
    {
        "function_id": "bpy.ops.object.multires_unsubdivide",
        "signature": "bpy.ops.object.multires_unsubdivide(modifier='')#",
        "description": "Rebuild a lower subdivision level of the current base mesh",
        "parameters": [
            "modifier=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.object.ocean_bake",
        "signature": "bpy.ops.object.ocean_bake(modifier='',free=False)#",
        "description": "Bake an image sequence of ocean data",
        "parameters": [
            "modifier=''",
            "free=False"
        ],
        "parameter_descriptions": [
            "modifier(string,(optional,never None)) – Modifier, Name of the modifier to edit",
            "free(boolean,(optional)) – Free, Free the bake, rather than generating it"
        ]
    },
    {
        "function_id": "bpy.ops.object.origin_clear",
        "signature": "bpy.ops.object.origin_clear()#",
        "description": "Clear the object’s origin",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.object.origin_set",
        "signature": "bpy.ops.object.origin_set(type='GEOMETRY_ORIGIN',center='MEDIAN')#",
        "description": "Set the object’s origin, by either moving the data, or set to center of data, or use 3D cursor",
        "parameters": [
            "type='GEOMETRY_ORIGIN'",
            "center='MEDIAN'"
        ],
        "parameter_descriptions": [
            "type(enum in['GEOMETRY_ORIGIN','ORIGIN_GEOMETRY','ORIGIN_CURSOR','ORIGIN_CENTER_OF_MASS','ORIGIN_CENTER_OF_VOLUME'],(optional)) –TypeGEOMETRY_ORIGINGeometry to Origin – Move object geometry to object origin.ORIGIN_GEOMETRYOrigin to Geometry – Calculate the center of geometry based on the current pivot point (median, otherwise bounding box).ORIGIN_CURSOROrigin to 3D Cursor – Move object origin to position of the 3D cursor.ORIGIN_CENTER_OF_MASSOrigin to Center of Mass (Surface) – Calculate the center of mass from the surface area.ORIGIN_CENTER_OF_VOLUMEOrigin to Center of Mass (Volume) – Calculate the center of mass from the volume (must be manifold geometry with consistent normals).",
            "GEOMETRY_ORIGINGeometry to Origin – Move object geometry to object origin.",
            "ORIGIN_GEOMETRYOrigin to Geometry – Calculate the center of geometry based on the current pivot point (median, otherwise bounding box).",
            "ORIGIN_CURSOROrigin to 3D Cursor – Move object origin to position of the 3D cursor.",
            "ORIGIN_CENTER_OF_MASSOrigin to Center of Mass (Surface) – Calculate the center of mass from the surface area.",
            "ORIGIN_CENTER_OF_VOLUMEOrigin to Center of Mass (Volume) – Calculate the center of mass from the volume (must be manifold geometry with consistent normals).",
            "center(enum in['MEDIAN','BOUNDS'],(optional)) – Center"
        ]
    },
    {
        "function_id": "bpy.ops.object.parent_clear",
        "signature": "bpy.ops.object.parent_clear(type='CLEAR')#",
        "description": "Clear the object’s parenting",
        "parameters": [
            "type='CLEAR'"
        ],
        "parameter_descriptions": [
            "CLEARClear Parent – Completely clear the parenting relationship, including involved modifiers if any.",
            "CLEAR_KEEP_TRANSFORMClear and Keep Transformation – As ‘Clear Parent’, but keep the current visual transformations of the object.",
            "CLEAR_INVERSEClear Parent Inverse – Reset the transform corrections applied to the parenting relationship, does not remove parenting itself."
        ]
    },
    {
        "function_id": "bpy.ops.object.parent_inverse_apply",
        "signature": "bpy.ops.object.parent_inverse_apply()#",
        "description": "Apply the object’s parent inverse to its data",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.object.parent_no_inverse_set",
        "signature": "bpy.ops.object.parent_no_inverse_set(keep_transform=False)#",
        "description": "Set the object’s parenting without setting the inverse parent correction",
        "parameters": [
            "keep_transform=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.object.parent_set",
        "signature": "bpy.ops.object.parent_set(type='OBJECT',xmirror=False,keep_transform=False)#",
        "description": "Set the object’s parenting",
        "parameters": [
            "type='OBJECT'",
            "xmirror=False",
            "keep_transform=False"
        ],
        "parameter_descriptions": [
            "type(enum in['OBJECT','ARMATURE','ARMATURE_NAME','ARMATURE_AUTO','ARMATURE_ENVELOPE','BONE','BONE_RELATIVE','CURVE','FOLLOW','PATH_CONST','LATTICE','VERTEX','VERTEX_TRI'],(optional)) – Type",
            "xmirror(boolean,(optional)) – X Mirror, Apply weights symmetrically along X axis, for Envelope/Automatic vertex groups creation",
            "keep_transform(boolean,(optional)) – Keep Transform, Apply transformation before parenting"
        ]
    },
    {
        "function_id": "bpy.ops.object.particle_system_add",
        "signature": "bpy.ops.object.particle_system_add()#",
        "description": "Add a particle system",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.object.particle_system_remove",
        "signature": "bpy.ops.object.particle_system_remove()#",
        "description": "Remove the selected particle system",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.object.paths_calculate",
        "signature": "bpy.ops.object.paths_calculate(display_type='RANGE',range='SCENE')#",
        "description": "Generate motion paths for the selected objects",
        "parameters": [
            "display_type='RANGE'",
            "range='SCENE'"
        ],
        "parameter_descriptions": [
            "display_type(enum inMotionpath Display Type Items, (optional)) – Display type",
            "range(enum inMotionpath Range Items, (optional)) – Computation Range"
        ]
    },
    {
        "function_id": "bpy.ops.object.paths_clear",
        "signature": "bpy.ops.object.paths_clear(only_selected=False)#",
        "description": "Undocumented, considercontributing.",
        "parameters": [
            "only_selected=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.object.paths_update",
        "signature": "bpy.ops.object.paths_update()#",
        "description": "Recalculate motion paths for selected objects",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.object.paths_update_visible",
        "signature": "bpy.ops.object.paths_update_visible()#",
        "description": "Recalculate all visible motion paths for objects and poses",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.object.pointcloud_add",
        "signature": "bpy.ops.object.pointcloud_add(align='WORLD',location=(0.0,0.0,0.0),rotation=(0.0,0.0,0.0),scale=(0.0,0.0,0.0))#",
        "description": "Add a point cloud object to the scene",
        "parameters": [
            "align='WORLD'",
            "location=(0.0,0.0,0.0)",
            "rotation=(0.0,0.0,0.0)",
            "scale=(0.0,0.0,0.0)"
        ],
        "parameter_descriptions": [
            "align(enum in['WORLD','VIEW','CURSOR'],(optional)) –Align, The alignment of the new objectWORLDWorld – Align the new object to the world.VIEWView – Align the new object to the view.CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "WORLDWorld – Align the new object to the world.",
            "VIEWView – Align the new object to the view.",
            "CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "location(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Location, Location for the newly added object",
            "rotation(mathutils.Eulerrotation of 3 items in [-inf, inf], (optional)) – Rotation, Rotation for the newly added object",
            "scale(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Scale, Scale for the newly added object"
        ]
    },
    {
        "function_id": "bpy.ops.object.posemode_toggle",
        "signature": "bpy.ops.object.posemode_toggle()#",
        "description": "Enable or disable posing/selecting bones",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.object.quadriflow_remesh",
        "signature": "bpy.ops.object.quadriflow_remesh(use_mesh_symmetry=True,use_preserve_sharp=False,use_preserve_boundary=False,preserve_attributes=False,smooth_normals=False,mode='FACES',target_ratio=1.0,target_edge_length=0.1,target_faces=4000,mesh_area=-1.0,seed=0)#",
        "description": "Create a new quad based mesh using the surface data of the current mesh. All data layers will be lost",
        "parameters": [
            "use_mesh_symmetry=True",
            "use_preserve_sharp=False",
            "use_preserve_boundary=False",
            "preserve_attributes=False",
            "smooth_normals=False",
            "mode='FACES'",
            "target_ratio=1.0",
            "target_edge_length=0.1",
            "target_faces=4000",
            "mesh_area=-1.0",
            "seed=0"
        ],
        "parameter_descriptions": [
            "use_mesh_symmetry(boolean,(optional)) – Use Mesh Symmetry, Generates a symmetrical mesh using the mesh symmetry configuration",
            "use_preserve_sharp(boolean,(optional)) – Preserve Sharp, Try to preserve sharp features on the mesh",
            "use_preserve_boundary(boolean,(optional)) – Preserve Mesh Boundary, Try to preserve mesh boundary on the mesh",
            "preserve_attributes(boolean,(optional)) – Preserve Attributes, Reproject attributes onto the new mesh",
            "smooth_normals(boolean,(optional)) – Smooth Normals, Set the output mesh normals to smooth",
            "mode(enum in['RATIO','EDGE','FACES'],(optional)) –Mode, How to specify the amount of detail for the new meshRATIORatio – Specify target number of faces relative to the current mesh.EDGEEdge Length – Input target edge length in the new mesh.FACESFaces – Input target number of faces in the new mesh.",
            "RATIORatio – Specify target number of faces relative to the current mesh.",
            "EDGEEdge Length – Input target edge length in the new mesh.",
            "FACESFaces – Input target number of faces in the new mesh.",
            "target_ratio(float in[0,inf],(optional)) – Ratio, Relative number of faces compared to the current mesh",
            "target_edge_length(float in[1e-07,inf],(optional)) – Edge Length, Target edge length in the new mesh",
            "target_faces(int in[1,inf],(optional)) – Number of Faces, Approximate number of faces (quads) in the new mesh",
            "mesh_area(float in[-inf,inf],(optional)) – Old Object Face Area, This property is only used to cache the object area for later calculations",
            "seed(int in[0,inf],(optional)) – Seed, Random seed to use with the solver. Different seeds will cause the remesher to come up with different quad layouts on the mesh"
        ]
    },
    {
        "function_id": "bpy.ops.object.quick_explode",
        "signature": "bpy.ops.object.quick_explode(style='EXPLODE',amount=100,frame_duration=50,frame_start=1,frame_end=10,velocity=1.0,fade=True)#",
        "description": "Make selected objects explode",
        "parameters": [
            "style='EXPLODE'",
            "amount=100",
            "frame_duration=50",
            "frame_start=1",
            "frame_end=10",
            "velocity=1.0",
            "fade=True"
        ],
        "parameter_descriptions": [
            "style(enum in['EXPLODE','BLEND'],(optional)) – Explode Style",
            "amount(int in[2,10000],(optional)) – Number of Pieces",
            "frame_duration(int in[1,300000],(optional)) – Duration",
            "frame_start(int in[1,300000],(optional)) – Start Frame",
            "frame_end(int in[1,300000],(optional)) – End Frame",
            "velocity(float in[0,300000],(optional)) – Outwards Velocity",
            "fade(boolean,(optional)) – Fade, Fade the pieces over time"
        ]
    },
    {
        "function_id": "bpy.ops.object.quick_fur",
        "signature": "bpy.ops.object.quick_fur(density='MEDIUM',length=0.1,radius=0.001,view_percentage=1.0,apply_hair_guides=True,use_noise=True,use_frizz=True)#",
        "description": "Add a fur setup to the selected objects",
        "parameters": [
            "density='MEDIUM'",
            "length=0.1",
            "radius=0.001",
            "view_percentage=1.0",
            "apply_hair_guides=True",
            "use_noise=True",
            "use_frizz=True"
        ],
        "parameter_descriptions": [
            "density(enum in['LOW','MEDIUM','HIGH'],(optional)) – Density",
            "length(float in[0.001,100],(optional)) – Length",
            "radius(float in[0,10],(optional)) – Hair Radius",
            "view_percentage(float in[0,1],(optional)) – View Percentage",
            "apply_hair_guides(boolean,(optional)) – Apply Hair Guides",
            "use_noise(boolean,(optional)) – Noise",
            "use_frizz(boolean,(optional)) – Frizz"
        ]
    },
    {
        "function_id": "bpy.ops.object.quick_liquid",
        "signature": "bpy.ops.object.quick_liquid(show_flows=False)#",
        "description": "Make selected objects liquid",
        "parameters": [
            "show_flows=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.object.quick_smoke",
        "signature": "bpy.ops.object.quick_smoke(style='SMOKE',show_flows=False)#",
        "description": "Use selected objects as smoke emitters",
        "parameters": [
            "style='SMOKE'",
            "show_flows=False"
        ],
        "parameter_descriptions": [
            "style(enum in['SMOKE','FIRE','BOTH'],(optional)) – Smoke Style",
            "show_flows(boolean,(optional)) – Render Smoke Objects, Keep the smoke objects visible during rendering"
        ]
    },
    {
        "function_id": "bpy.ops.object.randomize_transform",
        "signature": "bpy.ops.object.randomize_transform(random_seed=0,use_delta=False,use_loc=True,loc=(0.0,0.0,0.0),use_rot=True,rot=(0.0,0.0,0.0),use_scale=True,scale_even=False,scale=(1.0,1.0,1.0))#",
        "description": "Randomize objects location, rotation, and scale",
        "parameters": [
            "random_seed=0",
            "use_delta=False",
            "use_loc=True",
            "loc=(0.0,0.0,0.0)",
            "use_rot=True",
            "rot=(0.0,0.0,0.0)",
            "use_scale=True",
            "scale_even=False",
            "scale=(1.0,1.0,1.0)"
        ],
        "parameter_descriptions": [
            "random_seed(int in[0,10000],(optional)) – Random Seed, Seed value for the random generator",
            "use_delta(boolean,(optional)) – Transform Delta, Randomize delta transform values instead of regular transform",
            "use_loc(boolean,(optional)) – Randomize Location, Randomize the location values",
            "loc(mathutils.Vectorof 3 items in [-100, 100], (optional)) – Location, Maximum distance the objects can spread over each axis",
            "use_rot(boolean,(optional)) – Randomize Rotation, Randomize the rotation values",
            "rot(mathutils.Eulerrotation of 3 items in [-3.14159, 3.14159], (optional)) – Rotation, Maximum rotation over each axis",
            "use_scale(boolean,(optional)) – Randomize Scale, Randomize the scale values",
            "scale_even(boolean,(optional)) – Scale Even, Use the same scale value for all axis",
            "scale(float arrayof3 items in[-100,100],(optional)) – Scale, Maximum scale randomization over each axis"
        ]
    },
    {
        "function_id": "bpy.ops.object.reset_override_library",
        "signature": "bpy.ops.object.reset_override_library()#",
        "description": "Reset the selected local overrides to their linked references values",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.object.rotation_clear",
        "signature": "bpy.ops.object.rotation_clear(clear_delta=False)#",
        "description": "Clear the object’s rotation",
        "parameters": [
            "clear_delta=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.object.scale_clear",
        "signature": "bpy.ops.object.scale_clear(clear_delta=False)#",
        "description": "Clear the object’s scale",
        "parameters": [
            "clear_delta=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.object.select_all",
        "signature": "bpy.ops.object.select_all(action='TOGGLE')#",
        "description": "Change selection of all visible objects in scene",
        "parameters": [
            "action='TOGGLE'"
        ],
        "parameter_descriptions": [
            "TOGGLEToggle – Toggle selection for all elements.",
            "SELECTSelect – Select all elements.",
            "DESELECTDeselect – Deselect all elements.",
            "INVERTInvert – Invert selection of all elements."
        ]
    },
    {
        "function_id": "bpy.ops.object.select_by_type",
        "signature": "bpy.ops.object.select_by_type(extend=False,type='MESH')#",
        "description": "Select all visible objects that are of a type",
        "parameters": [
            "extend=False",
            "type='MESH'"
        ],
        "parameter_descriptions": [
            "extend(boolean,(optional)) – Extend, Extend selection instead of deselecting everything first",
            "type(enum inObject Type Items, (optional)) – Type"
        ]
    },
    {
        "function_id": "bpy.ops.object.select_camera",
        "signature": "bpy.ops.object.select_camera(extend=False)#",
        "description": "Select the active camera",
        "parameters": [
            "extend=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.object.select_grouped",
        "signature": "bpy.ops.object.select_grouped(extend=False,type='CHILDREN_RECURSIVE')#",
        "description": "Select all visible objects grouped by various properties",
        "parameters": [
            "extend=False",
            "type='CHILDREN_RECURSIVE'"
        ],
        "parameter_descriptions": [
            "extend(boolean,(optional)) – Extend, Extend selection instead of deselecting everything first",
            "type(enum in['CHILDREN_RECURSIVE','CHILDREN','PARENT','SIBLINGS','TYPE','COLLECTION','HOOK','PASS','COLOR','KEYINGSET','LIGHT_TYPE'],(optional)) –TypeCHILDREN_RECURSIVEChildren.CHILDRENImmediate Children.PARENTParent.SIBLINGSSiblings – Shared parent.TYPEType – Shared object type.COLLECTIONCollection – Shared collection.HOOKHook.PASSPass – Render pass index.COLORColor – Object color.KEYINGSETKeying Set – Objects included in active Keying Set.LIGHT_TYPELight Type – Matching light types.",
            "CHILDREN_RECURSIVEChildren.",
            "CHILDRENImmediate Children.",
            "PARENTParent.",
            "SIBLINGSSiblings – Shared parent.",
            "TYPEType – Shared object type.",
            "COLLECTIONCollection – Shared collection.",
            "HOOKHook.",
            "PASSPass – Render pass index.",
            "COLORColor – Object color.",
            "KEYINGSETKeying Set – Objects included in active Keying Set.",
            "LIGHT_TYPELight Type – Matching light types."
        ]
    },
    {
        "function_id": "bpy.ops.object.select_hierarchy",
        "signature": "bpy.ops.object.select_hierarchy(direction='PARENT',extend=False)#",
        "description": "Select object relative to the active object’s position in the hierarchy",
        "parameters": [
            "direction='PARENT'",
            "extend=False"
        ],
        "parameter_descriptions": [
            "direction(enum in['PARENT','CHILD'],(optional)) – Direction, Direction to select in the hierarchy",
            "extend(boolean,(optional)) – Extend, Extend the existing selection"
        ]
    },
    {
        "function_id": "bpy.ops.object.select_less",
        "signature": "bpy.ops.object.select_less()#",
        "description": "Deselect objects at the boundaries of parent/child relationships",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.object.select_linked",
        "signature": "bpy.ops.object.select_linked(extend=False,type='OBDATA')#",
        "description": "Select all visible objects that are linked",
        "parameters": [
            "extend=False",
            "type='OBDATA'"
        ],
        "parameter_descriptions": [
            "extend(boolean,(optional)) – Extend, Extend selection instead of deselecting everything first",
            "type(enum in['OBDATA','MATERIAL','DUPGROUP','PARTICLE','LIBRARY','LIBRARY_OBDATA'],(optional)) – Type"
        ]
    },
    {
        "function_id": "bpy.ops.object.select_mirror",
        "signature": "bpy.ops.object.select_mirror(extend=False)#",
        "description": "Select the mirror objects of the selected object e.g. “L.sword” and “R.sword”",
        "parameters": [
            "extend=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.object.select_more",
        "signature": "bpy.ops.object.select_more()#",
        "description": "Select connected parent/child objects",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.object.select_pattern",
        "signature": "bpy.ops.object.select_pattern(pattern='*',case_sensitive=False,extend=True)#",
        "description": "Select objects matching a naming pattern",
        "parameters": [
            "pattern='*'",
            "case_sensitive=False",
            "extend=True"
        ],
        "parameter_descriptions": [
            "pattern(string,(optional,never None)) – Pattern, Name filter using ‘*’, ‘?’ and ‘[abc]’ unix style wildcards",
            "case_sensitive(boolean,(optional)) – Case Sensitive, Do a case sensitive compare",
            "extend(boolean,(optional)) – Extend, Extend the existing selection"
        ]
    },
    {
        "function_id": "bpy.ops.object.select_random",
        "signature": "bpy.ops.object.select_random(ratio=0.5,seed=0,action='SELECT')#",
        "description": "Select or deselect random visible objects",
        "parameters": [
            "ratio=0.5",
            "seed=0",
            "action='SELECT'"
        ],
        "parameter_descriptions": [
            "ratio(float in[0,1],(optional)) – Ratio, Portion of items to select randomly",
            "seed(int in[0,inf],(optional)) – Random Seed, Seed for the random number generator",
            "action(enum in['SELECT','DESELECT'],(optional)) –Action, Selection action to executeSELECTSelect – Select all elements.DESELECTDeselect – Deselect all elements.",
            "SELECTSelect – Select all elements.",
            "DESELECTDeselect – Deselect all elements."
        ]
    },
    {
        "function_id": "bpy.ops.object.select_same_collection",
        "signature": "bpy.ops.object.select_same_collection(collection='')#",
        "description": "Select object in the same collection",
        "parameters": [
            "collection=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.object.shade_auto_smooth",
        "signature": "bpy.ops.object.shade_auto_smooth(use_auto_smooth=True,angle=0.523599)#",
        "description": "Add modifier to automatically set the sharpness of mesh edges based on the angle between the neighboring faces",
        "parameters": [
            "use_auto_smooth=True",
            "angle=0.523599"
        ],
        "parameter_descriptions": [
            "use_auto_smooth(boolean,(optional)) – Auto Smooth, Add modifier to set edge sharpness automatically",
            "angle(float in[0,3.14159],(optional)) – Angle, Maximum angle between face normals that will be considered as smooth"
        ]
    },
    {
        "function_id": "bpy.ops.object.shade_flat",
        "signature": "bpy.ops.object.shade_flat(keep_sharp_edges=True)#",
        "description": "Render and display faces uniform, using face normals",
        "parameters": [
            "keep_sharp_edges=True"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.object.shade_smooth",
        "signature": "bpy.ops.object.shade_smooth(keep_sharp_edges=True)#",
        "description": "Render and display faces smooth, using interpolated vertex normals",
        "parameters": [
            "keep_sharp_edges=True"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.object.shade_smooth_by_angle",
        "signature": "bpy.ops.object.shade_smooth_by_angle(angle=0.523599,keep_sharp_edges=True)#",
        "description": "Set the sharpness of mesh edges based on the angle between the neighboring faces",
        "parameters": [
            "angle=0.523599",
            "keep_sharp_edges=True"
        ],
        "parameter_descriptions": [
            "angle(float in[0,3.14159],(optional)) – Angle, Maximum angle between face normals that will be considered as smooth",
            "keep_sharp_edges(boolean,(optional)) – Keep Sharp Edges, Only add sharp edges instead of clearing existing tags first"
        ]
    },
    {
        "function_id": "bpy.ops.object.shaderfx_add",
        "signature": "bpy.ops.object.shaderfx_add(type='FX_BLUR')#",
        "description": "Add a visual effect to the active object",
        "parameters": [
            "type='FX_BLUR'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.object.shaderfx_copy",
        "signature": "bpy.ops.object.shaderfx_copy(shaderfx='')#",
        "description": "Duplicate effect at the same position in the stack",
        "parameters": [
            "shaderfx=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.object.shaderfx_move_down",
        "signature": "bpy.ops.object.shaderfx_move_down(shaderfx='')#",
        "description": "Move effect down in the stack",
        "parameters": [
            "shaderfx=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.object.shaderfx_move_to_index",
        "signature": "bpy.ops.object.shaderfx_move_to_index(shaderfx='',index=0)#",
        "description": "Change the effect’s position in the list so it evaluates after the set number of others",
        "parameters": [
            "shaderfx=''",
            "index=0"
        ],
        "parameter_descriptions": [
            "shaderfx(string,(optional,never None)) – Shader, Name of the shaderfx to edit",
            "index(int in[0,inf],(optional)) – Index, The index to move the effect to"
        ]
    },
    {
        "function_id": "bpy.ops.object.shaderfx_move_up",
        "signature": "bpy.ops.object.shaderfx_move_up(shaderfx='')#",
        "description": "Move effect up in the stack",
        "parameters": [
            "shaderfx=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.object.shaderfx_remove",
        "signature": "bpy.ops.object.shaderfx_remove(shaderfx='',report=False)#",
        "description": "Remove a effect from the active grease pencil object",
        "parameters": [
            "shaderfx=''",
            "report=False"
        ],
        "parameter_descriptions": [
            "shaderfx(string,(optional,never None)) – Shader, Name of the shaderfx to edit",
            "report(boolean,(optional)) – Report, Create a notification after the operation"
        ]
    },
    {
        "function_id": "bpy.ops.object.shape_key_add",
        "signature": "bpy.ops.object.shape_key_add(from_mix=True)#",
        "description": "Add shape key to the object",
        "parameters": [
            "from_mix=True"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.object.shape_key_clear",
        "signature": "bpy.ops.object.shape_key_clear()#",
        "description": "Clear weights for all shape keys",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.object.shape_key_lock",
        "signature": "bpy.ops.object.shape_key_lock(action='LOCK')#",
        "description": "Change the lock state of all shape keys of active object",
        "parameters": [
            "action='LOCK'"
        ],
        "parameter_descriptions": [
            "LOCKLock – Lock all shape keys.",
            "UNLOCKUnlock – Unlock all shape keys."
        ]
    },
    {
        "function_id": "bpy.ops.object.shape_key_mirror",
        "signature": "bpy.ops.object.shape_key_mirror(use_topology=False)#",
        "description": "Mirror the current shape key along the local X axis",
        "parameters": [
            "use_topology=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.object.shape_key_move",
        "signature": "bpy.ops.object.shape_key_move(type='TOP')#",
        "description": "Move the active shape key up/down in the list",
        "parameters": [
            "type='TOP'"
        ],
        "parameter_descriptions": [
            "TOPTop – Top of the list.",
            "UPUp.",
            "DOWNDown.",
            "BOTTOMBottom – Bottom of the list."
        ]
    },
    {
        "function_id": "bpy.ops.object.shape_key_remove",
        "signature": "bpy.ops.object.shape_key_remove(all=False,apply_mix=False)#",
        "description": "Remove shape key from the object",
        "parameters": [
            "all=False",
            "apply_mix=False"
        ],
        "parameter_descriptions": [
            "all(boolean,(optional)) – All, Remove all shape keys",
            "apply_mix(boolean,(optional)) – Apply Mix, Apply current mix of shape keys to the geometry before removing them"
        ]
    },
    {
        "function_id": "bpy.ops.object.shape_key_retime",
        "signature": "bpy.ops.object.shape_key_retime()#",
        "description": "Resets the timing for absolute shape keys",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.object.shape_key_transfer",
        "signature": "bpy.ops.object.shape_key_transfer(mode='OFFSET',use_clamp=False)#",
        "description": "Copy the active shape key of another selected object to this one",
        "parameters": [
            "mode='OFFSET'",
            "use_clamp=False"
        ],
        "parameter_descriptions": [
            "mode(enum in['OFFSET','RELATIVE_FACE','RELATIVE_EDGE'],(optional)) –Transformation Mode, Relative shape positions to the new shape methodOFFSETOffset – Apply the relative positional offset.RELATIVE_FACERelative Face – Calculate relative position (using faces).RELATIVE_EDGERelative Edge – Calculate relative position (using edges).",
            "OFFSETOffset – Apply the relative positional offset.",
            "RELATIVE_FACERelative Face – Calculate relative position (using faces).",
            "RELATIVE_EDGERelative Edge – Calculate relative position (using edges).",
            "use_clamp(boolean,(optional)) – Clamp Offset, Clamp the transformation to the distance each vertex moves in the original shape"
        ]
    },
    {
        "function_id": "bpy.ops.object.simulation_nodes_cache_bake",
        "signature": "bpy.ops.object.simulation_nodes_cache_bake(selected=False)#",
        "description": "Bake simulations in geometry nodes modifiers",
        "parameters": [
            "selected=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.object.simulation_nodes_cache_calculate_to_frame",
        "signature": "bpy.ops.object.simulation_nodes_cache_calculate_to_frame(selected=False)#",
        "description": "Calculate simulations in geometry nodes modifiers from the start to current frame",
        "parameters": [
            "selected=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.object.simulation_nodes_cache_delete",
        "signature": "bpy.ops.object.simulation_nodes_cache_delete(selected=False)#",
        "description": "Delete cached/baked simulations in geometry nodes modifiers",
        "parameters": [
            "selected=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.object.skin_armature_create",
        "signature": "bpy.ops.object.skin_armature_create(modifier='')#",
        "description": "Create an armature that parallels the skin layout",
        "parameters": [
            "modifier=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.object.skin_loose_mark_clear",
        "signature": "bpy.ops.object.skin_loose_mark_clear(action='MARK')#",
        "description": "Mark/clear selected vertices as loose",
        "parameters": [
            "action='MARK'"
        ],
        "parameter_descriptions": [
            "MARKMark – Mark selected vertices as loose.",
            "CLEARClear – Set selected vertices as not loose."
        ]
    },
    {
        "function_id": "bpy.ops.object.skin_radii_equalize",
        "signature": "bpy.ops.object.skin_radii_equalize()#",
        "description": "Make skin radii of selected vertices equal on each axis",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.object.skin_root_mark",
        "signature": "bpy.ops.object.skin_root_mark()#",
        "description": "Mark selected vertices as roots",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.object.speaker_add",
        "signature": "bpy.ops.object.speaker_add(enter_editmode=False,align='WORLD',location=(0.0,0.0,0.0),rotation=(0.0,0.0,0.0),scale=(0.0,0.0,0.0))#",
        "description": "Add a speaker object to the scene",
        "parameters": [
            "enter_editmode=False",
            "align='WORLD'",
            "location=(0.0,0.0,0.0)",
            "rotation=(0.0,0.0,0.0)",
            "scale=(0.0,0.0,0.0)"
        ],
        "parameter_descriptions": [
            "enter_editmode(boolean,(optional)) – Enter Edit Mode, Enter edit mode when adding this object",
            "align(enum in['WORLD','VIEW','CURSOR'],(optional)) –Align, The alignment of the new objectWORLDWorld – Align the new object to the world.VIEWView – Align the new object to the view.CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "WORLDWorld – Align the new object to the world.",
            "VIEWView – Align the new object to the view.",
            "CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "location(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Location, Location for the newly added object",
            "rotation(mathutils.Eulerrotation of 3 items in [-inf, inf], (optional)) – Rotation, Rotation for the newly added object",
            "scale(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Scale, Scale for the newly added object"
        ]
    },
    {
        "function_id": "bpy.ops.object.subdivision_set",
        "signature": "bpy.ops.object.subdivision_set(level=1,relative=False)#",
        "description": "Sets a Subdivision Surface level (1 to 5)",
        "parameters": [
            "level=1",
            "relative=False"
        ],
        "parameter_descriptions": [
            "level(int in[-100,100],(optional)) – Level",
            "relative(boolean,(optional)) – Relative, Apply the subdivision surface level as an offset relative to the current level"
        ]
    },
    {
        "function_id": "bpy.ops.object.surfacedeform_bind",
        "signature": "bpy.ops.object.surfacedeform_bind(modifier='')#",
        "description": "Bind mesh to target in surface deform modifier",
        "parameters": [
            "modifier=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.object.text_add",
        "signature": "bpy.ops.object.text_add(radius=1.0,enter_editmode=False,align='WORLD',location=(0.0,0.0,0.0),rotation=(0.0,0.0,0.0),scale=(0.0,0.0,0.0))#",
        "description": "Add a text object to the scene",
        "parameters": [
            "radius=1.0",
            "enter_editmode=False",
            "align='WORLD'",
            "location=(0.0,0.0,0.0)",
            "rotation=(0.0,0.0,0.0)",
            "scale=(0.0,0.0,0.0)"
        ],
        "parameter_descriptions": [
            "radius(float in[0,inf],(optional)) – Radius",
            "enter_editmode(boolean,(optional)) – Enter Edit Mode, Enter edit mode when adding this object",
            "align(enum in['WORLD','VIEW','CURSOR'],(optional)) –Align, The alignment of the new objectWORLDWorld – Align the new object to the world.VIEWView – Align the new object to the view.CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "WORLDWorld – Align the new object to the world.",
            "VIEWView – Align the new object to the view.",
            "CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "location(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Location, Location for the newly added object",
            "rotation(mathutils.Eulerrotation of 3 items in [-inf, inf], (optional)) – Rotation, Rotation for the newly added object",
            "scale(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Scale, Scale for the newly added object"
        ]
    },
    {
        "function_id": "bpy.ops.object.track_clear",
        "signature": "bpy.ops.object.track_clear(type='CLEAR')#",
        "description": "Clear tracking constraint or flag from object",
        "parameters": [
            "type='CLEAR'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.object.track_set",
        "signature": "bpy.ops.object.track_set(type='DAMPTRACK')#",
        "description": "Make the object track another object, using various methods/constraints",
        "parameters": [
            "type='DAMPTRACK'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.object.transfer_mode",
        "signature": "bpy.ops.object.transfer_mode(use_flash_on_transfer=True)#",
        "description": "Switches the active object and assigns the same mode to a new one under the mouse cursor, leaving the active mode in the current one",
        "parameters": [
            "use_flash_on_transfer=True"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.object.transform_apply",
        "signature": "bpy.ops.object.transform_apply(location=True,rotation=True,scale=True,properties=True,isolate_users=False)#",
        "description": "Apply the object’s transformation to its data",
        "parameters": [
            "location=True",
            "rotation=True",
            "scale=True",
            "properties=True",
            "isolate_users=False"
        ],
        "parameter_descriptions": [
            "location(boolean,(optional)) – Location",
            "rotation(boolean,(optional)) – Rotation",
            "scale(boolean,(optional)) – Scale",
            "properties(boolean,(optional)) – Apply Properties, Modify properties such as curve vertex radius, font size and bone envelope",
            "isolate_users(boolean,(optional)) – Isolate Multi User Data, Create new object-data users if needed"
        ]
    },
    {
        "function_id": "bpy.ops.object.transform_axis_target",
        "signature": "bpy.ops.object.transform_axis_target()#",
        "description": "Interactively point cameras and lights to a location (Ctrl translates)",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.object.transform_to_mouse",
        "signature": "bpy.ops.object.transform_to_mouse(name='',session_uid=0,matrix=((0.0,0.0,0.0,0.0),(0.0,0.0,0.0,0.0),(0.0,0.0,0.0,0.0),(0.0,0.0,0.0,0.0)),drop_x=0,drop_y=0)#",
        "description": "Snap selected item(s) to the mouse location",
        "parameters": [
            "name=''",
            "session_uid=0",
            "matrix=((0.0,0.0,0.0,0.0),(0.0,0.0,0.0,0.0),(0.0,0.0,0.0,0.0),(0.0,0.0,0.0,0.0))",
            "drop_x=0",
            "drop_y=0"
        ],
        "parameter_descriptions": [
            "name(string,(optional,never None)) – Name, Object name to place (uses the active object when this and ‘session_uid’ are unset)",
            "session_uid(int in[-inf,inf],(optional)) – Session UUID, Session UUID of the object to place (uses the active object when this and ‘name’ are unset)",
            "matrix(mathutils.Matrixof 4 * 4 items in [-inf, inf], (optional)) – Matrix",
            "drop_x(int in[-inf,inf],(optional)) – Drop X, X-coordinate (screen space) to place the new object under",
            "drop_y(int in[-inf,inf],(optional)) – Drop Y, Y-coordinate (screen space) to place the new object under"
        ]
    },
    {
        "function_id": "bpy.ops.object.transforms_to_deltas",
        "signature": "bpy.ops.object.transforms_to_deltas(mode='ALL',reset_values=True)#",
        "description": "Convert normal object transforms to delta transforms, any existing delta transforms will be included as well",
        "parameters": [
            "mode='ALL'",
            "reset_values=True"
        ],
        "parameter_descriptions": [
            "mode(enum in['ALL','LOC','ROT','SCALE'],(optional)) –Mode, Which transforms to transferALLAll Transforms – Transfer location, rotation, and scale transforms.LOCLocation – Transfer location transforms only.ROTRotation – Transfer rotation transforms only.SCALEScale – Transfer scale transforms only.",
            "ALLAll Transforms – Transfer location, rotation, and scale transforms.",
            "LOCLocation – Transfer location transforms only.",
            "ROTRotation – Transfer rotation transforms only.",
            "SCALEScale – Transfer scale transforms only.",
            "reset_values(boolean,(optional)) – Reset Values, Clear transform values after transferring to deltas"
        ]
    },
    {
        "function_id": "bpy.ops.object.unlink_data",
        "signature": "bpy.ops.object.unlink_data()#",
        "description": "Undocumented, considercontributing.",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.object.vertex_group_add",
        "signature": "bpy.ops.object.vertex_group_add()#",
        "description": "Add a new vertex group to the active object",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.object.vertex_group_assign",
        "signature": "bpy.ops.object.vertex_group_assign()#",
        "description": "Assign the selected vertices to the active vertex group",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.object.vertex_group_assign_new",
        "signature": "bpy.ops.object.vertex_group_assign_new()#",
        "description": "Assign the selected vertices to a new vertex group",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.object.vertex_group_clean",
        "signature": "bpy.ops.object.vertex_group_clean(group_select_mode='',limit=0.0,keep_single=False)#",
        "description": "Remove vertex group assignments which are not required",
        "parameters": [
            "group_select_mode=''",
            "limit=0.0",
            "keep_single=False"
        ],
        "parameter_descriptions": [
            "group_select_mode(enum in[],(optional)) – Subset, Define which subset of groups shall be used",
            "limit(float in[0,1],(optional)) – Limit, Remove vertices which weight is below or equal to this limit",
            "keep_single(boolean,(optional)) – Keep Single, Keep verts assigned to at least one group when cleaning"
        ]
    },
    {
        "function_id": "bpy.ops.object.vertex_group_copy",
        "signature": "bpy.ops.object.vertex_group_copy()#",
        "description": "Make a copy of the active vertex group",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.object.vertex_group_copy_to_selected",
        "signature": "bpy.ops.object.vertex_group_copy_to_selected()#",
        "description": "Replace vertex groups of selected objects by vertex groups of active object",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.object.vertex_group_deselect",
        "signature": "bpy.ops.object.vertex_group_deselect()#",
        "description": "Deselect all selected vertices assigned to the active vertex group",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.object.vertex_group_invert",
        "signature": "bpy.ops.object.vertex_group_invert(group_select_mode='',auto_assign=True,auto_remove=True)#",
        "description": "Invert active vertex group’s weights",
        "parameters": [
            "group_select_mode=''",
            "auto_assign=True",
            "auto_remove=True"
        ],
        "parameter_descriptions": [
            "group_select_mode(enum in[],(optional)) – Subset, Define which subset of groups shall be used",
            "auto_assign(boolean,(optional)) – Add Weights, Add vertices from groups that have zero weight before inverting",
            "auto_remove(boolean,(optional)) – Remove Weights, Remove vertices from groups that have zero weight after inverting"
        ]
    },
    {
        "function_id": "bpy.ops.object.vertex_group_levels",
        "signature": "bpy.ops.object.vertex_group_levels(group_select_mode='',offset=0.0,gain=1.0)#",
        "description": "Add some offset and multiply with some gain the weights of the active vertex group",
        "parameters": [
            "group_select_mode=''",
            "offset=0.0",
            "gain=1.0"
        ],
        "parameter_descriptions": [
            "group_select_mode(enum in[],(optional)) – Subset, Define which subset of groups shall be used",
            "offset(float in[-1,1],(optional)) – Offset, Value to add to weights",
            "gain(float in[0,inf],(optional)) – Gain, Value to multiply weights by"
        ]
    },
    {
        "function_id": "bpy.ops.object.vertex_group_limit_total",
        "signature": "bpy.ops.object.vertex_group_limit_total(group_select_mode='',limit=4)#",
        "description": "Limit deform weights associated with a vertex to a specified number by removing lowest weights",
        "parameters": [
            "group_select_mode=''",
            "limit=4"
        ],
        "parameter_descriptions": [
            "group_select_mode(enum in[],(optional)) – Subset, Define which subset of groups shall be used",
            "limit(int in[1,32],(optional)) – Limit, Maximum number of deform weights"
        ]
    },
    {
        "function_id": "bpy.ops.object.vertex_group_lock",
        "signature": "bpy.ops.object.vertex_group_lock(action='TOGGLE',mask='ALL')#",
        "description": "Change the lock state of all or some vertex groups of active object",
        "parameters": [
            "action='TOGGLE'",
            "mask='ALL'"
        ],
        "parameter_descriptions": [
            "action(enum in['TOGGLE','LOCK','UNLOCK','INVERT'],(optional)) –Action, Lock action to execute on vertex groupsTOGGLEToggle – Unlock all vertex groups if there is at least one locked group, lock all in other case.LOCKLock – Lock all vertex groups.UNLOCKUnlock – Unlock all vertex groups.INVERTInvert – Invert the lock state of all vertex groups.",
            "TOGGLEToggle – Unlock all vertex groups if there is at least one locked group, lock all in other case.",
            "LOCKLock – Lock all vertex groups.",
            "UNLOCKUnlock – Unlock all vertex groups.",
            "INVERTInvert – Invert the lock state of all vertex groups.",
            "mask(enum in['ALL','SELECTED','UNSELECTED','INVERT_UNSELECTED'],(optional)) –Mask, Apply the action based on vertex group selectionALLAll – Apply action to all vertex groups.SELECTEDSelected – Apply to selected vertex groups.UNSELECTEDUnselected – Apply to unselected vertex groups.INVERT_UNSELECTEDInvert Unselected – Apply the opposite of Lock/Unlock to unselected vertex groups.",
            "ALLAll – Apply action to all vertex groups.",
            "SELECTEDSelected – Apply to selected vertex groups.",
            "UNSELECTEDUnselected – Apply to unselected vertex groups.",
            "INVERT_UNSELECTEDInvert Unselected – Apply the opposite of Lock/Unlock to unselected vertex groups."
        ]
    },
    {
        "function_id": "bpy.ops.object.vertex_group_mirror",
        "signature": "bpy.ops.object.vertex_group_mirror(mirror_weights=True,flip_group_names=True,all_groups=False,use_topology=False)#",
        "description": "Mirror vertex group, flip weights and/or names, editing only selected vertices, flipping when both sides are selected otherwise copy from unselected",
        "parameters": [
            "mirror_weights=True",
            "flip_group_names=True",
            "all_groups=False",
            "use_topology=False"
        ],
        "parameter_descriptions": [
            "mirror_weights(boolean,(optional)) – Mirror Weights, Mirror weights",
            "flip_group_names(boolean,(optional)) – Flip Group Names, Flip vertex group names",
            "all_groups(boolean,(optional)) – All Groups, Mirror all vertex groups weights",
            "use_topology(boolean,(optional)) – Topology Mirror, Use topology based mirroring (for when both sides of mesh have matching, unique topology)"
        ]
    },
    {
        "function_id": "bpy.ops.object.vertex_group_move",
        "signature": "bpy.ops.object.vertex_group_move(direction='UP')#",
        "description": "Move the active vertex group up/down in the list",
        "parameters": [
            "direction='UP'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.object.vertex_group_normalize",
        "signature": "bpy.ops.object.vertex_group_normalize()#",
        "description": "Normalize weights of the active vertex group, so that the highest ones are now 1.0",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.object.vertex_group_normalize_all",
        "signature": "bpy.ops.object.vertex_group_normalize_all(group_select_mode='',lock_active=True)#",
        "description": "Normalize all weights of all vertex groups, so that for each vertex, the sum of all weights is 1.0",
        "parameters": [
            "group_select_mode=''",
            "lock_active=True"
        ],
        "parameter_descriptions": [
            "group_select_mode(enum in[],(optional)) – Subset, Define which subset of groups shall be used",
            "lock_active(boolean,(optional)) – Lock Active, Keep the values of the active group while normalizing others"
        ]
    },
    {
        "function_id": "bpy.ops.object.vertex_group_quantize",
        "signature": "bpy.ops.object.vertex_group_quantize(group_select_mode='',steps=4)#",
        "description": "Set weights to a fixed number of steps",
        "parameters": [
            "group_select_mode=''",
            "steps=4"
        ],
        "parameter_descriptions": [
            "group_select_mode(enum in[],(optional)) – Subset, Define which subset of groups shall be used",
            "steps(int in[1,1000],(optional)) – Steps, Number of steps between 0 and 1"
        ]
    },
    {
        "function_id": "bpy.ops.object.vertex_group_remove",
        "signature": "bpy.ops.object.vertex_group_remove(all=False,all_unlocked=False)#",
        "description": "Delete the active or all vertex groups from the active object",
        "parameters": [
            "all=False",
            "all_unlocked=False"
        ],
        "parameter_descriptions": [
            "all(boolean,(optional)) – All, Remove all vertex groups",
            "all_unlocked(boolean,(optional)) – All Unlocked, Remove all unlocked vertex groups"
        ]
    },
    {
        "function_id": "bpy.ops.object.vertex_group_remove_from",
        "signature": "bpy.ops.object.vertex_group_remove_from(use_all_groups=False,use_all_verts=False)#",
        "description": "Remove the selected vertices from active or all vertex group(s)",
        "parameters": [
            "use_all_groups=False",
            "use_all_verts=False"
        ],
        "parameter_descriptions": [
            "use_all_groups(boolean,(optional)) – All Groups, Remove from all groups",
            "use_all_verts(boolean,(optional)) – All Vertices, Clear the active group"
        ]
    },
    {
        "function_id": "bpy.ops.object.vertex_group_select",
        "signature": "bpy.ops.object.vertex_group_select()#",
        "description": "Select all the vertices assigned to the active vertex group",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.object.vertex_group_set_active",
        "signature": "bpy.ops.object.vertex_group_set_active(group='')#",
        "description": "Set the active vertex group",
        "parameters": [
            "group=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.object.vertex_group_smooth",
        "signature": "bpy.ops.object.vertex_group_smooth(group_select_mode='',factor=0.5,repeat=1,expand=0.0)#",
        "description": "Smooth weights for selected vertices",
        "parameters": [
            "group_select_mode=''",
            "factor=0.5",
            "repeat=1",
            "expand=0.0"
        ],
        "parameter_descriptions": [
            "group_select_mode(enum in[],(optional)) – Subset, Define which subset of groups shall be used",
            "factor(float in[0,1],(optional)) – Factor",
            "repeat(int in[1,10000],(optional)) – Iterations",
            "expand(float in[-1,1],(optional)) – Expand/Contract, Expand/contract weights"
        ]
    },
    {
        "function_id": "bpy.ops.object.vertex_group_sort",
        "signature": "bpy.ops.object.vertex_group_sort(sort_type='NAME')#",
        "description": "Sort vertex groups",
        "parameters": [
            "sort_type='NAME'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.object.vertex_parent_set",
        "signature": "bpy.ops.object.vertex_parent_set()#",
        "description": "Parent selected objects to the selected vertices",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.object.vertex_weight_copy",
        "signature": "bpy.ops.object.vertex_weight_copy()#",
        "description": "Copy weights from active to selected",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.object.vertex_weight_delete",
        "signature": "bpy.ops.object.vertex_weight_delete(weight_group=-1)#",
        "description": "Delete this weight from the vertex (disabled if vertex group is locked)",
        "parameters": [
            "weight_group=-1"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.object.vertex_weight_normalize_active_vertex",
        "signature": "bpy.ops.object.vertex_weight_normalize_active_vertex()#",
        "description": "Normalize active vertex’s weights",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.object.vertex_weight_paste",
        "signature": "bpy.ops.object.vertex_weight_paste(weight_group=-1)#",
        "description": "Copy this group’s weight to other selected vertices (disabled if vertex group is locked)",
        "parameters": [
            "weight_group=-1"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.object.vertex_weight_set_active",
        "signature": "bpy.ops.object.vertex_weight_set_active(weight_group=-1)#",
        "description": "Set as active vertex group",
        "parameters": [
            "weight_group=-1"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.object.visual_transform_apply",
        "signature": "bpy.ops.object.visual_transform_apply()#",
        "description": "Apply the object’s visual transformation to its data",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.object.volume_add",
        "signature": "bpy.ops.object.volume_add(align='WORLD',location=(0.0,0.0,0.0),rotation=(0.0,0.0,0.0),scale=(0.0,0.0,0.0))#",
        "description": "Add a volume object to the scene",
        "parameters": [
            "align='WORLD'",
            "location=(0.0,0.0,0.0)",
            "rotation=(0.0,0.0,0.0)",
            "scale=(0.0,0.0,0.0)"
        ],
        "parameter_descriptions": [
            "align(enum in['WORLD','VIEW','CURSOR'],(optional)) –Align, The alignment of the new objectWORLDWorld – Align the new object to the world.VIEWView – Align the new object to the view.CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "WORLDWorld – Align the new object to the world.",
            "VIEWView – Align the new object to the view.",
            "CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "location(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Location, Location for the newly added object",
            "rotation(mathutils.Eulerrotation of 3 items in [-inf, inf], (optional)) – Rotation, Rotation for the newly added object",
            "scale(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Scale, Scale for the newly added object"
        ]
    },
    {
        "function_id": "bpy.ops.object.volume_import",
        "signature": "bpy.ops.object.volume_import(filepath='',directory='',files=None,hide_props_region=True,check_existing=False,filter_blender=False,filter_backup=False,filter_image=False,filter_movie=False,filter_python=False,filter_font=False,filter_sound=False,filter_text=False,filter_archive=False,filter_btx=False,filter_collada=False,filter_alembic=False,filter_usd=False,filter_obj=False,filter_volume=True,filter_folder=True,filter_blenlib=False,filemode=9,relative_path=True,display_type='DEFAULT',sort_method='',use_sequence_detection=True,align='WORLD',location=(0.0,0.0,0.0),rotation=(0.0,0.0,0.0),scale=(0.0,0.0,0.0))#",
        "description": "Import OpenVDB volume file",
        "parameters": [
            "filepath=''",
            "directory=''",
            "files=None",
            "hide_props_region=True",
            "check_existing=False",
            "filter_blender=False",
            "filter_backup=False",
            "filter_image=False",
            "filter_movie=False",
            "filter_python=False",
            "filter_font=False",
            "filter_sound=False",
            "filter_text=False",
            "filter_archive=False",
            "filter_btx=False",
            "filter_collada=False",
            "filter_alembic=False",
            "filter_usd=False",
            "filter_obj=False",
            "filter_volume=True",
            "filter_folder=True",
            "filter_blenlib=False",
            "filemode=9",
            "relative_path=True",
            "display_type='DEFAULT'",
            "sort_method=''",
            "use_sequence_detection=True",
            "align='WORLD'",
            "location=(0.0,0.0,0.0)",
            "rotation=(0.0,0.0,0.0)",
            "scale=(0.0,0.0,0.0)"
        ],
        "parameter_descriptions": [
            "filepath(string,(optional,never None)) – File Path, Path to file",
            "directory(string,(optional,never None)) – Directory, Directory of the file",
            "files(bpy_prop_collectionofOperatorFileListElement, (optional)) – Files",
            "hide_props_region(boolean,(optional)) – Hide Operator Properties, Collapse the region displaying the operator settings",
            "check_existing(boolean,(optional)) – Check Existing, Check and warn on overwriting existing files",
            "filter_blender(boolean,(optional)) – Filter .blend files",
            "filter_backup(boolean,(optional)) – Filter .blend files",
            "filter_image(boolean,(optional)) – Filter image files",
            "filter_movie(boolean,(optional)) – Filter movie files",
            "filter_python(boolean,(optional)) – Filter Python files",
            "filter_font(boolean,(optional)) – Filter font files",
            "filter_sound(boolean,(optional)) – Filter sound files",
            "filter_text(boolean,(optional)) – Filter text files",
            "filter_archive(boolean,(optional)) – Filter archive files",
            "filter_btx(boolean,(optional)) – Filter btx files",
            "filter_collada(boolean,(optional)) – Filter COLLADA files",
            "filter_alembic(boolean,(optional)) – Filter Alembic files",
            "filter_usd(boolean,(optional)) – Filter USD files",
            "filter_obj(boolean,(optional)) – Filter OBJ files",
            "filter_volume(boolean,(optional)) – Filter OpenVDB volume files",
            "filter_folder(boolean,(optional)) – Filter folders",
            "filter_blenlib(boolean,(optional)) – Filter Blender IDs",
            "filemode(int in[1,9],(optional)) – File Browser Mode, The setting for the file browser mode to load a .blend file, a library or a special file",
            "relative_path(boolean,(optional)) – Relative Path, Select the file relative to the blend file",
            "display_type(enum in['DEFAULT','LIST_VERTICAL','LIST_HORIZONTAL','THUMBNAIL'],(optional)) –Display TypeDEFAULTDefault – Automatically determine display type for files.LIST_VERTICALShort List – Display files as short list.LIST_HORIZONTALLong List – Display files as a detailed list.THUMBNAILThumbnails – Display files as thumbnails.",
            "DEFAULTDefault – Automatically determine display type for files.",
            "LIST_VERTICALShort List – Display files as short list.",
            "LIST_HORIZONTALLong List – Display files as a detailed list.",
            "THUMBNAILThumbnails – Display files as thumbnails.",
            "sort_method(enum in[],(optional)) – File sorting mode",
            "use_sequence_detection(boolean,(optional)) – Detect Sequences, Automatically detect animated sequences in selected volume files (based on file names)",
            "align(enum in['WORLD','VIEW','CURSOR'],(optional)) –Align, The alignment of the new objectWORLDWorld – Align the new object to the world.VIEWView – Align the new object to the view.CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "WORLDWorld – Align the new object to the world.",
            "VIEWView – Align the new object to the view.",
            "CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "location(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Location, Location for the newly added object",
            "rotation(mathutils.Eulerrotation of 3 items in [-inf, inf], (optional)) – Rotation, Rotation for the newly added object",
            "scale(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Scale, Scale for the newly added object"
        ]
    },
    {
        "function_id": "bpy.ops.object.voxel_remesh",
        "signature": "bpy.ops.object.voxel_remesh()#",
        "description": "Calculates a new manifold mesh based on the volume of the current mesh. All data layers will be lost",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.object.voxel_size_edit",
        "signature": "bpy.ops.object.voxel_size_edit()#",
        "description": "Modify the mesh voxel size interactively used in the voxel remesher",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.workspace.add",
        "signature": "bpy.ops.workspace.add()#",
        "description": "Add a new workspace by duplicating the current one or appending one from the user configuration",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.workspace.append_activate",
        "signature": "bpy.ops.workspace.append_activate(idname='',filepath='')#",
        "description": "Append a workspace and make it the active one in the current window",
        "parameters": [
            "idname=''",
            "filepath=''"
        ],
        "parameter_descriptions": [
            "idname(string,(optional,never None)) – Identifier, Name of the workspace to append and activate",
            "filepath(string,(optional,never None)) – Filepath, Path to the library"
        ]
    },
    {
        "function_id": "bpy.ops.workspace.delete",
        "signature": "bpy.ops.workspace.delete()#",
        "description": "Delete the active workspace",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.workspace.duplicate",
        "signature": "bpy.ops.workspace.duplicate()#",
        "description": "Add a new workspace",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.workspace.reorder_to_back",
        "signature": "bpy.ops.workspace.reorder_to_back()#",
        "description": "Reorder workspace to be last in the list",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.workspace.reorder_to_front",
        "signature": "bpy.ops.workspace.reorder_to_front()#",
        "description": "Reorder workspace to be first in the list",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.workspace.scene_pin_toggle",
        "signature": "bpy.ops.workspace.scene_pin_toggle()#",
        "description": "Remember the last used scene for the current workspace and switch to it whenever this workspace is activated again",
        "parameters": []
    },
    {
        "function_id": "bpy_extras.view3d_utils.region_2d_to_vector_3d",
        "signature": "bpy_extras.view3d_utils.region_2d_to_vector_3d(region,rv3d,coord)#",
        "description": "Return a direction vector from the viewport at the specific 2d region\ncoordinate.",
        "parameters": [
            "region",
            "rv3d",
            "coord"
        ],
        "parameter_descriptions": [
            "region(bpy.types.Region) – region of the 3D viewport, typically bpy.context.region.",
            "rv3d(bpy.types.RegionView3D) – 3D region data, typically bpy.context.space_data.region_3d.",
            "coord(2d vector) – 2d coordinates relative to the region:\n(event.mouse_region_x, event.mouse_region_y) for example."
        ]
    },
    {
        "function_id": "bpy_extras.view3d_utils.region_2d_to_origin_3d",
        "signature": "bpy_extras.view3d_utils.region_2d_to_origin_3d(region,rv3d,coord,*,clamp=None)#",
        "description": "Return the 3d view origin from the region relative 2d coords.",
        "parameters": [
            "region",
            "rv3d",
            "coord",
            "*",
            "clamp=None"
        ],
        "parameter_descriptions": [
            "region(bpy.types.Region) – region of the 3D viewport, typically bpy.context.region.",
            "rv3d(bpy.types.RegionView3D) – 3D region data, typically bpy.context.space_data.region_3d.",
            "coord(2d vector) – 2d coordinates relative to the region;\n(event.mouse_region_x, event.mouse_region_y) for example.",
            "clamp(floatorNone) – Clamp the maximum far-clip value used.\n(negative value will move the offset away from the view_location)"
        ]
    },
    {
        "function_id": "bpy_extras.view3d_utils.region_2d_to_location_3d",
        "signature": "bpy_extras.view3d_utils.region_2d_to_location_3d(region,rv3d,coord,depth_location)#",
        "description": "Return a 3d location from the region relative 2d coords, aligned withdepth_location.",
        "parameters": [
            "region",
            "rv3d",
            "coord",
            "depth_location"
        ],
        "parameter_descriptions": [
            "region(bpy.types.Region) – region of the 3D viewport, typically bpy.context.region.",
            "rv3d(bpy.types.RegionView3D) – 3D region data, typically bpy.context.space_data.region_3d.",
            "coord(2d vector) – 2d coordinates relative to the region;\n(event.mouse_region_x, event.mouse_region_y) for example.",
            "depth_location(3d vector) – the returned vectors depth is aligned with this since\nthere is no defined depth with a 2d region input."
        ]
    },
    {
        "function_id": "bpy_extras.view3d_utils.location_3d_to_region_2d",
        "signature": "bpy_extras.view3d_utils.location_3d_to_region_2d(region,rv3d,coord,*,default=None)#",
        "description": "Return theregionrelative 2d location of a 3d position.",
        "parameters": [
            "region",
            "rv3d",
            "coord",
            "*",
            "default=None"
        ],
        "parameter_descriptions": [
            "region(bpy.types.Region) – region of the 3D viewport, typically bpy.context.region.",
            "rv3d(bpy.types.RegionView3D) – 3D region data, typically bpy.context.space_data.region_3d.",
            "coord(3d vector) – 3d world-space location.",
            "default– Return this value ifcoordis behind the origin of a perspective view."
        ]
    },
    {
        "function_id": "bpy.ops.cycles.denoise_animation",
        "signature": "bpy.ops.cycles.denoise_animation(input_filepath='',output_filepath='')#",
        "description": "Denoise rendered animation sequence using current scene and view layer settings. Requires denoising data passes and output to OpenEXR multilayer files",
        "parameters": [
            "input_filepath=''",
            "output_filepath=''"
        ],
        "parameter_descriptions": [
            "input_filepath(string,(optional,never None)) – Input Filepath, File path for image to denoise. If not specified, uses the render file path and frame range from the scene",
            "output_filepath(string,(optional,never None)) – Output Filepath, If not specified, renders will be denoised in-place"
        ]
    },
    {
        "function_id": "bpy.ops.cycles.merge_images",
        "signature": "bpy.ops.cycles.merge_images(input_filepath1='',input_filepath2='',output_filepath='')#",
        "description": "Combine OpenEXR multi-layer images rendered with different sample ranges into one image with reduced noise",
        "parameters": [
            "input_filepath1=''",
            "input_filepath2=''",
            "output_filepath=''"
        ],
        "parameter_descriptions": [
            "input_filepath1(string,(optional,never None)) – Input Filepath, File path for image to merge",
            "input_filepath2(string,(optional,never None)) – Input Filepath, File path for image to merge",
            "output_filepath(string,(optional,never None)) – Output Filepath, File path for merged image"
        ]
    },
    {
        "function_id": "bpy.ops.cycles.use_shading_nodes",
        "signature": "bpy.ops.cycles.use_shading_nodes()#",
        "description": "Enable nodes on a material, world or light",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "mathutils.geometry.area_tri",
        "signature": "mathutils.geometry.area_tri(v1,v2,v3)#",
        "description": "Returns the area size of the 2D or 3D triangle defined.",
        "parameters": [
            "v1",
            "v2",
            "v3"
        ],
        "parameter_descriptions": [
            "v1(mathutils.Vector) – Point1",
            "v2(mathutils.Vector) – Point2",
            "v3(mathutils.Vector) – Point3"
        ]
    },
    {
        "function_id": "mathutils.geometry.barycentric_transform",
        "signature": "mathutils.geometry.barycentric_transform(point,tri_a1,tri_a2,tri_a3,tri_b1,tri_b2,tri_b3)#",
        "description": "Return a transformed point, the transformation is defined by 2 triangles.",
        "parameters": [
            "point",
            "tri_a1",
            "tri_a2",
            "tri_a3",
            "tri_b1",
            "tri_b2",
            "tri_b3"
        ],
        "parameter_descriptions": [
            "point(mathutils.Vector) – The point to transform.",
            "tri_a1(mathutils.Vector) – source triangle vertex.",
            "tri_a2(mathutils.Vector) – source triangle vertex.",
            "tri_a3(mathutils.Vector) – source triangle vertex.",
            "tri_b1(mathutils.Vector) – target triangle vertex.",
            "tri_b2(mathutils.Vector) – target triangle vertex.",
            "tri_b3(mathutils.Vector) – target triangle vertex."
        ]
    },
    {
        "function_id": "mathutils.geometry.box_fit_2d",
        "signature": "mathutils.geometry.box_fit_2d(points)#",
        "description": "Returns an angle that best fits the points to an axis aligned rectangle",
        "parameters": [
            "points"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "mathutils.geometry.box_pack_2d",
        "signature": "mathutils.geometry.box_pack_2d(boxes)#",
        "description": "Returns a tuple with the width and height of the packed bounding box.",
        "parameters": [
            "boxes"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "mathutils.geometry.closest_point_on_tri",
        "signature": "mathutils.geometry.closest_point_on_tri(pt,tri_p1,tri_p2,tri_p3)#",
        "description": "Takes 4 vectors: one is the point and the next 3 define the triangle.",
        "parameters": [
            "pt",
            "tri_p1",
            "tri_p2",
            "tri_p3"
        ],
        "parameter_descriptions": [
            "pt(mathutils.Vector) – Point",
            "tri_p1(mathutils.Vector) – First point of the triangle",
            "tri_p2(mathutils.Vector) – Second point of the triangle",
            "tri_p3(mathutils.Vector) – Third point of the triangle"
        ]
    },
    {
        "function_id": "mathutils.geometry.convex_hull_2d",
        "signature": "mathutils.geometry.convex_hull_2d(points)#",
        "description": "Returns a list of indices into the list given",
        "parameters": [
            "points"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "mathutils.geometry.delaunay_2d_cdt",
        "signature": "mathutils.geometry.delaunay_2d_cdt(vert_coords,edges,faces,output_type,epsilon,need_ids=True)#",
        "description": "Computes the Constrained Delaunay Triangulation of a set of vertices,\nwith edges and faces that must appear in the triangulation.\nSome triangles may be eaten away, or combined with other triangles,\naccording to output type.\nThe returned verts may be in a different order from input verts, may be moved\nslightly, and may be merged with other nearby verts.\nThe three returned orig lists give, for each of verts, edges, and faces, the list of\ninput element indices corresponding to the positionally same output element.\nFor edges, the orig indices start with the input edges and then continue\nwith the edges implied by each of the faces (n of them for an n-gon).\nIf the need_ids argument is supplied, and False, then the code skips the preparation\nof the orig arrays, which may save some time.\n:arg vert_coords: Vertex coordinates (2d)\n:type vert_coords: list ofmathutils.Vector:arg edges: Edges, as pairs of indices invert_coords:type edges: list of (int, int)\n:arg faces: Faces, each sublist is a face, as indices invert_coords(CCW oriented)\n:type faces: list of list of int\n:arg output_type: What output looks like. 0 => triangles with convex hull. 1 => triangles inside constraints. 2 => the input constraints, intersected. 3 => like 2 but detect holes and omit them from output. 4 => like 2 but with extra edges to make valid BMesh faces. 5 => like 4 but detect holes and omit them from output.\n:type output_type: intn   :arg epsilon: For nearness tests; should not be zero\n:type epsilon: float\n:arg need_ids: are the orig output arrays needed?\n:type need_args: bool\n:return: Output tuple, (vert_coords, edges, faces, orig_verts, orig_edges, orig_faces)\n:rtype: (list ofmathutils.Vector, list of (int, int), list of list of int, list of list of int, list of list of int, list of list of int)",
        "parameters": [
            "vert_coords",
            "edges",
            "faces",
            "output_type",
            "epsilon",
            "need_ids=True"
        ]
    },
    {
        "function_id": "mathutils.geometry.distance_point_to_plane",
        "signature": "mathutils.geometry.distance_point_to_plane(pt,plane_co,plane_no)#",
        "description": "Returns the signed distance between a point and a plane    (negative when below the normal).",
        "parameters": [
            "pt",
            "plane_co",
            "plane_no"
        ],
        "parameter_descriptions": [
            "pt(mathutils.Vector) – Point",
            "plane_co(mathutils.Vector) – A point on the plane",
            "plane_no(mathutils.Vector) – The direction the plane is facing"
        ]
    },
    {
        "function_id": "mathutils.geometry.interpolate_bezier",
        "signature": "mathutils.geometry.interpolate_bezier(knot1,handle1,handle2,knot2,resolution)#",
        "description": "Interpolate a bezier spline segment.",
        "parameters": [
            "knot1",
            "handle1",
            "handle2",
            "knot2",
            "resolution"
        ],
        "parameter_descriptions": [
            "knot1(mathutils.Vector) – First bezier spline point.",
            "handle1(mathutils.Vector) – First bezier spline handle.",
            "handle2(mathutils.Vector) – Second bezier spline handle.",
            "knot2(mathutils.Vector) – Second bezier spline point.",
            "resolution(int) – Number of points to return."
        ]
    },
    {
        "function_id": "mathutils.geometry.intersect_line_line",
        "signature": "mathutils.geometry.intersect_line_line(v1,v2,v3,v4)#",
        "description": "Returns a tuple with the points on each line respectively closest to the other.",
        "parameters": [
            "v1",
            "v2",
            "v3",
            "v4"
        ],
        "parameter_descriptions": [
            "v1(mathutils.Vector) – First point of the first line",
            "v2(mathutils.Vector) – Second point of the first line",
            "v3(mathutils.Vector) – First point of the second line",
            "v4(mathutils.Vector) – Second point of the second line"
        ]
    },
    {
        "function_id": "mathutils.geometry.intersect_line_line_2d",
        "signature": "mathutils.geometry.intersect_line_line_2d(lineA_p1,lineA_p2,lineB_p1,lineB_p2)#",
        "description": "Takes 2 segments (defined by 4 vectors) and returns a vector for their point of intersection or None.",
        "parameters": [
            "lineA_p1",
            "lineA_p2",
            "lineB_p1",
            "lineB_p2"
        ],
        "parameter_descriptions": [
            "lineA_p1(mathutils.Vector) – First point of the first line",
            "lineA_p2(mathutils.Vector) – Second point of the first line",
            "lineB_p1(mathutils.Vector) – First point of the second line",
            "lineB_p2(mathutils.Vector) – Second point of the second line"
        ]
    },
    {
        "function_id": "mathutils.geometry.intersect_line_plane",
        "signature": "mathutils.geometry.intersect_line_plane(line_a,line_b,plane_co,plane_no,no_flip=False)#",
        "description": "Calculate the intersection between a line (as 2 vectors) and a plane.\nReturns a vector for the intersection or None.",
        "parameters": [
            "line_a",
            "line_b",
            "plane_co",
            "plane_no",
            "no_flip=False"
        ],
        "parameter_descriptions": [
            "line_a(mathutils.Vector) – First point of the first line",
            "line_b(mathutils.Vector) – Second point of the first line",
            "plane_co(mathutils.Vector) – A point on the plane",
            "plane_no(mathutils.Vector) – The direction the plane is facing"
        ]
    },
    {
        "function_id": "mathutils.geometry.intersect_line_sphere",
        "signature": "mathutils.geometry.intersect_line_sphere(line_a,line_b,sphere_co,sphere_radius,clip=True)#",
        "description": "Takes a line (as 2 points) and a sphere (as a point and a radius) and\nreturns the intersection",
        "parameters": [
            "line_a",
            "line_b",
            "sphere_co",
            "sphere_radius",
            "clip=True"
        ],
        "parameter_descriptions": [
            "line_a(mathutils.Vector) – First point of the line",
            "line_b(mathutils.Vector) – Second point of the line",
            "sphere_co(mathutils.Vector) – The center of the sphere",
            "sphere_radius(sphere_radius) – Radius of the sphere"
        ]
    },
    {
        "function_id": "mathutils.geometry.intersect_line_sphere_2d",
        "signature": "mathutils.geometry.intersect_line_sphere_2d(line_a,line_b,sphere_co,sphere_radius,clip=True)#",
        "description": "Takes a line (as 2 points) and a sphere (as a point and a radius) and\nreturns the intersection",
        "parameters": [
            "line_a",
            "line_b",
            "sphere_co",
            "sphere_radius",
            "clip=True"
        ],
        "parameter_descriptions": [
            "line_a(mathutils.Vector) – First point of the line",
            "line_b(mathutils.Vector) – Second point of the line",
            "sphere_co(mathutils.Vector) – The center of the sphere",
            "sphere_radius(sphere_radius) – Radius of the sphere"
        ]
    },
    {
        "function_id": "mathutils.geometry.intersect_plane_plane",
        "signature": "mathutils.geometry.intersect_plane_plane(plane_a_co,plane_a_no,plane_b_co,plane_b_no)#",
        "description": "Return the intersection between two planes",
        "parameters": [
            "plane_a_co",
            "plane_a_no",
            "plane_b_co",
            "plane_b_no"
        ],
        "parameter_descriptions": [
            "plane_a_co(mathutils.Vector) – Point on the first plane",
            "plane_a_no(mathutils.Vector) – Normal of the first plane",
            "plane_b_co(mathutils.Vector) – Point on the second plane",
            "plane_b_no(mathutils.Vector) – Normal of the second plane"
        ]
    },
    {
        "function_id": "mathutils.geometry.intersect_point_line",
        "signature": "mathutils.geometry.intersect_point_line(pt,line_p1,line_p2)#",
        "description": "Takes a point and a line and returns a tuple with the closest point on the line and its distance from the first point of the line as a percentage of the length of the line.",
        "parameters": [
            "pt",
            "line_p1",
            "line_p2"
        ],
        "parameter_descriptions": [
            "pt(mathutils.Vector) – Point",
            "line_p1(mathutils.Vector) – First point of the line",
            "line_p1– Second point of the line"
        ]
    },
    {
        "function_id": "mathutils.geometry.intersect_point_quad_2d",
        "signature": "mathutils.geometry.intersect_point_quad_2d(pt,quad_p1,quad_p2,quad_p3,quad_p4)#",
        "description": "Takes 5 vectors (using only the x and y coordinates): one is the point and the next 4 define the quad,\nonly the x and y are used from the vectors. Returns 1 if the point is within the quad, otherwise 0.\nWorks only with convex quads without singular edges.",
        "parameters": [
            "pt",
            "quad_p1",
            "quad_p2",
            "quad_p3",
            "quad_p4"
        ],
        "parameter_descriptions": [
            "pt(mathutils.Vector) – Point",
            "quad_p1(mathutils.Vector) – First point of the quad",
            "quad_p2(mathutils.Vector) – Second point of the quad",
            "quad_p3(mathutils.Vector) – Third point of the quad",
            "quad_p4(mathutils.Vector) – Fourth point of the quad"
        ]
    },
    {
        "function_id": "mathutils.geometry.intersect_point_tri",
        "signature": "mathutils.geometry.intersect_point_tri(pt,tri_p1,tri_p2,tri_p3)#",
        "description": "Takes 4 vectors: one is the point and the next 3 define the triangle. Projects the point onto the triangle plane and checks if it is within the triangle.",
        "parameters": [
            "pt",
            "tri_p1",
            "tri_p2",
            "tri_p3"
        ],
        "parameter_descriptions": [
            "pt(mathutils.Vector) – Point",
            "tri_p1(mathutils.Vector) – First point of the triangle",
            "tri_p2(mathutils.Vector) – Second point of the triangle",
            "tri_p3(mathutils.Vector) – Third point of the triangle"
        ]
    },
    {
        "function_id": "mathutils.geometry.intersect_point_tri_2d",
        "signature": "mathutils.geometry.intersect_point_tri_2d(pt,tri_p1,tri_p2,tri_p3)#",
        "description": "Takes 4 vectors (using only the x and y coordinates): one is the point and the next 3 define the triangle. Returns 1 if the point is within the triangle, otherwise 0.",
        "parameters": [
            "pt",
            "tri_p1",
            "tri_p2",
            "tri_p3"
        ],
        "parameter_descriptions": [
            "pt(mathutils.Vector) – Point",
            "tri_p1(mathutils.Vector) – First point of the triangle",
            "tri_p2(mathutils.Vector) – Second point of the triangle",
            "tri_p3(mathutils.Vector) – Third point of the triangle"
        ]
    },
    {
        "function_id": "mathutils.geometry.intersect_ray_tri",
        "signature": "mathutils.geometry.intersect_ray_tri(v1,v2,v3,ray,orig,clip=True)#",
        "description": "Returns the intersection between a ray and a triangle, if possible, returns None otherwise.",
        "parameters": [
            "v1",
            "v2",
            "v3",
            "ray",
            "orig",
            "clip=True"
        ],
        "parameter_descriptions": [
            "v1(mathutils.Vector) – Point1",
            "v2(mathutils.Vector) – Point2",
            "v3(mathutils.Vector) – Point3",
            "ray(mathutils.Vector) – Direction of the projection",
            "orig(mathutils.Vector) – Origin",
            "clip(boolean) – When False, don’t restrict the intersection to the area of the triangle, use the infinite plane defined by the triangle."
        ]
    },
    {
        "function_id": "mathutils.geometry.intersect_sphere_sphere_2d",
        "signature": "mathutils.geometry.intersect_sphere_sphere_2d(p_a,radius_a,p_b,radius_b)#",
        "description": "Returns 2 points on between intersecting circles.",
        "parameters": [
            "p_a",
            "radius_a",
            "p_b",
            "radius_b"
        ],
        "parameter_descriptions": [
            "p_a(mathutils.Vector) – Center of the first circle",
            "radius_a(float) – Radius of the first circle",
            "p_b(mathutils.Vector) – Center of the second circle",
            "radius_b(float) – Radius of the second circle"
        ]
    },
    {
        "function_id": "mathutils.geometry.intersect_tri_tri_2d",
        "signature": "mathutils.geometry.intersect_tri_tri_2d(tri_a1,tri_a2,tri_a3,tri_b1,tri_b2,tri_b3)#",
        "description": "Check if two 2D triangles intersect.",
        "parameters": [
            "tri_a1",
            "tri_a2",
            "tri_a3",
            "tri_b1",
            "tri_b2",
            "tri_b3"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "mathutils.geometry.normal",
        "signature": "mathutils.geometry.normal(vectors)#",
        "description": "Returns the normal of a 3D polygon.",
        "parameters": [
            "vectors"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "mathutils.geometry.points_in_planes",
        "signature": "mathutils.geometry.points_in_planes(planes,epsilon_coplanar=1e-4,epsilon_isect=1e-6)#",
        "description": "Returns a list of points inside all planes given and a list of index values for the planes used.",
        "parameters": [
            "planes",
            "epsilon_coplanar=1e-4",
            "epsilon_isect=1e-6"
        ],
        "parameter_descriptions": [
            "planes(list ofmathutils.Vector) – List of planes (4D vectors).",
            "epsilon_coplanar(float) – Epsilon value for interpreting plane pairs as co-plannar.",
            "epsilon_isect(float) – Epsilon value for intersection."
        ]
    },
    {
        "function_id": "mathutils.geometry.tessellate_polygon",
        "signature": "mathutils.geometry.tessellate_polygon(veclist_list)#",
        "description": "Takes a list of polylines (each point a pair or triplet of numbers) and returns the point indices for a polyline filled with triangles. Does not handle degenerate geometry (such as zero-length lines due to consecutive identical points).",
        "parameters": [
            "veclist_list"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "mathutils.geometry.volume_tetrahedron",
        "signature": "mathutils.geometry.volume_tetrahedron(v1,v2,v3,v4)#",
        "description": "Return the volume formed by a tetrahedron (points can be in any order).",
        "parameters": [
            "v1",
            "v2",
            "v3",
            "v4"
        ],
        "parameter_descriptions": [
            "v1(mathutils.Vector) – Point1",
            "v2(mathutils.Vector) – Point2",
            "v3(mathutils.Vector) – Point3",
            "v4(mathutils.Vector) – Point4"
        ]
    },
    {
        "function_id": "bpy_extras.id_map_utils.get_id_reference_map",
        "signature": "bpy_extras.id_map_utils.get_id_reference_map()→Dict[bpy.types.ID,Set[bpy.types.ID]]#",
        "description": "Return a dictionary of direct datablock references for every datablock in the blend file.",
        "parameters": []
    },
    {
        "function_id": "bpy_extras.id_map_utils.get_all_referenced_ids",
        "signature": "bpy_extras.id_map_utils.get_all_referenced_ids(id:bpy.types.ID,ref_map:Dict[bpy.types.ID,Set[bpy.types.ID]])→Set[bpy.types.ID]#",
        "description": "Return a set of IDs directly or indirectly referenced by id.",
        "parameters": [
            "id:bpy.types.ID",
            "ref_map:Dict[bpy.types.ID,Set[bpy.types.ID]]"
        ]
    },
    {
        "function_id": "gpu.platform.backend_type_get",
        "signature": "gpu.platform.backend_type_get()#",
        "description": "Get actuve GPU backend.",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "gpu.platform.device_type_get",
        "signature": "gpu.platform.device_type_get()#",
        "description": "Get GPU device type.",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "gpu.platform.renderer_get",
        "signature": "gpu.platform.renderer_get()#",
        "description": "Get GPU to be used for rendering.",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "gpu.platform.vendor_get",
        "signature": "gpu.platform.vendor_get()#",
        "description": "Get GPU vendor.",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "gpu.platform.version_get",
        "signature": "gpu.platform.version_get()#",
        "description": "Get GPU driver version.",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.mball.delete_metaelems",
        "signature": "bpy.ops.mball.delete_metaelems(confirm=True)#",
        "description": "Delete selected metaball element(s)",
        "parameters": [
            "confirm=True"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.mball.duplicate_metaelems",
        "signature": "bpy.ops.mball.duplicate_metaelems()#",
        "description": "Duplicate selected metaball element(s)",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.mball.duplicate_move",
        "signature": "bpy.ops.mball.duplicate_move(MBALL_OT_duplicate_metaelems=None,TRANSFORM_OT_translate=None)#",
        "description": "Make copies of the selected metaball elements and move them",
        "parameters": [
            "MBALL_OT_duplicate_metaelems=None",
            "TRANSFORM_OT_translate=None"
        ],
        "parameter_descriptions": [
            "MBALL_OT_duplicate_metaelems(MBALL_OT_duplicate_metaelems, (optional)) – Duplicate Metaball Elements, Duplicate selected metaball element(s)",
            "TRANSFORM_OT_translate(TRANSFORM_OT_translate, (optional)) – Move, Move selected items"
        ]
    },
    {
        "function_id": "bpy.ops.mball.hide_metaelems",
        "signature": "bpy.ops.mball.hide_metaelems(unselected=False)#",
        "description": "Hide (un)selected metaball element(s)",
        "parameters": [
            "unselected=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.mball.reveal_metaelems",
        "signature": "bpy.ops.mball.reveal_metaelems(select=True)#",
        "description": "Reveal all hidden metaball elements",
        "parameters": [
            "select=True"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.mball.select_all",
        "signature": "bpy.ops.mball.select_all(action='TOGGLE')#",
        "description": "Change selection of all metaball elements",
        "parameters": [
            "action='TOGGLE'"
        ],
        "parameter_descriptions": [
            "TOGGLEToggle – Toggle selection for all elements.",
            "SELECTSelect – Select all elements.",
            "DESELECTDeselect – Deselect all elements.",
            "INVERTInvert – Invert selection of all elements."
        ]
    },
    {
        "function_id": "bpy.ops.mball.select_random_metaelems",
        "signature": "bpy.ops.mball.select_random_metaelems(ratio=0.5,seed=0,action='SELECT')#",
        "description": "Randomly select metaball elements",
        "parameters": [
            "ratio=0.5",
            "seed=0",
            "action='SELECT'"
        ],
        "parameter_descriptions": [
            "ratio(float in[0,1],(optional)) – Ratio, Portion of items to select randomly",
            "seed(int in[0,inf],(optional)) – Random Seed, Seed for the random number generator",
            "action(enum in['SELECT','DESELECT'],(optional)) –Action, Selection action to executeSELECTSelect – Select all elements.DESELECTDeselect – Deselect all elements.",
            "SELECTSelect – Select all elements.",
            "DESELECTDeselect – Deselect all elements."
        ]
    },
    {
        "function_id": "bpy.ops.mball.select_similar",
        "signature": "bpy.ops.mball.select_similar(type='TYPE',threshold=0.1)#",
        "description": "Select similar metaballs by property types",
        "parameters": [
            "type='TYPE'",
            "threshold=0.1"
        ],
        "parameter_descriptions": [
            "type(enum in['TYPE','RADIUS','STIFFNESS','ROTATION'],(optional)) – Type",
            "threshold(float in[0,inf],(optional)) – Threshold"
        ]
    },
    {
        "function_id": "bpy.ops.rigidbody.bake_to_keyframes",
        "signature": "bpy.ops.rigidbody.bake_to_keyframes(frame_start=1,frame_end=250,step=1)#",
        "description": "Bake rigid body transformations of selected objects to keyframes",
        "parameters": [
            "frame_start=1",
            "frame_end=250",
            "step=1"
        ],
        "parameter_descriptions": [
            "frame_start(int in[0,300000],(optional)) – Start Frame, Start frame for baking",
            "frame_end(int in[1,300000],(optional)) – End Frame, End frame for baking",
            "step(int in[1,120],(optional)) – Frame Step, Frame Step"
        ]
    },
    {
        "function_id": "bpy.ops.rigidbody.connect",
        "signature": "bpy.ops.rigidbody.connect(con_type='FIXED',pivot_type='CENTER',connection_pattern='SELECTED_TO_ACTIVE')#",
        "description": "Create rigid body constraints between selected rigid bodies",
        "parameters": [
            "con_type='FIXED'",
            "pivot_type='CENTER'",
            "connection_pattern='SELECTED_TO_ACTIVE'"
        ],
        "parameter_descriptions": [
            "con_type(enum in['FIXED','POINT','HINGE','SLIDER','PISTON','GENERIC','GENERIC_SPRING','MOTOR'],(optional)) –Type, Type of generated constraintFIXEDFixed – Glue rigid bodies together.POINTPoint – Constrain rigid bodies to move around common pivot point.HINGEHinge – Restrict rigid body rotation to one axis.SLIDERSlider – Restrict rigid body translation to one axis.PISTONPiston – Restrict rigid body translation and rotation to one axis.GENERICGeneric – Restrict translation and rotation to specified axes.GENERIC_SPRINGGeneric Spring – Restrict translation and rotation to specified axes with springs.MOTORMotor – Drive rigid body around or along an axis.",
            "FIXEDFixed – Glue rigid bodies together.",
            "POINTPoint – Constrain rigid bodies to move around common pivot point.",
            "HINGEHinge – Restrict rigid body rotation to one axis.",
            "SLIDERSlider – Restrict rigid body translation to one axis.",
            "PISTONPiston – Restrict rigid body translation and rotation to one axis.",
            "GENERICGeneric – Restrict translation and rotation to specified axes.",
            "GENERIC_SPRINGGeneric Spring – Restrict translation and rotation to specified axes with springs.",
            "MOTORMotor – Drive rigid body around or along an axis.",
            "pivot_type(enum in['CENTER','ACTIVE','SELECTED'],(optional)) –Location, Constraint pivot locationCENTERCenter – Pivot location is between the constrained rigid bodies.ACTIVEActive – Pivot location is at the active object position.SELECTEDSelected – Pivot location is at the selected object position.",
            "CENTERCenter – Pivot location is between the constrained rigid bodies.",
            "ACTIVEActive – Pivot location is at the active object position.",
            "SELECTEDSelected – Pivot location is at the selected object position.",
            "connection_pattern(enum in['SELECTED_TO_ACTIVE','CHAIN_DISTANCE'],(optional)) –Connection Pattern, Pattern used to connect objectsSELECTED_TO_ACTIVESelected to Active – Connect selected objects to the active object.CHAIN_DISTANCEChain by Distance – Connect objects as a chain based on distance, starting at the active object.",
            "SELECTED_TO_ACTIVESelected to Active – Connect selected objects to the active object.",
            "CHAIN_DISTANCEChain by Distance – Connect objects as a chain based on distance, starting at the active object."
        ]
    },
    {
        "function_id": "bpy.ops.rigidbody.constraint_add",
        "signature": "bpy.ops.rigidbody.constraint_add(type='FIXED')#",
        "description": "Add Rigid Body Constraint to active object",
        "parameters": [
            "type='FIXED'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.rigidbody.constraint_remove",
        "signature": "bpy.ops.rigidbody.constraint_remove()#",
        "description": "Remove Rigid Body Constraint from Object",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.rigidbody.mass_calculate",
        "signature": "bpy.ops.rigidbody.mass_calculate(material='DEFAULT',density=1.0)#",
        "description": "Automatically calculate mass values for Rigid Body Objects based on volume",
        "parameters": [
            "material='DEFAULT'",
            "density=1.0"
        ],
        "parameter_descriptions": [
            "material(enum in['DEFAULT'],(optional)) – Material Preset, Type of material that objects are made of (determines material density)",
            "density(float in[1.17549e-38,inf],(optional)) – Density, Density value (kg/m^3), allows custom value if the ‘Custom’ preset is used"
        ]
    },
    {
        "function_id": "bpy.ops.rigidbody.object_add",
        "signature": "bpy.ops.rigidbody.object_add(type='ACTIVE')#",
        "description": "Add active object as Rigid Body",
        "parameters": [
            "type='ACTIVE'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.rigidbody.object_remove",
        "signature": "bpy.ops.rigidbody.object_remove()#",
        "description": "Remove Rigid Body settings from Object",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.rigidbody.object_settings_copy",
        "signature": "bpy.ops.rigidbody.object_settings_copy()#",
        "description": "Copy Rigid Body settings from active object to selected",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.rigidbody.objects_add",
        "signature": "bpy.ops.rigidbody.objects_add(type='ACTIVE')#",
        "description": "Add selected objects as Rigid Bodies",
        "parameters": [
            "type='ACTIVE'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.rigidbody.objects_remove",
        "signature": "bpy.ops.rigidbody.objects_remove()#",
        "description": "Remove selected objects from Rigid Body simulation",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.rigidbody.shape_change",
        "signature": "bpy.ops.rigidbody.shape_change(type='MESH')#",
        "description": "Change collision shapes for selected Rigid Body Objects",
        "parameters": [
            "type='MESH'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.rigidbody.world_add",
        "signature": "bpy.ops.rigidbody.world_add()#",
        "description": "Add Rigid Body simulation world to the current scene",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.rigidbody.world_remove",
        "signature": "bpy.ops.rigidbody.world_remove()#",
        "description": "Remove Rigid Body simulation world from the current scene",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.file.autopack_toggle",
        "signature": "bpy.ops.file.autopack_toggle()#",
        "description": "Automatically pack all external files into the .blend file",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.file.bookmark_add",
        "signature": "bpy.ops.file.bookmark_add()#",
        "description": "Add a bookmark for the selected/active directory",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.file.bookmark_cleanup",
        "signature": "bpy.ops.file.bookmark_cleanup()#",
        "description": "Delete all invalid bookmarks",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.file.bookmark_delete",
        "signature": "bpy.ops.file.bookmark_delete(index=-1)#",
        "description": "Delete selected bookmark",
        "parameters": [
            "index=-1"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.file.bookmark_move",
        "signature": "bpy.ops.file.bookmark_move(direction='TOP')#",
        "description": "Move the active bookmark up/down in the list",
        "parameters": [
            "direction='TOP'"
        ],
        "parameter_descriptions": [
            "TOPTop – Top of the list.",
            "UPUp.",
            "DOWNDown.",
            "BOTTOMBottom – Bottom of the list."
        ]
    },
    {
        "function_id": "bpy.ops.file.cancel",
        "signature": "bpy.ops.file.cancel()#",
        "description": "Cancel loading of selected file",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.file.delete",
        "signature": "bpy.ops.file.delete()#",
        "description": "Move selected files to the trash or recycle bin",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.file.directory_new",
        "signature": "bpy.ops.file.directory_new(directory='',open=False,confirm=True)#",
        "description": "Create a new directory",
        "parameters": [
            "directory=''",
            "open=False",
            "confirm=True"
        ],
        "parameter_descriptions": [
            "directory(string,(optional,never None)) – Directory, Name of new directory",
            "open(boolean,(optional)) – Open, Open new directory",
            "confirm(boolean,(optional)) – Confirm, Prompt for confirmation"
        ]
    },
    {
        "function_id": "bpy.ops.file.edit_directory_path",
        "signature": "bpy.ops.file.edit_directory_path()#",
        "description": "Start editing directory field",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.file.execute",
        "signature": "bpy.ops.file.execute()#",
        "description": "Execute selected file",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.file.external_operation",
        "signature": "bpy.ops.file.external_operation(filepath='',operation='OPEN')#",
        "description": "Perform external operation on a file or folder",
        "parameters": [
            "filepath=''",
            "operation='OPEN'"
        ],
        "parameter_descriptions": [
            "filepath(string,(optional,never None)) – File or folder path",
            "operation(enum in['OPEN','FOLDER_OPEN','EDIT','NEW','FIND','SHOW','PLAY','BROWSE','PREVIEW','PRINT','INSTALL','RUNAS','PROPERTIES','FOLDER_FIND','CMD'],(optional)) –Operation, Operation to perform on the file or pathOPENOpen – Open the file.FOLDER_OPENOpen Folder – Open the folder.EDITEdit – Edit the file.NEWNew – Create a new file of this type.FINDFind File – Search for files of this type.SHOWShow – Show this file.PLAYPlay – Play this file.BROWSEBrowse – Browse this file.PREVIEWPreview – Preview this file.PRINTPrint – Print this file.INSTALLInstall – Install this file.RUNASRun As User – Run as specific user.PROPERTIESProperties – Show OS Properties for this item.FOLDER_FINDFind in Folder – Search for items in this folder.CMDCommand Prompt Here – Open a command prompt here.",
            "OPENOpen – Open the file.",
            "FOLDER_OPENOpen Folder – Open the folder.",
            "EDITEdit – Edit the file.",
            "NEWNew – Create a new file of this type.",
            "FINDFind File – Search for files of this type.",
            "SHOWShow – Show this file.",
            "PLAYPlay – Play this file.",
            "BROWSEBrowse – Browse this file.",
            "PREVIEWPreview – Preview this file.",
            "PRINTPrint – Print this file.",
            "INSTALLInstall – Install this file.",
            "RUNASRun As User – Run as specific user.",
            "PROPERTIESProperties – Show OS Properties for this item.",
            "FOLDER_FINDFind in Folder – Search for items in this folder.",
            "CMDCommand Prompt Here – Open a command prompt here."
        ]
    },
    {
        "function_id": "bpy.ops.file.filenum",
        "signature": "bpy.ops.file.filenum(increment=1)#",
        "description": "Increment number in filename",
        "parameters": [
            "increment=1"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.file.filepath_drop",
        "signature": "bpy.ops.file.filepath_drop(filepath='Path')#",
        "description": "Undocumented, considercontributing.",
        "parameters": [
            "filepath='Path'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.file.find_missing_files",
        "signature": "bpy.ops.file.find_missing_files(find_all=False,directory='',hide_props_region=True,check_existing=False,filter_blender=False,filter_backup=False,filter_image=False,filter_movie=False,filter_python=False,filter_font=False,filter_sound=False,filter_text=False,filter_archive=False,filter_btx=False,filter_collada=False,filter_alembic=False,filter_usd=False,filter_obj=False,filter_volume=False,filter_folder=False,filter_blenlib=False,filemode=9,display_type='DEFAULT',sort_method='')#",
        "description": "Try to find missing external files",
        "parameters": [
            "find_all=False",
            "directory=''",
            "hide_props_region=True",
            "check_existing=False",
            "filter_blender=False",
            "filter_backup=False",
            "filter_image=False",
            "filter_movie=False",
            "filter_python=False",
            "filter_font=False",
            "filter_sound=False",
            "filter_text=False",
            "filter_archive=False",
            "filter_btx=False",
            "filter_collada=False",
            "filter_alembic=False",
            "filter_usd=False",
            "filter_obj=False",
            "filter_volume=False",
            "filter_folder=False",
            "filter_blenlib=False",
            "filemode=9",
            "display_type='DEFAULT'",
            "sort_method=''"
        ],
        "parameter_descriptions": [
            "find_all(boolean,(optional)) – Find All, Find all files in the search path (not just missing)",
            "directory(string,(optional,never None)) – Directory, Directory of the file",
            "hide_props_region(boolean,(optional)) – Hide Operator Properties, Collapse the region displaying the operator settings",
            "check_existing(boolean,(optional)) – Check Existing, Check and warn on overwriting existing files",
            "filter_blender(boolean,(optional)) – Filter .blend files",
            "filter_backup(boolean,(optional)) – Filter .blend files",
            "filter_image(boolean,(optional)) – Filter image files",
            "filter_movie(boolean,(optional)) – Filter movie files",
            "filter_python(boolean,(optional)) – Filter Python files",
            "filter_font(boolean,(optional)) – Filter font files",
            "filter_sound(boolean,(optional)) – Filter sound files",
            "filter_text(boolean,(optional)) – Filter text files",
            "filter_archive(boolean,(optional)) – Filter archive files",
            "filter_btx(boolean,(optional)) – Filter btx files",
            "filter_collada(boolean,(optional)) – Filter COLLADA files",
            "filter_alembic(boolean,(optional)) – Filter Alembic files",
            "filter_usd(boolean,(optional)) – Filter USD files",
            "filter_obj(boolean,(optional)) – Filter OBJ files",
            "filter_volume(boolean,(optional)) – Filter OpenVDB volume files",
            "filter_folder(boolean,(optional)) – Filter folders",
            "filter_blenlib(boolean,(optional)) – Filter Blender IDs",
            "filemode(int in[1,9],(optional)) – File Browser Mode, The setting for the file browser mode to load a .blend file, a library or a special file",
            "display_type(enum in['DEFAULT','LIST_VERTICAL','LIST_HORIZONTAL','THUMBNAIL'],(optional)) –Display TypeDEFAULTDefault – Automatically determine display type for files.LIST_VERTICALShort List – Display files as short list.LIST_HORIZONTALLong List – Display files as a detailed list.THUMBNAILThumbnails – Display files as thumbnails.",
            "DEFAULTDefault – Automatically determine display type for files.",
            "LIST_VERTICALShort List – Display files as short list.",
            "LIST_HORIZONTALLong List – Display files as a detailed list.",
            "THUMBNAILThumbnails – Display files as thumbnails.",
            "sort_method(enum in[],(optional)) – File sorting mode"
        ]
    },
    {
        "function_id": "bpy.ops.file.hidedot",
        "signature": "bpy.ops.file.hidedot()#",
        "description": "Toggle hide hidden dot files",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.file.highlight",
        "signature": "bpy.ops.file.highlight()#",
        "description": "Highlight selected file(s)",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.file.make_paths_absolute",
        "signature": "bpy.ops.file.make_paths_absolute()#",
        "description": "Make all paths to external files absolute",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.file.make_paths_relative",
        "signature": "bpy.ops.file.make_paths_relative()#",
        "description": "Make all paths to external files relative to current .blend",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.file.mouse_execute",
        "signature": "bpy.ops.file.mouse_execute()#",
        "description": "Perform the current execute action for the file under the cursor (e.g. open the file)",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.file.next",
        "signature": "bpy.ops.file.next()#",
        "description": "Move to next folder",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.file.pack_all",
        "signature": "bpy.ops.file.pack_all()#",
        "description": "Pack all used external files into this .blend",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.file.pack_libraries",
        "signature": "bpy.ops.file.pack_libraries()#",
        "description": "Store all data-blocks linked from other .blend files in the current .blend file. Library references are preserved so the linked data-blocks can be unpacked again",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.file.parent",
        "signature": "bpy.ops.file.parent()#",
        "description": "Move to parent directory",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.file.previous",
        "signature": "bpy.ops.file.previous()#",
        "description": "Move to previous folder",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.file.refresh",
        "signature": "bpy.ops.file.refresh()#",
        "description": "Refresh the file list",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.file.rename",
        "signature": "bpy.ops.file.rename()#",
        "description": "Rename file or file directory",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.file.report_missing_files",
        "signature": "bpy.ops.file.report_missing_files()#",
        "description": "Report all missing external files",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.file.reset_recent",
        "signature": "bpy.ops.file.reset_recent()#",
        "description": "Reset recent files",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.file.select",
        "signature": "bpy.ops.file.select(wait_to_deselect_others=False,mouse_x=0,mouse_y=0,extend=False,fill=False,open=True,deselect_all=False,only_activate_if_selected=False,pass_through=False)#",
        "description": "Handle mouse clicks to select and activate items",
        "parameters": [
            "wait_to_deselect_others=False",
            "mouse_x=0",
            "mouse_y=0",
            "extend=False",
            "fill=False",
            "open=True",
            "deselect_all=False",
            "only_activate_if_selected=False",
            "pass_through=False"
        ],
        "parameter_descriptions": [
            "wait_to_deselect_others(boolean,(optional)) – Wait to Deselect Others",
            "mouse_x(int in[-inf,inf],(optional)) – Mouse X",
            "mouse_y(int in[-inf,inf],(optional)) – Mouse Y",
            "extend(boolean,(optional)) – Extend, Extend selection instead of deselecting everything first",
            "fill(boolean,(optional)) – Fill, Select everything beginning with the last selection",
            "open(boolean,(optional)) – Open, Open a directory when selecting it",
            "deselect_all(boolean,(optional)) – Deselect On Nothing, Deselect all when nothing under the cursor",
            "only_activate_if_selected(boolean,(optional)) – Only Activate if Selected, Do not change selection if the item under the cursor is already selected, only activate it",
            "pass_through(boolean,(optional)) – Pass Through, Even on successful execution, pass the event on so other operators can execute on it as well"
        ]
    },
    {
        "function_id": "bpy.ops.file.select_all",
        "signature": "bpy.ops.file.select_all(action='TOGGLE')#",
        "description": "Select or deselect all files",
        "parameters": [
            "action='TOGGLE'"
        ],
        "parameter_descriptions": [
            "TOGGLEToggle – Toggle selection for all elements.",
            "SELECTSelect – Select all elements.",
            "DESELECTDeselect – Deselect all elements.",
            "INVERTInvert – Invert selection of all elements."
        ]
    },
    {
        "function_id": "bpy.ops.file.select_bookmark",
        "signature": "bpy.ops.file.select_bookmark(dir='')#",
        "description": "Select a bookmarked directory",
        "parameters": [
            "dir=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.file.select_box",
        "signature": "bpy.ops.file.select_box(xmin=0,xmax=0,ymin=0,ymax=0,wait_for_input=True,mode='SET')#",
        "description": "Activate/select the file(s) contained in the border",
        "parameters": [
            "xmin=0",
            "xmax=0",
            "ymin=0",
            "ymax=0",
            "wait_for_input=True",
            "mode='SET'"
        ],
        "parameter_descriptions": [
            "xmin(int in[-inf,inf],(optional)) – X Min",
            "xmax(int in[-inf,inf],(optional)) – X Max",
            "ymin(int in[-inf,inf],(optional)) – Y Min",
            "ymax(int in[-inf,inf],(optional)) – Y Max",
            "wait_for_input(boolean,(optional)) – Wait for Input",
            "mode(enum in['SET','ADD','SUB'],(optional)) –ModeSETSet – Set a new selection.ADDExtend – Extend existing selection.SUBSubtract – Subtract existing selection.",
            "SETSet – Set a new selection.",
            "ADDExtend – Extend existing selection.",
            "SUBSubtract – Subtract existing selection."
        ]
    },
    {
        "function_id": "bpy.ops.file.select_walk",
        "signature": "bpy.ops.file.select_walk(direction='UP',extend=False,fill=False)#",
        "description": "Select/Deselect files by walking through them",
        "parameters": [
            "direction='UP'",
            "extend=False",
            "fill=False"
        ],
        "parameter_descriptions": [
            "direction(enum in['UP','DOWN','LEFT','RIGHT'],(optional)) – Walk Direction, Select/Deselect element in this direction",
            "extend(boolean,(optional)) – Extend, Extend selection instead of deselecting everything first",
            "fill(boolean,(optional)) – Fill, Select everything beginning with the last selection"
        ]
    },
    {
        "function_id": "bpy.ops.file.smoothscroll",
        "signature": "bpy.ops.file.smoothscroll()#",
        "description": "Smooth scroll to make editable file visible",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.file.sort_column_ui_context",
        "signature": "bpy.ops.file.sort_column_ui_context()#",
        "description": "Change sorting to use column under cursor",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.file.start_filter",
        "signature": "bpy.ops.file.start_filter()#",
        "description": "Start entering filter text",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.file.unpack_all",
        "signature": "bpy.ops.file.unpack_all(method='USE_LOCAL')#",
        "description": "Unpack all files packed into this .blend to external ones",
        "parameters": [
            "method='USE_LOCAL'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.file.unpack_item",
        "signature": "bpy.ops.file.unpack_item(method='USE_LOCAL',id_name='',id_type=19785)#",
        "description": "Unpack this file to an external file",
        "parameters": [
            "method='USE_LOCAL'",
            "id_name=''",
            "id_type=19785"
        ],
        "parameter_descriptions": [
            "method(enum in['USE_LOCAL','WRITE_LOCAL','USE_ORIGINAL','WRITE_ORIGINAL'],(optional)) – Method, How to unpack",
            "id_name(string,(optional,never None)) – ID Name, Name of ID block to unpack",
            "id_type(int in[0,inf],(optional)) – ID Type, Identifier type of ID block"
        ]
    },
    {
        "function_id": "bpy.ops.file.unpack_libraries",
        "signature": "bpy.ops.file.unpack_libraries()#",
        "description": "Restore all packed linked data-blocks to their original locations",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.file.view_selected",
        "signature": "bpy.ops.file.view_selected()#",
        "description": "Scroll the selected files into view",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.graph.bake_keys",
        "signature": "bpy.ops.graph.bake_keys()#",
        "description": "Add keyframes on every frame between the selected keyframes",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.graph.blend_offset",
        "signature": "bpy.ops.graph.blend_offset(factor=0.0)#",
        "description": "Shift selected keys to the value of the neighboring keys as a block",
        "parameters": [
            "factor=0.0"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.graph.blend_to_default",
        "signature": "bpy.ops.graph.blend_to_default(factor=0.0)#",
        "description": "Blend selected keys to their default value from their current position",
        "parameters": [
            "factor=0.0"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.graph.blend_to_ease",
        "signature": "bpy.ops.graph.blend_to_ease(factor=0.0)#",
        "description": "Blends keyframes from current state to an ease-in or ease-out curve",
        "parameters": [
            "factor=0.0"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.graph.blend_to_neighbor",
        "signature": "bpy.ops.graph.blend_to_neighbor(factor=0.0)#",
        "description": "Blend selected keyframes to their left or right neighbor",
        "parameters": [
            "factor=0.0"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.graph.breakdown",
        "signature": "bpy.ops.graph.breakdown(factor=0.0)#",
        "description": "Move selected keyframes to an inbetween position relative to adjacent keys",
        "parameters": [
            "factor=0.0"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.graph.butterworth_smooth",
        "signature": "bpy.ops.graph.butterworth_smooth(cutoff_frequency=3.0,filter_order=4,samples_per_frame=1,blend=1.0,blend_in_out=1)#",
        "description": "Smooth an F-Curve while maintaining the general shape of the curve",
        "parameters": [
            "cutoff_frequency=3.0",
            "filter_order=4",
            "samples_per_frame=1",
            "blend=1.0",
            "blend_in_out=1"
        ],
        "parameter_descriptions": [
            "cutoff_frequency(float in[0,inf],(optional)) – Frequency Cutoff (Hz), Lower values give a smoother curve",
            "filter_order(int in[1,32],(optional)) – Filter Order, Higher values produce a harder frequency cutoff",
            "samples_per_frame(int in[1,64],(optional)) – Samples per Frame, How many samples to calculate per frame, helps with subframe data",
            "blend(float in[0,inf],(optional)) – Blend, How much to blend to the smoothed curve",
            "blend_in_out(int in[0,inf],(optional)) – Blend In/Out, Linearly blend the smooth data to the border frames of the selection"
        ]
    },
    {
        "function_id": "bpy.ops.graph.clean",
        "signature": "bpy.ops.graph.clean(threshold=0.001,channels=False)#",
        "description": "Simplify F-Curves by removing closely spaced keyframes",
        "parameters": [
            "threshold=0.001",
            "channels=False"
        ],
        "parameter_descriptions": [
            "threshold(float in[0,inf],(optional)) – Threshold",
            "channels(boolean,(optional)) – Channels"
        ]
    },
    {
        "function_id": "bpy.ops.graph.click_insert",
        "signature": "bpy.ops.graph.click_insert(frame=1.0,value=1.0,extend=False)#",
        "description": "Insert new keyframe at the cursor position for the active F-Curve",
        "parameters": [
            "frame=1.0",
            "value=1.0",
            "extend=False"
        ],
        "parameter_descriptions": [
            "frame(float in[-inf,inf],(optional)) – Frame Number, Frame to insert keyframe on",
            "value(float in[-inf,inf],(optional)) – Value, Value for keyframe on",
            "extend(boolean,(optional)) – Extend, Extend selection instead of deselecting everything first"
        ]
    },
    {
        "function_id": "bpy.ops.graph.clickselect",
        "signature": "bpy.ops.graph.clickselect(wait_to_deselect_others=False,mouse_x=0,mouse_y=0,extend=False,deselect_all=False,column=False,curves=False)#",
        "description": "Select keyframes by clicking on them",
        "parameters": [
            "wait_to_deselect_others=False",
            "mouse_x=0",
            "mouse_y=0",
            "extend=False",
            "deselect_all=False",
            "column=False",
            "curves=False"
        ],
        "parameter_descriptions": [
            "wait_to_deselect_others(boolean,(optional)) – Wait to Deselect Others",
            "mouse_x(int in[-inf,inf],(optional)) – Mouse X",
            "mouse_y(int in[-inf,inf],(optional)) – Mouse Y",
            "extend(boolean,(optional)) – Extend Select, Toggle keyframe selection instead of leaving newly selected keyframes only",
            "deselect_all(boolean,(optional)) – Deselect On Nothing, Deselect all when nothing under the cursor",
            "column(boolean,(optional)) – Column Select, Select all keyframes that occur on the same frame as the one under the mouse",
            "curves(boolean,(optional)) – Only Curves, Select all the keyframes in the curve"
        ]
    },
    {
        "function_id": "bpy.ops.graph.copy",
        "signature": "bpy.ops.graph.copy()#",
        "description": "Copy selected keyframes to the internal clipboard",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.graph.cursor_set",
        "signature": "bpy.ops.graph.cursor_set(frame=0.0,value=0.0)#",
        "description": "Interactively set the current frame and value cursor",
        "parameters": [
            "frame=0.0",
            "value=0.0"
        ],
        "parameter_descriptions": [
            "frame(float in[-1.04857e+06,1.04857e+06],(optional)) – Frame",
            "value(float in[-inf,inf],(optional)) – Value"
        ]
    },
    {
        "function_id": "bpy.ops.graph.decimate",
        "signature": "bpy.ops.graph.decimate(mode='RATIO',factor=0.333333,remove_error_margin=0.0)#",
        "description": "Decimate F-Curves by removing keyframes that influence the curve shape the least",
        "parameters": [
            "mode='RATIO'",
            "factor=0.333333",
            "remove_error_margin=0.0"
        ],
        "parameter_descriptions": [
            "mode(enum in['RATIO','ERROR'],(optional)) –Mode, Which mode to use for decimationRATIORatio – Use a percentage to specify how many keyframes you want to remove.ERRORError Margin – Use an error margin to specify how much the curve is allowed to deviate from the original path.",
            "RATIORatio – Use a percentage to specify how many keyframes you want to remove.",
            "ERRORError Margin – Use an error margin to specify how much the curve is allowed to deviate from the original path.",
            "factor(float in[0,1],(optional)) – Remove, The ratio of remaining keyframes after the operation",
            "remove_error_margin(float in[0,inf],(optional)) – Max Error Margin, How much the new decimated curve is allowed to deviate from the original"
        ]
    },
    {
        "function_id": "bpy.ops.graph.delete",
        "signature": "bpy.ops.graph.delete(confirm=True)#",
        "description": "Remove all selected keyframes",
        "parameters": [
            "confirm=True"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.graph.driver_delete_invalid",
        "signature": "bpy.ops.graph.driver_delete_invalid()#",
        "description": "Delete all visible drivers considered invalid",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.graph.driver_variables_copy",
        "signature": "bpy.ops.graph.driver_variables_copy()#",
        "description": "Copy the driver variables of the active driver",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.graph.driver_variables_paste",
        "signature": "bpy.ops.graph.driver_variables_paste(replace=False)#",
        "description": "Add copied driver variables to the active driver",
        "parameters": [
            "replace=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.graph.duplicate",
        "signature": "bpy.ops.graph.duplicate(mode='TRANSLATION')#",
        "description": "Make a copy of all selected keyframes",
        "parameters": [
            "mode='TRANSLATION'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.graph.duplicate_move",
        "signature": "bpy.ops.graph.duplicate_move(GRAPH_OT_duplicate=None,TRANSFORM_OT_translate=None)#",
        "description": "Make a copy of all selected keyframes and move them",
        "parameters": [
            "GRAPH_OT_duplicate=None",
            "TRANSFORM_OT_translate=None"
        ],
        "parameter_descriptions": [
            "GRAPH_OT_duplicate(GRAPH_OT_duplicate, (optional)) – Duplicate Keyframes, Make a copy of all selected keyframes",
            "TRANSFORM_OT_translate(TRANSFORM_OT_translate, (optional)) – Move, Move selected items"
        ]
    },
    {
        "function_id": "bpy.ops.graph.ease",
        "signature": "bpy.ops.graph.ease(factor=0.0,sharpness=2.0)#",
        "description": "Align keyframes on a ease-in or ease-out curve",
        "parameters": [
            "factor=0.0",
            "sharpness=2.0"
        ],
        "parameter_descriptions": [
            "factor(float in[-inf,inf],(optional)) – Curve Bend, Defines if the keys should be aligned on an ease-in or ease-out curve",
            "sharpness(float in[0.001,inf],(optional)) – Sharpness, Higher values make the change more abrupt"
        ]
    },
    {
        "function_id": "bpy.ops.graph.easing_type",
        "signature": "bpy.ops.graph.easing_type(type='AUTO')#",
        "description": "Set easing type for the F-Curve segments starting from the selected keyframes",
        "parameters": [
            "type='AUTO'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.graph.equalize_handles",
        "signature": "bpy.ops.graph.equalize_handles(side='LEFT',handle_length=5.0,flatten=False)#",
        "description": "Ensure selected keyframes’ handles have equal length, optionally making them horizontal. Automatic, Automatic Clamped, or Vector handle types will be converted to Aligned",
        "parameters": [
            "side='LEFT'",
            "handle_length=5.0",
            "flatten=False"
        ],
        "parameter_descriptions": [
            "side(enum in['LEFT','RIGHT','BOTH'],(optional)) –Side, Side of the keyframes’ Bézier handles to affectLEFTLeft – Equalize selected keyframes’ left handles.RIGHTRight – Equalize selected keyframes’ right handles.BOTHBoth – Equalize both of a keyframe’s handles.",
            "LEFTLeft – Equalize selected keyframes’ left handles.",
            "RIGHTRight – Equalize selected keyframes’ right handles.",
            "BOTHBoth – Equalize both of a keyframe’s handles.",
            "handle_length(float in[0.1,inf],(optional)) – Handle Length, Length to make selected keyframes’ Bézier handles",
            "flatten(boolean,(optional)) – Flatten, Make the values of the selected keyframes’ handles the same as their respective keyframes"
        ]
    },
    {
        "function_id": "bpy.ops.graph.euler_filter",
        "signature": "bpy.ops.graph.euler_filter()#",
        "description": "Fix large jumps and flips in the selected Euler Rotation F-Curves arising from rotation values being clipped when baking physics",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.graph.extrapolation_type",
        "signature": "bpy.ops.graph.extrapolation_type(type='CONSTANT')#",
        "description": "Set extrapolation mode for selected F-Curves",
        "parameters": [
            "type='CONSTANT'"
        ],
        "parameter_descriptions": [
            "CONSTANTConstant Extrapolation – Values on endpoint keyframes are held.",
            "LINEARLinear Extrapolation – Straight-line slope of end segments are extended past the endpoint keyframes.",
            "MAKE_CYCLICMake Cyclic (F-Modifier) – Add Cycles F-Modifier if one doesn’t exist already.",
            "CLEAR_CYCLICClear Cyclic (F-Modifier) – Remove Cycles F-Modifier if not needed anymore."
        ]
    },
    {
        "function_id": "bpy.ops.graph.fmodifier_add",
        "signature": "bpy.ops.graph.fmodifier_add(type='NULL',only_active=False)#",
        "description": "Add F-Modifier to the active/selected F-Curves",
        "parameters": [
            "type='NULL'",
            "only_active=False"
        ],
        "parameter_descriptions": [
            "type(enum inFmodifier Type Items, (optional)) – Type",
            "only_active(boolean,(optional)) – Only Active, Only add F-Modifier to active F-Curve"
        ]
    },
    {
        "function_id": "bpy.ops.graph.fmodifier_copy",
        "signature": "bpy.ops.graph.fmodifier_copy()#",
        "description": "Copy the F-Modifier(s) of the active F-Curve",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.graph.fmodifier_paste",
        "signature": "bpy.ops.graph.fmodifier_paste(only_active=False,replace=False)#",
        "description": "Add copied F-Modifiers to the selected F-Curves",
        "parameters": [
            "only_active=False",
            "replace=False"
        ],
        "parameter_descriptions": [
            "only_active(boolean,(optional)) – Only Active, Only paste F-Modifiers on active F-Curve",
            "replace(boolean,(optional)) – Replace Existing, Replace existing F-Modifiers, instead of just appending to the end of the existing list"
        ]
    },
    {
        "function_id": "bpy.ops.graph.frame_jump",
        "signature": "bpy.ops.graph.frame_jump()#",
        "description": "Place the cursor on the midpoint of selected keyframes",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.graph.gaussian_smooth",
        "signature": "bpy.ops.graph.gaussian_smooth(factor=1.0,sigma=0.33,filter_width=6)#",
        "description": "Smooth the curve using a Gaussian filter",
        "parameters": [
            "factor=1.0",
            "sigma=0.33",
            "filter_width=6"
        ],
        "parameter_descriptions": [
            "factor(float in[0,inf],(optional)) – Factor, How much to blend to the default value",
            "sigma(float in[0.001,inf],(optional)) – Sigma, The shape of the gaussian distribution, lower values make it sharper",
            "filter_width(int in[1,64],(optional)) – Filter Width, How far to each side the operator will average the key values"
        ]
    },
    {
        "function_id": "bpy.ops.graph.ghost_curves_clear",
        "signature": "bpy.ops.graph.ghost_curves_clear()#",
        "description": "Clear F-Curve snapshots (Ghosts) for active Graph Editor",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.graph.ghost_curves_create",
        "signature": "bpy.ops.graph.ghost_curves_create()#",
        "description": "Create snapshot (Ghosts) of selected F-Curves as background aid for active Graph Editor",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.graph.handle_type",
        "signature": "bpy.ops.graph.handle_type(type='FREE')#",
        "description": "Set type of handle for selected keyframes",
        "parameters": [
            "type='FREE'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.graph.hide",
        "signature": "bpy.ops.graph.hide(unselected=False)#",
        "description": "Hide selected curves from Graph Editor view",
        "parameters": [
            "unselected=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.graph.interpolation_type",
        "signature": "bpy.ops.graph.interpolation_type(type='CONSTANT')#",
        "description": "Set interpolation mode for the F-Curve segments starting from the selected keyframes",
        "parameters": [
            "type='CONSTANT'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.graph.keyframe_insert",
        "signature": "bpy.ops.graph.keyframe_insert(type='ALL')#",
        "description": "Insert keyframes for the specified channels",
        "parameters": [
            "type='ALL'"
        ],
        "parameter_descriptions": [
            "ALLAll Channels – Insert a keyframe on all visible and editable F-Curves using each curve’s current value.",
            "SELOnly Selected Channels – Insert a keyframe on selected F-Curves using each curve’s current value.",
            "ACTIVEOnly Active F-Curve – Insert a keyframe on the active F-Curve using the curve’s current value.",
            "CURSOR_ACTIVEActive Channels at Cursor – Insert a keyframe for the active F-Curve at the cursor point.",
            "CURSOR_SELSelected Channels at Cursor – Insert a keyframe for selected F-Curves at the cursor point."
        ]
    },
    {
        "function_id": "bpy.ops.graph.keyframe_jump",
        "signature": "bpy.ops.graph.keyframe_jump(next=True)#",
        "description": "Jump to previous/next keyframe",
        "parameters": [
            "next=True"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.graph.keys_to_samples",
        "signature": "bpy.ops.graph.keys_to_samples()#",
        "description": "Convert selected channels to an uneditable set of samples to save storage space",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.graph.match_slope",
        "signature": "bpy.ops.graph.match_slope(factor=0.0)#",
        "description": "Blend selected keys to the slope of neighboring ones",
        "parameters": [
            "factor=0.0"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.graph.mirror",
        "signature": "bpy.ops.graph.mirror(type='CFRA')#",
        "description": "Flip selected keyframes over the selected mirror line",
        "parameters": [
            "type='CFRA'"
        ],
        "parameter_descriptions": [
            "CFRABy Times Over Current Frame – Flip times of selected keyframes using the current frame as the mirror line.",
            "VALUEBy Values Over Cursor Value – Flip values of selected keyframes using the cursor value (Y/Horizontal component) as the mirror line.",
            "YAXISBy Times Over Zero Time – Flip times of selected keyframes, effectively reversing the order they appear in.",
            "XAXISBy Values Over Zero Value – Flip values of selected keyframes (i.e. negative values become positive, and vice versa).",
            "MARKERBy Times Over First Selected Marker – Flip times of selected keyframes using the first selected marker as the reference point."
        ]
    },
    {
        "function_id": "bpy.ops.graph.paste",
        "signature": "bpy.ops.graph.paste(offset='START',value_offset='NONE',merge='MIX',flipped=False)#",
        "description": "Paste keyframes from the internal clipboard for the selected channels, starting on the current frame",
        "parameters": [
            "offset='START'",
            "value_offset='NONE'",
            "merge='MIX'",
            "flipped=False"
        ],
        "parameter_descriptions": [
            "offset(enum inKeyframe Paste Offset Items, (optional)) – Frame Offset, Paste time offset of keys",
            "value_offset(enum inKeyframe Paste Offset Value Items, (optional)) – Value Offset, Paste keys with a value offset",
            "merge(enum inKeyframe Paste Merge Items, (optional)) – Type, Method of merging pasted keys and existing",
            "flipped(boolean,(optional)) – Flipped, Paste keyframes from mirrored bones if they exist"
        ]
    },
    {
        "function_id": "bpy.ops.graph.previewrange_set",
        "signature": "bpy.ops.graph.previewrange_set()#",
        "description": "Set Preview Range based on range of selected keyframes",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.graph.push_pull",
        "signature": "bpy.ops.graph.push_pull(factor=1.0)#",
        "description": "Exaggerate or minimize the value of the selected keys",
        "parameters": [
            "factor=1.0"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.graph.reveal",
        "signature": "bpy.ops.graph.reveal(select=True)#",
        "description": "Make previously hidden curves visible again in Graph Editor view",
        "parameters": [
            "select=True"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.graph.samples_to_keys",
        "signature": "bpy.ops.graph.samples_to_keys()#",
        "description": "Convert selected channels from samples to keyframes",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.graph.scale_average",
        "signature": "bpy.ops.graph.scale_average(factor=1.0)#",
        "description": "Scale selected key values by their combined average",
        "parameters": [
            "factor=1.0"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.graph.scale_from_neighbor",
        "signature": "bpy.ops.graph.scale_from_neighbor(factor=0.0,anchor='LEFT')#",
        "description": "Increase or decrease the value of selected keys in relationship to the neighboring one",
        "parameters": [
            "factor=0.0",
            "anchor='LEFT'"
        ],
        "parameter_descriptions": [
            "factor(float in[-inf,inf],(optional)) – Factor, The factor to scale keys with",
            "anchor(enum in['LEFT','RIGHT'],(optional)) – Reference Key, Which end of the segment to use as a reference to scale from"
        ]
    },
    {
        "function_id": "bpy.ops.graph.select_all",
        "signature": "bpy.ops.graph.select_all(action='TOGGLE')#",
        "description": "Toggle selection of all keyframes",
        "parameters": [
            "action='TOGGLE'"
        ],
        "parameter_descriptions": [
            "TOGGLEToggle – Toggle selection for all elements.",
            "SELECTSelect – Select all elements.",
            "DESELECTDeselect – Deselect all elements.",
            "INVERTInvert – Invert selection of all elements."
        ]
    },
    {
        "function_id": "bpy.ops.graph.select_box",
        "signature": "bpy.ops.graph.select_box(axis_range=False,include_handles=True,tweak=False,use_curve_selection=True,xmin=0,xmax=0,ymin=0,ymax=0,wait_for_input=True,mode='SET')#",
        "description": "Select all keyframes within the specified region",
        "parameters": [
            "axis_range=False",
            "include_handles=True",
            "tweak=False",
            "use_curve_selection=True",
            "xmin=0",
            "xmax=0",
            "ymin=0",
            "ymax=0",
            "wait_for_input=True",
            "mode='SET'"
        ],
        "parameter_descriptions": [
            "axis_range(boolean,(optional)) – Axis Range",
            "include_handles(boolean,(optional)) – Include Handles, Are handles tested individually against the selection criteria",
            "tweak(boolean,(optional)) – Tweak, Operator has been activated using a click-drag event",
            "use_curve_selection(boolean,(optional)) – Select Curves, Allow selecting all the keyframes of a curve by selecting the calculated F-curve",
            "xmin(int in[-inf,inf],(optional)) – X Min",
            "xmax(int in[-inf,inf],(optional)) – X Max",
            "ymin(int in[-inf,inf],(optional)) – Y Min",
            "ymax(int in[-inf,inf],(optional)) – Y Max",
            "wait_for_input(boolean,(optional)) – Wait for Input",
            "mode(enum in['SET','ADD','SUB'],(optional)) –ModeSETSet – Set a new selection.ADDExtend – Extend existing selection.SUBSubtract – Subtract existing selection.",
            "SETSet – Set a new selection.",
            "ADDExtend – Extend existing selection.",
            "SUBSubtract – Subtract existing selection."
        ]
    },
    {
        "function_id": "bpy.ops.graph.select_circle",
        "signature": "bpy.ops.graph.select_circle(x=0,y=0,radius=25,wait_for_input=True,mode='SET',use_curve_selection=True)#",
        "description": "Select keyframe points using circle selection",
        "parameters": [
            "x=0",
            "y=0",
            "radius=25",
            "wait_for_input=True",
            "mode='SET'",
            "use_curve_selection=True"
        ],
        "parameter_descriptions": [
            "x(int in[-inf,inf],(optional)) – X",
            "y(int in[-inf,inf],(optional)) – Y",
            "radius(int in[1,inf],(optional)) – Radius",
            "wait_for_input(boolean,(optional)) – Wait for Input",
            "mode(enum in['SET','ADD','SUB'],(optional)) –ModeSETSet – Set a new selection.ADDExtend – Extend existing selection.SUBSubtract – Subtract existing selection.",
            "SETSet – Set a new selection.",
            "ADDExtend – Extend existing selection.",
            "SUBSubtract – Subtract existing selection.",
            "use_curve_selection(boolean,(optional)) – Select Curves, Allow selecting all the keyframes of a curve by selecting the curve itself"
        ]
    },
    {
        "function_id": "bpy.ops.graph.select_column",
        "signature": "bpy.ops.graph.select_column(mode='KEYS')#",
        "description": "Select all keyframes on the specified frame(s)",
        "parameters": [
            "mode='KEYS'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.graph.select_key_handles",
        "signature": "bpy.ops.graph.select_key_handles(left_handle_action='SELECT',right_handle_action='SELECT',key_action='KEEP')#",
        "description": "For selected keyframes, select/deselect any combination of the key itself and its handles",
        "parameters": [
            "left_handle_action='SELECT'",
            "right_handle_action='SELECT'",
            "key_action='KEEP'"
        ],
        "parameter_descriptions": [
            "left_handle_action(enum in['SELECT','DESELECT','KEEP'],(optional)) –Left Handle, Effect on the left handleSELECTSelect.DESELECTDeselect.KEEPKeep – Leave as is.",
            "SELECTSelect.",
            "DESELECTDeselect.",
            "KEEPKeep – Leave as is.",
            "right_handle_action(enum in['SELECT','DESELECT','KEEP'],(optional)) –Right Handle, Effect on the right handleSELECTSelect.DESELECTDeselect.KEEPKeep – Leave as is.",
            "SELECTSelect.",
            "DESELECTDeselect.",
            "KEEPKeep – Leave as is.",
            "key_action(enum in['SELECT','DESELECT','KEEP'],(optional)) –Key, Effect on the key itselfSELECTSelect.DESELECTDeselect.KEEPKeep – Leave as is.",
            "SELECTSelect.",
            "DESELECTDeselect.",
            "KEEPKeep – Leave as is."
        ]
    },
    {
        "function_id": "bpy.ops.graph.select_lasso",
        "signature": "bpy.ops.graph.select_lasso(path=None,mode='SET',use_curve_selection=True)#",
        "description": "Select keyframe points using lasso selection",
        "parameters": [
            "path=None",
            "mode='SET'",
            "use_curve_selection=True"
        ],
        "parameter_descriptions": [
            "path(bpy_prop_collectionofOperatorMousePath, (optional)) – Path",
            "mode(enum in['SET','ADD','SUB'],(optional)) –ModeSETSet – Set a new selection.ADDExtend – Extend existing selection.SUBSubtract – Subtract existing selection.",
            "SETSet – Set a new selection.",
            "ADDExtend – Extend existing selection.",
            "SUBSubtract – Subtract existing selection.",
            "use_curve_selection(boolean,(optional)) – Select Curves, Allow selecting all the keyframes of a curve by selecting the curve itself"
        ]
    },
    {
        "function_id": "bpy.ops.graph.select_leftright",
        "signature": "bpy.ops.graph.select_leftright(mode='CHECK',extend=False)#",
        "description": "Select keyframes to the left or the right of the current frame",
        "parameters": [
            "mode='CHECK'",
            "extend=False"
        ],
        "parameter_descriptions": [
            "mode(enum in['CHECK','LEFT','RIGHT'],(optional)) – Mode",
            "extend(boolean,(optional)) – Extend Select"
        ]
    },
    {
        "function_id": "bpy.ops.graph.select_less",
        "signature": "bpy.ops.graph.select_less()#",
        "description": "Deselect keyframes on ends of selection islands",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.graph.select_linked",
        "signature": "bpy.ops.graph.select_linked()#",
        "description": "Select keyframes occurring in the same F-Curves as selected ones",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.graph.select_more",
        "signature": "bpy.ops.graph.select_more()#",
        "description": "Select keyframes beside already selected ones",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.graph.shear",
        "signature": "bpy.ops.graph.shear(factor=0.0,direction='FROM_LEFT')#",
        "description": "Affect the value of the keys linearly, keeping the same relationship between them using either the left or the right key as reference",
        "parameters": [
            "factor=0.0",
            "direction='FROM_LEFT'"
        ],
        "parameter_descriptions": [
            "factor(float in[-inf,inf],(optional)) – Shear Factor, The amount of shear to apply",
            "direction(enum in['FROM_LEFT','FROM_RIGHT'],(optional)) –Direction, Which end of the segment to use as a reference to shear fromFROM_LEFTFrom Left – Shear the keys using the left key as reference.FROM_RIGHTFrom Right – Shear the keys using the right key as reference.",
            "FROM_LEFTFrom Left – Shear the keys using the left key as reference.",
            "FROM_RIGHTFrom Right – Shear the keys using the right key as reference."
        ]
    },
    {
        "function_id": "bpy.ops.graph.smooth",
        "signature": "bpy.ops.graph.smooth()#",
        "description": "Apply weighted moving means to make selected F-Curves less bumpy",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.graph.snap",
        "signature": "bpy.ops.graph.snap(type='CFRA')#",
        "description": "Snap selected keyframes to the chosen times/values",
        "parameters": [
            "type='CFRA'"
        ],
        "parameter_descriptions": [
            "CFRASelection to Current Frame – Snap selected keyframes to the current frame.",
            "VALUESelection to Cursor Value – Set values of selected keyframes to the cursor value (Y/Horizontal component).",
            "NEAREST_FRAMESelection to Nearest Frame – Snap selected keyframes to the nearest (whole) frame (use to fix accidental subframe offsets).",
            "NEAREST_SECONDSelection to Nearest Second – Snap selected keyframes to the nearest second.",
            "NEAREST_MARKERSelection to Nearest Marker – Snap selected keyframes to the nearest marker.",
            "HORIZONTALFlatten Handles – Flatten handles for a smoother transition."
        ]
    },
    {
        "function_id": "bpy.ops.graph.snap_cursor_value",
        "signature": "bpy.ops.graph.snap_cursor_value()#",
        "description": "Place the cursor value on the average value of selected keyframes",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.graph.sound_to_samples",
        "signature": "bpy.ops.graph.sound_to_samples(filepath='',check_existing=False,filter_blender=False,filter_backup=False,filter_image=False,filter_movie=True,filter_python=False,filter_font=False,filter_sound=True,filter_text=False,filter_archive=False,filter_btx=False,filter_collada=False,filter_alembic=False,filter_usd=False,filter_obj=False,filter_volume=False,filter_folder=True,filter_blenlib=False,filemode=9,show_multiview=False,use_multiview=False,display_type='DEFAULT',sort_method='',low=0.0,high=100000.0,attack=0.005,release=0.2,threshold=0.0,use_accumulate=False,use_additive=False,use_square=False,sthreshold=0.1)#",
        "description": "Bakes a sound wave to samples on selected channels",
        "parameters": [
            "filepath=''",
            "check_existing=False",
            "filter_blender=False",
            "filter_backup=False",
            "filter_image=False",
            "filter_movie=True",
            "filter_python=False",
            "filter_font=False",
            "filter_sound=True",
            "filter_text=False",
            "filter_archive=False",
            "filter_btx=False",
            "filter_collada=False",
            "filter_alembic=False",
            "filter_usd=False",
            "filter_obj=False",
            "filter_volume=False",
            "filter_folder=True",
            "filter_blenlib=False",
            "filemode=9",
            "show_multiview=False",
            "use_multiview=False",
            "display_type='DEFAULT'",
            "sort_method=''",
            "low=0.0",
            "high=100000.0",
            "attack=0.005",
            "release=0.2",
            "threshold=0.0",
            "use_accumulate=False",
            "use_additive=False",
            "use_square=False",
            "sthreshold=0.1"
        ],
        "parameter_descriptions": [
            "filepath(string,(optional,never None)) – File Path, Path to file",
            "check_existing(boolean,(optional)) – Check Existing, Check and warn on overwriting existing files",
            "filter_blender(boolean,(optional)) – Filter .blend files",
            "filter_backup(boolean,(optional)) – Filter .blend files",
            "filter_image(boolean,(optional)) – Filter image files",
            "filter_movie(boolean,(optional)) – Filter movie files",
            "filter_python(boolean,(optional)) – Filter Python files",
            "filter_font(boolean,(optional)) – Filter font files",
            "filter_sound(boolean,(optional)) – Filter sound files",
            "filter_text(boolean,(optional)) – Filter text files",
            "filter_archive(boolean,(optional)) – Filter archive files",
            "filter_btx(boolean,(optional)) – Filter btx files",
            "filter_collada(boolean,(optional)) – Filter COLLADA files",
            "filter_alembic(boolean,(optional)) – Filter Alembic files",
            "filter_usd(boolean,(optional)) – Filter USD files",
            "filter_obj(boolean,(optional)) – Filter OBJ files",
            "filter_volume(boolean,(optional)) – Filter OpenVDB volume files",
            "filter_folder(boolean,(optional)) – Filter folders",
            "filter_blenlib(boolean,(optional)) – Filter Blender IDs",
            "filemode(int in[1,9],(optional)) – File Browser Mode, The setting for the file browser mode to load a .blend file, a library or a special file",
            "show_multiview(boolean,(optional)) – Enable Multi-View",
            "use_multiview(boolean,(optional)) – Use Multi-View",
            "display_type(enum in['DEFAULT','LIST_VERTICAL','LIST_HORIZONTAL','THUMBNAIL'],(optional)) –Display TypeDEFAULTDefault – Automatically determine display type for files.LIST_VERTICALShort List – Display files as short list.LIST_HORIZONTALLong List – Display files as a detailed list.THUMBNAILThumbnails – Display files as thumbnails.",
            "DEFAULTDefault – Automatically determine display type for files.",
            "LIST_VERTICALShort List – Display files as short list.",
            "LIST_HORIZONTALLong List – Display files as a detailed list.",
            "THUMBNAILThumbnails – Display files as thumbnails.",
            "sort_method(enum in[],(optional)) – File sorting mode",
            "low(float in[0,100000],(optional)) – Lowest Frequency, Cutoff frequency of a high-pass filter that is applied to the audio data",
            "high(float in[0,100000],(optional)) – Highest Frequency, Cutoff frequency of a low-pass filter that is applied to the audio data",
            "attack(float in[0,2],(optional)) – Attack Time, Value for the envelope calculation that tells how fast the envelope can rise (the lower the value the steeper it can rise)",
            "release(float in[0,5],(optional)) – Release Time, Value for the envelope calculation that tells how fast the envelope can fall (the lower the value the steeper it can fall)",
            "threshold(float in[0,1],(optional)) – Threshold, Minimum amplitude value needed to influence the envelope",
            "use_accumulate(boolean,(optional)) – Accumulate, Only the positive differences of the envelope amplitudes are summarized to produce the output",
            "use_additive(boolean,(optional)) – Additive, The amplitudes of the envelope are summarized (or, when Accumulate is enabled, both positive and negative differences are accumulated)",
            "use_square(boolean,(optional)) – Square, The output is a square curve (negative values always result in -1, and positive ones in 1)",
            "sthreshold(float in[0,1],(optional)) – Square Threshold, Square only: all values with an absolute amplitude lower than that result in 0"
        ]
    },
    {
        "function_id": "bpy.ops.graph.time_offset",
        "signature": "bpy.ops.graph.time_offset(frame_offset=0.0)#",
        "description": "Shifts the value of selected keys in time",
        "parameters": [
            "frame_offset=0.0"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.graph.view_all",
        "signature": "bpy.ops.graph.view_all(include_handles=True)#",
        "description": "Reset viewable area to show full keyframe range",
        "parameters": [
            "include_handles=True"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.graph.view_frame",
        "signature": "bpy.ops.graph.view_frame()#",
        "description": "Move the view to the current frame",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.graph.view_selected",
        "signature": "bpy.ops.graph.view_selected(include_handles=True)#",
        "description": "Reset viewable area to show selected keyframe range",
        "parameters": [
            "include_handles=True"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.sound.bake_animation",
        "signature": "bpy.ops.sound.bake_animation()#",
        "description": "Update the audio animation cache",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.sound.mixdown",
        "signature": "bpy.ops.sound.mixdown(filepath='',check_existing=True,filter_blender=False,filter_backup=False,filter_image=False,filter_movie=False,filter_python=False,filter_font=False,filter_sound=True,filter_text=False,filter_archive=False,filter_btx=False,filter_collada=False,filter_alembic=False,filter_usd=False,filter_obj=False,filter_volume=False,filter_folder=True,filter_blenlib=False,filemode=9,relative_path=True,display_type='DEFAULT',sort_method='',accuracy=1024,container='FLAC',codec='FLAC',format='S16',bitrate=192,split_channels=False)#",
        "description": "Mix the scene’s audio to a sound file",
        "parameters": [
            "filepath=''",
            "check_existing=True",
            "filter_blender=False",
            "filter_backup=False",
            "filter_image=False",
            "filter_movie=False",
            "filter_python=False",
            "filter_font=False",
            "filter_sound=True",
            "filter_text=False",
            "filter_archive=False",
            "filter_btx=False",
            "filter_collada=False",
            "filter_alembic=False",
            "filter_usd=False",
            "filter_obj=False",
            "filter_volume=False",
            "filter_folder=True",
            "filter_blenlib=False",
            "filemode=9",
            "relative_path=True",
            "display_type='DEFAULT'",
            "sort_method=''",
            "accuracy=1024",
            "container='FLAC'",
            "codec='FLAC'",
            "format='S16'",
            "bitrate=192",
            "split_channels=False"
        ],
        "parameter_descriptions": [
            "filepath(string,(optional,never None)) – File Path, Path to file",
            "check_existing(boolean,(optional)) – Check Existing, Check and warn on overwriting existing files",
            "filter_blender(boolean,(optional)) – Filter .blend files",
            "filter_backup(boolean,(optional)) – Filter .blend files",
            "filter_image(boolean,(optional)) – Filter image files",
            "filter_movie(boolean,(optional)) – Filter movie files",
            "filter_python(boolean,(optional)) – Filter Python files",
            "filter_font(boolean,(optional)) – Filter font files",
            "filter_sound(boolean,(optional)) – Filter sound files",
            "filter_text(boolean,(optional)) – Filter text files",
            "filter_archive(boolean,(optional)) – Filter archive files",
            "filter_btx(boolean,(optional)) – Filter btx files",
            "filter_collada(boolean,(optional)) – Filter COLLADA files",
            "filter_alembic(boolean,(optional)) – Filter Alembic files",
            "filter_usd(boolean,(optional)) – Filter USD files",
            "filter_obj(boolean,(optional)) – Filter OBJ files",
            "filter_volume(boolean,(optional)) – Filter OpenVDB volume files",
            "filter_folder(boolean,(optional)) – Filter folders",
            "filter_blenlib(boolean,(optional)) – Filter Blender IDs",
            "filemode(int in[1,9],(optional)) – File Browser Mode, The setting for the file browser mode to load a .blend file, a library or a special file",
            "relative_path(boolean,(optional)) – Relative Path, Select the file relative to the blend file",
            "display_type(enum in['DEFAULT','LIST_VERTICAL','LIST_HORIZONTAL','THUMBNAIL'],(optional)) –Display TypeDEFAULTDefault – Automatically determine display type for files.LIST_VERTICALShort List – Display files as short list.LIST_HORIZONTALLong List – Display files as a detailed list.THUMBNAILThumbnails – Display files as thumbnails.",
            "DEFAULTDefault – Automatically determine display type for files.",
            "LIST_VERTICALShort List – Display files as short list.",
            "LIST_HORIZONTALLong List – Display files as a detailed list.",
            "THUMBNAILThumbnails – Display files as thumbnails.",
            "sort_method(enum in[],(optional)) – File sorting mode",
            "accuracy(int in[1,inf],(optional)) – Accuracy, Sample accuracy, important for animation data (the lower the value, the more accurate)",
            "container(enum in['AC3','FLAC','MATROSKA','MP2','MP3','OGG','WAV'],(optional)) –Container, File formatAC3ac3 – Dolby Digital ATRAC 3.FLACflac – Free Lossless Audio Codec.MATROSKAmkv – Matroska.MP2mp2 – MPEG-1 Audio Layer II.MP3mp3 – MPEG-2 Audio Layer III.OGGogg – Xiph.Org Ogg Container.WAVwav – Waveform Audio File Format.",
            "AC3ac3 – Dolby Digital ATRAC 3.",
            "FLACflac – Free Lossless Audio Codec.",
            "MATROSKAmkv – Matroska.",
            "MP2mp2 – MPEG-1 Audio Layer II.",
            "MP3mp3 – MPEG-2 Audio Layer III.",
            "OGGogg – Xiph.Org Ogg Container.",
            "WAVwav – Waveform Audio File Format.",
            "codec(enum in['AAC','AC3','FLAC','MP2','MP3','PCM','VORBIS'],(optional)) –Codec, Audio CodecAACAAC – Advanced Audio Coding.AC3AC3 – Dolby Digital ATRAC 3.FLACFLAC – Free Lossless Audio Codec.MP2MP2 – MPEG-1 Audio Layer II.MP3MP3 – MPEG-2 Audio Layer III.PCMPCM – Pulse Code Modulation (RAW).VORBISVorbis – Xiph.Org Vorbis Codec.",
            "AACAAC – Advanced Audio Coding.",
            "AC3AC3 – Dolby Digital ATRAC 3.",
            "FLACFLAC – Free Lossless Audio Codec.",
            "MP2MP2 – MPEG-1 Audio Layer II.",
            "MP3MP3 – MPEG-2 Audio Layer III.",
            "PCMPCM – Pulse Code Modulation (RAW).",
            "VORBISVorbis – Xiph.Org Vorbis Codec.",
            "format(enum in['U8','S16','S24','S32','F32','F64'],(optional)) –Format, Sample formatU8U8 – 8-bit unsigned.S16S16 – 16-bit signed.S24S24 – 24-bit signed.S32S32 – 32-bit signed.F32F32 – 32-bit floating-point.F64F64 – 64-bit floating-point.",
            "U8U8 – 8-bit unsigned.",
            "S16S16 – 16-bit signed.",
            "S24S24 – 24-bit signed.",
            "S32S32 – 32-bit signed.",
            "F32F32 – 32-bit floating-point.",
            "F64F64 – 64-bit floating-point.",
            "bitrate(int in[32,512],(optional)) – Bitrate, Bitrate in kbit/s",
            "split_channels(boolean,(optional)) – Split channels, Each channel will be rendered into a mono file"
        ]
    },
    {
        "function_id": "bpy.ops.sound.open",
        "signature": "bpy.ops.sound.open(filepath='',hide_props_region=True,check_existing=False,filter_blender=False,filter_backup=False,filter_image=False,filter_movie=True,filter_python=False,filter_font=False,filter_sound=True,filter_text=False,filter_archive=False,filter_btx=False,filter_collada=False,filter_alembic=False,filter_usd=False,filter_obj=False,filter_volume=False,filter_folder=True,filter_blenlib=False,filemode=9,relative_path=True,show_multiview=False,use_multiview=False,display_type='DEFAULT',sort_method='',cache=False,mono=False)#",
        "description": "Load a sound file",
        "parameters": [
            "filepath=''",
            "hide_props_region=True",
            "check_existing=False",
            "filter_blender=False",
            "filter_backup=False",
            "filter_image=False",
            "filter_movie=True",
            "filter_python=False",
            "filter_font=False",
            "filter_sound=True",
            "filter_text=False",
            "filter_archive=False",
            "filter_btx=False",
            "filter_collada=False",
            "filter_alembic=False",
            "filter_usd=False",
            "filter_obj=False",
            "filter_volume=False",
            "filter_folder=True",
            "filter_blenlib=False",
            "filemode=9",
            "relative_path=True",
            "show_multiview=False",
            "use_multiview=False",
            "display_type='DEFAULT'",
            "sort_method=''",
            "cache=False",
            "mono=False"
        ],
        "parameter_descriptions": [
            "filepath(string,(optional,never None)) – File Path, Path to file",
            "hide_props_region(boolean,(optional)) – Hide Operator Properties, Collapse the region displaying the operator settings",
            "check_existing(boolean,(optional)) – Check Existing, Check and warn on overwriting existing files",
            "filter_blender(boolean,(optional)) – Filter .blend files",
            "filter_backup(boolean,(optional)) – Filter .blend files",
            "filter_image(boolean,(optional)) – Filter image files",
            "filter_movie(boolean,(optional)) – Filter movie files",
            "filter_python(boolean,(optional)) – Filter Python files",
            "filter_font(boolean,(optional)) – Filter font files",
            "filter_sound(boolean,(optional)) – Filter sound files",
            "filter_text(boolean,(optional)) – Filter text files",
            "filter_archive(boolean,(optional)) – Filter archive files",
            "filter_btx(boolean,(optional)) – Filter btx files",
            "filter_collada(boolean,(optional)) – Filter COLLADA files",
            "filter_alembic(boolean,(optional)) – Filter Alembic files",
            "filter_usd(boolean,(optional)) – Filter USD files",
            "filter_obj(boolean,(optional)) – Filter OBJ files",
            "filter_volume(boolean,(optional)) – Filter OpenVDB volume files",
            "filter_folder(boolean,(optional)) – Filter folders",
            "filter_blenlib(boolean,(optional)) – Filter Blender IDs",
            "filemode(int in[1,9],(optional)) – File Browser Mode, The setting for the file browser mode to load a .blend file, a library or a special file",
            "relative_path(boolean,(optional)) – Relative Path, Select the file relative to the blend file",
            "show_multiview(boolean,(optional)) – Enable Multi-View",
            "use_multiview(boolean,(optional)) – Use Multi-View",
            "display_type(enum in['DEFAULT','LIST_VERTICAL','LIST_HORIZONTAL','THUMBNAIL'],(optional)) –Display TypeDEFAULTDefault – Automatically determine display type for files.LIST_VERTICALShort List – Display files as short list.LIST_HORIZONTALLong List – Display files as a detailed list.THUMBNAILThumbnails – Display files as thumbnails.",
            "DEFAULTDefault – Automatically determine display type for files.",
            "LIST_VERTICALShort List – Display files as short list.",
            "LIST_HORIZONTALLong List – Display files as a detailed list.",
            "THUMBNAILThumbnails – Display files as thumbnails.",
            "sort_method(enum in[],(optional)) – File sorting mode",
            "cache(boolean,(optional)) – Cache, Cache the sound in memory",
            "mono(boolean,(optional)) – Mono, Merge all the sound’s channels into one"
        ]
    },
    {
        "function_id": "bpy.ops.sound.open_mono",
        "signature": "bpy.ops.sound.open_mono(filepath='',hide_props_region=True,check_existing=False,filter_blender=False,filter_backup=False,filter_image=False,filter_movie=True,filter_python=False,filter_font=False,filter_sound=True,filter_text=False,filter_archive=False,filter_btx=False,filter_collada=False,filter_alembic=False,filter_usd=False,filter_obj=False,filter_volume=False,filter_folder=True,filter_blenlib=False,filemode=9,relative_path=True,show_multiview=False,use_multiview=False,display_type='DEFAULT',sort_method='',cache=False,mono=True)#",
        "description": "Load a sound file as mono",
        "parameters": [
            "filepath=''",
            "hide_props_region=True",
            "check_existing=False",
            "filter_blender=False",
            "filter_backup=False",
            "filter_image=False",
            "filter_movie=True",
            "filter_python=False",
            "filter_font=False",
            "filter_sound=True",
            "filter_text=False",
            "filter_archive=False",
            "filter_btx=False",
            "filter_collada=False",
            "filter_alembic=False",
            "filter_usd=False",
            "filter_obj=False",
            "filter_volume=False",
            "filter_folder=True",
            "filter_blenlib=False",
            "filemode=9",
            "relative_path=True",
            "show_multiview=False",
            "use_multiview=False",
            "display_type='DEFAULT'",
            "sort_method=''",
            "cache=False",
            "mono=True"
        ],
        "parameter_descriptions": [
            "filepath(string,(optional,never None)) – File Path, Path to file",
            "hide_props_region(boolean,(optional)) – Hide Operator Properties, Collapse the region displaying the operator settings",
            "check_existing(boolean,(optional)) – Check Existing, Check and warn on overwriting existing files",
            "filter_blender(boolean,(optional)) – Filter .blend files",
            "filter_backup(boolean,(optional)) – Filter .blend files",
            "filter_image(boolean,(optional)) – Filter image files",
            "filter_movie(boolean,(optional)) – Filter movie files",
            "filter_python(boolean,(optional)) – Filter Python files",
            "filter_font(boolean,(optional)) – Filter font files",
            "filter_sound(boolean,(optional)) – Filter sound files",
            "filter_text(boolean,(optional)) – Filter text files",
            "filter_archive(boolean,(optional)) – Filter archive files",
            "filter_btx(boolean,(optional)) – Filter btx files",
            "filter_collada(boolean,(optional)) – Filter COLLADA files",
            "filter_alembic(boolean,(optional)) – Filter Alembic files",
            "filter_usd(boolean,(optional)) – Filter USD files",
            "filter_obj(boolean,(optional)) – Filter OBJ files",
            "filter_volume(boolean,(optional)) – Filter OpenVDB volume files",
            "filter_folder(boolean,(optional)) – Filter folders",
            "filter_blenlib(boolean,(optional)) – Filter Blender IDs",
            "filemode(int in[1,9],(optional)) – File Browser Mode, The setting for the file browser mode to load a .blend file, a library or a special file",
            "relative_path(boolean,(optional)) – Relative Path, Select the file relative to the blend file",
            "show_multiview(boolean,(optional)) – Enable Multi-View",
            "use_multiview(boolean,(optional)) – Use Multi-View",
            "display_type(enum in['DEFAULT','LIST_VERTICAL','LIST_HORIZONTAL','THUMBNAIL'],(optional)) –Display TypeDEFAULTDefault – Automatically determine display type for files.LIST_VERTICALShort List – Display files as short list.LIST_HORIZONTALLong List – Display files as a detailed list.THUMBNAILThumbnails – Display files as thumbnails.",
            "DEFAULTDefault – Automatically determine display type for files.",
            "LIST_VERTICALShort List – Display files as short list.",
            "LIST_HORIZONTALLong List – Display files as a detailed list.",
            "THUMBNAILThumbnails – Display files as thumbnails.",
            "sort_method(enum in[],(optional)) – File sorting mode",
            "cache(boolean,(optional)) – Cache, Cache the sound in memory",
            "mono(boolean,(optional)) – Mono, Mixdown the sound to mono"
        ]
    },
    {
        "function_id": "bpy.ops.sound.pack",
        "signature": "bpy.ops.sound.pack()#",
        "description": "Pack the sound into the current blend file",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.sound.unpack",
        "signature": "bpy.ops.sound.unpack(method='USE_LOCAL',id='')#",
        "description": "Unpack the sound to the samples filename",
        "parameters": [
            "method='USE_LOCAL'",
            "id=''"
        ],
        "parameter_descriptions": [
            "method(enum inUnpack Method Items, (optional)) – Method, How to unpack",
            "id(string,(optional,never None)) – Sound Name, Sound data-block name to unpack"
        ]
    },
    {
        "function_id": "bpy.ops.sound.update_animation_flags",
        "signature": "bpy.ops.sound.update_animation_flags()#",
        "description": "Update animation flags",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.world.convert_volume_to_mesh",
        "signature": "bpy.ops.world.convert_volume_to_mesh()#",
        "description": "Convert the volume of a world to a mesh. The world’s volume used to be rendered by EEVEE Legacy. Conversion is needed for it to render properly",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.world.new",
        "signature": "bpy.ops.world.new()#",
        "description": "Create a new world Data-Block",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.sculpt_curves.brush_stroke",
        "signature": "bpy.ops.sculpt_curves.brush_stroke(stroke=None,mode='NORMAL')#",
        "description": "Sculpt curves using a brush",
        "parameters": [
            "stroke=None",
            "mode='NORMAL'"
        ],
        "parameter_descriptions": [
            "stroke(bpy_prop_collectionofOperatorStrokeElement, (optional)) – Stroke",
            "mode(enum in['NORMAL','INVERT','SMOOTH'],(optional)) –Stroke Mode, Action taken when a paint stroke is madeNORMALRegular – Apply brush normally.INVERTInvert – Invert action of brush for duration of stroke.SMOOTHSmooth – Switch brush to smooth mode for duration of stroke.",
            "NORMALRegular – Apply brush normally.",
            "INVERTInvert – Invert action of brush for duration of stroke.",
            "SMOOTHSmooth – Switch brush to smooth mode for duration of stroke."
        ]
    },
    {
        "function_id": "bpy.ops.sculpt_curves.min_distance_edit",
        "signature": "bpy.ops.sculpt_curves.min_distance_edit()#",
        "description": "Change the minimum distance used by the density brush",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.sculpt_curves.select_grow",
        "signature": "bpy.ops.sculpt_curves.select_grow(distance=0.1)#",
        "description": "Select curves which are close to curves that are selected already",
        "parameters": [
            "distance=0.1"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.sculpt_curves.select_random",
        "signature": "bpy.ops.sculpt_curves.select_random(seed=0,partial=False,probability=0.5,min=0.0,constant_per_curve=True)#",
        "description": "Randomizes existing selection or create new random selection",
        "parameters": [
            "seed=0",
            "partial=False",
            "probability=0.5",
            "min=0.0",
            "constant_per_curve=True"
        ],
        "parameter_descriptions": [
            "seed(int in[-inf,inf],(optional)) – Seed, Source of randomness",
            "partial(boolean,(optional)) – Partial, Allow points or curves to be selected partially",
            "probability(float in[0,1],(optional)) – Probability, Chance of every point or curve being included in the selection",
            "min(float in[0,1],(optional)) – Min, Minimum value for the random selection",
            "constant_per_curve(boolean,(optional)) – Constant per Curve, The generated random number is the same for every control point of a curve"
        ]
    },
    {
        "function_id": "gpu.select.load_id",
        "signature": "gpu.select.load_id(id)#",
        "description": "Set the selection ID.",
        "parameters": [
            "id"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bl_math.clamp",
        "signature": "bl_math.clamp(value,min=0,max=1)#",
        "description": "Clamps the float value between minimum and maximum. To avoid\nconfusion, any call must use either one or all three arguments.",
        "parameters": [
            "value",
            "min=0",
            "max=1"
        ],
        "parameter_descriptions": [
            "value(float) – The value to clamp.",
            "min(float) – The minimum value, defaults to 0.",
            "max(float) – The maximum value, defaults to 1."
        ]
    },
    {
        "function_id": "bl_math.lerp",
        "signature": "bl_math.lerp(from_value,to_value,factor)#",
        "description": "Linearly interpolate between two float values based on factor.",
        "parameters": [
            "from_value",
            "to_value",
            "factor"
        ],
        "parameter_descriptions": [
            "from_value(float) – The value to return when factor is 0.",
            "to_value(float) – The value to return when factor is 1.",
            "factor(float) – The interpolation value, normally in [0.0, 1.0]."
        ]
    },
    {
        "function_id": "bl_math.smoothstep",
        "signature": "bl_math.smoothstep(from_value,to_value,value)#",
        "description": "Performs smooth interpolation between 0 and 1 as value changes between from and to values.\nOutside the range the function returns the same value as the nearest edge.",
        "parameters": [
            "from_value",
            "to_value",
            "value"
        ],
        "parameter_descriptions": [
            "from_value(float) – The edge value where the result is 0.",
            "to_value(float) – The edge value where the result is 1.",
            "factor(float) – The interpolation value."
        ]
    },
    {
        "function_id": "bpy.ops.fluid.bake_all",
        "signature": "bpy.ops.fluid.bake_all()#",
        "description": "Bake Entire Fluid Simulation",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.fluid.bake_data",
        "signature": "bpy.ops.fluid.bake_data()#",
        "description": "Bake Fluid Data",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.fluid.bake_guides",
        "signature": "bpy.ops.fluid.bake_guides()#",
        "description": "Bake Fluid Guiding",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.fluid.bake_mesh",
        "signature": "bpy.ops.fluid.bake_mesh()#",
        "description": "Bake Fluid Mesh",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.fluid.bake_noise",
        "signature": "bpy.ops.fluid.bake_noise()#",
        "description": "Bake Fluid Noise",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.fluid.bake_particles",
        "signature": "bpy.ops.fluid.bake_particles()#",
        "description": "Bake Fluid Particles",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.fluid.free_all",
        "signature": "bpy.ops.fluid.free_all()#",
        "description": "Free Entire Fluid Simulation",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.fluid.free_data",
        "signature": "bpy.ops.fluid.free_data()#",
        "description": "Free Fluid Data",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.fluid.free_guides",
        "signature": "bpy.ops.fluid.free_guides()#",
        "description": "Free Fluid Guiding",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.fluid.free_mesh",
        "signature": "bpy.ops.fluid.free_mesh()#",
        "description": "Free Fluid Mesh",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.fluid.free_noise",
        "signature": "bpy.ops.fluid.free_noise()#",
        "description": "Free Fluid Noise",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.fluid.free_particles",
        "signature": "bpy.ops.fluid.free_particles()#",
        "description": "Free Fluid Particles",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.fluid.pause_bake",
        "signature": "bpy.ops.fluid.pause_bake()#",
        "description": "Pause Bake",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.fluid.preset_add",
        "signature": "bpy.ops.fluid.preset_add(name='',remove_name=False,remove_active=False)#",
        "description": "Add or remove a Fluid Preset",
        "parameters": [
            "name=''",
            "remove_name=False",
            "remove_active=False"
        ],
        "parameter_descriptions": [
            "name(string,(optional,never None)) – Name, Name of the preset, used to make the path name",
            "remove_name(boolean,(optional)) – remove_name",
            "remove_active(boolean,(optional)) – remove_active"
        ]
    },
    {
        "function_id": "bpy.ops.clip.add_marker",
        "signature": "bpy.ops.clip.add_marker(location=(0.0,0.0))#",
        "description": "Place new marker at specified location",
        "parameters": [
            "location=(0.0,0.0)"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.clip.add_marker_at_click",
        "signature": "bpy.ops.clip.add_marker_at_click()#",
        "description": "Place new marker at the desired (clicked) position",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.clip.add_marker_move",
        "signature": "bpy.ops.clip.add_marker_move(CLIP_OT_add_marker=None,TRANSFORM_OT_translate=None)#",
        "description": "Add new marker and move it on movie",
        "parameters": [
            "CLIP_OT_add_marker=None",
            "TRANSFORM_OT_translate=None"
        ],
        "parameter_descriptions": [
            "CLIP_OT_add_marker(CLIP_OT_add_marker, (optional)) – Add Marker, Place new marker at specified location",
            "TRANSFORM_OT_translate(TRANSFORM_OT_translate, (optional)) – Move, Move selected items"
        ]
    },
    {
        "function_id": "bpy.ops.clip.add_marker_slide",
        "signature": "bpy.ops.clip.add_marker_slide(CLIP_OT_add_marker=None,TRANSFORM_OT_translate=None)#",
        "description": "Add new marker and slide it with mouse until mouse button release",
        "parameters": [
            "CLIP_OT_add_marker=None",
            "TRANSFORM_OT_translate=None"
        ],
        "parameter_descriptions": [
            "CLIP_OT_add_marker(CLIP_OT_add_marker, (optional)) – Add Marker, Place new marker at specified location",
            "TRANSFORM_OT_translate(TRANSFORM_OT_translate, (optional)) – Move, Move selected items"
        ]
    },
    {
        "function_id": "bpy.ops.clip.apply_solution_scale",
        "signature": "bpy.ops.clip.apply_solution_scale(distance=0.0)#",
        "description": "Apply scale on solution itself to make distance between selected tracks equals to desired",
        "parameters": [
            "distance=0.0"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.clip.average_tracks",
        "signature": "bpy.ops.clip.average_tracks(keep_original=True)#",
        "description": "Average selected tracks into active",
        "parameters": [
            "keep_original=True"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.clip.bundles_to_mesh",
        "signature": "bpy.ops.clip.bundles_to_mesh()#",
        "description": "Create vertex cloud using coordinates of reconstructed tracks",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.clip.camera_preset_add",
        "signature": "bpy.ops.clip.camera_preset_add(name='',remove_name=False,remove_active=False,use_focal_length=True)#",
        "description": "Add or remove a Tracking Camera Intrinsics Preset",
        "parameters": [
            "name=''",
            "remove_name=False",
            "remove_active=False",
            "use_focal_length=True"
        ],
        "parameter_descriptions": [
            "name(string,(optional,never None)) – Name, Name of the preset, used to make the path name",
            "remove_name(boolean,(optional)) – remove_name",
            "remove_active(boolean,(optional)) – remove_active",
            "use_focal_length(boolean,(optional)) – Include Focal Length, Include focal length into the preset"
        ]
    },
    {
        "function_id": "bpy.ops.clip.change_frame",
        "signature": "bpy.ops.clip.change_frame(frame=0)#",
        "description": "Interactively change the current frame number",
        "parameters": [
            "frame=0"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.clip.clean_tracks",
        "signature": "bpy.ops.clip.clean_tracks(frames=0,error=0.0,action='SELECT')#",
        "description": "Clean tracks with high error values or few frames",
        "parameters": [
            "frames=0",
            "error=0.0",
            "action='SELECT'"
        ],
        "parameter_descriptions": [
            "frames(int in[0,inf],(optional)) – Tracked Frames, Affect tracks which are tracked less than the specified number of frames",
            "error(float in[0,inf],(optional)) – Reprojection Error, Affect tracks which have a larger reprojection error",
            "action(enum in['SELECT','DELETE_TRACK','DELETE_SEGMENTS'],(optional)) –Action, Cleanup action to executeSELECTSelect – Select unclean tracks.DELETE_TRACKDelete Track – Delete unclean tracks.DELETE_SEGMENTSDelete Segments – Delete unclean segments of tracks.",
            "SELECTSelect – Select unclean tracks.",
            "DELETE_TRACKDelete Track – Delete unclean tracks.",
            "DELETE_SEGMENTSDelete Segments – Delete unclean segments of tracks."
        ]
    },
    {
        "function_id": "bpy.ops.clip.clear_solution",
        "signature": "bpy.ops.clip.clear_solution()#",
        "description": "Clear all calculated data",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.clip.clear_track_path",
        "signature": "bpy.ops.clip.clear_track_path(action='REMAINED',clear_active=False)#",
        "description": "Clear tracks after/before current position or clear the whole track",
        "parameters": [
            "action='REMAINED'",
            "clear_active=False"
        ],
        "parameter_descriptions": [
            "action(enum in['UPTO','REMAINED','ALL'],(optional)) –Action, Clear action to executeUPTOClear Up To – Clear path up to current frame.REMAINEDClear Remained – Clear path at remaining frames (after current).ALLClear All – Clear the whole path.",
            "UPTOClear Up To – Clear path up to current frame.",
            "REMAINEDClear Remained – Clear path at remaining frames (after current).",
            "ALLClear All – Clear the whole path.",
            "clear_active(boolean,(optional)) – Clear Active, Clear active track only instead of all selected tracks"
        ]
    },
    {
        "function_id": "bpy.ops.clip.constraint_to_fcurve",
        "signature": "bpy.ops.clip.constraint_to_fcurve()#",
        "description": "Create F-Curves for object which will copy object’s movement caused by this constraint",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.clip.copy_tracks",
        "signature": "bpy.ops.clip.copy_tracks()#",
        "description": "Copy the selected tracks to the internal clipboard",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.clip.create_plane_track",
        "signature": "bpy.ops.clip.create_plane_track()#",
        "description": "Create new plane track out of selected point tracks",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.clip.cursor_set",
        "signature": "bpy.ops.clip.cursor_set(location=(0.0,0.0))#",
        "description": "Set 2D cursor location",
        "parameters": [
            "location=(0.0,0.0)"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.clip.delete_marker",
        "signature": "bpy.ops.clip.delete_marker(confirm=True)#",
        "description": "Delete marker for current frame from selected tracks",
        "parameters": [
            "confirm=True"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.clip.delete_proxy",
        "signature": "bpy.ops.clip.delete_proxy()#",
        "description": "Delete movie clip proxy files from the hard drive",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.clip.delete_track",
        "signature": "bpy.ops.clip.delete_track(confirm=True)#",
        "description": "Delete selected tracks",
        "parameters": [
            "confirm=True"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.clip.detect_features",
        "signature": "bpy.ops.clip.detect_features(placement='FRAME',margin=16,threshold=0.5,min_distance=120)#",
        "description": "Automatically detect features and place markers to track",
        "parameters": [
            "placement='FRAME'",
            "margin=16",
            "threshold=0.5",
            "min_distance=120"
        ],
        "parameter_descriptions": [
            "placement(enum in['FRAME','INSIDE_GPENCIL','OUTSIDE_GPENCIL'],(optional)) –Placement, Placement for detected featuresFRAMEWhole Frame – Place markers across the whole frame.INSIDE_GPENCILInside Annotated Area – Place markers only inside areas outlined with the Annotation tool.OUTSIDE_GPENCILOutside Annotated Area – Place markers only outside areas outlined with the Annotation tool.",
            "FRAMEWhole Frame – Place markers across the whole frame.",
            "INSIDE_GPENCILInside Annotated Area – Place markers only inside areas outlined with the Annotation tool.",
            "OUTSIDE_GPENCILOutside Annotated Area – Place markers only outside areas outlined with the Annotation tool.",
            "margin(int in[0,inf],(optional)) – Margin, Only features further than margin pixels from the image edges are considered",
            "threshold(float in[0.0001,inf],(optional)) – Threshold, Threshold level to consider feature good enough for tracking",
            "min_distance(int in[0,inf],(optional)) – Distance, Minimal distance accepted between two features"
        ]
    },
    {
        "function_id": "bpy.ops.clip.disable_markers",
        "signature": "bpy.ops.clip.disable_markers(action='DISABLE')#",
        "description": "Disable/enable selected markers",
        "parameters": [
            "action='DISABLE'"
        ],
        "parameter_descriptions": [
            "DISABLEDisable – Disable selected markers.",
            "ENABLEEnable – Enable selected markers.",
            "TOGGLEToggle – Toggle disabled flag for selected markers."
        ]
    },
    {
        "function_id": "bpy.ops.clip.dopesheet_select_channel",
        "signature": "bpy.ops.clip.dopesheet_select_channel(location=(0.0,0.0),extend=False)#",
        "description": "Select movie tracking channel",
        "parameters": [
            "location=(0.0,0.0)",
            "extend=False"
        ],
        "parameter_descriptions": [
            "location(mathutils.Vectorof 2 items in [-inf, inf], (optional)) – Location, Mouse location to select channel",
            "extend(boolean,(optional)) – Extend, Extend selection rather than clearing the existing selection"
        ]
    },
    {
        "function_id": "bpy.ops.clip.dopesheet_view_all",
        "signature": "bpy.ops.clip.dopesheet_view_all()#",
        "description": "Reset viewable area to show full keyframe range",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.clip.filter_tracks",
        "signature": "bpy.ops.clip.filter_tracks(track_threshold=5.0)#",
        "description": "Filter tracks which has weirdly looking spikes in motion curves",
        "parameters": [
            "track_threshold=5.0"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.clip.frame_jump",
        "signature": "bpy.ops.clip.frame_jump(position='PATHSTART')#",
        "description": "Jump to special frame",
        "parameters": [
            "position='PATHSTART'"
        ],
        "parameter_descriptions": [
            "PATHSTARTPath Start – Jump to start of current path.",
            "PATHENDPath End – Jump to end of current path.",
            "FAILEDPREVPrevious Failed – Jump to previous failed frame.",
            "FAILNEXTNext Failed – Jump to next failed frame."
        ]
    },
    {
        "function_id": "bpy.ops.clip.graph_center_current_frame",
        "signature": "bpy.ops.clip.graph_center_current_frame()#",
        "description": "Scroll view so current frame would be centered",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.clip.graph_delete_curve",
        "signature": "bpy.ops.clip.graph_delete_curve(confirm=True)#",
        "description": "Delete track corresponding to the selected curve",
        "parameters": [
            "confirm=True"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.clip.graph_delete_knot",
        "signature": "bpy.ops.clip.graph_delete_knot()#",
        "description": "Delete curve knots",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.clip.graph_disable_markers",
        "signature": "bpy.ops.clip.graph_disable_markers(action='DISABLE')#",
        "description": "Disable/enable selected markers",
        "parameters": [
            "action='DISABLE'"
        ],
        "parameter_descriptions": [
            "DISABLEDisable – Disable selected markers.",
            "ENABLEEnable – Enable selected markers.",
            "TOGGLEToggle – Toggle disabled flag for selected markers."
        ]
    },
    {
        "function_id": "bpy.ops.clip.graph_select",
        "signature": "bpy.ops.clip.graph_select(location=(0.0,0.0),extend=False)#",
        "description": "Select graph curves",
        "parameters": [
            "location=(0.0,0.0)",
            "extend=False"
        ],
        "parameter_descriptions": [
            "location(mathutils.Vectorof 2 items in [-inf, inf], (optional)) – Location, Mouse location to select nearest entity",
            "extend(boolean,(optional)) – Extend, Extend selection rather than clearing the existing selection"
        ]
    },
    {
        "function_id": "bpy.ops.clip.graph_select_all_markers",
        "signature": "bpy.ops.clip.graph_select_all_markers(action='TOGGLE')#",
        "description": "Change selection of all markers of active track",
        "parameters": [
            "action='TOGGLE'"
        ],
        "parameter_descriptions": [
            "TOGGLEToggle – Toggle selection for all elements.",
            "SELECTSelect – Select all elements.",
            "DESELECTDeselect – Deselect all elements.",
            "INVERTInvert – Invert selection of all elements."
        ]
    },
    {
        "function_id": "bpy.ops.clip.graph_select_box",
        "signature": "bpy.ops.clip.graph_select_box(xmin=0,xmax=0,ymin=0,ymax=0,wait_for_input=True,deselect=False,extend=True)#",
        "description": "Select curve points using box selection",
        "parameters": [
            "xmin=0",
            "xmax=0",
            "ymin=0",
            "ymax=0",
            "wait_for_input=True",
            "deselect=False",
            "extend=True"
        ],
        "parameter_descriptions": [
            "xmin(int in[-inf,inf],(optional)) – X Min",
            "xmax(int in[-inf,inf],(optional)) – X Max",
            "ymin(int in[-inf,inf],(optional)) – Y Min",
            "ymax(int in[-inf,inf],(optional)) – Y Max",
            "wait_for_input(boolean,(optional)) – Wait for Input",
            "deselect(boolean,(optional)) – Deselect, Deselect rather than select items",
            "extend(boolean,(optional)) – Extend, Extend selection instead of deselecting everything first"
        ]
    },
    {
        "function_id": "bpy.ops.clip.graph_view_all",
        "signature": "bpy.ops.clip.graph_view_all()#",
        "description": "View all curves in editor",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.clip.hide_tracks",
        "signature": "bpy.ops.clip.hide_tracks(unselected=False)#",
        "description": "Hide selected tracks",
        "parameters": [
            "unselected=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.clip.hide_tracks_clear",
        "signature": "bpy.ops.clip.hide_tracks_clear()#",
        "description": "Clear hide selected tracks",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.clip.join_tracks",
        "signature": "bpy.ops.clip.join_tracks()#",
        "description": "Join selected tracks",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.clip.keyframe_delete",
        "signature": "bpy.ops.clip.keyframe_delete()#",
        "description": "Delete a keyframe from selected tracks at current frame",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.clip.keyframe_insert",
        "signature": "bpy.ops.clip.keyframe_insert()#",
        "description": "Insert a keyframe to selected tracks at current frame",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.clip.lock_selection_toggle",
        "signature": "bpy.ops.clip.lock_selection_toggle()#",
        "description": "Toggle Lock Selection option of the current clip editor",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.clip.lock_tracks",
        "signature": "bpy.ops.clip.lock_tracks(action='LOCK')#",
        "description": "Lock/unlock selected tracks",
        "parameters": [
            "action='LOCK'"
        ],
        "parameter_descriptions": [
            "LOCKLock – Lock selected tracks.",
            "UNLOCKUnlock – Unlock selected tracks.",
            "TOGGLEToggle – Toggle locked flag for selected tracks."
        ]
    },
    {
        "function_id": "bpy.ops.clip.mode_set",
        "signature": "bpy.ops.clip.mode_set(mode='TRACKING')#",
        "description": "Set the clip interaction mode",
        "parameters": [
            "mode='TRACKING'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.clip.new_image_from_plane_marker",
        "signature": "bpy.ops.clip.new_image_from_plane_marker()#",
        "description": "Create new image from the content of the plane marker",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.clip.open",
        "signature": "bpy.ops.clip.open(directory='',files=None,hide_props_region=True,check_existing=False,filter_blender=False,filter_backup=False,filter_image=True,filter_movie=True,filter_python=False,filter_font=False,filter_sound=False,filter_text=False,filter_archive=False,filter_btx=False,filter_collada=False,filter_alembic=False,filter_usd=False,filter_obj=False,filter_volume=False,filter_folder=True,filter_blenlib=False,filemode=9,relative_path=True,show_multiview=False,use_multiview=False,display_type='DEFAULT',sort_method='')#",
        "description": "Load a sequence of frames or a movie file",
        "parameters": [
            "directory=''",
            "files=None",
            "hide_props_region=True",
            "check_existing=False",
            "filter_blender=False",
            "filter_backup=False",
            "filter_image=True",
            "filter_movie=True",
            "filter_python=False",
            "filter_font=False",
            "filter_sound=False",
            "filter_text=False",
            "filter_archive=False",
            "filter_btx=False",
            "filter_collada=False",
            "filter_alembic=False",
            "filter_usd=False",
            "filter_obj=False",
            "filter_volume=False",
            "filter_folder=True",
            "filter_blenlib=False",
            "filemode=9",
            "relative_path=True",
            "show_multiview=False",
            "use_multiview=False",
            "display_type='DEFAULT'",
            "sort_method=''"
        ],
        "parameter_descriptions": [
            "directory(string,(optional,never None)) – Directory, Directory of the file",
            "files(bpy_prop_collectionofOperatorFileListElement, (optional)) – Files",
            "hide_props_region(boolean,(optional)) – Hide Operator Properties, Collapse the region displaying the operator settings",
            "check_existing(boolean,(optional)) – Check Existing, Check and warn on overwriting existing files",
            "filter_blender(boolean,(optional)) – Filter .blend files",
            "filter_backup(boolean,(optional)) – Filter .blend files",
            "filter_image(boolean,(optional)) – Filter image files",
            "filter_movie(boolean,(optional)) – Filter movie files",
            "filter_python(boolean,(optional)) – Filter Python files",
            "filter_font(boolean,(optional)) – Filter font files",
            "filter_sound(boolean,(optional)) – Filter sound files",
            "filter_text(boolean,(optional)) – Filter text files",
            "filter_archive(boolean,(optional)) – Filter archive files",
            "filter_btx(boolean,(optional)) – Filter btx files",
            "filter_collada(boolean,(optional)) – Filter COLLADA files",
            "filter_alembic(boolean,(optional)) – Filter Alembic files",
            "filter_usd(boolean,(optional)) – Filter USD files",
            "filter_obj(boolean,(optional)) – Filter OBJ files",
            "filter_volume(boolean,(optional)) – Filter OpenVDB volume files",
            "filter_folder(boolean,(optional)) – Filter folders",
            "filter_blenlib(boolean,(optional)) – Filter Blender IDs",
            "filemode(int in[1,9],(optional)) – File Browser Mode, The setting for the file browser mode to load a .blend file, a library or a special file",
            "relative_path(boolean,(optional)) – Relative Path, Select the file relative to the blend file",
            "show_multiview(boolean,(optional)) – Enable Multi-View",
            "use_multiview(boolean,(optional)) – Use Multi-View",
            "display_type(enum in['DEFAULT','LIST_VERTICAL','LIST_HORIZONTAL','THUMBNAIL'],(optional)) –Display TypeDEFAULTDefault – Automatically determine display type for files.LIST_VERTICALShort List – Display files as short list.LIST_HORIZONTALLong List – Display files as a detailed list.THUMBNAILThumbnails – Display files as thumbnails.",
            "DEFAULTDefault – Automatically determine display type for files.",
            "LIST_VERTICALShort List – Display files as short list.",
            "LIST_HORIZONTALLong List – Display files as a detailed list.",
            "THUMBNAILThumbnails – Display files as thumbnails.",
            "sort_method(enum in['DEFAULT','FILE_SORT_ALPHA','FILE_SORT_EXTENSION','FILE_SORT_TIME','FILE_SORT_SIZE'],(optional)) –File sorting modeDEFAULTDefault – Automatically determine sort method for files.FILE_SORT_ALPHAName – Sort the file list alphabetically.FILE_SORT_EXTENSIONExtension – Sort the file list by extension/type.FILE_SORT_TIMEModified Date – Sort files by modification time.FILE_SORT_SIZESize – Sort files by size.",
            "DEFAULTDefault – Automatically determine sort method for files.",
            "FILE_SORT_ALPHAName – Sort the file list alphabetically.",
            "FILE_SORT_EXTENSIONExtension – Sort the file list by extension/type.",
            "FILE_SORT_TIMEModified Date – Sort files by modification time.",
            "FILE_SORT_SIZESize – Sort files by size."
        ]
    },
    {
        "function_id": "bpy.ops.clip.paste_tracks",
        "signature": "bpy.ops.clip.paste_tracks()#",
        "description": "Paste tracks from the internal clipboard",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.clip.prefetch",
        "signature": "bpy.ops.clip.prefetch()#",
        "description": "Prefetch frames from disk for faster playback/tracking",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.clip.rebuild_proxy",
        "signature": "bpy.ops.clip.rebuild_proxy()#",
        "description": "Rebuild all selected proxies and timecode indices in the background",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.clip.refine_markers",
        "signature": "bpy.ops.clip.refine_markers(backwards=False)#",
        "description": "Refine selected markers positions by running the tracker from track’s reference to current frame",
        "parameters": [
            "backwards=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.clip.reload",
        "signature": "bpy.ops.clip.reload()#",
        "description": "Reload clip",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.clip.select",
        "signature": "bpy.ops.clip.select(extend=False,deselect_all=False,location=(0.0,0.0))#",
        "description": "Select tracking markers",
        "parameters": [
            "extend=False",
            "deselect_all=False",
            "location=(0.0,0.0)"
        ],
        "parameter_descriptions": [
            "extend(boolean,(optional)) – Extend, Extend selection rather than clearing the existing selection",
            "deselect_all(boolean,(optional)) – Deselect On Nothing, Deselect all when nothing under the cursor",
            "location(mathutils.Vectorof 2 items in [-inf, inf], (optional)) – Location, Mouse location in normalized coordinates, 0.0 to 1.0 is within the image bounds"
        ]
    },
    {
        "function_id": "bpy.ops.clip.select_all",
        "signature": "bpy.ops.clip.select_all(action='TOGGLE')#",
        "description": "Change selection of all tracking markers",
        "parameters": [
            "action='TOGGLE'"
        ],
        "parameter_descriptions": [
            "TOGGLEToggle – Toggle selection for all elements.",
            "SELECTSelect – Select all elements.",
            "DESELECTDeselect – Deselect all elements.",
            "INVERTInvert – Invert selection of all elements."
        ]
    },
    {
        "function_id": "bpy.ops.clip.select_box",
        "signature": "bpy.ops.clip.select_box(xmin=0,xmax=0,ymin=0,ymax=0,wait_for_input=True,mode='SET')#",
        "description": "Select markers using box selection",
        "parameters": [
            "xmin=0",
            "xmax=0",
            "ymin=0",
            "ymax=0",
            "wait_for_input=True",
            "mode='SET'"
        ],
        "parameter_descriptions": [
            "xmin(int in[-inf,inf],(optional)) – X Min",
            "xmax(int in[-inf,inf],(optional)) – X Max",
            "ymin(int in[-inf,inf],(optional)) – Y Min",
            "ymax(int in[-inf,inf],(optional)) – Y Max",
            "wait_for_input(boolean,(optional)) – Wait for Input",
            "mode(enum in['SET','ADD','SUB'],(optional)) –ModeSETSet – Set a new selection.ADDExtend – Extend existing selection.SUBSubtract – Subtract existing selection.",
            "SETSet – Set a new selection.",
            "ADDExtend – Extend existing selection.",
            "SUBSubtract – Subtract existing selection."
        ]
    },
    {
        "function_id": "bpy.ops.clip.select_circle",
        "signature": "bpy.ops.clip.select_circle(x=0,y=0,radius=25,wait_for_input=True,mode='SET')#",
        "description": "Select markers using circle selection",
        "parameters": [
            "x=0",
            "y=0",
            "radius=25",
            "wait_for_input=True",
            "mode='SET'"
        ],
        "parameter_descriptions": [
            "x(int in[-inf,inf],(optional)) – X",
            "y(int in[-inf,inf],(optional)) – Y",
            "radius(int in[1,inf],(optional)) – Radius",
            "wait_for_input(boolean,(optional)) – Wait for Input",
            "mode(enum in['SET','ADD','SUB'],(optional)) –ModeSETSet – Set a new selection.ADDExtend – Extend existing selection.SUBSubtract – Subtract existing selection.",
            "SETSet – Set a new selection.",
            "ADDExtend – Extend existing selection.",
            "SUBSubtract – Subtract existing selection."
        ]
    },
    {
        "function_id": "bpy.ops.clip.select_grouped",
        "signature": "bpy.ops.clip.select_grouped(group='ESTIMATED')#",
        "description": "Select all tracks from specified group",
        "parameters": [
            "group='ESTIMATED'"
        ],
        "parameter_descriptions": [
            "KEYFRAMEDKeyframed Tracks – Select all keyframed tracks.",
            "ESTIMATEDEstimated Tracks – Select all estimated tracks.",
            "TRACKEDTracked Tracks – Select all tracked tracks.",
            "LOCKEDLocked Tracks – Select all locked tracks.",
            "DISABLEDDisabled Tracks – Select all disabled tracks.",
            "COLORTracks with Same Color – Select all tracks with same color as active track.",
            "FAILEDFailed Tracks – Select all tracks which failed to be reconstructed."
        ]
    },
    {
        "function_id": "bpy.ops.clip.select_lasso",
        "signature": "bpy.ops.clip.select_lasso(path=None,mode='SET')#",
        "description": "Select markers using lasso selection",
        "parameters": [
            "path=None",
            "mode='SET'"
        ],
        "parameter_descriptions": [
            "path(bpy_prop_collectionofOperatorMousePath, (optional)) – Path",
            "mode(enum in['SET','ADD','SUB'],(optional)) –ModeSETSet – Set a new selection.ADDExtend – Extend existing selection.SUBSubtract – Subtract existing selection.",
            "SETSet – Set a new selection.",
            "ADDExtend – Extend existing selection.",
            "SUBSubtract – Subtract existing selection."
        ]
    },
    {
        "function_id": "bpy.ops.clip.set_active_clip",
        "signature": "bpy.ops.clip.set_active_clip()#",
        "description": "Undocumented, considercontributing.",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.clip.set_axis",
        "signature": "bpy.ops.clip.set_axis(axis='X')#",
        "description": "Set the direction of a scene axis by rotating the camera (or its parent if present). This assumes that the selected track lies on a real axis connecting it to the origin",
        "parameters": [
            "axis='X'"
        ],
        "parameter_descriptions": [
            "XX – Align bundle align X axis.",
            "YY – Align bundle align Y axis."
        ]
    },
    {
        "function_id": "bpy.ops.clip.set_origin",
        "signature": "bpy.ops.clip.set_origin(use_median=False)#",
        "description": "Set active marker as origin by moving camera (or its parent if present) in 3D space",
        "parameters": [
            "use_median=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.clip.set_plane",
        "signature": "bpy.ops.clip.set_plane(plane='FLOOR')#",
        "description": "Set plane based on 3 selected bundles by moving camera (or its parent if present) in 3D space",
        "parameters": [
            "plane='FLOOR'"
        ],
        "parameter_descriptions": [
            "FLOORFloor – Set floor plane.",
            "WALLWall – Set wall plane."
        ]
    },
    {
        "function_id": "bpy.ops.clip.set_scale",
        "signature": "bpy.ops.clip.set_scale(distance=0.0)#",
        "description": "Set scale of scene by scaling camera (or its parent if present)",
        "parameters": [
            "distance=0.0"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.clip.set_scene_frames",
        "signature": "bpy.ops.clip.set_scene_frames()#",
        "description": "Set scene’s start and end frame to match clip’s start frame and length",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.clip.set_solution_scale",
        "signature": "bpy.ops.clip.set_solution_scale(distance=0.0)#",
        "description": "Set object solution scale using distance between two selected tracks",
        "parameters": [
            "distance=0.0"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.clip.set_solver_keyframe",
        "signature": "bpy.ops.clip.set_solver_keyframe(keyframe='KEYFRAME_A')#",
        "description": "Set keyframe used by solver",
        "parameters": [
            "keyframe='KEYFRAME_A'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.clip.set_viewport_background",
        "signature": "bpy.ops.clip.set_viewport_background()#",
        "description": "Set current movie clip as a camera background in 3D Viewport (works only when a 3D Viewport is visible)",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.clip.setup_tracking_scene",
        "signature": "bpy.ops.clip.setup_tracking_scene()#",
        "description": "Prepare scene for compositing 3D objects into this footage",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.clip.slide_marker",
        "signature": "bpy.ops.clip.slide_marker(offset=(0.0,0.0))#",
        "description": "Slide marker areas",
        "parameters": [
            "offset=(0.0,0.0)"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.clip.slide_plane_marker",
        "signature": "bpy.ops.clip.slide_plane_marker()#",
        "description": "Slide plane marker areas",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.clip.solve_camera",
        "signature": "bpy.ops.clip.solve_camera()#",
        "description": "Solve camera motion from tracks",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.clip.stabilize_2d_add",
        "signature": "bpy.ops.clip.stabilize_2d_add()#",
        "description": "Add selected tracks to 2D translation stabilization",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.clip.stabilize_2d_remove",
        "signature": "bpy.ops.clip.stabilize_2d_remove()#",
        "description": "Remove selected track from translation stabilization",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.clip.stabilize_2d_rotation_add",
        "signature": "bpy.ops.clip.stabilize_2d_rotation_add()#",
        "description": "Add selected tracks to 2D rotation stabilization",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.clip.stabilize_2d_rotation_remove",
        "signature": "bpy.ops.clip.stabilize_2d_rotation_remove()#",
        "description": "Remove selected track from rotation stabilization",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.clip.stabilize_2d_rotation_select",
        "signature": "bpy.ops.clip.stabilize_2d_rotation_select()#",
        "description": "Select tracks which are used for rotation stabilization",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.clip.stabilize_2d_select",
        "signature": "bpy.ops.clip.stabilize_2d_select()#",
        "description": "Select tracks which are used for translation stabilization",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.clip.track_color_preset_add",
        "signature": "bpy.ops.clip.track_color_preset_add(name='',remove_name=False,remove_active=False)#",
        "description": "Add or remove a Clip Track Color Preset",
        "parameters": [
            "name=''",
            "remove_name=False",
            "remove_active=False"
        ],
        "parameter_descriptions": [
            "name(string,(optional,never None)) – Name, Name of the preset, used to make the path name",
            "remove_name(boolean,(optional)) – remove_name",
            "remove_active(boolean,(optional)) – remove_active"
        ]
    },
    {
        "function_id": "bpy.ops.clip.track_copy_color",
        "signature": "bpy.ops.clip.track_copy_color()#",
        "description": "Copy color to all selected tracks",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.clip.track_markers",
        "signature": "bpy.ops.clip.track_markers(backwards=False,sequence=False)#",
        "description": "Track selected markers",
        "parameters": [
            "backwards=False",
            "sequence=False"
        ],
        "parameter_descriptions": [
            "backwards(boolean,(optional)) – Backwards, Do backwards tracking",
            "sequence(boolean,(optional)) – Track Sequence, Track marker during image sequence rather than single image"
        ]
    },
    {
        "function_id": "bpy.ops.clip.track_settings_as_default",
        "signature": "bpy.ops.clip.track_settings_as_default()#",
        "description": "Copy tracking settings from active track to default settings",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.clip.track_settings_to_track",
        "signature": "bpy.ops.clip.track_settings_to_track()#",
        "description": "Copy tracking settings from active track to selected tracks",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.clip.track_to_empty",
        "signature": "bpy.ops.clip.track_to_empty()#",
        "description": "Create an Empty object which will be copying movement of active track",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.clip.tracking_object_new",
        "signature": "bpy.ops.clip.tracking_object_new()#",
        "description": "Add new object for tracking",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.clip.tracking_object_remove",
        "signature": "bpy.ops.clip.tracking_object_remove()#",
        "description": "Remove object for tracking",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.clip.tracking_settings_preset_add",
        "signature": "bpy.ops.clip.tracking_settings_preset_add(name='',remove_name=False,remove_active=False)#",
        "description": "Add or remove a motion tracking settings preset",
        "parameters": [
            "name=''",
            "remove_name=False",
            "remove_active=False"
        ],
        "parameter_descriptions": [
            "name(string,(optional,never None)) – Name, Name of the preset, used to make the path name",
            "remove_name(boolean,(optional)) – remove_name",
            "remove_active(boolean,(optional)) – remove_active"
        ]
    },
    {
        "function_id": "bpy.ops.clip.update_image_from_plane_marker",
        "signature": "bpy.ops.clip.update_image_from_plane_marker()#",
        "description": "Update current image used by plane marker from the content of the plane marker",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.clip.view_all",
        "signature": "bpy.ops.clip.view_all(fit_view=False)#",
        "description": "View whole image with markers",
        "parameters": [
            "fit_view=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.clip.view_center_cursor",
        "signature": "bpy.ops.clip.view_center_cursor()#",
        "description": "Center the view so that the cursor is in the middle of the view",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.clip.view_ndof",
        "signature": "bpy.ops.clip.view_ndof()#",
        "description": "Use a 3D mouse device to pan/zoom the view",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.clip.view_pan",
        "signature": "bpy.ops.clip.view_pan(offset=(0.0,0.0))#",
        "description": "Pan the view",
        "parameters": [
            "offset=(0.0,0.0)"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.clip.view_selected",
        "signature": "bpy.ops.clip.view_selected()#",
        "description": "View all selected elements",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.clip.view_zoom",
        "signature": "bpy.ops.clip.view_zoom(factor=0.0,use_cursor_init=True)#",
        "description": "Zoom in/out the view",
        "parameters": [
            "factor=0.0",
            "use_cursor_init=True"
        ],
        "parameter_descriptions": [
            "factor(float in[-inf,inf],(optional)) – Factor, Zoom factor, values higher than 1.0 zoom in, lower values zoom out",
            "use_cursor_init(boolean,(optional)) – Use Mouse Position, Allow the initial mouse position to be used"
        ]
    },
    {
        "function_id": "bpy.ops.clip.view_zoom_in",
        "signature": "bpy.ops.clip.view_zoom_in(location=(0.0,0.0))#",
        "description": "Zoom in the view",
        "parameters": [
            "location=(0.0,0.0)"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.clip.view_zoom_out",
        "signature": "bpy.ops.clip.view_zoom_out(location=(0.0,0.0))#",
        "description": "Zoom out the view",
        "parameters": [
            "location=(0.0,0.0)"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.clip.view_zoom_ratio",
        "signature": "bpy.ops.clip.view_zoom_ratio(ratio=0.0)#",
        "description": "Set the zoom ratio (based on clip size)",
        "parameters": [
            "ratio=0.0"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "mathutils.noise.cell",
        "signature": "mathutils.noise.cell(position)#",
        "description": "Returns cell noise value at the specified position.",
        "parameters": [
            "position"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "mathutils.noise.cell_vector",
        "signature": "mathutils.noise.cell_vector(position)#",
        "description": "Returns cell noise vector at the specified position.",
        "parameters": [
            "position"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "mathutils.noise.fractal",
        "signature": "mathutils.noise.fractal(position,H,lacunarity,octaves,noise_basis='PERLIN_ORIGINAL')#",
        "description": "Returns the fractal Brownian motion (fBm) noise value from the noise basis at the specified position.",
        "parameters": [
            "position",
            "H",
            "lacunarity",
            "octaves",
            "noise_basis='PERLIN_ORIGINAL'"
        ],
        "parameter_descriptions": [
            "position(mathutils.Vector) – The position to evaluate the selected noise function.",
            "H(float) – The fractal increment factor.",
            "lacunarity(float) – The gap between successive frequencies.",
            "octaves(int) – The number of different noise frequencies used.",
            "noise_basis(string) – Enumerator in [‘BLENDER’, ‘PERLIN_ORIGINAL’, ‘PERLIN_NEW’, ‘VORONOI_F1’, ‘VORONOI_F2’, ‘VORONOI_F3’, ‘VORONOI_F4’, ‘VORONOI_F2F1’, ‘VORONOI_CRACKLE’, ‘CELLNOISE’]."
        ]
    },
    {
        "function_id": "mathutils.noise.hetero_terrain",
        "signature": "mathutils.noise.hetero_terrain(position,H,lacunarity,octaves,offset,noise_basis='PERLIN_ORIGINAL')#",
        "description": "Returns the heterogeneous terrain value from the noise basis at the specified position.",
        "parameters": [
            "position",
            "H",
            "lacunarity",
            "octaves",
            "offset",
            "noise_basis='PERLIN_ORIGINAL'"
        ],
        "parameter_descriptions": [
            "position(mathutils.Vector) – The position to evaluate the selected noise function.",
            "H(float) – The fractal dimension of the roughest areas.",
            "lacunarity(float) – The gap between successive frequencies.",
            "octaves(int) – The number of different noise frequencies used.",
            "offset(float) – The height of the terrain above ‘sea level’.",
            "noise_basis(string) – Enumerator in [‘BLENDER’, ‘PERLIN_ORIGINAL’, ‘PERLIN_NEW’, ‘VORONOI_F1’, ‘VORONOI_F2’, ‘VORONOI_F3’, ‘VORONOI_F4’, ‘VORONOI_F2F1’, ‘VORONOI_CRACKLE’, ‘CELLNOISE’]."
        ]
    },
    {
        "function_id": "mathutils.noise.hybrid_multi_fractal",
        "signature": "mathutils.noise.hybrid_multi_fractal(position,H,lacunarity,octaves,offset,gain,noise_basis='PERLIN_ORIGINAL')#",
        "description": "Returns hybrid multifractal value from the noise basis at the specified position.",
        "parameters": [
            "position",
            "H",
            "lacunarity",
            "octaves",
            "offset",
            "gain",
            "noise_basis='PERLIN_ORIGINAL'"
        ],
        "parameter_descriptions": [
            "position(mathutils.Vector) – The position to evaluate the selected noise function.",
            "H(float) – The fractal dimension of the roughest areas.",
            "lacunarity(float) – The gap between successive frequencies.",
            "octaves(int) – The number of different noise frequencies used.",
            "offset(float) – The height of the terrain above ‘sea level’.",
            "gain(float) – Scaling applied to the values.",
            "noise_basis(string) – Enumerator in [‘BLENDER’, ‘PERLIN_ORIGINAL’, ‘PERLIN_NEW’, ‘VORONOI_F1’, ‘VORONOI_F2’, ‘VORONOI_F3’, ‘VORONOI_F4’, ‘VORONOI_F2F1’, ‘VORONOI_CRACKLE’, ‘CELLNOISE’]."
        ]
    },
    {
        "function_id": "mathutils.noise.multi_fractal",
        "signature": "mathutils.noise.multi_fractal(position,H,lacunarity,octaves,noise_basis='PERLIN_ORIGINAL')#",
        "description": "Returns multifractal noise value from the noise basis at the specified position.",
        "parameters": [
            "position",
            "H",
            "lacunarity",
            "octaves",
            "noise_basis='PERLIN_ORIGINAL'"
        ],
        "parameter_descriptions": [
            "position(mathutils.Vector) – The position to evaluate the selected noise function.",
            "H(float) – The fractal increment factor.",
            "lacunarity(float) – The gap between successive frequencies.",
            "octaves(int) – The number of different noise frequencies used.",
            "noise_basis(string) – Enumerator in [‘BLENDER’, ‘PERLIN_ORIGINAL’, ‘PERLIN_NEW’, ‘VORONOI_F1’, ‘VORONOI_F2’, ‘VORONOI_F3’, ‘VORONOI_F4’, ‘VORONOI_F2F1’, ‘VORONOI_CRACKLE’, ‘CELLNOISE’]."
        ]
    },
    {
        "function_id": "mathutils.noise.noise",
        "signature": "mathutils.noise.noise(position,noise_basis='PERLIN_ORIGINAL')#",
        "description": "Returns noise value from the noise basis at the position specified.",
        "parameters": [
            "position",
            "noise_basis='PERLIN_ORIGINAL'"
        ],
        "parameter_descriptions": [
            "position(mathutils.Vector) – The position to evaluate the selected noise function.",
            "noise_basis(string) – Enumerator in [‘BLENDER’, ‘PERLIN_ORIGINAL’, ‘PERLIN_NEW’, ‘VORONOI_F1’, ‘VORONOI_F2’, ‘VORONOI_F3’, ‘VORONOI_F4’, ‘VORONOI_F2F1’, ‘VORONOI_CRACKLE’, ‘CELLNOISE’]."
        ]
    },
    {
        "function_id": "mathutils.noise.noise_vector",
        "signature": "mathutils.noise.noise_vector(position,noise_basis='PERLIN_ORIGINAL')#",
        "description": "Returns the noise vector from the noise basis at the specified position.",
        "parameters": [
            "position",
            "noise_basis='PERLIN_ORIGINAL'"
        ],
        "parameter_descriptions": [
            "position(mathutils.Vector) – The position to evaluate the selected noise function.",
            "noise_basis(string) – Enumerator in [‘BLENDER’, ‘PERLIN_ORIGINAL’, ‘PERLIN_NEW’, ‘VORONOI_F1’, ‘VORONOI_F2’, ‘VORONOI_F3’, ‘VORONOI_F4’, ‘VORONOI_F2F1’, ‘VORONOI_CRACKLE’, ‘CELLNOISE’]."
        ]
    },
    {
        "function_id": "mathutils.noise.random",
        "signature": "mathutils.noise.random()#",
        "description": "Returns a random number in the range [0, 1).",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "mathutils.noise.random_unit_vector",
        "signature": "mathutils.noise.random_unit_vector(size=3)#",
        "description": "Returns a unit vector with random entries.",
        "parameters": [
            "size=3"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "mathutils.noise.random_vector",
        "signature": "mathutils.noise.random_vector(size=3)#",
        "description": "Returns a vector with random entries in the range (-1, 1).",
        "parameters": [
            "size=3"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "mathutils.noise.ridged_multi_fractal",
        "signature": "mathutils.noise.ridged_multi_fractal(position,H,lacunarity,octaves,offset,gain,noise_basis='PERLIN_ORIGINAL')#",
        "description": "Returns ridged multifractal value from the noise basis at the specified position.",
        "parameters": [
            "position",
            "H",
            "lacunarity",
            "octaves",
            "offset",
            "gain",
            "noise_basis='PERLIN_ORIGINAL'"
        ],
        "parameter_descriptions": [
            "position(mathutils.Vector) – The position to evaluate the selected noise function.",
            "H(float) – The fractal dimension of the roughest areas.",
            "lacunarity(float) – The gap between successive frequencies.",
            "octaves(int) – The number of different noise frequencies used.",
            "offset(float) – The height of the terrain above ‘sea level’.",
            "gain(float) – Scaling applied to the values.",
            "noise_basis(string) – Enumerator in [‘BLENDER’, ‘PERLIN_ORIGINAL’, ‘PERLIN_NEW’, ‘VORONOI_F1’, ‘VORONOI_F2’, ‘VORONOI_F3’, ‘VORONOI_F4’, ‘VORONOI_F2F1’, ‘VORONOI_CRACKLE’, ‘CELLNOISE’]."
        ]
    },
    {
        "function_id": "mathutils.noise.seed_set",
        "signature": "mathutils.noise.seed_set(seed)#",
        "description": "Sets the random seed used for random_unit_vector, and random.",
        "parameters": [
            "seed"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "mathutils.noise.turbulence",
        "signature": "mathutils.noise.turbulence(position,octaves,hard,noise_basis='PERLIN_ORIGINAL',amplitude_scale=0.5,frequency_scale=2.0)#",
        "description": "Returns the turbulence value from the noise basis at the specified position.",
        "parameters": [
            "position",
            "octaves",
            "hard",
            "noise_basis='PERLIN_ORIGINAL'",
            "amplitude_scale=0.5",
            "frequency_scale=2.0"
        ],
        "parameter_descriptions": [
            "position(mathutils.Vector) – The position to evaluate the selected noise function.",
            "octaves(int) – The number of different noise frequencies used.",
            "hard(boolean) – Specifies whether returned turbulence is hard (sharp transitions) or soft (smooth transitions).",
            "noise_basis(string) – Enumerator in [‘BLENDER’, ‘PERLIN_ORIGINAL’, ‘PERLIN_NEW’, ‘VORONOI_F1’, ‘VORONOI_F2’, ‘VORONOI_F3’, ‘VORONOI_F4’, ‘VORONOI_F2F1’, ‘VORONOI_CRACKLE’, ‘CELLNOISE’].",
            "amplitude_scale(float) – The amplitude scaling factor.",
            "frequency_scale(float) – The frequency scaling factor"
        ]
    },
    {
        "function_id": "mathutils.noise.turbulence_vector",
        "signature": "mathutils.noise.turbulence_vector(position,octaves,hard,noise_basis='PERLIN_ORIGINAL',amplitude_scale=0.5,frequency_scale=2.0)#",
        "description": "Returns the turbulence vector from the noise basis at the specified position.",
        "parameters": [
            "position",
            "octaves",
            "hard",
            "noise_basis='PERLIN_ORIGINAL'",
            "amplitude_scale=0.5",
            "frequency_scale=2.0"
        ],
        "parameter_descriptions": [
            "position(mathutils.Vector) – The position to evaluate the selected noise function.",
            "octaves(int) – The number of different noise frequencies used.",
            "hard(boolean) – Specifies whether returned turbulence is hard (sharp transitions) or soft (smooth transitions).",
            "noise_basis(string) – Enumerator in [‘BLENDER’, ‘PERLIN_ORIGINAL’, ‘PERLIN_NEW’, ‘VORONOI_F1’, ‘VORONOI_F2’, ‘VORONOI_F3’, ‘VORONOI_F4’, ‘VORONOI_F2F1’, ‘VORONOI_CRACKLE’, ‘CELLNOISE’].",
            "amplitude_scale(float) – The amplitude scaling factor.",
            "frequency_scale(float) – The frequency scaling factor"
        ]
    },
    {
        "function_id": "mathutils.noise.variable_lacunarity",
        "signature": "mathutils.noise.variable_lacunarity(position,distortion,noise_type1='PERLIN_ORIGINAL',noise_type2='PERLIN_ORIGINAL')#",
        "description": "Returns variable lacunarity noise value, a distorted variety of noise, from noise type 1 distorted by noise type 2 at the specified position.",
        "parameters": [
            "position",
            "distortion",
            "noise_type1='PERLIN_ORIGINAL'",
            "noise_type2='PERLIN_ORIGINAL'"
        ],
        "parameter_descriptions": [
            "position(mathutils.Vector) – The position to evaluate the selected noise function.",
            "distortion(float) – The amount of distortion.",
            "noise_type1(string) – Enumerator in [‘BLENDER’, ‘PERLIN_ORIGINAL’, ‘PERLIN_NEW’, ‘VORONOI_F1’, ‘VORONOI_F2’, ‘VORONOI_F3’, ‘VORONOI_F4’, ‘VORONOI_F2F1’, ‘VORONOI_CRACKLE’, ‘CELLNOISE’].",
            "noise_type2(string) – Enumerator in [‘BLENDER’, ‘PERLIN_ORIGINAL’, ‘PERLIN_NEW’, ‘VORONOI_F1’, ‘VORONOI_F2’, ‘VORONOI_F3’, ‘VORONOI_F4’, ‘VORONOI_F2F1’, ‘VORONOI_CRACKLE’, ‘CELLNOISE’]."
        ]
    },
    {
        "function_id": "mathutils.noise.voronoi",
        "signature": "mathutils.noise.voronoi(position,distance_metric='DISTANCE',exponent=2.5)#",
        "description": "Returns a list of distances to the four closest features and their locations.",
        "parameters": [
            "position",
            "distance_metric='DISTANCE'",
            "exponent=2.5"
        ],
        "parameter_descriptions": [
            "position(mathutils.Vector) – The position to evaluate the selected noise function.",
            "distance_metric(string) – Enumerator in [‘DISTANCE’, ‘DISTANCE_SQUARED’, ‘MANHATTAN’, ‘CHEBYCHEV’, ‘MINKOVSKY’, ‘MINKOVSKY_HALF’, ‘MINKOVSKY_FOUR’].",
            "exponent(float) – The exponent for Minkowski distance metric."
        ]
    },
    {
        "function_id": "bpy.msgbus.clear_by_owner",
        "signature": "bpy.msgbus.clear_by_owner(owner)#",
        "description": "Clear all subscribers using this owner.",
        "parameters": [
            "owner"
        ]
    },
    {
        "function_id": "bpy.msgbus.publish_rna",
        "signature": "bpy.msgbus.publish_rna(key)#",
        "description": "key(Multiple) –Represents the type of data being subscribed toArguments include\n-bpy.types.Propertyinstance.\n-bpy.types.Structtype.\n- (bpy.types.Struct, str) type and property name.",
        "parameters": [
            "key"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.msgbus.subscribe_rna",
        "signature": "bpy.msgbus.subscribe_rna(key,owner,args,notify,options=set())#",
        "description": "Register a message bus subscription. It will be cleared when another blend file is\nloaded, or can be cleared explicitly viabpy.msgbus.clear_by_owner().",
        "parameters": [
            "key",
            "owner",
            "args",
            "notify",
            "options=set()"
        ],
        "parameter_descriptions": [
            "key(Multiple) –Represents the type of data being subscribed toArguments include\n-bpy.types.Propertyinstance.\n-bpy.types.Structtype.\n- (bpy.types.Struct, str) type and property name.",
            "owner(Any type.) – Handle for this subscription (compared by identity).",
            "options(setofstr.) –Change the behavior of the subscriber.PERSISTENTwhen set, the subscriber will be kept when remapping ID data.",
            "PERSISTENTwhen set, the subscriber will be kept when remapping ID data."
        ]
    },
    {
        "function_id": "bpy.ops.ed.flush_edits",
        "signature": "bpy.ops.ed.flush_edits()#",
        "description": "Flush edit data from active editing modes",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.ed.lib_id_fake_user_toggle",
        "signature": "bpy.ops.ed.lib_id_fake_user_toggle()#",
        "description": "Save this data-block even if it has no users",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.ed.lib_id_generate_preview",
        "signature": "bpy.ops.ed.lib_id_generate_preview()#",
        "description": "Create an automatic preview for the selected data-block",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.ed.lib_id_generate_preview_from_object",
        "signature": "bpy.ops.ed.lib_id_generate_preview_from_object()#",
        "description": "Create a preview for this asset by rendering the active object",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.ed.lib_id_load_custom_preview",
        "signature": "bpy.ops.ed.lib_id_load_custom_preview(filepath='',hide_props_region=True,check_existing=False,filter_blender=False,filter_backup=False,filter_image=True,filter_movie=False,filter_python=False,filter_font=False,filter_sound=False,filter_text=False,filter_archive=False,filter_btx=False,filter_collada=False,filter_alembic=False,filter_usd=False,filter_obj=False,filter_volume=False,filter_folder=True,filter_blenlib=False,filemode=9,show_multiview=False,use_multiview=False,display_type='DEFAULT',sort_method='')#",
        "description": "Choose an image to help identify the data-block visually",
        "parameters": [
            "filepath=''",
            "hide_props_region=True",
            "check_existing=False",
            "filter_blender=False",
            "filter_backup=False",
            "filter_image=True",
            "filter_movie=False",
            "filter_python=False",
            "filter_font=False",
            "filter_sound=False",
            "filter_text=False",
            "filter_archive=False",
            "filter_btx=False",
            "filter_collada=False",
            "filter_alembic=False",
            "filter_usd=False",
            "filter_obj=False",
            "filter_volume=False",
            "filter_folder=True",
            "filter_blenlib=False",
            "filemode=9",
            "show_multiview=False",
            "use_multiview=False",
            "display_type='DEFAULT'",
            "sort_method=''"
        ],
        "parameter_descriptions": [
            "filepath(string,(optional,never None)) – File Path, Path to file",
            "hide_props_region(boolean,(optional)) – Hide Operator Properties, Collapse the region displaying the operator settings",
            "check_existing(boolean,(optional)) – Check Existing, Check and warn on overwriting existing files",
            "filter_blender(boolean,(optional)) – Filter .blend files",
            "filter_backup(boolean,(optional)) – Filter .blend files",
            "filter_image(boolean,(optional)) – Filter image files",
            "filter_movie(boolean,(optional)) – Filter movie files",
            "filter_python(boolean,(optional)) – Filter Python files",
            "filter_font(boolean,(optional)) – Filter font files",
            "filter_sound(boolean,(optional)) – Filter sound files",
            "filter_text(boolean,(optional)) – Filter text files",
            "filter_archive(boolean,(optional)) – Filter archive files",
            "filter_btx(boolean,(optional)) – Filter btx files",
            "filter_collada(boolean,(optional)) – Filter COLLADA files",
            "filter_alembic(boolean,(optional)) – Filter Alembic files",
            "filter_usd(boolean,(optional)) – Filter USD files",
            "filter_obj(boolean,(optional)) – Filter OBJ files",
            "filter_volume(boolean,(optional)) – Filter OpenVDB volume files",
            "filter_folder(boolean,(optional)) – Filter folders",
            "filter_blenlib(boolean,(optional)) – Filter Blender IDs",
            "filemode(int in[1,9],(optional)) – File Browser Mode, The setting for the file browser mode to load a .blend file, a library or a special file",
            "show_multiview(boolean,(optional)) – Enable Multi-View",
            "use_multiview(boolean,(optional)) – Use Multi-View",
            "display_type(enum in['DEFAULT','LIST_VERTICAL','LIST_HORIZONTAL','THUMBNAIL'],(optional)) –Display TypeDEFAULTDefault – Automatically determine display type for files.LIST_VERTICALShort List – Display files as short list.LIST_HORIZONTALLong List – Display files as a detailed list.THUMBNAILThumbnails – Display files as thumbnails.",
            "DEFAULTDefault – Automatically determine display type for files.",
            "LIST_VERTICALShort List – Display files as short list.",
            "LIST_HORIZONTALLong List – Display files as a detailed list.",
            "THUMBNAILThumbnails – Display files as thumbnails.",
            "sort_method(enum in[],(optional)) – File sorting mode"
        ]
    },
    {
        "function_id": "bpy.ops.ed.lib_id_override_editable_toggle",
        "signature": "bpy.ops.ed.lib_id_override_editable_toggle()#",
        "description": "Set if this library override data-block can be edited",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.ed.lib_id_unlink",
        "signature": "bpy.ops.ed.lib_id_unlink()#",
        "description": "Remove a usage of a data-block, clearing the assignment",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.ed.redo",
        "signature": "bpy.ops.ed.redo()#",
        "description": "Redo previous action",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.ed.undo",
        "signature": "bpy.ops.ed.undo()#",
        "description": "Undo previous action",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.ed.undo_history",
        "signature": "bpy.ops.ed.undo_history(item=0)#",
        "description": "Redo specific action in history",
        "parameters": [
            "item=0"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.ed.undo_push",
        "signature": "bpy.ops.ed.undo_push(message='Addanundostep*functionmaybemoved*')#",
        "description": "Add an undo state (internal use only)",
        "parameters": [
            "message='Addanundostep*functionmaybemoved*'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.ed.undo_redo",
        "signature": "bpy.ops.ed.undo_redo()#",
        "description": "Undo and redo previous action",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.mesh.attribute_set",
        "signature": "bpy.ops.mesh.attribute_set(value_float=0.0,value_float_vector_2d=(0.0,0.0),value_float_vector_3d=(0.0,0.0,0.0),value_int=0,value_int_vector_2d=(0,0),value_color=(1.0,1.0,1.0,1.0),value_bool=False)#",
        "description": "Set values of the active attribute for selected elements",
        "parameters": [
            "value_float=0.0",
            "value_float_vector_2d=(0.0,0.0)",
            "value_float_vector_3d=(0.0,0.0,0.0)",
            "value_int=0",
            "value_int_vector_2d=(0,0)",
            "value_color=(1.0,1.0,1.0,1.0)",
            "value_bool=False"
        ],
        "parameter_descriptions": [
            "value_float(float in[-inf,inf],(optional)) – Value",
            "value_float_vector_2d(float arrayof2 items in[-inf,inf],(optional)) – Value",
            "value_float_vector_3d(float arrayof3 items in[-inf,inf],(optional)) – Value",
            "value_int(int in[-inf,inf],(optional)) – Value",
            "value_int_vector_2d(int arrayof2 items in[-inf,inf],(optional)) – Value",
            "value_color(float arrayof4 items in[-inf,inf],(optional)) – Value",
            "value_bool(boolean,(optional)) – Value"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.average_normals",
        "signature": "bpy.ops.mesh.average_normals(average_type='CUSTOM_NORMAL',weight=50,threshold=0.01)#",
        "description": "Average custom normals of selected vertices",
        "parameters": [
            "average_type='CUSTOM_NORMAL'",
            "weight=50",
            "threshold=0.01"
        ],
        "parameter_descriptions": [
            "average_type(enum in['CUSTOM_NORMAL','FACE_AREA','CORNER_ANGLE'],(optional)) –Type, Averaging methodCUSTOM_NORMALCustom Normal – Take average of vertex normals.FACE_AREAFace Area – Set all vertex normals by face area.CORNER_ANGLECorner Angle – Set all vertex normals by corner angle.",
            "CUSTOM_NORMALCustom Normal – Take average of vertex normals.",
            "FACE_AREAFace Area – Set all vertex normals by face area.",
            "CORNER_ANGLECorner Angle – Set all vertex normals by corner angle.",
            "weight(int in[1,100],(optional)) – Weight, Weight applied per face",
            "threshold(float in[0,10],(optional)) – Threshold, Threshold value for different weights to be considered equal"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.beautify_fill",
        "signature": "bpy.ops.mesh.beautify_fill(angle_limit=3.14159)#",
        "description": "Rearrange some faces to try to get less degenerated geometry",
        "parameters": [
            "angle_limit=3.14159"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.mesh.bevel",
        "signature": "bpy.ops.mesh.bevel(offset_type='OFFSET',offset=0.0,profile_type='SUPERELLIPSE',offset_pct=0.0,segments=1,profile=0.5,affect='EDGES',clamp_overlap=False,loop_slide=True,mark_seam=False,mark_sharp=False,material=-1,harden_normals=False,face_strength_mode='NONE',miter_outer='SHARP',miter_inner='SHARP',spread=0.1,vmesh_method='ADJ',release_confirm=False)#",
        "description": "Cut into selected items at an angle to create bevel or chamfer",
        "parameters": [
            "offset_type='OFFSET'",
            "offset=0.0",
            "profile_type='SUPERELLIPSE'",
            "offset_pct=0.0",
            "segments=1",
            "profile=0.5",
            "affect='EDGES'",
            "clamp_overlap=False",
            "loop_slide=True",
            "mark_seam=False",
            "mark_sharp=False",
            "material=-1",
            "harden_normals=False",
            "face_strength_mode='NONE'",
            "miter_outer='SHARP'",
            "miter_inner='SHARP'",
            "spread=0.1",
            "vmesh_method='ADJ'",
            "release_confirm=False"
        ],
        "parameter_descriptions": [
            "offset_type(enum in['OFFSET','WIDTH','DEPTH','PERCENT','ABSOLUTE'],(optional)) –Width Type, The method for determining the size of the bevelOFFSETOffset – Amount is offset of new edges from original.WIDTHWidth – Amount is width of new face.DEPTHDepth – Amount is perpendicular distance from original edge to bevel face.PERCENTPercent – Amount is percent of adjacent edge length.ABSOLUTEAbsolute – Amount is absolute distance along adjacent edge.",
            "OFFSETOffset – Amount is offset of new edges from original.",
            "WIDTHWidth – Amount is width of new face.",
            "DEPTHDepth – Amount is perpendicular distance from original edge to bevel face.",
            "PERCENTPercent – Amount is percent of adjacent edge length.",
            "ABSOLUTEAbsolute – Amount is absolute distance along adjacent edge.",
            "offset(float in[0,1e+06],(optional)) – Width, Bevel amount",
            "profile_type(enum in['SUPERELLIPSE','CUSTOM'],(optional)) –Profile Type, The type of shape used to rebuild a beveled sectionSUPERELLIPSESuperellipse – The profile can be a concave or convex curve.CUSTOMCustom – The profile can be any arbitrary path between its endpoints.",
            "SUPERELLIPSESuperellipse – The profile can be a concave or convex curve.",
            "CUSTOMCustom – The profile can be any arbitrary path between its endpoints.",
            "offset_pct(float in[0,100],(optional)) – Width Percent, Bevel amount for percentage method",
            "segments(int in[1,1000],(optional)) – Segments, Segments for curved edge",
            "profile(float in[0,1],(optional)) – Profile, Controls profile shape (0.5 = round)",
            "affect(enum in['VERTICES','EDGES'],(optional)) –Affect, Affect edges or verticesVERTICESVertices – Affect only vertices.EDGESEdges – Affect only edges.",
            "VERTICESVertices – Affect only vertices.",
            "EDGESEdges – Affect only edges.",
            "clamp_overlap(boolean,(optional)) – Clamp Overlap, Do not allow beveled edges/vertices to overlap each other",
            "loop_slide(boolean,(optional)) – Loop Slide, Prefer sliding along edges to even widths",
            "mark_seam(boolean,(optional)) – Mark Seams, Mark Seams along beveled edges",
            "mark_sharp(boolean,(optional)) – Mark Sharp, Mark beveled edges as sharp",
            "material(int in[-1,inf],(optional)) – Material Index, Material for bevel faces (-1 means use adjacent faces)",
            "harden_normals(boolean,(optional)) – Harden Normals, Match normals of new faces to adjacent faces",
            "face_strength_mode(enum in['NONE','NEW','AFFECTED','ALL'],(optional)) –Face Strength Mode, Whether to set face strength, and which faces to set face strength onNONENone – Do not set face strength.NEWNew – Set face strength on new faces only.AFFECTEDAffected – Set face strength on new and modified faces only.ALLAll – Set face strength on all faces.",
            "NONENone – Do not set face strength.",
            "NEWNew – Set face strength on new faces only.",
            "AFFECTEDAffected – Set face strength on new and modified faces only.",
            "ALLAll – Set face strength on all faces.",
            "miter_outer(enum in['SHARP','PATCH','ARC'],(optional)) –Outer Miter, Pattern to use for outside of mitersSHARPSharp – Outside of miter is sharp.PATCHPatch – Outside of miter is squared-off patch.ARCArc – Outside of miter is arc.",
            "SHARPSharp – Outside of miter is sharp.",
            "PATCHPatch – Outside of miter is squared-off patch.",
            "ARCArc – Outside of miter is arc.",
            "miter_inner(enum in['SHARP','ARC'],(optional)) –Inner Miter, Pattern to use for inside of mitersSHARPSharp – Inside of miter is sharp.ARCArc – Inside of miter is arc.",
            "SHARPSharp – Inside of miter is sharp.",
            "ARCArc – Inside of miter is arc.",
            "spread(float in[0,1e+06],(optional)) – Spread, Amount to spread arcs for arc inner miters",
            "vmesh_method(enum in['ADJ','CUTOFF'],(optional)) –Vertex Mesh Method, The method to use to create meshes at intersectionsADJGrid Fill – Default patterned fill.CUTOFFCutoff – A cutoff at each profile’s end before the intersection.",
            "ADJGrid Fill – Default patterned fill.",
            "CUTOFFCutoff – A cutoff at each profile’s end before the intersection.",
            "release_confirm(boolean,(optional)) – Confirm on Release"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.bisect",
        "signature": "bpy.ops.mesh.bisect(plane_co=(0.0,0.0,0.0),plane_no=(0.0,0.0,0.0),use_fill=False,clear_inner=False,clear_outer=False,threshold=0.0001,xstart=0,xend=0,ystart=0,yend=0,flip=False,cursor=5)#",
        "description": "Cut geometry along a plane (click-drag to define plane)",
        "parameters": [
            "plane_co=(0.0,0.0,0.0)",
            "plane_no=(0.0,0.0,0.0)",
            "use_fill=False",
            "clear_inner=False",
            "clear_outer=False",
            "threshold=0.0001",
            "xstart=0",
            "xend=0",
            "ystart=0",
            "yend=0",
            "flip=False",
            "cursor=5"
        ],
        "parameter_descriptions": [
            "plane_co(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Plane Point, A point on the plane",
            "plane_no(mathutils.Vectorof 3 items in [-1, 1], (optional)) – Plane Normal, The direction the plane points",
            "use_fill(boolean,(optional)) – Fill, Fill in the cut",
            "clear_inner(boolean,(optional)) – Clear Inner, Remove geometry behind the plane",
            "clear_outer(boolean,(optional)) – Clear Outer, Remove geometry in front of the plane",
            "threshold(float in[0,10],(optional)) – Axis Threshold, Preserves the existing geometry along the cut plane",
            "xstart(int in[-inf,inf],(optional)) – X Start",
            "xend(int in[-inf,inf],(optional)) – X End",
            "ystart(int in[-inf,inf],(optional)) – Y Start",
            "yend(int in[-inf,inf],(optional)) – Y End",
            "flip(boolean,(optional)) – Flip",
            "cursor(int in[0,inf],(optional)) – Cursor, Mouse cursor style to use during the modal operator"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.blend_from_shape",
        "signature": "bpy.ops.mesh.blend_from_shape(shape='',blend=1.0,add=True)#",
        "description": "Blend in shape from a shape key",
        "parameters": [
            "shape=''",
            "blend=1.0",
            "add=True"
        ],
        "parameter_descriptions": [
            "shape(enum in[],(optional)) – Shape, Shape key to use for blending",
            "blend(float in[-1000,1000],(optional)) – Blend, Blending factor",
            "add(boolean,(optional)) – Add, Add rather than blend between shapes"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.bridge_edge_loops",
        "signature": "bpy.ops.mesh.bridge_edge_loops(type='SINGLE',use_merge=False,merge_factor=0.5,twist_offset=0,number_cuts=0,interpolation='PATH',smoothness=1.0,profile_shape_factor=0.0,profile_shape='SMOOTH')#",
        "description": "Create a bridge of faces between two or more selected edge loops",
        "parameters": [
            "type='SINGLE'",
            "use_merge=False",
            "merge_factor=0.5",
            "twist_offset=0",
            "number_cuts=0",
            "interpolation='PATH'",
            "smoothness=1.0",
            "profile_shape_factor=0.0",
            "profile_shape='SMOOTH'"
        ],
        "parameter_descriptions": [
            "type(enum in['SINGLE','CLOSED','PAIRS'],(optional)) – Connect Loops, Method of bridging multiple loops",
            "use_merge(boolean,(optional)) – Merge, Merge rather than creating faces",
            "merge_factor(float in[0,1],(optional)) – Merge Factor",
            "twist_offset(int in[-1000,1000],(optional)) – Twist, Twist offset for closed loops",
            "number_cuts(int in[0,1000],(optional)) – Number of Cuts",
            "interpolation(enum in['LINEAR','PATH','SURFACE'],(optional)) – Interpolation, Interpolation method",
            "smoothness(float in[0,1000],(optional)) – Smoothness, Smoothness factor",
            "profile_shape_factor(float in[-1000,1000],(optional)) – Profile Factor, How much intermediary new edges are shrunk/expanded",
            "profile_shape(enum inProportional Falloff Curve Only Items, (optional)) – Profile Shape, Shape of the profile"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.colors_reverse",
        "signature": "bpy.ops.mesh.colors_reverse()#",
        "description": "Flip direction of face corner color attribute inside faces",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.mesh.colors_rotate",
        "signature": "bpy.ops.mesh.colors_rotate(use_ccw=False)#",
        "description": "Rotate face corner color attribute inside faces",
        "parameters": [
            "use_ccw=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.mesh.convex_hull",
        "signature": "bpy.ops.mesh.convex_hull(delete_unused=True,use_existing_faces=True,make_holes=False,join_triangles=True,face_threshold=0.698132,shape_threshold=0.698132,uvs=False,vcols=False,seam=False,sharp=False,materials=False)#",
        "description": "Enclose selected vertices in a convex polyhedron",
        "parameters": [
            "delete_unused=True",
            "use_existing_faces=True",
            "make_holes=False",
            "join_triangles=True",
            "face_threshold=0.698132",
            "shape_threshold=0.698132",
            "uvs=False",
            "vcols=False",
            "seam=False",
            "sharp=False",
            "materials=False"
        ],
        "parameter_descriptions": [
            "delete_unused(boolean,(optional)) – Delete Unused, Delete selected elements that are not used by the hull",
            "use_existing_faces(boolean,(optional)) – Use Existing Faces, Skip hull triangles that are covered by a pre-existing face",
            "make_holes(boolean,(optional)) – Make Holes, Delete selected faces that are used by the hull",
            "join_triangles(boolean,(optional)) – Join Triangles, Merge adjacent triangles into quads",
            "face_threshold(float in[0,3.14159],(optional)) – Max Face Angle, Face angle limit",
            "shape_threshold(float in[0,3.14159],(optional)) – Max Shape Angle, Shape angle limit",
            "uvs(boolean,(optional)) – Compare UVs",
            "vcols(boolean,(optional)) – Compare Color Attributes",
            "seam(boolean,(optional)) – Compare Seam",
            "sharp(boolean,(optional)) – Compare Sharp",
            "materials(boolean,(optional)) – Compare Materials"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.customdata_custom_splitnormals_add",
        "signature": "bpy.ops.mesh.customdata_custom_splitnormals_add()#",
        "description": "Add a custom split normals layer, if none exists yet",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.mesh.customdata_custom_splitnormals_clear",
        "signature": "bpy.ops.mesh.customdata_custom_splitnormals_clear()#",
        "description": "Remove the custom split normals layer, if it exists",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.mesh.customdata_mask_clear",
        "signature": "bpy.ops.mesh.customdata_mask_clear()#",
        "description": "Clear vertex sculpt masking data from the mesh",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.mesh.customdata_skin_add",
        "signature": "bpy.ops.mesh.customdata_skin_add()#",
        "description": "Add a vertex skin layer",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.mesh.customdata_skin_clear",
        "signature": "bpy.ops.mesh.customdata_skin_clear()#",
        "description": "Clear vertex skin layer",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.mesh.decimate",
        "signature": "bpy.ops.mesh.decimate(ratio=1.0,use_vertex_group=False,vertex_group_factor=1.0,invert_vertex_group=False,use_symmetry=False,symmetry_axis='Y')#",
        "description": "Simplify geometry by collapsing edges",
        "parameters": [
            "ratio=1.0",
            "use_vertex_group=False",
            "vertex_group_factor=1.0",
            "invert_vertex_group=False",
            "use_symmetry=False",
            "symmetry_axis='Y'"
        ],
        "parameter_descriptions": [
            "ratio(float in[0,1],(optional)) – Ratio",
            "use_vertex_group(boolean,(optional)) – Vertex Group, Use active vertex group as an influence",
            "vertex_group_factor(float in[0,1000],(optional)) – Weight, Vertex group strength",
            "invert_vertex_group(boolean,(optional)) – Invert, Invert vertex group influence",
            "use_symmetry(boolean,(optional)) – Symmetry, Maintain symmetry on an axis",
            "symmetry_axis(enum inAxis Xyz Items, (optional)) – Axis, Axis of symmetry"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.delete",
        "signature": "bpy.ops.mesh.delete(type='VERT')#",
        "description": "Delete selected vertices, edges or faces",
        "parameters": [
            "type='VERT'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.mesh.delete_edgeloop",
        "signature": "bpy.ops.mesh.delete_edgeloop(use_face_split=True)#",
        "description": "Delete an edge loop by merging the faces on each side",
        "parameters": [
            "use_face_split=True"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.mesh.delete_loose",
        "signature": "bpy.ops.mesh.delete_loose(use_verts=True,use_edges=True,use_faces=False)#",
        "description": "Delete loose vertices, edges or faces",
        "parameters": [
            "use_verts=True",
            "use_edges=True",
            "use_faces=False"
        ],
        "parameter_descriptions": [
            "use_verts(boolean,(optional)) – Vertices, Remove loose vertices",
            "use_edges(boolean,(optional)) – Edges, Remove loose edges",
            "use_faces(boolean,(optional)) – Faces, Remove loose faces"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.dissolve_degenerate",
        "signature": "bpy.ops.mesh.dissolve_degenerate(threshold=0.0001)#",
        "description": "Dissolve zero area faces and zero length edges",
        "parameters": [
            "threshold=0.0001"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.mesh.dissolve_edges",
        "signature": "bpy.ops.mesh.dissolve_edges(use_verts=True,use_face_split=False)#",
        "description": "Dissolve edges, merging faces",
        "parameters": [
            "use_verts=True",
            "use_face_split=False"
        ],
        "parameter_descriptions": [
            "use_verts(boolean,(optional)) – Dissolve Vertices, Dissolve remaining vertices",
            "use_face_split(boolean,(optional)) – Face Split, Split off face corners to maintain surrounding geometry"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.dissolve_faces",
        "signature": "bpy.ops.mesh.dissolve_faces(use_verts=False)#",
        "description": "Dissolve faces",
        "parameters": [
            "use_verts=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.mesh.dissolve_limited",
        "signature": "bpy.ops.mesh.dissolve_limited(angle_limit=0.0872665,use_dissolve_boundaries=False,delimit={'NORMAL'})#",
        "description": "Dissolve selected edges and vertices, limited by the angle of surrounding geometry",
        "parameters": [
            "angle_limit=0.0872665",
            "use_dissolve_boundaries=False",
            "delimit={'NORMAL'}"
        ],
        "parameter_descriptions": [
            "angle_limit(float in[0,3.14159],(optional)) – Max Angle, Angle limit",
            "use_dissolve_boundaries(boolean,(optional)) – All Boundaries, Dissolve all vertices in between face boundaries",
            "delimit(enum set inMesh Delimit Mode Items, (optional)) – Delimit, Delimit dissolve operation"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.dissolve_mode",
        "signature": "bpy.ops.mesh.dissolve_mode(use_verts=False,use_face_split=False,use_boundary_tear=False)#",
        "description": "Dissolve geometry based on the selection mode",
        "parameters": [
            "use_verts=False",
            "use_face_split=False",
            "use_boundary_tear=False"
        ],
        "parameter_descriptions": [
            "use_verts(boolean,(optional)) – Dissolve Vertices, Dissolve remaining vertices",
            "use_face_split(boolean,(optional)) – Face Split, Split off face corners to maintain surrounding geometry",
            "use_boundary_tear(boolean,(optional)) – Tear Boundary, Split off face corners instead of merging faces"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.dissolve_verts",
        "signature": "bpy.ops.mesh.dissolve_verts(use_face_split=False,use_boundary_tear=False)#",
        "description": "Dissolve vertices, merge edges and faces",
        "parameters": [
            "use_face_split=False",
            "use_boundary_tear=False"
        ],
        "parameter_descriptions": [
            "use_face_split(boolean,(optional)) – Face Split, Split off face corners to maintain surrounding geometry",
            "use_boundary_tear(boolean,(optional)) – Tear Boundary, Split off face corners instead of merging faces"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.dupli_extrude_cursor",
        "signature": "bpy.ops.mesh.dupli_extrude_cursor(rotate_source=True)#",
        "description": "Duplicate and extrude selected vertices, edges or faces towards the mouse cursor",
        "parameters": [
            "rotate_source=True"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.mesh.duplicate",
        "signature": "bpy.ops.mesh.duplicate(mode=1)#",
        "description": "Duplicate selected vertices, edges or faces",
        "parameters": [
            "mode=1"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.mesh.duplicate_move",
        "signature": "bpy.ops.mesh.duplicate_move(MESH_OT_duplicate=None,TRANSFORM_OT_translate=None)#",
        "description": "Duplicate mesh and move",
        "parameters": [
            "MESH_OT_duplicate=None",
            "TRANSFORM_OT_translate=None"
        ],
        "parameter_descriptions": [
            "MESH_OT_duplicate(MESH_OT_duplicate, (optional)) – Duplicate, Duplicate selected vertices, edges or faces",
            "TRANSFORM_OT_translate(TRANSFORM_OT_translate, (optional)) – Move, Move selected items"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.edge_collapse",
        "signature": "bpy.ops.mesh.edge_collapse()#",
        "description": "Collapse isolated edge and face regions, merging data such as UVs and color attributes. This can collapse edge-rings as well as regions of connected faces into vertices",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.mesh.edge_face_add",
        "signature": "bpy.ops.mesh.edge_face_add()#",
        "description": "Add an edge or face to selected",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.mesh.edge_rotate",
        "signature": "bpy.ops.mesh.edge_rotate(use_ccw=False)#",
        "description": "Rotate selected edge or adjoining faces",
        "parameters": [
            "use_ccw=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.mesh.edge_split",
        "signature": "bpy.ops.mesh.edge_split(type='EDGE')#",
        "description": "Split selected edges so that each neighbor face gets its own copy",
        "parameters": [
            "type='EDGE'"
        ],
        "parameter_descriptions": [
            "EDGEFaces by Edges – Split faces along selected edges.",
            "VERTFaces & Edges by Vertices – Split faces and edges connected to selected vertices."
        ]
    },
    {
        "function_id": "bpy.ops.mesh.edgering_select",
        "signature": "bpy.ops.mesh.edgering_select(extend=False,deselect=False,toggle=False,ring=True)#",
        "description": "Select an edge ring",
        "parameters": [
            "extend=False",
            "deselect=False",
            "toggle=False",
            "ring=True"
        ],
        "parameter_descriptions": [
            "extend(boolean,(optional)) – Extend, Extend the selection",
            "deselect(boolean,(optional)) – Deselect, Remove from the selection",
            "toggle(boolean,(optional)) – Toggle Select, Toggle the selection",
            "ring(boolean,(optional)) – Select Ring, Select ring"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.edges_select_sharp",
        "signature": "bpy.ops.mesh.edges_select_sharp(sharpness=0.523599)#",
        "description": "Select all sharp enough edges",
        "parameters": [
            "sharpness=0.523599"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.mesh.extrude_context",
        "signature": "bpy.ops.mesh.extrude_context(use_normal_flip=False,use_dissolve_ortho_edges=False,mirror=False)#",
        "description": "Extrude selection",
        "parameters": [
            "use_normal_flip=False",
            "use_dissolve_ortho_edges=False",
            "mirror=False"
        ],
        "parameter_descriptions": [
            "use_normal_flip(boolean,(optional)) – Flip Normals",
            "use_dissolve_ortho_edges(boolean,(optional)) – Dissolve Orthogonal Edges",
            "mirror(boolean,(optional)) – Mirror Editing"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.extrude_context_move",
        "signature": "bpy.ops.mesh.extrude_context_move(MESH_OT_extrude_context=None,TRANSFORM_OT_translate=None)#",
        "description": "Extrude region together along the average normal",
        "parameters": [
            "MESH_OT_extrude_context=None",
            "TRANSFORM_OT_translate=None"
        ],
        "parameter_descriptions": [
            "MESH_OT_extrude_context(MESH_OT_extrude_context, (optional)) – Extrude Context, Extrude selection",
            "TRANSFORM_OT_translate(TRANSFORM_OT_translate, (optional)) – Move, Move selected items"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.extrude_edges_indiv",
        "signature": "bpy.ops.mesh.extrude_edges_indiv(use_normal_flip=False,mirror=False)#",
        "description": "Extrude individual edges only",
        "parameters": [
            "use_normal_flip=False",
            "mirror=False"
        ],
        "parameter_descriptions": [
            "use_normal_flip(boolean,(optional)) – Flip Normals",
            "mirror(boolean,(optional)) – Mirror Editing"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.extrude_edges_move",
        "signature": "bpy.ops.mesh.extrude_edges_move(MESH_OT_extrude_edges_indiv=None,TRANSFORM_OT_translate=None)#",
        "description": "Extrude edges and move result",
        "parameters": [
            "MESH_OT_extrude_edges_indiv=None",
            "TRANSFORM_OT_translate=None"
        ],
        "parameter_descriptions": [
            "MESH_OT_extrude_edges_indiv(MESH_OT_extrude_edges_indiv, (optional)) – Extrude Only Edges, Extrude individual edges only",
            "TRANSFORM_OT_translate(TRANSFORM_OT_translate, (optional)) – Move, Move selected items"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.extrude_faces_indiv",
        "signature": "bpy.ops.mesh.extrude_faces_indiv(mirror=False)#",
        "description": "Extrude individual faces only",
        "parameters": [
            "mirror=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.mesh.extrude_faces_move",
        "signature": "bpy.ops.mesh.extrude_faces_move(MESH_OT_extrude_faces_indiv=None,TRANSFORM_OT_shrink_fatten=None)#",
        "description": "Extrude each individual face separately along local normals",
        "parameters": [
            "MESH_OT_extrude_faces_indiv=None",
            "TRANSFORM_OT_shrink_fatten=None"
        ],
        "parameter_descriptions": [
            "MESH_OT_extrude_faces_indiv(MESH_OT_extrude_faces_indiv, (optional)) – Extrude Individual Faces, Extrude individual faces only",
            "TRANSFORM_OT_shrink_fatten(TRANSFORM_OT_shrink_fatten, (optional)) – Shrink/Fatten, Shrink/fatten selected vertices along normals"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.extrude_manifold",
        "signature": "bpy.ops.mesh.extrude_manifold(MESH_OT_extrude_region=None,TRANSFORM_OT_translate=None)#",
        "description": "Extrude, dissolves edges whose faces form a flat surface and intersect new edges",
        "parameters": [
            "MESH_OT_extrude_region=None",
            "TRANSFORM_OT_translate=None"
        ],
        "parameter_descriptions": [
            "MESH_OT_extrude_region(MESH_OT_extrude_region, (optional)) – Extrude Region, Extrude region of faces",
            "TRANSFORM_OT_translate(TRANSFORM_OT_translate, (optional)) – Move, Move selected items"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.extrude_region",
        "signature": "bpy.ops.mesh.extrude_region(use_normal_flip=False,use_dissolve_ortho_edges=False,mirror=False)#",
        "description": "Extrude region of faces",
        "parameters": [
            "use_normal_flip=False",
            "use_dissolve_ortho_edges=False",
            "mirror=False"
        ],
        "parameter_descriptions": [
            "use_normal_flip(boolean,(optional)) – Flip Normals",
            "use_dissolve_ortho_edges(boolean,(optional)) – Dissolve Orthogonal Edges",
            "mirror(boolean,(optional)) – Mirror Editing"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.extrude_region_move",
        "signature": "bpy.ops.mesh.extrude_region_move(MESH_OT_extrude_region=None,TRANSFORM_OT_translate=None)#",
        "description": "Extrude region and move result",
        "parameters": [
            "MESH_OT_extrude_region=None",
            "TRANSFORM_OT_translate=None"
        ],
        "parameter_descriptions": [
            "MESH_OT_extrude_region(MESH_OT_extrude_region, (optional)) – Extrude Region, Extrude region of faces",
            "TRANSFORM_OT_translate(TRANSFORM_OT_translate, (optional)) – Move, Move selected items"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.extrude_region_shrink_fatten",
        "signature": "bpy.ops.mesh.extrude_region_shrink_fatten(MESH_OT_extrude_region=None,TRANSFORM_OT_shrink_fatten=None)#",
        "description": "Extrude region together along local normals",
        "parameters": [
            "MESH_OT_extrude_region=None",
            "TRANSFORM_OT_shrink_fatten=None"
        ],
        "parameter_descriptions": [
            "MESH_OT_extrude_region(MESH_OT_extrude_region, (optional)) – Extrude Region, Extrude region of faces",
            "TRANSFORM_OT_shrink_fatten(TRANSFORM_OT_shrink_fatten, (optional)) – Shrink/Fatten, Shrink/fatten selected vertices along normals"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.extrude_repeat",
        "signature": "bpy.ops.mesh.extrude_repeat(steps=10,offset=(0.0,0.0,0.0),scale_offset=1.0)#",
        "description": "Extrude selected vertices, edges or faces repeatedly",
        "parameters": [
            "steps=10",
            "offset=(0.0,0.0,0.0)",
            "scale_offset=1.0"
        ],
        "parameter_descriptions": [
            "steps(int in[0,1000000],(optional)) – Steps",
            "offset(mathutils.Vectorof 3 items in [-100000, 100000], (optional)) – Offset, Offset vector",
            "scale_offset(float in[0,inf],(optional)) – Scale Offset"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.extrude_vertices_move",
        "signature": "bpy.ops.mesh.extrude_vertices_move(MESH_OT_extrude_verts_indiv=None,TRANSFORM_OT_translate=None)#",
        "description": "Extrude vertices and move result",
        "parameters": [
            "MESH_OT_extrude_verts_indiv=None",
            "TRANSFORM_OT_translate=None"
        ],
        "parameter_descriptions": [
            "MESH_OT_extrude_verts_indiv(MESH_OT_extrude_verts_indiv, (optional)) – Extrude Only Vertices, Extrude individual vertices only",
            "TRANSFORM_OT_translate(TRANSFORM_OT_translate, (optional)) – Move, Move selected items"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.extrude_verts_indiv",
        "signature": "bpy.ops.mesh.extrude_verts_indiv(mirror=False)#",
        "description": "Extrude individual vertices only",
        "parameters": [
            "mirror=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.mesh.face_make_planar",
        "signature": "bpy.ops.mesh.face_make_planar(factor=1.0,repeat=1)#",
        "description": "Flatten selected faces",
        "parameters": [
            "factor=1.0",
            "repeat=1"
        ],
        "parameter_descriptions": [
            "factor(float in[-10,10],(optional)) – Factor",
            "repeat(int in[1,10000],(optional)) – Iterations"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.face_set_extract",
        "signature": "bpy.ops.mesh.face_set_extract(add_boundary_loop=True,smooth_iterations=4,apply_shrinkwrap=True,add_solidify=True)#",
        "description": "Create a new mesh object from the selected Face Set",
        "parameters": [
            "add_boundary_loop=True",
            "smooth_iterations=4",
            "apply_shrinkwrap=True",
            "add_solidify=True"
        ],
        "parameter_descriptions": [
            "add_boundary_loop(boolean,(optional)) – Add Boundary Loop, Add an extra edge loop to better preserve the shape when applying a subdivision surface modifier",
            "smooth_iterations(int in[0,inf],(optional)) – Smooth Iterations, Smooth iterations applied to the extracted mesh",
            "apply_shrinkwrap(boolean,(optional)) – Project to Sculpt, Project the extracted mesh into the original sculpt",
            "add_solidify(boolean,(optional)) – Extract as Solid, Extract the mask as a solid object with a solidify modifier"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.face_split_by_edges",
        "signature": "bpy.ops.mesh.face_split_by_edges()#",
        "description": "Weld loose edges into faces (splitting them into new faces)",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.mesh.faces_mirror_uv",
        "signature": "bpy.ops.mesh.faces_mirror_uv(direction='POSITIVE',precision=3)#",
        "description": "Copy mirror UV coordinates on the X axis based on a mirrored mesh",
        "parameters": [
            "direction='POSITIVE'",
            "precision=3"
        ],
        "parameter_descriptions": [
            "direction(enum in['POSITIVE','NEGATIVE'],(optional)) – Axis Direction",
            "precision(int in[1,16],(optional)) – Precision, Tolerance for finding vertex duplicates"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.faces_select_linked_flat",
        "signature": "bpy.ops.mesh.faces_select_linked_flat(sharpness=0.0174533)#",
        "description": "Select linked faces by angle",
        "parameters": [
            "sharpness=0.0174533"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.mesh.faces_shade_flat",
        "signature": "bpy.ops.mesh.faces_shade_flat()#",
        "description": "Display faces flat",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.mesh.faces_shade_smooth",
        "signature": "bpy.ops.mesh.faces_shade_smooth()#",
        "description": "Display faces smooth (using vertex normals)",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.mesh.fill",
        "signature": "bpy.ops.mesh.fill(use_beauty=True)#",
        "description": "Fill a selected edge loop with faces",
        "parameters": [
            "use_beauty=True"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.mesh.fill_grid",
        "signature": "bpy.ops.mesh.fill_grid(span=1,offset=0,use_interp_simple=False)#",
        "description": "Fill grid from two loops",
        "parameters": [
            "span=1",
            "offset=0",
            "use_interp_simple=False"
        ],
        "parameter_descriptions": [
            "span(int in[1,1000],(optional)) – Span, Number of grid columns",
            "offset(int in[-1000,1000],(optional)) – Offset, Vertex that is the corner of the grid",
            "use_interp_simple(boolean,(optional)) – Simple Blending, Use simple interpolation of grid vertices"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.fill_holes",
        "signature": "bpy.ops.mesh.fill_holes(sides=4)#",
        "description": "Fill in holes (boundary edge loops)",
        "parameters": [
            "sides=4"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.mesh.flip_normals",
        "signature": "bpy.ops.mesh.flip_normals(only_clnors=False)#",
        "description": "Flip the direction of selected faces’ normals (and of their vertices)",
        "parameters": [
            "only_clnors=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.mesh.flip_quad_tessellation",
        "signature": "bpy.ops.mesh.flip_quad_tessellation()#",
        "description": "Flips the tessellation of selected quads",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.mesh.hide",
        "signature": "bpy.ops.mesh.hide(unselected=False)#",
        "description": "Hide (un)selected vertices, edges or faces",
        "parameters": [
            "unselected=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.mesh.inset",
        "signature": "bpy.ops.mesh.inset(use_boundary=True,use_even_offset=True,use_relative_offset=False,use_edge_rail=False,thickness=0.0,depth=0.0,use_outset=False,use_select_inset=False,use_individual=False,use_interpolate=True,release_confirm=False)#",
        "description": "Inset new faces into selected faces",
        "parameters": [
            "use_boundary=True",
            "use_even_offset=True",
            "use_relative_offset=False",
            "use_edge_rail=False",
            "thickness=0.0",
            "depth=0.0",
            "use_outset=False",
            "use_select_inset=False",
            "use_individual=False",
            "use_interpolate=True",
            "release_confirm=False"
        ],
        "parameter_descriptions": [
            "use_boundary(boolean,(optional)) – Boundary, Inset face boundaries",
            "use_even_offset(boolean,(optional)) – Offset Even, Scale the offset to give more even thickness",
            "use_relative_offset(boolean,(optional)) – Offset Relative, Scale the offset by surrounding geometry",
            "use_edge_rail(boolean,(optional)) – Edge Rail, Inset the region along existing edges",
            "thickness(float in[0,inf],(optional)) – Thickness",
            "depth(float in[-inf,inf],(optional)) – Depth",
            "use_outset(boolean,(optional)) – Outset, Outset rather than inset",
            "use_select_inset(boolean,(optional)) – Select Outer, Select the new inset faces",
            "use_individual(boolean,(optional)) – Individual, Individual face inset",
            "use_interpolate(boolean,(optional)) – Interpolate, Blend face data across the inset",
            "release_confirm(boolean,(optional)) – Confirm on Release"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.intersect",
        "signature": "bpy.ops.mesh.intersect(mode='SELECT_UNSELECT',separate_mode='CUT',threshold=1e-06,solver='EXACT')#",
        "description": "Cut an intersection into faces",
        "parameters": [
            "mode='SELECT_UNSELECT'",
            "separate_mode='CUT'",
            "threshold=1e-06",
            "solver='EXACT'"
        ],
        "parameter_descriptions": [
            "mode(enum in['SELECT','SELECT_UNSELECT'],(optional)) –SourceSELECTSelf Intersect – Self intersect selected faces.SELECT_UNSELECTSelected/Unselected – Intersect selected with unselected faces.",
            "SELECTSelf Intersect – Self intersect selected faces.",
            "SELECT_UNSELECTSelected/Unselected – Intersect selected with unselected faces.",
            "separate_mode(enum in['ALL','CUT','NONE'],(optional)) –Separate ModeALLAll – Separate all geometry from intersections.CUTCut – Cut into geometry keeping each side separate (Selected/Unselected only).NONEMerge – Merge all geometry from the intersection.",
            "ALLAll – Separate all geometry from intersections.",
            "CUTCut – Cut into geometry keeping each side separate (Selected/Unselected only).",
            "NONEMerge – Merge all geometry from the intersection.",
            "threshold(float in[0,0.01],(optional)) – Merge Threshold",
            "solver(enum in['FAST','EXACT'],(optional)) –Solver, Which Intersect solver to useFASTFast – Faster solver, some limitations.EXACTExact – Exact solver, slower, handles more cases.",
            "FASTFast – Faster solver, some limitations.",
            "EXACTExact – Exact solver, slower, handles more cases."
        ]
    },
    {
        "function_id": "bpy.ops.mesh.intersect_boolean",
        "signature": "bpy.ops.mesh.intersect_boolean(operation='DIFFERENCE',use_swap=False,use_self=False,threshold=1e-06,solver='EXACT')#",
        "description": "Cut solid geometry from selected to unselected",
        "parameters": [
            "operation='DIFFERENCE'",
            "use_swap=False",
            "use_self=False",
            "threshold=1e-06",
            "solver='EXACT'"
        ],
        "parameter_descriptions": [
            "operation(enum in['INTERSECT','UNION','DIFFERENCE'],(optional)) – Boolean Operation, Which boolean operation to apply",
            "use_swap(boolean,(optional)) – Swap, Use with difference intersection to swap which side is kept",
            "use_self(boolean,(optional)) – Self Intersection, Do self-union or self-intersection",
            "threshold(float in[0,0.01],(optional)) – Merge Threshold",
            "solver(enum in['FAST','EXACT'],(optional)) –Solver, Which Boolean solver to useFASTFast – Faster solver, some limitations.EXACTExact – Exact solver, slower, handles more cases.",
            "FASTFast – Faster solver, some limitations.",
            "EXACTExact – Exact solver, slower, handles more cases."
        ]
    },
    {
        "function_id": "bpy.ops.mesh.knife_project",
        "signature": "bpy.ops.mesh.knife_project(cut_through=False)#",
        "description": "Use other objects outlines and boundaries to project knife cuts",
        "parameters": [
            "cut_through=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.mesh.knife_tool",
        "signature": "bpy.ops.mesh.knife_tool(use_occlude_geometry=True,only_selected=False,xray=True,visible_measurements='NONE',angle_snapping='NONE',angle_snapping_increment=0.523599,wait_for_input=True)#",
        "description": "Cut new topology",
        "parameters": [
            "use_occlude_geometry=True",
            "only_selected=False",
            "xray=True",
            "visible_measurements='NONE'",
            "angle_snapping='NONE'",
            "angle_snapping_increment=0.523599",
            "wait_for_input=True"
        ],
        "parameter_descriptions": [
            "use_occlude_geometry(boolean,(optional)) – Occlude Geometry, Only cut the front most geometry",
            "only_selected(boolean,(optional)) – Only Selected, Only cut selected geometry",
            "xray(boolean,(optional)) – X-Ray, Show cuts hidden by geometry",
            "visible_measurements(enum in['NONE','BOTH','DISTANCE','ANGLE'],(optional)) –Measurements, Visible distance and angle measurementsNONENone – Show no measurements.BOTHBoth – Show both distances and angles.DISTANCEDistance – Show just distance measurements.ANGLEAngle – Show just angle measurements.",
            "NONENone – Show no measurements.",
            "BOTHBoth – Show both distances and angles.",
            "DISTANCEDistance – Show just distance measurements.",
            "ANGLEAngle – Show just angle measurements.",
            "angle_snapping(enum in['NONE','SCREEN','RELATIVE'],(optional)) –Angle Snapping, Angle snapping modeNONENone – No angle snapping.SCREENScreen – Screen space angle snapping.RELATIVERelative – Angle snapping relative to the previous cut edge.",
            "NONENone – No angle snapping.",
            "SCREENScreen – Screen space angle snapping.",
            "RELATIVERelative – Angle snapping relative to the previous cut edge.",
            "angle_snapping_increment(float in[0,3.14159],(optional)) – Angle Snap Increment, The angle snap increment used when in constrained angle mode",
            "wait_for_input(boolean,(optional)) – Wait for Input"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.loop_multi_select",
        "signature": "bpy.ops.mesh.loop_multi_select(ring=False)#",
        "description": "Select a loop of connected edges by connection type",
        "parameters": [
            "ring=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.mesh.loop_select",
        "signature": "bpy.ops.mesh.loop_select(extend=False,deselect=False,toggle=False,ring=False)#",
        "description": "Select a loop of connected edges",
        "parameters": [
            "extend=False",
            "deselect=False",
            "toggle=False",
            "ring=False"
        ],
        "parameter_descriptions": [
            "extend(boolean,(optional)) – Extend Select, Extend the selection",
            "deselect(boolean,(optional)) – Deselect, Remove from the selection",
            "toggle(boolean,(optional)) – Toggle Select, Toggle the selection",
            "ring(boolean,(optional)) – Select Ring, Select ring"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.loop_to_region",
        "signature": "bpy.ops.mesh.loop_to_region(select_bigger=False)#",
        "description": "Select region of faces inside of a selected loop of edges",
        "parameters": [
            "select_bigger=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.mesh.loopcut",
        "signature": "bpy.ops.mesh.loopcut(number_cuts=1,smoothness=0.0,falloff='INVERSE_SQUARE',object_index=-1,edge_index=-1,mesh_select_mode_init=(False,False,False))#",
        "description": "Add a new loop between existing loops",
        "parameters": [
            "number_cuts=1",
            "smoothness=0.0",
            "falloff='INVERSE_SQUARE'",
            "object_index=-1",
            "edge_index=-1",
            "mesh_select_mode_init=(False,False,False)"
        ],
        "parameter_descriptions": [
            "number_cuts(int in[1,1000000],(optional)) – Number of Cuts",
            "smoothness(float in[-1000,1000],(optional)) – Smoothness, Smoothness factor",
            "falloff(enum inProportional Falloff Curve Only Items, (optional)) – Falloff, Falloff type of the feather",
            "object_index(int in[-1,inf],(optional)) – Object Index",
            "edge_index(int in[-1,inf],(optional)) – Edge Index"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.loopcut_slide",
        "signature": "bpy.ops.mesh.loopcut_slide(MESH_OT_loopcut=None,TRANSFORM_OT_edge_slide=None)#",
        "description": "Cut mesh loop and slide it",
        "parameters": [
            "MESH_OT_loopcut=None",
            "TRANSFORM_OT_edge_slide=None"
        ],
        "parameter_descriptions": [
            "MESH_OT_loopcut(MESH_OT_loopcut, (optional)) – Loop Cut, Add a new loop between existing loops",
            "TRANSFORM_OT_edge_slide(TRANSFORM_OT_edge_slide, (optional)) – Edge Slide, Slide an edge loop along a mesh"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.mark_freestyle_edge",
        "signature": "bpy.ops.mesh.mark_freestyle_edge(clear=False)#",
        "description": "(Un)mark selected edges as Freestyle feature edges",
        "parameters": [
            "clear=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.mesh.mark_freestyle_face",
        "signature": "bpy.ops.mesh.mark_freestyle_face(clear=False)#",
        "description": "(Un)mark selected faces for exclusion from Freestyle feature edge detection",
        "parameters": [
            "clear=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.mesh.mark_seam",
        "signature": "bpy.ops.mesh.mark_seam(clear=False)#",
        "description": "(Un)mark selected edges as a seam",
        "parameters": [
            "clear=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.mesh.mark_sharp",
        "signature": "bpy.ops.mesh.mark_sharp(clear=False,use_verts=False)#",
        "description": "(Un)mark selected edges as sharp",
        "parameters": [
            "clear=False",
            "use_verts=False"
        ],
        "parameter_descriptions": [
            "clear(boolean,(optional)) – Clear",
            "use_verts(boolean,(optional)) – Vertices, Consider vertices instead of edges to select which edges to (un)tag as sharp"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.merge",
        "signature": "bpy.ops.mesh.merge(type='CENTER',uvs=False)#",
        "description": "Merge selected vertices",
        "parameters": [
            "type='CENTER'",
            "uvs=False"
        ],
        "parameter_descriptions": [
            "type(enum in['CENTER','CURSOR','COLLAPSE','FIRST','LAST'],(optional)) – Type, Merge method to use",
            "uvs(boolean,(optional)) – UVs, Move UVs according to merge"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.merge_normals",
        "signature": "bpy.ops.mesh.merge_normals()#",
        "description": "Merge custom normals of selected vertices",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.mesh.mod_weighted_strength",
        "signature": "bpy.ops.mesh.mod_weighted_strength(set=False,face_strength='MEDIUM')#",
        "description": "Set/Get strength of face (used in Weighted Normal modifier)",
        "parameters": [
            "set=False",
            "face_strength='MEDIUM'"
        ],
        "parameter_descriptions": [
            "set(boolean,(optional)) – Set Value, Set value of faces",
            "face_strength(enum in['WEAK','MEDIUM','STRONG'],(optional)) – Face Strength, Strength to use for assigning or selecting face influence for weighted normal modifier"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.normals_make_consistent",
        "signature": "bpy.ops.mesh.normals_make_consistent(inside=False)#",
        "description": "Make face and vertex normals point either outside or inside the mesh",
        "parameters": [
            "inside=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.mesh.normals_tools",
        "signature": "bpy.ops.mesh.normals_tools(mode='COPY',absolute=False)#",
        "description": "Custom normals tools using Normal Vector of UI",
        "parameters": [
            "mode='COPY'",
            "absolute=False"
        ],
        "parameter_descriptions": [
            "mode(enum in['COPY','PASTE','ADD','MULTIPLY','RESET'],(optional)) –Mode, Mode of tools taking input from interfaceCOPYCopy Normal – Copy normal to the internal clipboard.PASTEPaste Normal – Paste normal from the internal clipboard.ADDAdd Normal – Add normal vector with selection.MULTIPLYMultiply Normal – Multiply normal vector with selection.RESETReset Normal – Reset the internal clipboard and/or normal of selected element.",
            "COPYCopy Normal – Copy normal to the internal clipboard.",
            "PASTEPaste Normal – Paste normal from the internal clipboard.",
            "ADDAdd Normal – Add normal vector with selection.",
            "MULTIPLYMultiply Normal – Multiply normal vector with selection.",
            "RESETReset Normal – Reset the internal clipboard and/or normal of selected element.",
            "absolute(boolean,(optional)) – Absolute Coordinates, Copy Absolute coordinates of Normal vector"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.offset_edge_loops",
        "signature": "bpy.ops.mesh.offset_edge_loops(use_cap_endpoint=False)#",
        "description": "Create offset edge loop from the current selection",
        "parameters": [
            "use_cap_endpoint=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.mesh.offset_edge_loops_slide",
        "signature": "bpy.ops.mesh.offset_edge_loops_slide(MESH_OT_offset_edge_loops=None,TRANSFORM_OT_edge_slide=None)#",
        "description": "Offset edge loop slide",
        "parameters": [
            "MESH_OT_offset_edge_loops=None",
            "TRANSFORM_OT_edge_slide=None"
        ],
        "parameter_descriptions": [
            "MESH_OT_offset_edge_loops(MESH_OT_offset_edge_loops, (optional)) – Offset Edge Loop, Create offset edge loop from the current selection",
            "TRANSFORM_OT_edge_slide(TRANSFORM_OT_edge_slide, (optional)) – Edge Slide, Slide an edge loop along a mesh"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.paint_mask_extract",
        "signature": "bpy.ops.mesh.paint_mask_extract(mask_threshold=0.5,add_boundary_loop=True,smooth_iterations=4,apply_shrinkwrap=True,add_solidify=True)#",
        "description": "Create a new mesh object from the current paint mask",
        "parameters": [
            "mask_threshold=0.5",
            "add_boundary_loop=True",
            "smooth_iterations=4",
            "apply_shrinkwrap=True",
            "add_solidify=True"
        ],
        "parameter_descriptions": [
            "mask_threshold(float in[0,1],(optional)) – Threshold, Minimum mask value to consider the vertex valid to extract a face from the original mesh",
            "add_boundary_loop(boolean,(optional)) – Add Boundary Loop, Add an extra edge loop to better preserve the shape when applying a subdivision surface modifier",
            "smooth_iterations(int in[0,inf],(optional)) – Smooth Iterations, Smooth iterations applied to the extracted mesh",
            "apply_shrinkwrap(boolean,(optional)) – Project to Sculpt, Project the extracted mesh into the original sculpt",
            "add_solidify(boolean,(optional)) – Extract as Solid, Extract the mask as a solid object with a solidify modifier"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.paint_mask_slice",
        "signature": "bpy.ops.mesh.paint_mask_slice(mask_threshold=0.5,fill_holes=True,new_object=True)#",
        "description": "Slices the paint mask from the mesh",
        "parameters": [
            "mask_threshold=0.5",
            "fill_holes=True",
            "new_object=True"
        ],
        "parameter_descriptions": [
            "mask_threshold(float in[0,1],(optional)) – Threshold, Minimum mask value to consider the vertex valid to extract a face from the original mesh",
            "fill_holes(boolean,(optional)) – Fill Holes, Fill holes after slicing the mask",
            "new_object(boolean,(optional)) – Slice to New Object, Create a new object from the sliced mask"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.point_normals",
        "signature": "bpy.ops.mesh.point_normals(mode='COORDINATES',invert=False,align=False,target_location=(0.0,0.0,0.0),spherize=False,spherize_strength=0.1)#",
        "description": "Point selected custom normals to specified Target",
        "parameters": [
            "mode='COORDINATES'",
            "invert=False",
            "align=False",
            "target_location=(0.0,0.0,0.0)",
            "spherize=False",
            "spherize_strength=0.1"
        ],
        "parameter_descriptions": [
            "mode(enum in['COORDINATES','MOUSE'],(optional)) –Mode, How to define coordinates to point custom normals toCOORDINATESCoordinates – Use static coordinates (defined by various means).MOUSEMouse – Follow mouse cursor.",
            "COORDINATESCoordinates – Use static coordinates (defined by various means).",
            "MOUSEMouse – Follow mouse cursor.",
            "invert(boolean,(optional)) – Invert, Invert affected normals",
            "align(boolean,(optional)) – Align, Make all affected normals parallel",
            "target_location(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Target, Target location to which normals will point",
            "spherize(boolean,(optional)) – Spherize, Interpolate between original and new normals",
            "spherize_strength(float in[0,1],(optional)) – Spherize Strength, Ratio of spherized normal to original normal"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.poke",
        "signature": "bpy.ops.mesh.poke(offset=0.0,use_relative_offset=False,center_mode='MEDIAN_WEIGHTED')#",
        "description": "Split a face into a fan",
        "parameters": [
            "offset=0.0",
            "use_relative_offset=False",
            "center_mode='MEDIAN_WEIGHTED'"
        ],
        "parameter_descriptions": [
            "offset(float in[-1000,1000],(optional)) – Poke Offset, Poke Offset",
            "use_relative_offset(boolean,(optional)) – Offset Relative, Scale the offset by surrounding geometry",
            "center_mode(enum in['MEDIAN_WEIGHTED','MEDIAN','BOUNDS'],(optional)) –Poke Center, Poke face center calculationMEDIAN_WEIGHTEDWeighted Median – Weighted median face center.MEDIANMedian – Median face center.BOUNDSBounds – Face bounds center.",
            "MEDIAN_WEIGHTEDWeighted Median – Weighted median face center.",
            "MEDIANMedian – Median face center.",
            "BOUNDSBounds – Face bounds center."
        ]
    },
    {
        "function_id": "bpy.ops.mesh.polybuild_delete_at_cursor",
        "signature": "bpy.ops.mesh.polybuild_delete_at_cursor(mirror=False,use_proportional_edit=False,proportional_edit_falloff='SMOOTH',proportional_size=1.0,use_proportional_connected=False,use_proportional_projected=False,release_confirm=False,use_accurate=False)#",
        "description": "Undocumented, considercontributing.",
        "parameters": [
            "mirror=False",
            "use_proportional_edit=False",
            "proportional_edit_falloff='SMOOTH'",
            "proportional_size=1.0",
            "use_proportional_connected=False",
            "use_proportional_projected=False",
            "release_confirm=False",
            "use_accurate=False"
        ],
        "parameter_descriptions": [
            "mirror(boolean,(optional)) – Mirror Editing",
            "use_proportional_edit(boolean,(optional)) – Proportional Editing",
            "proportional_edit_falloff(enum inProportional Falloff Items, (optional)) – Proportional Falloff, Falloff type for proportional editing mode",
            "proportional_size(float in[1e-06,inf],(optional)) – Proportional Size",
            "use_proportional_connected(boolean,(optional)) – Connected",
            "use_proportional_projected(boolean,(optional)) – Projected (2D)",
            "release_confirm(boolean,(optional)) – Confirm on Release, Always confirm operation when releasing button",
            "use_accurate(boolean,(optional)) – Accurate, Use accurate transformation"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.polybuild_dissolve_at_cursor",
        "signature": "bpy.ops.mesh.polybuild_dissolve_at_cursor()#",
        "description": "Undocumented, considercontributing.",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.mesh.polybuild_extrude_at_cursor_move",
        "signature": "bpy.ops.mesh.polybuild_extrude_at_cursor_move(MESH_OT_polybuild_transform_at_cursor=None,MESH_OT_extrude_edges_indiv=None,TRANSFORM_OT_translate=None)#",
        "description": "Undocumented, considercontributing.",
        "parameters": [
            "MESH_OT_polybuild_transform_at_cursor=None",
            "MESH_OT_extrude_edges_indiv=None",
            "TRANSFORM_OT_translate=None"
        ],
        "parameter_descriptions": [
            "MESH_OT_polybuild_transform_at_cursor(MESH_OT_polybuild_transform_at_cursor, (optional)) – Poly Build Transform at Cursor",
            "MESH_OT_extrude_edges_indiv(MESH_OT_extrude_edges_indiv, (optional)) – Extrude Only Edges, Extrude individual edges only",
            "TRANSFORM_OT_translate(TRANSFORM_OT_translate, (optional)) – Move, Move selected items"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.polybuild_face_at_cursor",
        "signature": "bpy.ops.mesh.polybuild_face_at_cursor(create_quads=True,mirror=False,use_proportional_edit=False,proportional_edit_falloff='SMOOTH',proportional_size=1.0,use_proportional_connected=False,use_proportional_projected=False,release_confirm=False,use_accurate=False)#",
        "description": "Undocumented, considercontributing.",
        "parameters": [
            "create_quads=True",
            "mirror=False",
            "use_proportional_edit=False",
            "proportional_edit_falloff='SMOOTH'",
            "proportional_size=1.0",
            "use_proportional_connected=False",
            "use_proportional_projected=False",
            "release_confirm=False",
            "use_accurate=False"
        ],
        "parameter_descriptions": [
            "create_quads(boolean,(optional)) – Create Quads, Automatically split edges in triangles to maintain quad topology",
            "mirror(boolean,(optional)) – Mirror Editing",
            "use_proportional_edit(boolean,(optional)) – Proportional Editing",
            "proportional_edit_falloff(enum inProportional Falloff Items, (optional)) – Proportional Falloff, Falloff type for proportional editing mode",
            "proportional_size(float in[1e-06,inf],(optional)) – Proportional Size",
            "use_proportional_connected(boolean,(optional)) – Connected",
            "use_proportional_projected(boolean,(optional)) – Projected (2D)",
            "release_confirm(boolean,(optional)) – Confirm on Release, Always confirm operation when releasing button",
            "use_accurate(boolean,(optional)) – Accurate, Use accurate transformation"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.polybuild_face_at_cursor_move",
        "signature": "bpy.ops.mesh.polybuild_face_at_cursor_move(MESH_OT_polybuild_face_at_cursor=None,TRANSFORM_OT_translate=None)#",
        "description": "Undocumented, considercontributing.",
        "parameters": [
            "MESH_OT_polybuild_face_at_cursor=None",
            "TRANSFORM_OT_translate=None"
        ],
        "parameter_descriptions": [
            "MESH_OT_polybuild_face_at_cursor(MESH_OT_polybuild_face_at_cursor, (optional)) – Poly Build Face at Cursor",
            "TRANSFORM_OT_translate(TRANSFORM_OT_translate, (optional)) – Move, Move selected items"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.polybuild_split_at_cursor",
        "signature": "bpy.ops.mesh.polybuild_split_at_cursor(mirror=False,use_proportional_edit=False,proportional_edit_falloff='SMOOTH',proportional_size=1.0,use_proportional_connected=False,use_proportional_projected=False,release_confirm=False,use_accurate=False)#",
        "description": "Undocumented, considercontributing.",
        "parameters": [
            "mirror=False",
            "use_proportional_edit=False",
            "proportional_edit_falloff='SMOOTH'",
            "proportional_size=1.0",
            "use_proportional_connected=False",
            "use_proportional_projected=False",
            "release_confirm=False",
            "use_accurate=False"
        ],
        "parameter_descriptions": [
            "mirror(boolean,(optional)) – Mirror Editing",
            "use_proportional_edit(boolean,(optional)) – Proportional Editing",
            "proportional_edit_falloff(enum inProportional Falloff Items, (optional)) – Proportional Falloff, Falloff type for proportional editing mode",
            "proportional_size(float in[1e-06,inf],(optional)) – Proportional Size",
            "use_proportional_connected(boolean,(optional)) – Connected",
            "use_proportional_projected(boolean,(optional)) – Projected (2D)",
            "release_confirm(boolean,(optional)) – Confirm on Release, Always confirm operation when releasing button",
            "use_accurate(boolean,(optional)) – Accurate, Use accurate transformation"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.polybuild_split_at_cursor_move",
        "signature": "bpy.ops.mesh.polybuild_split_at_cursor_move(MESH_OT_polybuild_split_at_cursor=None,TRANSFORM_OT_translate=None)#",
        "description": "Undocumented, considercontributing.",
        "parameters": [
            "MESH_OT_polybuild_split_at_cursor=None",
            "TRANSFORM_OT_translate=None"
        ],
        "parameter_descriptions": [
            "MESH_OT_polybuild_split_at_cursor(MESH_OT_polybuild_split_at_cursor, (optional)) – Poly Build Split at Cursor",
            "TRANSFORM_OT_translate(TRANSFORM_OT_translate, (optional)) – Move, Move selected items"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.polybuild_transform_at_cursor",
        "signature": "bpy.ops.mesh.polybuild_transform_at_cursor(mirror=False,use_proportional_edit=False,proportional_edit_falloff='SMOOTH',proportional_size=1.0,use_proportional_connected=False,use_proportional_projected=False,release_confirm=False,use_accurate=False)#",
        "description": "Undocumented, considercontributing.",
        "parameters": [
            "mirror=False",
            "use_proportional_edit=False",
            "proportional_edit_falloff='SMOOTH'",
            "proportional_size=1.0",
            "use_proportional_connected=False",
            "use_proportional_projected=False",
            "release_confirm=False",
            "use_accurate=False"
        ],
        "parameter_descriptions": [
            "mirror(boolean,(optional)) – Mirror Editing",
            "use_proportional_edit(boolean,(optional)) – Proportional Editing",
            "proportional_edit_falloff(enum inProportional Falloff Items, (optional)) – Proportional Falloff, Falloff type for proportional editing mode",
            "proportional_size(float in[1e-06,inf],(optional)) – Proportional Size",
            "use_proportional_connected(boolean,(optional)) – Connected",
            "use_proportional_projected(boolean,(optional)) – Projected (2D)",
            "release_confirm(boolean,(optional)) – Confirm on Release, Always confirm operation when releasing button",
            "use_accurate(boolean,(optional)) – Accurate, Use accurate transformation"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.polybuild_transform_at_cursor_move",
        "signature": "bpy.ops.mesh.polybuild_transform_at_cursor_move(MESH_OT_polybuild_transform_at_cursor=None,TRANSFORM_OT_translate=None)#",
        "description": "Undocumented, considercontributing.",
        "parameters": [
            "MESH_OT_polybuild_transform_at_cursor=None",
            "TRANSFORM_OT_translate=None"
        ],
        "parameter_descriptions": [
            "MESH_OT_polybuild_transform_at_cursor(MESH_OT_polybuild_transform_at_cursor, (optional)) – Poly Build Transform at Cursor",
            "TRANSFORM_OT_translate(TRANSFORM_OT_translate, (optional)) – Move, Move selected items"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.primitive_circle_add",
        "signature": "bpy.ops.mesh.primitive_circle_add(vertices=32,radius=1.0,fill_type='NOTHING',calc_uvs=True,enter_editmode=False,align='WORLD',location=(0.0,0.0,0.0),rotation=(0.0,0.0,0.0),scale=(0.0,0.0,0.0))#",
        "description": "Construct a circle mesh",
        "parameters": [
            "vertices=32",
            "radius=1.0",
            "fill_type='NOTHING'",
            "calc_uvs=True",
            "enter_editmode=False",
            "align='WORLD'",
            "location=(0.0,0.0,0.0)",
            "rotation=(0.0,0.0,0.0)",
            "scale=(0.0,0.0,0.0)"
        ],
        "parameter_descriptions": [
            "vertices(int in[3,10000000],(optional)) – Vertices",
            "radius(float in[0,inf],(optional)) – Radius",
            "fill_type(enum in['NOTHING','NGON','TRIFAN'],(optional)) –Fill TypeNOTHINGNothing – Don’t fill at all.NGONN-Gon – Use n-gons.TRIFANTriangle Fan – Use triangle fans.",
            "NOTHINGNothing – Don’t fill at all.",
            "NGONN-Gon – Use n-gons.",
            "TRIFANTriangle Fan – Use triangle fans.",
            "calc_uvs(boolean,(optional)) – Generate UVs, Generate a default UV map",
            "enter_editmode(boolean,(optional)) – Enter Edit Mode, Enter edit mode when adding this object",
            "align(enum in['WORLD','VIEW','CURSOR'],(optional)) –Align, The alignment of the new objectWORLDWorld – Align the new object to the world.VIEWView – Align the new object to the view.CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "WORLDWorld – Align the new object to the world.",
            "VIEWView – Align the new object to the view.",
            "CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "location(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Location, Location for the newly added object",
            "rotation(mathutils.Eulerrotation of 3 items in [-inf, inf], (optional)) – Rotation, Rotation for the newly added object",
            "scale(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Scale, Scale for the newly added object"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.primitive_cone_add",
        "signature": "bpy.ops.mesh.primitive_cone_add(vertices=32,radius1=1.0,radius2=0.0,depth=2.0,end_fill_type='NGON',calc_uvs=True,enter_editmode=False,align='WORLD',location=(0.0,0.0,0.0),rotation=(0.0,0.0,0.0),scale=(0.0,0.0,0.0))#",
        "description": "Construct a conic mesh",
        "parameters": [
            "vertices=32",
            "radius1=1.0",
            "radius2=0.0",
            "depth=2.0",
            "end_fill_type='NGON'",
            "calc_uvs=True",
            "enter_editmode=False",
            "align='WORLD'",
            "location=(0.0,0.0,0.0)",
            "rotation=(0.0,0.0,0.0)",
            "scale=(0.0,0.0,0.0)"
        ],
        "parameter_descriptions": [
            "vertices(int in[3,10000000],(optional)) – Vertices",
            "radius1(float in[0,inf],(optional)) – Radius 1",
            "radius2(float in[0,inf],(optional)) – Radius 2",
            "depth(float in[0,inf],(optional)) – Depth",
            "end_fill_type(enum in['NOTHING','NGON','TRIFAN'],(optional)) –Base Fill TypeNOTHINGNothing – Don’t fill at all.NGONN-Gon – Use n-gons.TRIFANTriangle Fan – Use triangle fans.",
            "NOTHINGNothing – Don’t fill at all.",
            "NGONN-Gon – Use n-gons.",
            "TRIFANTriangle Fan – Use triangle fans.",
            "calc_uvs(boolean,(optional)) – Generate UVs, Generate a default UV map",
            "enter_editmode(boolean,(optional)) – Enter Edit Mode, Enter edit mode when adding this object",
            "align(enum in['WORLD','VIEW','CURSOR'],(optional)) –Align, The alignment of the new objectWORLDWorld – Align the new object to the world.VIEWView – Align the new object to the view.CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "WORLDWorld – Align the new object to the world.",
            "VIEWView – Align the new object to the view.",
            "CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "location(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Location, Location for the newly added object",
            "rotation(mathutils.Eulerrotation of 3 items in [-inf, inf], (optional)) – Rotation, Rotation for the newly added object",
            "scale(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Scale, Scale for the newly added object"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.primitive_cube_add",
        "signature": "bpy.ops.mesh.primitive_cube_add(size=2.0,calc_uvs=True,enter_editmode=False,align='WORLD',location=(0.0,0.0,0.0),rotation=(0.0,0.0,0.0),scale=(0.0,0.0,0.0))#",
        "description": "Construct a cube mesh that consists of six square faces",
        "parameters": [
            "size=2.0",
            "calc_uvs=True",
            "enter_editmode=False",
            "align='WORLD'",
            "location=(0.0,0.0,0.0)",
            "rotation=(0.0,0.0,0.0)",
            "scale=(0.0,0.0,0.0)"
        ],
        "parameter_descriptions": [
            "size(float in[0,inf],(optional)) – Size",
            "calc_uvs(boolean,(optional)) – Generate UVs, Generate a default UV map",
            "enter_editmode(boolean,(optional)) – Enter Edit Mode, Enter edit mode when adding this object",
            "align(enum in['WORLD','VIEW','CURSOR'],(optional)) –Align, The alignment of the new objectWORLDWorld – Align the new object to the world.VIEWView – Align the new object to the view.CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "WORLDWorld – Align the new object to the world.",
            "VIEWView – Align the new object to the view.",
            "CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "location(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Location, Location for the newly added object",
            "rotation(mathutils.Eulerrotation of 3 items in [-inf, inf], (optional)) – Rotation, Rotation for the newly added object",
            "scale(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Scale, Scale for the newly added object"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.primitive_cube_add_gizmo",
        "signature": "bpy.ops.mesh.primitive_cube_add_gizmo(calc_uvs=True,enter_editmode=False,align='WORLD',location=(0.0,0.0,0.0),rotation=(0.0,0.0,0.0),scale=(0.0,0.0,0.0),matrix=((0.0,0.0,0.0,0.0),(0.0,0.0,0.0,0.0),(0.0,0.0,0.0,0.0),(0.0,0.0,0.0,0.0)))#",
        "description": "Construct a cube mesh",
        "parameters": [
            "calc_uvs=True",
            "enter_editmode=False",
            "align='WORLD'",
            "location=(0.0,0.0,0.0)",
            "rotation=(0.0,0.0,0.0)",
            "scale=(0.0,0.0,0.0)",
            "matrix=((0.0,0.0,0.0,0.0),(0.0,0.0,0.0,0.0),(0.0,0.0,0.0,0.0),(0.0,0.0,0.0,0.0))"
        ],
        "parameter_descriptions": [
            "calc_uvs(boolean,(optional)) – Generate UVs, Generate a default UV map",
            "enter_editmode(boolean,(optional)) – Enter Edit Mode, Enter edit mode when adding this object",
            "align(enum in['WORLD','VIEW','CURSOR'],(optional)) –Align, The alignment of the new objectWORLDWorld – Align the new object to the world.VIEWView – Align the new object to the view.CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "WORLDWorld – Align the new object to the world.",
            "VIEWView – Align the new object to the view.",
            "CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "location(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Location, Location for the newly added object",
            "rotation(mathutils.Eulerrotation of 3 items in [-inf, inf], (optional)) – Rotation, Rotation for the newly added object",
            "scale(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Scale, Scale for the newly added object",
            "matrix(mathutils.Matrixof 4 * 4 items in [-inf, inf], (optional)) – Matrix"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.primitive_cylinder_add",
        "signature": "bpy.ops.mesh.primitive_cylinder_add(vertices=32,radius=1.0,depth=2.0,end_fill_type='NGON',calc_uvs=True,enter_editmode=False,align='WORLD',location=(0.0,0.0,0.0),rotation=(0.0,0.0,0.0),scale=(0.0,0.0,0.0))#",
        "description": "Construct a cylinder mesh",
        "parameters": [
            "vertices=32",
            "radius=1.0",
            "depth=2.0",
            "end_fill_type='NGON'",
            "calc_uvs=True",
            "enter_editmode=False",
            "align='WORLD'",
            "location=(0.0,0.0,0.0)",
            "rotation=(0.0,0.0,0.0)",
            "scale=(0.0,0.0,0.0)"
        ],
        "parameter_descriptions": [
            "vertices(int in[3,10000000],(optional)) – Vertices",
            "radius(float in[0,inf],(optional)) – Radius",
            "depth(float in[0,inf],(optional)) – Depth",
            "end_fill_type(enum in['NOTHING','NGON','TRIFAN'],(optional)) –Cap Fill TypeNOTHINGNothing – Don’t fill at all.NGONN-Gon – Use n-gons.TRIFANTriangle Fan – Use triangle fans.",
            "NOTHINGNothing – Don’t fill at all.",
            "NGONN-Gon – Use n-gons.",
            "TRIFANTriangle Fan – Use triangle fans.",
            "calc_uvs(boolean,(optional)) – Generate UVs, Generate a default UV map",
            "enter_editmode(boolean,(optional)) – Enter Edit Mode, Enter edit mode when adding this object",
            "align(enum in['WORLD','VIEW','CURSOR'],(optional)) –Align, The alignment of the new objectWORLDWorld – Align the new object to the world.VIEWView – Align the new object to the view.CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "WORLDWorld – Align the new object to the world.",
            "VIEWView – Align the new object to the view.",
            "CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "location(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Location, Location for the newly added object",
            "rotation(mathutils.Eulerrotation of 3 items in [-inf, inf], (optional)) – Rotation, Rotation for the newly added object",
            "scale(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Scale, Scale for the newly added object"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.primitive_grid_add",
        "signature": "bpy.ops.mesh.primitive_grid_add(x_subdivisions=10,y_subdivisions=10,size=2.0,calc_uvs=True,enter_editmode=False,align='WORLD',location=(0.0,0.0,0.0),rotation=(0.0,0.0,0.0),scale=(0.0,0.0,0.0))#",
        "description": "Construct a subdivided plane mesh",
        "parameters": [
            "x_subdivisions=10",
            "y_subdivisions=10",
            "size=2.0",
            "calc_uvs=True",
            "enter_editmode=False",
            "align='WORLD'",
            "location=(0.0,0.0,0.0)",
            "rotation=(0.0,0.0,0.0)",
            "scale=(0.0,0.0,0.0)"
        ],
        "parameter_descriptions": [
            "x_subdivisions(int in[1,10000000],(optional)) – X Subdivisions",
            "y_subdivisions(int in[1,10000000],(optional)) – Y Subdivisions",
            "size(float in[0,inf],(optional)) – Size",
            "calc_uvs(boolean,(optional)) – Generate UVs, Generate a default UV map",
            "enter_editmode(boolean,(optional)) – Enter Edit Mode, Enter edit mode when adding this object",
            "align(enum in['WORLD','VIEW','CURSOR'],(optional)) –Align, The alignment of the new objectWORLDWorld – Align the new object to the world.VIEWView – Align the new object to the view.CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "WORLDWorld – Align the new object to the world.",
            "VIEWView – Align the new object to the view.",
            "CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "location(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Location, Location for the newly added object",
            "rotation(mathutils.Eulerrotation of 3 items in [-inf, inf], (optional)) – Rotation, Rotation for the newly added object",
            "scale(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Scale, Scale for the newly added object"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.primitive_ico_sphere_add",
        "signature": "bpy.ops.mesh.primitive_ico_sphere_add(subdivisions=2,radius=1.0,calc_uvs=True,enter_editmode=False,align='WORLD',location=(0.0,0.0,0.0),rotation=(0.0,0.0,0.0),scale=(0.0,0.0,0.0))#",
        "description": "Construct a spherical mesh that consists of equally sized triangles",
        "parameters": [
            "subdivisions=2",
            "radius=1.0",
            "calc_uvs=True",
            "enter_editmode=False",
            "align='WORLD'",
            "location=(0.0,0.0,0.0)",
            "rotation=(0.0,0.0,0.0)",
            "scale=(0.0,0.0,0.0)"
        ],
        "parameter_descriptions": [
            "subdivisions(int in[1,10],(optional)) – Subdivisions",
            "radius(float in[0,inf],(optional)) – Radius",
            "calc_uvs(boolean,(optional)) – Generate UVs, Generate a default UV map",
            "enter_editmode(boolean,(optional)) – Enter Edit Mode, Enter edit mode when adding this object",
            "align(enum in['WORLD','VIEW','CURSOR'],(optional)) –Align, The alignment of the new objectWORLDWorld – Align the new object to the world.VIEWView – Align the new object to the view.CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "WORLDWorld – Align the new object to the world.",
            "VIEWView – Align the new object to the view.",
            "CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "location(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Location, Location for the newly added object",
            "rotation(mathutils.Eulerrotation of 3 items in [-inf, inf], (optional)) – Rotation, Rotation for the newly added object",
            "scale(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Scale, Scale for the newly added object"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.primitive_monkey_add",
        "signature": "bpy.ops.mesh.primitive_monkey_add(size=2.0,calc_uvs=True,enter_editmode=False,align='WORLD',location=(0.0,0.0,0.0),rotation=(0.0,0.0,0.0),scale=(0.0,0.0,0.0))#",
        "description": "Construct a Suzanne mesh",
        "parameters": [
            "size=2.0",
            "calc_uvs=True",
            "enter_editmode=False",
            "align='WORLD'",
            "location=(0.0,0.0,0.0)",
            "rotation=(0.0,0.0,0.0)",
            "scale=(0.0,0.0,0.0)"
        ],
        "parameter_descriptions": [
            "size(float in[0,inf],(optional)) – Size",
            "calc_uvs(boolean,(optional)) – Generate UVs, Generate a default UV map",
            "enter_editmode(boolean,(optional)) – Enter Edit Mode, Enter edit mode when adding this object",
            "align(enum in['WORLD','VIEW','CURSOR'],(optional)) –Align, The alignment of the new objectWORLDWorld – Align the new object to the world.VIEWView – Align the new object to the view.CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "WORLDWorld – Align the new object to the world.",
            "VIEWView – Align the new object to the view.",
            "CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "location(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Location, Location for the newly added object",
            "rotation(mathutils.Eulerrotation of 3 items in [-inf, inf], (optional)) – Rotation, Rotation for the newly added object",
            "scale(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Scale, Scale for the newly added object"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.primitive_plane_add",
        "signature": "bpy.ops.mesh.primitive_plane_add(size=2.0,calc_uvs=True,enter_editmode=False,align='WORLD',location=(0.0,0.0,0.0),rotation=(0.0,0.0,0.0),scale=(0.0,0.0,0.0))#",
        "description": "Construct a filled planar mesh with 4 vertices",
        "parameters": [
            "size=2.0",
            "calc_uvs=True",
            "enter_editmode=False",
            "align='WORLD'",
            "location=(0.0,0.0,0.0)",
            "rotation=(0.0,0.0,0.0)",
            "scale=(0.0,0.0,0.0)"
        ],
        "parameter_descriptions": [
            "size(float in[0,inf],(optional)) – Size",
            "calc_uvs(boolean,(optional)) – Generate UVs, Generate a default UV map",
            "enter_editmode(boolean,(optional)) – Enter Edit Mode, Enter edit mode when adding this object",
            "align(enum in['WORLD','VIEW','CURSOR'],(optional)) –Align, The alignment of the new objectWORLDWorld – Align the new object to the world.VIEWView – Align the new object to the view.CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "WORLDWorld – Align the new object to the world.",
            "VIEWView – Align the new object to the view.",
            "CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "location(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Location, Location for the newly added object",
            "rotation(mathutils.Eulerrotation of 3 items in [-inf, inf], (optional)) – Rotation, Rotation for the newly added object",
            "scale(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Scale, Scale for the newly added object"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.primitive_torus_add",
        "signature": "bpy.ops.mesh.primitive_torus_add(align='WORLD',location=(0.0,0.0,0.0),rotation=(0.0,0.0,0.0),major_segments=48,minor_segments=12,mode='MAJOR_MINOR',major_radius=1.0,minor_radius=0.25,abso_major_rad=1.25,abso_minor_rad=0.75,generate_uvs=True)#",
        "description": "Construct a torus mesh",
        "parameters": [
            "align='WORLD'",
            "location=(0.0,0.0,0.0)",
            "rotation=(0.0,0.0,0.0)",
            "major_segments=48",
            "minor_segments=12",
            "mode='MAJOR_MINOR'",
            "major_radius=1.0",
            "minor_radius=0.25",
            "abso_major_rad=1.25",
            "abso_minor_rad=0.75",
            "generate_uvs=True"
        ],
        "parameter_descriptions": [
            "align(enum in['WORLD','VIEW','CURSOR'],(optional)) –AlignWORLDWorld – Align the new object to the world.VIEWView – Align the new object to the view.CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "WORLDWorld – Align the new object to the world.",
            "VIEWView – Align the new object to the view.",
            "CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "location(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Location",
            "rotation(mathutils.Eulerrotation of 3 items in [-inf, inf], (optional)) – Rotation",
            "major_segments(int in[3,256],(optional)) – Major Segments, Number of segments for the main ring of the torus",
            "minor_segments(int in[3,256],(optional)) – Minor Segments, Number of segments for the minor ring of the torus",
            "mode(enum in['MAJOR_MINOR','EXT_INT'],(optional)) –Dimensions ModeMAJOR_MINORMajor/Minor – Use the major/minor radii for torus dimensions.EXT_INTExterior/Interior – Use the exterior/interior radii for torus dimensions.",
            "MAJOR_MINORMajor/Minor – Use the major/minor radii for torus dimensions.",
            "EXT_INTExterior/Interior – Use the exterior/interior radii for torus dimensions.",
            "major_radius(float in[0,10000],(optional)) – Major Radius, Radius from the origin to the center of the cross sections",
            "minor_radius(float in[0,10000],(optional)) – Minor Radius, Radius of the torus’ cross section",
            "abso_major_rad(float in[0,10000],(optional)) – Exterior Radius, Total Exterior Radius of the torus",
            "abso_minor_rad(float in[0,10000],(optional)) – Interior Radius, Total Interior Radius of the torus",
            "generate_uvs(boolean,(optional)) – Generate UVs, Generate a default UV map"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.primitive_uv_sphere_add",
        "signature": "bpy.ops.mesh.primitive_uv_sphere_add(segments=32,ring_count=16,radius=1.0,calc_uvs=True,enter_editmode=False,align='WORLD',location=(0.0,0.0,0.0),rotation=(0.0,0.0,0.0),scale=(0.0,0.0,0.0))#",
        "description": "Construct a spherical mesh with quad faces, except for triangle faces at the top and bottom",
        "parameters": [
            "segments=32",
            "ring_count=16",
            "radius=1.0",
            "calc_uvs=True",
            "enter_editmode=False",
            "align='WORLD'",
            "location=(0.0,0.0,0.0)",
            "rotation=(0.0,0.0,0.0)",
            "scale=(0.0,0.0,0.0)"
        ],
        "parameter_descriptions": [
            "segments(int in[3,100000],(optional)) – Segments",
            "ring_count(int in[3,100000],(optional)) – Rings",
            "radius(float in[0,inf],(optional)) – Radius",
            "calc_uvs(boolean,(optional)) – Generate UVs, Generate a default UV map",
            "enter_editmode(boolean,(optional)) – Enter Edit Mode, Enter edit mode when adding this object",
            "align(enum in['WORLD','VIEW','CURSOR'],(optional)) –Align, The alignment of the new objectWORLDWorld – Align the new object to the world.VIEWView – Align the new object to the view.CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "WORLDWorld – Align the new object to the world.",
            "VIEWView – Align the new object to the view.",
            "CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "location(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Location, Location for the newly added object",
            "rotation(mathutils.Eulerrotation of 3 items in [-inf, inf], (optional)) – Rotation, Rotation for the newly added object",
            "scale(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Scale, Scale for the newly added object"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.quads_convert_to_tris",
        "signature": "bpy.ops.mesh.quads_convert_to_tris(quad_method='BEAUTY',ngon_method='BEAUTY')#",
        "description": "Triangulate selected faces",
        "parameters": [
            "quad_method='BEAUTY'",
            "ngon_method='BEAUTY'"
        ],
        "parameter_descriptions": [
            "quad_method(enum inModifier Triangulate Quad Method Items, (optional)) – Quad Method, Method for splitting the quads into triangles",
            "ngon_method(enum inModifier Triangulate Ngon Method Items, (optional)) – N-gon Method, Method for splitting the n-gons into triangles"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.region_to_loop",
        "signature": "bpy.ops.mesh.region_to_loop()#",
        "description": "Select boundary edges around the selected faces",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.mesh.remove_doubles",
        "signature": "bpy.ops.mesh.remove_doubles(threshold=0.0001,use_unselected=False,use_sharp_edge_from_normals=False)#",
        "description": "Merge vertices based on their proximity",
        "parameters": [
            "threshold=0.0001",
            "use_unselected=False",
            "use_sharp_edge_from_normals=False"
        ],
        "parameter_descriptions": [
            "threshold(float in[1e-06,50],(optional)) – Merge Distance, Maximum distance between elements to merge",
            "use_unselected(boolean,(optional)) – Unselected, Merge selected to other unselected vertices",
            "use_sharp_edge_from_normals(boolean,(optional)) – Sharp Edges, Calculate sharp edges using custom normal data (when available)"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.reveal",
        "signature": "bpy.ops.mesh.reveal(select=True)#",
        "description": "Reveal all hidden vertices, edges and faces",
        "parameters": [
            "select=True"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.mesh.rip",
        "signature": "bpy.ops.mesh.rip(mirror=False,use_proportional_edit=False,proportional_edit_falloff='SMOOTH',proportional_size=1.0,use_proportional_connected=False,use_proportional_projected=False,release_confirm=False,use_accurate=False,use_fill=False)#",
        "description": "Disconnect vertex or edges from connected geometry",
        "parameters": [
            "mirror=False",
            "use_proportional_edit=False",
            "proportional_edit_falloff='SMOOTH'",
            "proportional_size=1.0",
            "use_proportional_connected=False",
            "use_proportional_projected=False",
            "release_confirm=False",
            "use_accurate=False",
            "use_fill=False"
        ],
        "parameter_descriptions": [
            "mirror(boolean,(optional)) – Mirror Editing",
            "use_proportional_edit(boolean,(optional)) – Proportional Editing",
            "proportional_edit_falloff(enum inProportional Falloff Items, (optional)) – Proportional Falloff, Falloff type for proportional editing mode",
            "proportional_size(float in[1e-06,inf],(optional)) – Proportional Size",
            "use_proportional_connected(boolean,(optional)) – Connected",
            "use_proportional_projected(boolean,(optional)) – Projected (2D)",
            "release_confirm(boolean,(optional)) – Confirm on Release, Always confirm operation when releasing button",
            "use_accurate(boolean,(optional)) – Accurate, Use accurate transformation",
            "use_fill(boolean,(optional)) – Fill, Fill the ripped region"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.rip_edge",
        "signature": "bpy.ops.mesh.rip_edge(mirror=False,use_proportional_edit=False,proportional_edit_falloff='SMOOTH',proportional_size=1.0,use_proportional_connected=False,use_proportional_projected=False,release_confirm=False,use_accurate=False)#",
        "description": "Extend vertices along the edge closest to the cursor",
        "parameters": [
            "mirror=False",
            "use_proportional_edit=False",
            "proportional_edit_falloff='SMOOTH'",
            "proportional_size=1.0",
            "use_proportional_connected=False",
            "use_proportional_projected=False",
            "release_confirm=False",
            "use_accurate=False"
        ],
        "parameter_descriptions": [
            "mirror(boolean,(optional)) – Mirror Editing",
            "use_proportional_edit(boolean,(optional)) – Proportional Editing",
            "proportional_edit_falloff(enum inProportional Falloff Items, (optional)) – Proportional Falloff, Falloff type for proportional editing mode",
            "proportional_size(float in[1e-06,inf],(optional)) – Proportional Size",
            "use_proportional_connected(boolean,(optional)) – Connected",
            "use_proportional_projected(boolean,(optional)) – Projected (2D)",
            "release_confirm(boolean,(optional)) – Confirm on Release, Always confirm operation when releasing button",
            "use_accurate(boolean,(optional)) – Accurate, Use accurate transformation"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.rip_edge_move",
        "signature": "bpy.ops.mesh.rip_edge_move(MESH_OT_rip_edge=None,TRANSFORM_OT_translate=None)#",
        "description": "Extend vertices and move the result",
        "parameters": [
            "MESH_OT_rip_edge=None",
            "TRANSFORM_OT_translate=None"
        ],
        "parameter_descriptions": [
            "MESH_OT_rip_edge(MESH_OT_rip_edge, (optional)) – Extend Vertices, Extend vertices along the edge closest to the cursor",
            "TRANSFORM_OT_translate(TRANSFORM_OT_translate, (optional)) – Move, Move selected items"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.rip_move",
        "signature": "bpy.ops.mesh.rip_move(MESH_OT_rip=None,TRANSFORM_OT_translate=None)#",
        "description": "Rip polygons and move the result",
        "parameters": [
            "MESH_OT_rip=None",
            "TRANSFORM_OT_translate=None"
        ],
        "parameter_descriptions": [
            "MESH_OT_rip(MESH_OT_rip, (optional)) – Rip, Disconnect vertex or edges from connected geometry",
            "TRANSFORM_OT_translate(TRANSFORM_OT_translate, (optional)) – Move, Move selected items"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.screw",
        "signature": "bpy.ops.mesh.screw(steps=9,turns=1,center=(0.0,0.0,0.0),axis=(0.0,0.0,0.0))#",
        "description": "Extrude selected vertices in screw-shaped rotation around the cursor in indicated viewport",
        "parameters": [
            "steps=9",
            "turns=1",
            "center=(0.0,0.0,0.0)",
            "axis=(0.0,0.0,0.0)"
        ],
        "parameter_descriptions": [
            "steps(int in[1,100000],(optional)) – Steps, Steps",
            "turns(int in[1,100000],(optional)) – Turns, Turns",
            "center(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Center, Center in global view space",
            "axis(mathutils.Vectorof 3 items in [-1, 1], (optional)) – Axis, Axis in global view space"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.select_all",
        "signature": "bpy.ops.mesh.select_all(action='TOGGLE')#",
        "description": "(De)select all vertices, edges or faces",
        "parameters": [
            "action='TOGGLE'"
        ],
        "parameter_descriptions": [
            "TOGGLEToggle – Toggle selection for all elements.",
            "SELECTSelect – Select all elements.",
            "DESELECTDeselect – Deselect all elements.",
            "INVERTInvert – Invert selection of all elements."
        ]
    },
    {
        "function_id": "bpy.ops.mesh.select_axis",
        "signature": "bpy.ops.mesh.select_axis(orientation='LOCAL',sign='POS',axis='X',threshold=0.0001)#",
        "description": "Select all data in the mesh on a single axis",
        "parameters": [
            "orientation='LOCAL'",
            "sign='POS'",
            "axis='X'",
            "threshold=0.0001"
        ],
        "parameter_descriptions": [
            "orientation(enum inTransform Orientation Items, (optional)) – Axis Mode, Axis orientation",
            "sign(enum in['POS','NEG','ALIGN'],(optional)) – Axis Sign, Side to select",
            "axis(enum inAxis Xyz Items, (optional)) – Axis, Select the axis to compare each vertex on",
            "threshold(float in[1e-06,50],(optional)) – Threshold"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.select_by_attribute",
        "signature": "bpy.ops.mesh.select_by_attribute()#",
        "description": "Select elements based on the active boolean attribute",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.mesh.select_face_by_sides",
        "signature": "bpy.ops.mesh.select_face_by_sides(number=4,type='EQUAL',extend=True)#",
        "description": "Select vertices or faces by the number of face sides",
        "parameters": [
            "number=4",
            "type='EQUAL'",
            "extend=True"
        ],
        "parameter_descriptions": [
            "number(int in[3,inf],(optional)) – Number of Vertices",
            "type(enum in['LESS','EQUAL','GREATER','NOTEQUAL'],(optional)) – Type, Type of comparison to make",
            "extend(boolean,(optional)) – Extend, Extend the selection"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.select_interior_faces",
        "signature": "bpy.ops.mesh.select_interior_faces()#",
        "description": "Select faces where all edges have more than 2 face users",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.mesh.select_less",
        "signature": "bpy.ops.mesh.select_less(use_face_step=True)#",
        "description": "Deselect vertices, edges or faces at the boundary of each selection region",
        "parameters": [
            "use_face_step=True"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.mesh.select_linked",
        "signature": "bpy.ops.mesh.select_linked(delimit={'SEAM'})#",
        "description": "Select all vertices connected to the current selection",
        "parameters": [
            "delimit={'SEAM'}"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.mesh.select_linked_pick",
        "signature": "bpy.ops.mesh.select_linked_pick(deselect=False,delimit={'SEAM'},object_index=-1,index=-1)#",
        "description": "(De)select all vertices linked to the edge under the mouse cursor",
        "parameters": [
            "deselect=False",
            "delimit={'SEAM'}",
            "object_index=-1",
            "index=-1"
        ],
        "parameter_descriptions": [
            "deselect(boolean,(optional)) – Deselect",
            "delimit(enum set inMesh Delimit Mode Items, (optional)) – Delimit, Delimit selected region"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.select_loose",
        "signature": "bpy.ops.mesh.select_loose(extend=False)#",
        "description": "Select loose geometry based on the selection mode",
        "parameters": [
            "extend=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.mesh.select_mirror",
        "signature": "bpy.ops.mesh.select_mirror(axis={'X'},extend=False)#",
        "description": "Select mesh items at mirrored locations",
        "parameters": [
            "axis={'X'}",
            "extend=False"
        ],
        "parameter_descriptions": [
            "axis(enum set inAxis Flag Xyz Items, (optional)) – Axis",
            "extend(boolean,(optional)) – Extend, Extend the existing selection"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.select_mode",
        "signature": "bpy.ops.mesh.select_mode(use_extend=False,use_expand=False,type='VERT',action='TOGGLE')#",
        "description": "Change selection mode",
        "parameters": [
            "use_extend=False",
            "use_expand=False",
            "type='VERT'",
            "action='TOGGLE'"
        ],
        "parameter_descriptions": [
            "use_extend(boolean,(optional)) – Extend",
            "use_expand(boolean,(optional)) – Expand",
            "type(enum inMesh Select Mode Items, (optional)) – Type",
            "action(enum in['DISABLE','ENABLE','TOGGLE'],(optional)) –Action, Selection action to executeDISABLEDisable – Disable selected markers.ENABLEEnable – Enable selected markers.TOGGLEToggle – Toggle disabled flag for selected markers.",
            "DISABLEDisable – Disable selected markers.",
            "ENABLEEnable – Enable selected markers.",
            "TOGGLEToggle – Toggle disabled flag for selected markers."
        ]
    },
    {
        "function_id": "bpy.ops.mesh.select_more",
        "signature": "bpy.ops.mesh.select_more(use_face_step=True)#",
        "description": "Select more vertices, edges or faces connected to initial selection",
        "parameters": [
            "use_face_step=True"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.mesh.select_next_item",
        "signature": "bpy.ops.mesh.select_next_item()#",
        "description": "Select the next element (using selection order)",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.mesh.select_non_manifold",
        "signature": "bpy.ops.mesh.select_non_manifold(extend=True,use_wire=True,use_boundary=True,use_multi_face=True,use_non_contiguous=True,use_verts=True)#",
        "description": "Select all non-manifold vertices or edges",
        "parameters": [
            "extend=True",
            "use_wire=True",
            "use_boundary=True",
            "use_multi_face=True",
            "use_non_contiguous=True",
            "use_verts=True"
        ],
        "parameter_descriptions": [
            "extend(boolean,(optional)) – Extend, Extend the selection",
            "use_wire(boolean,(optional)) – Wire, Wire edges",
            "use_boundary(boolean,(optional)) – Boundaries, Boundary edges",
            "use_multi_face(boolean,(optional)) – Multiple Faces, Edges shared by more than two faces",
            "use_non_contiguous(boolean,(optional)) – Non Contiguous, Edges between faces pointing in alternate directions",
            "use_verts(boolean,(optional)) – Vertices, Vertices connecting multiple face regions"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.select_nth",
        "signature": "bpy.ops.mesh.select_nth(skip=1,nth=1,offset=0)#",
        "description": "Deselect every Nth element starting from the active vertex, edge or face",
        "parameters": [
            "skip=1",
            "nth=1",
            "offset=0"
        ],
        "parameter_descriptions": [
            "skip(int in[1,inf],(optional)) – Deselected, Number of deselected elements in the repetitive sequence",
            "nth(int in[1,inf],(optional)) – Selected, Number of selected elements in the repetitive sequence",
            "offset(int in[-inf,inf],(optional)) – Offset, Offset from the starting point"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.select_prev_item",
        "signature": "bpy.ops.mesh.select_prev_item()#",
        "description": "Select the previous element (using selection order)",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.mesh.select_random",
        "signature": "bpy.ops.mesh.select_random(ratio=0.5,seed=0,action='SELECT')#",
        "description": "Randomly select vertices",
        "parameters": [
            "ratio=0.5",
            "seed=0",
            "action='SELECT'"
        ],
        "parameter_descriptions": [
            "ratio(float in[0,1],(optional)) – Ratio, Portion of items to select randomly",
            "seed(int in[0,inf],(optional)) – Random Seed, Seed for the random number generator",
            "action(enum in['SELECT','DESELECT'],(optional)) –Action, Selection action to executeSELECTSelect – Select all elements.DESELECTDeselect – Deselect all elements.",
            "SELECTSelect – Select all elements.",
            "DESELECTDeselect – Deselect all elements."
        ]
    },
    {
        "function_id": "bpy.ops.mesh.select_similar",
        "signature": "bpy.ops.mesh.select_similar(type='VERT_NORMAL',compare='EQUAL',threshold=0.0)#",
        "description": "Select similar vertices, edges or faces by property types",
        "parameters": [
            "type='VERT_NORMAL'",
            "compare='EQUAL'",
            "threshold=0.0"
        ],
        "parameter_descriptions": [
            "type(enum in['VERT_NORMAL','VERT_FACES','VERT_GROUPS','VERT_EDGES','VERT_CREASE','EDGE_LENGTH','EDGE_DIR','EDGE_FACES','EDGE_FACE_ANGLE','EDGE_CREASE','EDGE_BEVEL','EDGE_SEAM','EDGE_SHARP','EDGE_FREESTYLE','FACE_MATERIAL','FACE_AREA','FACE_SIDES','FACE_PERIMETER','FACE_NORMAL','FACE_COPLANAR','FACE_SMOOTH','FACE_FREESTYLE'],(optional)) – Type",
            "compare(enum in['EQUAL','GREATER','LESS'],(optional)) – Compare",
            "threshold(float in[0,1],(optional)) – Threshold"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.select_similar_region",
        "signature": "bpy.ops.mesh.select_similar_region()#",
        "description": "Select similar face regions to the current selection",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.mesh.select_ungrouped",
        "signature": "bpy.ops.mesh.select_ungrouped(extend=False)#",
        "description": "Select vertices without a group",
        "parameters": [
            "extend=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.mesh.separate",
        "signature": "bpy.ops.mesh.separate(type='SELECTED')#",
        "description": "Separate selected geometry into a new mesh",
        "parameters": [
            "type='SELECTED'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.mesh.set_normals_from_faces",
        "signature": "bpy.ops.mesh.set_normals_from_faces(keep_sharp=False)#",
        "description": "Set the custom normals from the selected faces ones",
        "parameters": [
            "keep_sharp=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.mesh.set_sharpness_by_angle",
        "signature": "bpy.ops.mesh.set_sharpness_by_angle(angle=0.523599,extend=False)#",
        "description": "Set edge sharpness based on the angle between neighboring faces",
        "parameters": [
            "angle=0.523599",
            "extend=False"
        ],
        "parameter_descriptions": [
            "angle(float in[0.000174533,3.14159],(optional)) – Angle",
            "extend(boolean,(optional)) – Extend, Add new sharp edges without clearing existing sharp edges"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.shape_propagate_to_all",
        "signature": "bpy.ops.mesh.shape_propagate_to_all()#",
        "description": "Apply selected vertex locations to all other shape keys",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.mesh.shortest_path_pick",
        "signature": "bpy.ops.mesh.shortest_path_pick(edge_mode='SELECT',use_face_step=False,use_topology_distance=False,use_fill=False,skip=0,nth=1,offset=0,index=-1)#",
        "description": "Select shortest path between two selections",
        "parameters": [
            "edge_mode='SELECT'",
            "use_face_step=False",
            "use_topology_distance=False",
            "use_fill=False",
            "skip=0",
            "nth=1",
            "offset=0",
            "index=-1"
        ],
        "parameter_descriptions": [
            "edge_mode(enum in['SELECT','SEAM','SHARP','CREASE','BEVEL','FREESTYLE'],(optional)) – Edge Tag, The edge flag to tag when selecting the shortest path",
            "use_face_step(boolean,(optional)) – Face Stepping, Traverse connected faces (includes diagonals and edge-rings)",
            "use_topology_distance(boolean,(optional)) – Topology Distance, Find the minimum number of steps, ignoring spatial distance",
            "use_fill(boolean,(optional)) – Fill Region, Select all paths between the source/destination elements",
            "skip(int in[0,inf],(optional)) – Deselected, Number of deselected elements in the repetitive sequence",
            "nth(int in[1,inf],(optional)) – Selected, Number of selected elements in the repetitive sequence",
            "offset(int in[-inf,inf],(optional)) – Offset, Offset from the starting point"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.shortest_path_select",
        "signature": "bpy.ops.mesh.shortest_path_select(edge_mode='SELECT',use_face_step=False,use_topology_distance=False,use_fill=False,skip=0,nth=1,offset=0)#",
        "description": "Selected shortest path between two vertices/edges/faces",
        "parameters": [
            "edge_mode='SELECT'",
            "use_face_step=False",
            "use_topology_distance=False",
            "use_fill=False",
            "skip=0",
            "nth=1",
            "offset=0"
        ],
        "parameter_descriptions": [
            "edge_mode(enum in['SELECT','SEAM','SHARP','CREASE','BEVEL','FREESTYLE'],(optional)) – Edge Tag, The edge flag to tag when selecting the shortest path",
            "use_face_step(boolean,(optional)) – Face Stepping, Traverse connected faces (includes diagonals and edge-rings)",
            "use_topology_distance(boolean,(optional)) – Topology Distance, Find the minimum number of steps, ignoring spatial distance",
            "use_fill(boolean,(optional)) – Fill Region, Select all paths between the source/destination elements",
            "skip(int in[0,inf],(optional)) – Deselected, Number of deselected elements in the repetitive sequence",
            "nth(int in[1,inf],(optional)) – Selected, Number of selected elements in the repetitive sequence",
            "offset(int in[-inf,inf],(optional)) – Offset, Offset from the starting point"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.smooth_normals",
        "signature": "bpy.ops.mesh.smooth_normals(factor=0.5)#",
        "description": "Smooth custom normals based on adjacent vertex normals",
        "parameters": [
            "factor=0.5"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.mesh.solidify",
        "signature": "bpy.ops.mesh.solidify(thickness=0.01)#",
        "description": "Create a solid skin by extruding, compensating for sharp angles",
        "parameters": [
            "thickness=0.01"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.mesh.sort_elements",
        "signature": "bpy.ops.mesh.sort_elements(type='VIEW_ZAXIS',elements={'VERT'},reverse=False,seed=0)#",
        "description": "The order of selected vertices/edges/faces is modified, based on a given method",
        "parameters": [
            "type='VIEW_ZAXIS'",
            "elements={'VERT'}",
            "reverse=False",
            "seed=0"
        ],
        "parameter_descriptions": [
            "type(enum in['VIEW_ZAXIS','VIEW_XAXIS','CURSOR_DISTANCE','MATERIAL','SELECTED','RANDOMIZE','REVERSE'],(optional)) –Type, Type of reordering operation to applyVIEW_ZAXISView Z Axis – Sort selected elements from farthest to nearest one in current view.VIEW_XAXISView X Axis – Sort selected elements from left to right one in current view.CURSOR_DISTANCECursor Distance – Sort selected elements from nearest to farthest from 3D cursor.MATERIALMaterial – Sort selected faces from smallest to greatest material index.SELECTEDSelected – Move all selected elements in first places, preserving their relative order.\nWarning: This will affect unselected elements’ indices as well.RANDOMIZERandomize – Randomize order of selected elements.REVERSEReverse – Reverse current order of selected elements.",
            "VIEW_ZAXISView Z Axis – Sort selected elements from farthest to nearest one in current view.",
            "VIEW_XAXISView X Axis – Sort selected elements from left to right one in current view.",
            "CURSOR_DISTANCECursor Distance – Sort selected elements from nearest to farthest from 3D cursor.",
            "MATERIALMaterial – Sort selected faces from smallest to greatest material index.",
            "SELECTEDSelected – Move all selected elements in first places, preserving their relative order.\nWarning: This will affect unselected elements’ indices as well.",
            "RANDOMIZERandomize – Randomize order of selected elements.",
            "REVERSEReverse – Reverse current order of selected elements.",
            "elements(enum set in {'VERT','EDGE','FACE'},(optional)) – Elements, Which elements to affect (vertices, edges and/or faces)",
            "reverse(boolean,(optional)) – Reverse, Reverse the sorting effect",
            "seed(int in[0,inf],(optional)) – Seed, Seed for random-based operations"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.spin",
        "signature": "bpy.ops.mesh.spin(steps=12,dupli=False,angle=1.5708,use_auto_merge=True,use_normal_flip=False,center=(0.0,0.0,0.0),axis=(0.0,0.0,0.0))#",
        "description": "Extrude selected vertices in a circle around the cursor in indicated viewport",
        "parameters": [
            "steps=12",
            "dupli=False",
            "angle=1.5708",
            "use_auto_merge=True",
            "use_normal_flip=False",
            "center=(0.0,0.0,0.0)",
            "axis=(0.0,0.0,0.0)"
        ],
        "parameter_descriptions": [
            "steps(int in[0,1000000],(optional)) – Steps, Steps",
            "dupli(boolean,(optional)) – Use Duplicates",
            "angle(float in[-inf,inf],(optional)) – Angle, Rotation for each step",
            "use_auto_merge(boolean,(optional)) – Auto Merge, Merge first/last when the angle is a full revolution",
            "use_normal_flip(boolean,(optional)) – Flip Normals",
            "center(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Center, Center in global view space",
            "axis(mathutils.Vectorof 3 items in [-1, 1], (optional)) – Axis, Axis in global view space"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.split",
        "signature": "bpy.ops.mesh.split()#",
        "description": "Split off selected geometry from connected unselected geometry",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.mesh.split_normals",
        "signature": "bpy.ops.mesh.split_normals()#",
        "description": "Split custom normals of selected vertices",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.mesh.subdivide",
        "signature": "bpy.ops.mesh.subdivide(number_cuts=1,smoothness=0.0,ngon=True,quadcorner='STRAIGHT_CUT',fractal=0.0,fractal_along_normal=0.0,seed=0)#",
        "description": "Subdivide selected edges",
        "parameters": [
            "number_cuts=1",
            "smoothness=0.0",
            "ngon=True",
            "quadcorner='STRAIGHT_CUT'",
            "fractal=0.0",
            "fractal_along_normal=0.0",
            "seed=0"
        ],
        "parameter_descriptions": [
            "number_cuts(int in[1,100],(optional)) – Number of Cuts",
            "smoothness(float in[0,1000],(optional)) – Smoothness, Smoothness factor",
            "ngon(boolean,(optional)) – Create N-Gons, When disabled, newly created faces are limited to 3 and 4 sided faces",
            "quadcorner(enum in['INNERVERT','PATH','STRAIGHT_CUT','FAN'],(optional)) – Quad Corner Type, How to subdivide quad corners (anything other than Straight Cut will prevent n-gons)",
            "fractal(float in[0,1e+06],(optional)) – Fractal, Fractal randomness factor",
            "fractal_along_normal(float in[0,1],(optional)) – Along Normal, Apply fractal displacement along normal only",
            "seed(int in[0,inf],(optional)) – Random Seed, Seed for the random number generator"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.subdivide_edgering",
        "signature": "bpy.ops.mesh.subdivide_edgering(number_cuts=10,interpolation='PATH',smoothness=1.0,profile_shape_factor=0.0,profile_shape='SMOOTH')#",
        "description": "Subdivide perpendicular edges to the selected edge-ring",
        "parameters": [
            "number_cuts=10",
            "interpolation='PATH'",
            "smoothness=1.0",
            "profile_shape_factor=0.0",
            "profile_shape='SMOOTH'"
        ],
        "parameter_descriptions": [
            "number_cuts(int in[0,1000],(optional)) – Number of Cuts",
            "interpolation(enum in['LINEAR','PATH','SURFACE'],(optional)) – Interpolation, Interpolation method",
            "smoothness(float in[0,1000],(optional)) – Smoothness, Smoothness factor",
            "profile_shape_factor(float in[-1000,1000],(optional)) – Profile Factor, How much intermediary new edges are shrunk/expanded",
            "profile_shape(enum inProportional Falloff Curve Only Items, (optional)) – Profile Shape, Shape of the profile"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.symmetrize",
        "signature": "bpy.ops.mesh.symmetrize(direction='NEGATIVE_X',threshold=0.0001)#",
        "description": "Enforce symmetry (both form and topological) across an axis",
        "parameters": [
            "direction='NEGATIVE_X'",
            "threshold=0.0001"
        ],
        "parameter_descriptions": [
            "direction(enum inSymmetrize Direction Items, (optional)) – Direction, Which sides to copy from and to",
            "threshold(float in[0,10],(optional)) – Threshold, Limit for snap middle vertices to the axis center"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.symmetry_snap",
        "signature": "bpy.ops.mesh.symmetry_snap(direction='NEGATIVE_X',threshold=0.05,factor=0.5,use_center=True)#",
        "description": "Snap vertex pairs to their mirrored locations",
        "parameters": [
            "direction='NEGATIVE_X'",
            "threshold=0.05",
            "factor=0.5",
            "use_center=True"
        ],
        "parameter_descriptions": [
            "direction(enum inSymmetrize Direction Items, (optional)) – Direction, Which sides to copy from and to",
            "threshold(float in[0,10],(optional)) – Threshold, Distance within which matching vertices are searched",
            "factor(float in[0,1],(optional)) – Factor, Mix factor of the locations of the vertices",
            "use_center(boolean,(optional)) – Center, Snap middle vertices to the axis center"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.tris_convert_to_quads",
        "signature": "bpy.ops.mesh.tris_convert_to_quads(face_threshold=0.698132,shape_threshold=0.698132,uvs=False,vcols=False,seam=False,sharp=False,materials=False)#",
        "description": "Join triangles into quads",
        "parameters": [
            "face_threshold=0.698132",
            "shape_threshold=0.698132",
            "uvs=False",
            "vcols=False",
            "seam=False",
            "sharp=False",
            "materials=False"
        ],
        "parameter_descriptions": [
            "face_threshold(float in[0,3.14159],(optional)) – Max Face Angle, Face angle limit",
            "shape_threshold(float in[0,3.14159],(optional)) – Max Shape Angle, Shape angle limit",
            "uvs(boolean,(optional)) – Compare UVs",
            "vcols(boolean,(optional)) – Compare Color Attributes",
            "seam(boolean,(optional)) – Compare Seam",
            "sharp(boolean,(optional)) – Compare Sharp",
            "materials(boolean,(optional)) – Compare Materials"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.unsubdivide",
        "signature": "bpy.ops.mesh.unsubdivide(iterations=2)#",
        "description": "Un-subdivide selected edges and faces",
        "parameters": [
            "iterations=2"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.mesh.uv_texture_add",
        "signature": "bpy.ops.mesh.uv_texture_add()#",
        "description": "Add UV map",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.mesh.uv_texture_remove",
        "signature": "bpy.ops.mesh.uv_texture_remove()#",
        "description": "Remove UV map",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.mesh.uvs_reverse",
        "signature": "bpy.ops.mesh.uvs_reverse()#",
        "description": "Flip direction of UV coordinates inside faces",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.mesh.uvs_rotate",
        "signature": "bpy.ops.mesh.uvs_rotate(use_ccw=False)#",
        "description": "Rotate UV coordinates inside faces",
        "parameters": [
            "use_ccw=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.mesh.vert_connect",
        "signature": "bpy.ops.mesh.vert_connect()#",
        "description": "Connect selected vertices of faces, splitting the face",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.mesh.vert_connect_concave",
        "signature": "bpy.ops.mesh.vert_connect_concave()#",
        "description": "Make all faces convex",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.mesh.vert_connect_nonplanar",
        "signature": "bpy.ops.mesh.vert_connect_nonplanar(angle_limit=0.0872665)#",
        "description": "Split non-planar faces that exceed the angle threshold",
        "parameters": [
            "angle_limit=0.0872665"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.mesh.vert_connect_path",
        "signature": "bpy.ops.mesh.vert_connect_path()#",
        "description": "Connect vertices by their selection order, creating edges, splitting faces",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.mesh.vertices_smooth",
        "signature": "bpy.ops.mesh.vertices_smooth(factor=0.0,repeat=1,xaxis=True,yaxis=True,zaxis=True,wait_for_input=True)#",
        "description": "Flatten angles of selected vertices",
        "parameters": [
            "factor=0.0",
            "repeat=1",
            "xaxis=True",
            "yaxis=True",
            "zaxis=True",
            "wait_for_input=True"
        ],
        "parameter_descriptions": [
            "factor(float in[-10,10],(optional)) – Smoothing, Smoothing factor",
            "repeat(int in[1,1000],(optional)) – Repeat, Number of times to smooth the mesh",
            "xaxis(boolean,(optional)) – X-Axis, Smooth along the X axis",
            "yaxis(boolean,(optional)) – Y-Axis, Smooth along the Y axis",
            "zaxis(boolean,(optional)) – Z-Axis, Smooth along the Z axis",
            "wait_for_input(boolean,(optional)) – Wait for Input"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.vertices_smooth_laplacian",
        "signature": "bpy.ops.mesh.vertices_smooth_laplacian(repeat=1,lambda_factor=1.0,lambda_border=5e-05,use_x=True,use_y=True,use_z=True,preserve_volume=True)#",
        "description": "Laplacian smooth of selected vertices",
        "parameters": [
            "repeat=1",
            "lambda_factor=1.0",
            "lambda_border=5e-05",
            "use_x=True",
            "use_y=True",
            "use_z=True",
            "preserve_volume=True"
        ],
        "parameter_descriptions": [
            "repeat(int in[1,1000],(optional)) – Number of iterations to smooth the mesh",
            "lambda_factor(float in[1e-07,1000],(optional)) – Lambda factor",
            "lambda_border(float in[1e-07,1000],(optional)) – Lambda factor in border",
            "use_x(boolean,(optional)) – Smooth X Axis, Smooth object along X axis",
            "use_y(boolean,(optional)) – Smooth Y Axis, Smooth object along Y axis",
            "use_z(boolean,(optional)) – Smooth Z Axis, Smooth object along Z axis",
            "preserve_volume(boolean,(optional)) – Preserve Volume, Apply volume preservation after smooth"
        ]
    },
    {
        "function_id": "bpy.ops.mesh.wireframe",
        "signature": "bpy.ops.mesh.wireframe(use_boundary=True,use_even_offset=True,use_relative_offset=False,use_replace=True,thickness=0.01,offset=0.01,use_crease=False,crease_weight=0.01)#",
        "description": "Create a solid wireframe from faces",
        "parameters": [
            "use_boundary=True",
            "use_even_offset=True",
            "use_relative_offset=False",
            "use_replace=True",
            "thickness=0.01",
            "offset=0.01",
            "use_crease=False",
            "crease_weight=0.01"
        ],
        "parameter_descriptions": [
            "use_boundary(boolean,(optional)) – Boundary, Inset face boundaries",
            "use_even_offset(boolean,(optional)) – Offset Even, Scale the offset to give more even thickness",
            "use_relative_offset(boolean,(optional)) – Offset Relative, Scale the offset by surrounding geometry",
            "use_replace(boolean,(optional)) – Replace, Remove original faces",
            "thickness(float in[0,10000],(optional)) – Thickness",
            "offset(float in[0,10000],(optional)) – Offset",
            "use_crease(boolean,(optional)) – Crease, Crease hub edges for an improved subdivision surface",
            "crease_weight(float in[0,1000],(optional)) – Crease Weight"
        ]
    },
    {
        "function_id": "bpy.ops.asset.assign_action",
        "signature": "bpy.ops.asset.assign_action()#",
        "description": "Set this pose Action as active Action on the active Object",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.asset.bundle_install",
        "signature": "bpy.ops.asset.bundle_install(asset_library_reference='',filepath='',hide_props_region=True,check_existing=True,filter_blender=True,filter_backup=False,filter_image=False,filter_movie=False,filter_python=False,filter_font=False,filter_sound=False,filter_text=False,filter_archive=False,filter_btx=False,filter_collada=False,filter_alembic=False,filter_usd=False,filter_obj=False,filter_volume=False,filter_folder=True,filter_blenlib=False,filemode=8,display_type='DEFAULT',sort_method='')#",
        "description": "Copy the current .blend file into an Asset Library. Only works on standalone .blend files (i.e. when no other files are referenced)",
        "parameters": [
            "asset_library_reference=''",
            "filepath=''",
            "hide_props_region=True",
            "check_existing=True",
            "filter_blender=True",
            "filter_backup=False",
            "filter_image=False",
            "filter_movie=False",
            "filter_python=False",
            "filter_font=False",
            "filter_sound=False",
            "filter_text=False",
            "filter_archive=False",
            "filter_btx=False",
            "filter_collada=False",
            "filter_alembic=False",
            "filter_usd=False",
            "filter_obj=False",
            "filter_volume=False",
            "filter_folder=True",
            "filter_blenlib=False",
            "filemode=8",
            "display_type='DEFAULT'",
            "sort_method=''"
        ],
        "parameter_descriptions": [
            "asset_library_reference(enum in[],(optional)) – asset_library_reference",
            "filepath(string,(optional,never None)) – File Path, Path to file",
            "hide_props_region(boolean,(optional)) – Hide Operator Properties, Collapse the region displaying the operator settings",
            "check_existing(boolean,(optional)) – Check Existing, Check and warn on overwriting existing files",
            "filter_blender(boolean,(optional)) – Filter .blend files",
            "filter_backup(boolean,(optional)) – Filter .blend files",
            "filter_image(boolean,(optional)) – Filter image files",
            "filter_movie(boolean,(optional)) – Filter movie files",
            "filter_python(boolean,(optional)) – Filter Python files",
            "filter_font(boolean,(optional)) – Filter font files",
            "filter_sound(boolean,(optional)) – Filter sound files",
            "filter_text(boolean,(optional)) – Filter text files",
            "filter_archive(boolean,(optional)) – Filter archive files",
            "filter_btx(boolean,(optional)) – Filter btx files",
            "filter_collada(boolean,(optional)) – Filter COLLADA files",
            "filter_alembic(boolean,(optional)) – Filter Alembic files",
            "filter_usd(boolean,(optional)) – Filter USD files",
            "filter_obj(boolean,(optional)) – Filter OBJ files",
            "filter_volume(boolean,(optional)) – Filter OpenVDB volume files",
            "filter_folder(boolean,(optional)) – Filter folders",
            "filter_blenlib(boolean,(optional)) – Filter Blender IDs",
            "filemode(int in[1,9],(optional)) – File Browser Mode, The setting for the file browser mode to load a .blend file, a library or a special file",
            "display_type(enum in['DEFAULT','LIST_VERTICAL','LIST_HORIZONTAL','THUMBNAIL'],(optional)) –Display TypeDEFAULTDefault – Automatically determine display type for files.LIST_VERTICALShort List – Display files as short list.LIST_HORIZONTALLong List – Display files as a detailed list.THUMBNAILThumbnails – Display files as thumbnails.",
            "DEFAULTDefault – Automatically determine display type for files.",
            "LIST_VERTICALShort List – Display files as short list.",
            "LIST_HORIZONTALLong List – Display files as a detailed list.",
            "THUMBNAILThumbnails – Display files as thumbnails.",
            "sort_method(enum in[],(optional)) – File sorting mode"
        ]
    },
    {
        "function_id": "bpy.ops.asset.catalog_delete",
        "signature": "bpy.ops.asset.catalog_delete(catalog_id='')#",
        "description": "Remove an asset catalog from the asset library (contained assets will not be affected and show up as unassigned)",
        "parameters": [
            "catalog_id=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.asset.catalog_new",
        "signature": "bpy.ops.asset.catalog_new(parent_path='')#",
        "description": "Create a new catalog to put assets in",
        "parameters": [
            "parent_path=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.asset.catalog_redo",
        "signature": "bpy.ops.asset.catalog_redo()#",
        "description": "Redo the last undone edit to the asset catalogs",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.asset.catalog_undo",
        "signature": "bpy.ops.asset.catalog_undo()#",
        "description": "Undo the last edit to the asset catalogs",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.asset.catalog_undo_push",
        "signature": "bpy.ops.asset.catalog_undo_push()#",
        "description": "Store the current state of the asset catalogs in the undo buffer",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.asset.catalogs_save",
        "signature": "bpy.ops.asset.catalogs_save()#",
        "description": "Make any edits to any catalogs permanent by writing the current set up to the asset library",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.asset.clear",
        "signature": "bpy.ops.asset.clear(set_fake_user=False)#",
        "description": "Delete all asset metadata and turn the selected asset data-blocks back into normal data-blocks",
        "parameters": [
            "set_fake_user=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.asset.clear_single",
        "signature": "bpy.ops.asset.clear_single(set_fake_user=False)#",
        "description": "Delete all asset metadata and turn the asset data-block back into a normal data-block",
        "parameters": [
            "set_fake_user=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.asset.library_refresh",
        "signature": "bpy.ops.asset.library_refresh()#",
        "description": "Reread assets and asset catalogs from the asset library on disk",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.asset.mark",
        "signature": "bpy.ops.asset.mark()#",
        "description": "Enable easier reuse of selected data-blocks through the Asset Browser, with the help of customizable metadata (like previews, descriptions and tags)",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.asset.mark_single",
        "signature": "bpy.ops.asset.mark_single()#",
        "description": "Enable easier reuse of a data-block through the Asset Browser, with the help of customizable metadata (like previews, descriptions and tags)",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.asset.open_containing_blend_file",
        "signature": "bpy.ops.asset.open_containing_blend_file()#",
        "description": "Open the blend file that contains the active asset",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.asset.tag_add",
        "signature": "bpy.ops.asset.tag_add()#",
        "description": "Add a new keyword tag to the active asset",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.asset.tag_remove",
        "signature": "bpy.ops.asset.tag_remove()#",
        "description": "Remove an existing keyword tag from the active asset",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.sequencer.change_effect_input",
        "signature": "bpy.ops.sequencer.change_effect_input(swap='A_B')#",
        "description": "Undocumented, considercontributing.",
        "parameters": [
            "swap='A_B'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.sequencer.change_effect_type",
        "signature": "bpy.ops.sequencer.change_effect_type(type='CROSS')#",
        "description": "Undocumented, considercontributing.",
        "parameters": [
            "type='CROSS'"
        ],
        "parameter_descriptions": [
            "CROSSCrossfade – Crossfade effect strip type.",
            "ADDAdd – Add effect strip type.",
            "SUBTRACTSubtract – Subtract effect strip type.",
            "ALPHA_OVERAlpha Over – Alpha Over effect strip type.",
            "ALPHA_UNDERAlpha Under – Alpha Under effect strip type.",
            "GAMMA_CROSSGamma Cross – Gamma Cross effect strip type.",
            "MULTIPLYMultiply – Multiply effect strip type.",
            "OVER_DROPAlpha Over Drop – Alpha Over Drop effect strip type.",
            "WIPEWipe – Wipe effect strip type.",
            "GLOWGlow – Glow effect strip type.",
            "TRANSFORMTransform – Transform effect strip type.",
            "COLORColor – Color effect strip type.",
            "SPEEDSpeed – Color effect strip type.",
            "MULTICAMMulticam Selector.",
            "ADJUSTMENTAdjustment Layer.",
            "GAUSSIAN_BLURGaussian Blur.",
            "TEXTText.",
            "COLORMIXColor Mix."
        ]
    },
    {
        "function_id": "bpy.ops.sequencer.change_path",
        "signature": "bpy.ops.sequencer.change_path(filepath='',directory='',files=None,hide_props_region=True,check_existing=False,filter_blender=False,filter_backup=False,filter_image=False,filter_movie=False,filter_python=False,filter_font=False,filter_sound=False,filter_text=False,filter_archive=False,filter_btx=False,filter_collada=False,filter_alembic=False,filter_usd=False,filter_obj=False,filter_volume=False,filter_folder=True,filter_blenlib=False,filemode=9,relative_path=True,display_type='DEFAULT',sort_method='',use_placeholders=False)#",
        "description": "Undocumented, considercontributing.",
        "parameters": [
            "filepath=''",
            "directory=''",
            "files=None",
            "hide_props_region=True",
            "check_existing=False",
            "filter_blender=False",
            "filter_backup=False",
            "filter_image=False",
            "filter_movie=False",
            "filter_python=False",
            "filter_font=False",
            "filter_sound=False",
            "filter_text=False",
            "filter_archive=False",
            "filter_btx=False",
            "filter_collada=False",
            "filter_alembic=False",
            "filter_usd=False",
            "filter_obj=False",
            "filter_volume=False",
            "filter_folder=True",
            "filter_blenlib=False",
            "filemode=9",
            "relative_path=True",
            "display_type='DEFAULT'",
            "sort_method=''",
            "use_placeholders=False"
        ],
        "parameter_descriptions": [
            "filepath(string,(optional,never None)) – File Path, Path to file",
            "directory(string,(optional,never None)) – Directory, Directory of the file",
            "files(bpy_prop_collectionofOperatorFileListElement, (optional)) – Files",
            "hide_props_region(boolean,(optional)) – Hide Operator Properties, Collapse the region displaying the operator settings",
            "check_existing(boolean,(optional)) – Check Existing, Check and warn on overwriting existing files",
            "filter_blender(boolean,(optional)) – Filter .blend files",
            "filter_backup(boolean,(optional)) – Filter .blend files",
            "filter_image(boolean,(optional)) – Filter image files",
            "filter_movie(boolean,(optional)) – Filter movie files",
            "filter_python(boolean,(optional)) – Filter Python files",
            "filter_font(boolean,(optional)) – Filter font files",
            "filter_sound(boolean,(optional)) – Filter sound files",
            "filter_text(boolean,(optional)) – Filter text files",
            "filter_archive(boolean,(optional)) – Filter archive files",
            "filter_btx(boolean,(optional)) – Filter btx files",
            "filter_collada(boolean,(optional)) – Filter COLLADA files",
            "filter_alembic(boolean,(optional)) – Filter Alembic files",
            "filter_usd(boolean,(optional)) – Filter USD files",
            "filter_obj(boolean,(optional)) – Filter OBJ files",
            "filter_volume(boolean,(optional)) – Filter OpenVDB volume files",
            "filter_folder(boolean,(optional)) – Filter folders",
            "filter_blenlib(boolean,(optional)) – Filter Blender IDs",
            "filemode(int in[1,9],(optional)) – File Browser Mode, The setting for the file browser mode to load a .blend file, a library or a special file",
            "relative_path(boolean,(optional)) – Relative Path, Select the file relative to the blend file",
            "display_type(enum in['DEFAULT','LIST_VERTICAL','LIST_HORIZONTAL','THUMBNAIL'],(optional)) –Display TypeDEFAULTDefault – Automatically determine display type for files.LIST_VERTICALShort List – Display files as short list.LIST_HORIZONTALLong List – Display files as a detailed list.THUMBNAILThumbnails – Display files as thumbnails.",
            "DEFAULTDefault – Automatically determine display type for files.",
            "LIST_VERTICALShort List – Display files as short list.",
            "LIST_HORIZONTALLong List – Display files as a detailed list.",
            "THUMBNAILThumbnails – Display files as thumbnails.",
            "sort_method(enum in[],(optional)) – File sorting mode",
            "use_placeholders(boolean,(optional)) – Use Placeholders, Use placeholders for missing frames of the strip"
        ]
    },
    {
        "function_id": "bpy.ops.sequencer.change_scene",
        "signature": "bpy.ops.sequencer.change_scene(scene='')#",
        "description": "Change Scene assigned to Strip",
        "parameters": [
            "scene=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.sequencer.copy",
        "signature": "bpy.ops.sequencer.copy()#",
        "description": "Copy the selected strips to the internal clipboard",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.sequencer.crossfade_sounds",
        "signature": "bpy.ops.sequencer.crossfade_sounds()#",
        "description": "Do cross-fading volume animation of two selected sound strips",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.sequencer.cursor_set",
        "signature": "bpy.ops.sequencer.cursor_set(location=(0.0,0.0))#",
        "description": "Set 2D cursor location",
        "parameters": [
            "location=(0.0,0.0)"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.sequencer.deinterlace_selected_movies",
        "signature": "bpy.ops.sequencer.deinterlace_selected_movies()#",
        "description": "Deinterlace all selected movie sources",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.sequencer.delete",
        "signature": "bpy.ops.sequencer.delete(delete_data=False)#",
        "description": "Delete selected strips from the sequencer",
        "parameters": [
            "delete_data=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.sequencer.duplicate",
        "signature": "bpy.ops.sequencer.duplicate()#",
        "description": "Duplicate the selected strips",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.sequencer.duplicate_move",
        "signature": "bpy.ops.sequencer.duplicate_move(SEQUENCER_OT_duplicate=None,TRANSFORM_OT_seq_slide=None)#",
        "description": "Duplicate selected strips and move them",
        "parameters": [
            "SEQUENCER_OT_duplicate=None",
            "TRANSFORM_OT_seq_slide=None"
        ],
        "parameter_descriptions": [
            "SEQUENCER_OT_duplicate(SEQUENCER_OT_duplicate, (optional)) – Duplicate Strips, Duplicate the selected strips",
            "TRANSFORM_OT_seq_slide(TRANSFORM_OT_seq_slide, (optional)) – Sequence Slide, Slide a sequence strip in time"
        ]
    },
    {
        "function_id": "bpy.ops.sequencer.effect_strip_add",
        "signature": "bpy.ops.sequencer.effect_strip_add(type='CROSS',frame_start=0,frame_end=0,channel=1,replace_sel=True,overlap=False,overlap_shuffle_override=False,color=(0.0,0.0,0.0))#",
        "description": "Add an effect to the sequencer, most are applied on top of existing strips",
        "parameters": [
            "type='CROSS'",
            "frame_start=0",
            "frame_end=0",
            "channel=1",
            "replace_sel=True",
            "overlap=False",
            "overlap_shuffle_override=False",
            "color=(0.0,0.0,0.0)"
        ],
        "parameter_descriptions": [
            "type(enum in['CROSS','ADD','SUBTRACT','ALPHA_OVER','ALPHA_UNDER','GAMMA_CROSS','MULTIPLY','OVER_DROP','WIPE','GLOW','TRANSFORM','COLOR','SPEED','MULTICAM','ADJUSTMENT','GAUSSIAN_BLUR','TEXT','COLORMIX'],(optional)) –Type, Sequencer effect typeCROSSCrossfade – Crossfade effect strip type.ADDAdd – Add effect strip type.SUBTRACTSubtract – Subtract effect strip type.ALPHA_OVERAlpha Over – Alpha Over effect strip type.ALPHA_UNDERAlpha Under – Alpha Under effect strip type.GAMMA_CROSSGamma Cross – Gamma Cross effect strip type.MULTIPLYMultiply – Multiply effect strip type.OVER_DROPAlpha Over Drop – Alpha Over Drop effect strip type.WIPEWipe – Wipe effect strip type.GLOWGlow – Glow effect strip type.TRANSFORMTransform – Transform effect strip type.COLORColor – Color effect strip type.SPEEDSpeed – Color effect strip type.MULTICAMMulticam Selector.ADJUSTMENTAdjustment Layer.GAUSSIAN_BLURGaussian Blur.TEXTText.COLORMIXColor Mix.",
            "CROSSCrossfade – Crossfade effect strip type.",
            "ADDAdd – Add effect strip type.",
            "SUBTRACTSubtract – Subtract effect strip type.",
            "ALPHA_OVERAlpha Over – Alpha Over effect strip type.",
            "ALPHA_UNDERAlpha Under – Alpha Under effect strip type.",
            "GAMMA_CROSSGamma Cross – Gamma Cross effect strip type.",
            "MULTIPLYMultiply – Multiply effect strip type.",
            "OVER_DROPAlpha Over Drop – Alpha Over Drop effect strip type.",
            "WIPEWipe – Wipe effect strip type.",
            "GLOWGlow – Glow effect strip type.",
            "TRANSFORMTransform – Transform effect strip type.",
            "COLORColor – Color effect strip type.",
            "SPEEDSpeed – Color effect strip type.",
            "MULTICAMMulticam Selector.",
            "ADJUSTMENTAdjustment Layer.",
            "GAUSSIAN_BLURGaussian Blur.",
            "TEXTText.",
            "COLORMIXColor Mix.",
            "frame_start(int in[-inf,inf],(optional)) – Start Frame, Start frame of the sequence strip",
            "frame_end(int in[-inf,inf],(optional)) – End Frame, End frame for the color strip",
            "channel(int in[1,128],(optional)) – Channel, Channel to place this strip into",
            "replace_sel(boolean,(optional)) – Replace Selection, Replace the current selection",
            "overlap(boolean,(optional)) – Allow Overlap, Don’t correct overlap on new sequence strips",
            "overlap_shuffle_override(boolean,(optional)) – Override Overlap Shuffle Behavior, Use the overlap_mode tool settings to determine how to shuffle overlapping strips",
            "color(mathutils.Colorof 3 items in [0, 1], (optional)) – Color, Initialize the strip with this color"
        ]
    },
    {
        "function_id": "bpy.ops.sequencer.enable_proxies",
        "signature": "bpy.ops.sequencer.enable_proxies(proxy_25=False,proxy_50=False,proxy_75=False,proxy_100=False,overwrite=False)#",
        "description": "Enable selected proxies on all selected Movie and Image strips",
        "parameters": [
            "proxy_25=False",
            "proxy_50=False",
            "proxy_75=False",
            "proxy_100=False",
            "overwrite=False"
        ],
        "parameter_descriptions": [
            "proxy_25(boolean,(optional)) – 25%",
            "proxy_50(boolean,(optional)) – 50%",
            "proxy_75(boolean,(optional)) – 75%",
            "proxy_100(boolean,(optional)) – 100%",
            "overwrite(boolean,(optional)) – Overwrite"
        ]
    },
    {
        "function_id": "bpy.ops.sequencer.export_subtitles",
        "signature": "bpy.ops.sequencer.export_subtitles(filepath='',hide_props_region=True,check_existing=True,filter_blender=False,filter_backup=False,filter_image=False,filter_movie=False,filter_python=False,filter_font=False,filter_sound=False,filter_text=False,filter_archive=False,filter_btx=False,filter_collada=False,filter_alembic=False,filter_usd=False,filter_obj=False,filter_volume=False,filter_folder=True,filter_blenlib=False,filemode=8,display_type='DEFAULT',sort_method='')#",
        "description": "Export .srt file containing text strips",
        "parameters": [
            "filepath=''",
            "hide_props_region=True",
            "check_existing=True",
            "filter_blender=False",
            "filter_backup=False",
            "filter_image=False",
            "filter_movie=False",
            "filter_python=False",
            "filter_font=False",
            "filter_sound=False",
            "filter_text=False",
            "filter_archive=False",
            "filter_btx=False",
            "filter_collada=False",
            "filter_alembic=False",
            "filter_usd=False",
            "filter_obj=False",
            "filter_volume=False",
            "filter_folder=True",
            "filter_blenlib=False",
            "filemode=8",
            "display_type='DEFAULT'",
            "sort_method=''"
        ],
        "parameter_descriptions": [
            "filepath(string,(optional,never None)) – File Path, Path to file",
            "hide_props_region(boolean,(optional)) – Hide Operator Properties, Collapse the region displaying the operator settings",
            "check_existing(boolean,(optional)) – Check Existing, Check and warn on overwriting existing files",
            "filter_blender(boolean,(optional)) – Filter .blend files",
            "filter_backup(boolean,(optional)) – Filter .blend files",
            "filter_image(boolean,(optional)) – Filter image files",
            "filter_movie(boolean,(optional)) – Filter movie files",
            "filter_python(boolean,(optional)) – Filter Python files",
            "filter_font(boolean,(optional)) – Filter font files",
            "filter_sound(boolean,(optional)) – Filter sound files",
            "filter_text(boolean,(optional)) – Filter text files",
            "filter_archive(boolean,(optional)) – Filter archive files",
            "filter_btx(boolean,(optional)) – Filter btx files",
            "filter_collada(boolean,(optional)) – Filter COLLADA files",
            "filter_alembic(boolean,(optional)) – Filter Alembic files",
            "filter_usd(boolean,(optional)) – Filter USD files",
            "filter_obj(boolean,(optional)) – Filter OBJ files",
            "filter_volume(boolean,(optional)) – Filter OpenVDB volume files",
            "filter_folder(boolean,(optional)) – Filter folders",
            "filter_blenlib(boolean,(optional)) – Filter Blender IDs",
            "filemode(int in[1,9],(optional)) – File Browser Mode, The setting for the file browser mode to load a .blend file, a library or a special file",
            "display_type(enum in['DEFAULT','LIST_VERTICAL','LIST_HORIZONTAL','THUMBNAIL'],(optional)) –Display TypeDEFAULTDefault – Automatically determine display type for files.LIST_VERTICALShort List – Display files as short list.LIST_HORIZONTALLong List – Display files as a detailed list.THUMBNAILThumbnails – Display files as thumbnails.",
            "DEFAULTDefault – Automatically determine display type for files.",
            "LIST_VERTICALShort List – Display files as short list.",
            "LIST_HORIZONTALLong List – Display files as a detailed list.",
            "THUMBNAILThumbnails – Display files as thumbnails.",
            "sort_method(enum in[],(optional)) – File sorting mode"
        ]
    },
    {
        "function_id": "bpy.ops.sequencer.fades_add",
        "signature": "bpy.ops.sequencer.fades_add(duration_seconds=1.0,type='IN_OUT')#",
        "description": "Adds or updates a fade animation for either visual or audio strips",
        "parameters": [
            "duration_seconds=1.0",
            "type='IN_OUT'"
        ],
        "parameter_descriptions": [
            "duration_seconds(float in[0.01,inf],(optional)) – Fade Duration, Duration of the fade in seconds",
            "type(enum in['IN_OUT','IN','OUT','CURSOR_FROM','CURSOR_TO'],(optional)) –Fade Type, Fade in, out, both in and out, to, or from the current frame. Default is both in and outIN_OUTFade In and Out – Fade selected strips in and out.INFade In – Fade in selected strips.OUTFade Out – Fade out selected strips.CURSOR_FROMFrom Current Frame – Fade from the time cursor to the end of overlapping sequences.CURSOR_TOTo Current Frame – Fade from the start of sequences under the time cursor to the current frame.",
            "IN_OUTFade In and Out – Fade selected strips in and out.",
            "INFade In – Fade in selected strips.",
            "OUTFade Out – Fade out selected strips.",
            "CURSOR_FROMFrom Current Frame – Fade from the time cursor to the end of overlapping sequences.",
            "CURSOR_TOTo Current Frame – Fade from the start of sequences under the time cursor to the current frame."
        ]
    },
    {
        "function_id": "bpy.ops.sequencer.fades_clear",
        "signature": "bpy.ops.sequencer.fades_clear()#",
        "description": "Removes fade animation from selected sequences",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.sequencer.gap_insert",
        "signature": "bpy.ops.sequencer.gap_insert(frames=10)#",
        "description": "Insert gap at current frame to first strips at the right, independent of selection or locked state of strips",
        "parameters": [
            "frames=10"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.sequencer.gap_remove",
        "signature": "bpy.ops.sequencer.gap_remove(all=False)#",
        "description": "Remove gap at current frame to first strip at the right, independent of selection or locked state of strips",
        "parameters": [
            "all=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.sequencer.image_strip_add",
        "signature": "bpy.ops.sequencer.image_strip_add(directory='',files=None,check_existing=False,filter_blender=False,filter_backup=False,filter_image=True,filter_movie=False,filter_python=False,filter_font=False,filter_sound=False,filter_text=False,filter_archive=False,filter_btx=False,filter_collada=False,filter_alembic=False,filter_usd=False,filter_obj=False,filter_volume=False,filter_folder=True,filter_blenlib=False,filemode=9,relative_path=True,show_multiview=False,use_multiview=False,display_type='DEFAULT',sort_method='',frame_start=0,frame_end=0,channel=1,replace_sel=True,overlap=False,overlap_shuffle_override=False,fit_method='FIT',set_view_transform=True,use_placeholders=False)#",
        "description": "Add an image or image sequence to the sequencer",
        "parameters": [
            "directory=''",
            "files=None",
            "check_existing=False",
            "filter_blender=False",
            "filter_backup=False",
            "filter_image=True",
            "filter_movie=False",
            "filter_python=False",
            "filter_font=False",
            "filter_sound=False",
            "filter_text=False",
            "filter_archive=False",
            "filter_btx=False",
            "filter_collada=False",
            "filter_alembic=False",
            "filter_usd=False",
            "filter_obj=False",
            "filter_volume=False",
            "filter_folder=True",
            "filter_blenlib=False",
            "filemode=9",
            "relative_path=True",
            "show_multiview=False",
            "use_multiview=False",
            "display_type='DEFAULT'",
            "sort_method=''",
            "frame_start=0",
            "frame_end=0",
            "channel=1",
            "replace_sel=True",
            "overlap=False",
            "overlap_shuffle_override=False",
            "fit_method='FIT'",
            "set_view_transform=True",
            "use_placeholders=False"
        ],
        "parameter_descriptions": [
            "directory(string,(optional,never None)) – Directory, Directory of the file",
            "files(bpy_prop_collectionofOperatorFileListElement, (optional)) – Files",
            "check_existing(boolean,(optional)) – Check Existing, Check and warn on overwriting existing files",
            "filter_blender(boolean,(optional)) – Filter .blend files",
            "filter_backup(boolean,(optional)) – Filter .blend files",
            "filter_image(boolean,(optional)) – Filter image files",
            "filter_movie(boolean,(optional)) – Filter movie files",
            "filter_python(boolean,(optional)) – Filter Python files",
            "filter_font(boolean,(optional)) – Filter font files",
            "filter_sound(boolean,(optional)) – Filter sound files",
            "filter_text(boolean,(optional)) – Filter text files",
            "filter_archive(boolean,(optional)) – Filter archive files",
            "filter_btx(boolean,(optional)) – Filter btx files",
            "filter_collada(boolean,(optional)) – Filter COLLADA files",
            "filter_alembic(boolean,(optional)) – Filter Alembic files",
            "filter_usd(boolean,(optional)) – Filter USD files",
            "filter_obj(boolean,(optional)) – Filter OBJ files",
            "filter_volume(boolean,(optional)) – Filter OpenVDB volume files",
            "filter_folder(boolean,(optional)) – Filter folders",
            "filter_blenlib(boolean,(optional)) – Filter Blender IDs",
            "filemode(int in[1,9],(optional)) – File Browser Mode, The setting for the file browser mode to load a .blend file, a library or a special file",
            "relative_path(boolean,(optional)) – Relative Path, Select the file relative to the blend file",
            "show_multiview(boolean,(optional)) – Enable Multi-View",
            "use_multiview(boolean,(optional)) – Use Multi-View",
            "display_type(enum in['DEFAULT','LIST_VERTICAL','LIST_HORIZONTAL','THUMBNAIL'],(optional)) –Display TypeDEFAULTDefault – Automatically determine display type for files.LIST_VERTICALShort List – Display files as short list.LIST_HORIZONTALLong List – Display files as a detailed list.THUMBNAILThumbnails – Display files as thumbnails.",
            "DEFAULTDefault – Automatically determine display type for files.",
            "LIST_VERTICALShort List – Display files as short list.",
            "LIST_HORIZONTALLong List – Display files as a detailed list.",
            "THUMBNAILThumbnails – Display files as thumbnails.",
            "sort_method(enum in['DEFAULT','FILE_SORT_ALPHA','FILE_SORT_EXTENSION','FILE_SORT_TIME','FILE_SORT_SIZE'],(optional)) –File sorting modeDEFAULTDefault – Automatically determine sort method for files.FILE_SORT_ALPHAName – Sort the file list alphabetically.FILE_SORT_EXTENSIONExtension – Sort the file list by extension/type.FILE_SORT_TIMEModified Date – Sort files by modification time.FILE_SORT_SIZESize – Sort files by size.",
            "DEFAULTDefault – Automatically determine sort method for files.",
            "FILE_SORT_ALPHAName – Sort the file list alphabetically.",
            "FILE_SORT_EXTENSIONExtension – Sort the file list by extension/type.",
            "FILE_SORT_TIMEModified Date – Sort files by modification time.",
            "FILE_SORT_SIZESize – Sort files by size.",
            "frame_start(int in[-inf,inf],(optional)) – Start Frame, Start frame of the sequence strip",
            "frame_end(int in[-inf,inf],(optional)) – End Frame, End frame for the color strip",
            "channel(int in[1,128],(optional)) – Channel, Channel to place this strip into",
            "replace_sel(boolean,(optional)) – Replace Selection, Replace the current selection",
            "overlap(boolean,(optional)) – Allow Overlap, Don’t correct overlap on new sequence strips",
            "overlap_shuffle_override(boolean,(optional)) – Override Overlap Shuffle Behavior, Use the overlap_mode tool settings to determine how to shuffle overlapping strips",
            "fit_method(enum in['FIT','FILL','STRETCH','ORIGINAL'],(optional)) –Fit Method, Scale fit methodFITScale to Fit – Scale image to fit within the canvas.FILLScale to Fill – Scale image to completely fill the canvas.STRETCHStretch to Fill – Stretch image to fill the canvas.ORIGINALUse Original Size – Keep image at its original size.",
            "FITScale to Fit – Scale image to fit within the canvas.",
            "FILLScale to Fill – Scale image to completely fill the canvas.",
            "STRETCHStretch to Fill – Stretch image to fill the canvas.",
            "ORIGINALUse Original Size – Keep image at its original size.",
            "set_view_transform(boolean,(optional)) – Set View Transform, Set appropriate view transform based on media color space",
            "use_placeholders(boolean,(optional)) – Use Placeholders, Use placeholders for missing frames of the strip"
        ]
    },
    {
        "function_id": "bpy.ops.sequencer.images_separate",
        "signature": "bpy.ops.sequencer.images_separate(length=1)#",
        "description": "On image sequence strips, it returns a strip for each image",
        "parameters": [
            "length=1"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.sequencer.lock",
        "signature": "bpy.ops.sequencer.lock()#",
        "description": "Lock strips so they can’t be transformed",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.sequencer.mask_strip_add",
        "signature": "bpy.ops.sequencer.mask_strip_add(frame_start=0,channel=1,replace_sel=True,overlap=False,overlap_shuffle_override=False,mask='')#",
        "description": "Add a mask strip to the sequencer",
        "parameters": [
            "frame_start=0",
            "channel=1",
            "replace_sel=True",
            "overlap=False",
            "overlap_shuffle_override=False",
            "mask=''"
        ],
        "parameter_descriptions": [
            "frame_start(int in[-inf,inf],(optional)) – Start Frame, Start frame of the sequence strip",
            "channel(int in[1,128],(optional)) – Channel, Channel to place this strip into",
            "replace_sel(boolean,(optional)) – Replace Selection, Replace the current selection",
            "overlap(boolean,(optional)) – Allow Overlap, Don’t correct overlap on new sequence strips",
            "overlap_shuffle_override(boolean,(optional)) – Override Overlap Shuffle Behavior, Use the overlap_mode tool settings to determine how to shuffle overlapping strips",
            "mask(enum in[],(optional)) – Mask"
        ]
    },
    {
        "function_id": "bpy.ops.sequencer.meta_make",
        "signature": "bpy.ops.sequencer.meta_make()#",
        "description": "Group selected strips into a meta-strip",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.sequencer.meta_separate",
        "signature": "bpy.ops.sequencer.meta_separate()#",
        "description": "Put the contents of a meta-strip back in the sequencer",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.sequencer.meta_toggle",
        "signature": "bpy.ops.sequencer.meta_toggle()#",
        "description": "Toggle a meta-strip (to edit enclosed strips)",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.sequencer.movie_strip_add",
        "signature": "bpy.ops.sequencer.movie_strip_add(filepath='',directory='',files=None,check_existing=False,filter_blender=False,filter_backup=False,filter_image=False,filter_movie=True,filter_python=False,filter_font=False,filter_sound=False,filter_text=False,filter_archive=False,filter_btx=False,filter_collada=False,filter_alembic=False,filter_usd=False,filter_obj=False,filter_volume=False,filter_folder=True,filter_blenlib=False,filemode=9,relative_path=True,show_multiview=False,use_multiview=False,display_type='DEFAULT',sort_method='',frame_start=0,channel=1,replace_sel=True,overlap=False,overlap_shuffle_override=False,fit_method='FIT',set_view_transform=True,adjust_playback_rate=True,sound=True,use_framerate=True)#",
        "description": "Add a movie strip to the sequencer",
        "parameters": [
            "filepath=''",
            "directory=''",
            "files=None",
            "check_existing=False",
            "filter_blender=False",
            "filter_backup=False",
            "filter_image=False",
            "filter_movie=True",
            "filter_python=False",
            "filter_font=False",
            "filter_sound=False",
            "filter_text=False",
            "filter_archive=False",
            "filter_btx=False",
            "filter_collada=False",
            "filter_alembic=False",
            "filter_usd=False",
            "filter_obj=False",
            "filter_volume=False",
            "filter_folder=True",
            "filter_blenlib=False",
            "filemode=9",
            "relative_path=True",
            "show_multiview=False",
            "use_multiview=False",
            "display_type='DEFAULT'",
            "sort_method=''",
            "frame_start=0",
            "channel=1",
            "replace_sel=True",
            "overlap=False",
            "overlap_shuffle_override=False",
            "fit_method='FIT'",
            "set_view_transform=True",
            "adjust_playback_rate=True",
            "sound=True",
            "use_framerate=True"
        ],
        "parameter_descriptions": [
            "filepath(string,(optional,never None)) – File Path, Path to file",
            "directory(string,(optional,never None)) – Directory, Directory of the file",
            "files(bpy_prop_collectionofOperatorFileListElement, (optional)) – Files",
            "check_existing(boolean,(optional)) – Check Existing, Check and warn on overwriting existing files",
            "filter_blender(boolean,(optional)) – Filter .blend files",
            "filter_backup(boolean,(optional)) – Filter .blend files",
            "filter_image(boolean,(optional)) – Filter image files",
            "filter_movie(boolean,(optional)) – Filter movie files",
            "filter_python(boolean,(optional)) – Filter Python files",
            "filter_font(boolean,(optional)) – Filter font files",
            "filter_sound(boolean,(optional)) – Filter sound files",
            "filter_text(boolean,(optional)) – Filter text files",
            "filter_archive(boolean,(optional)) – Filter archive files",
            "filter_btx(boolean,(optional)) – Filter btx files",
            "filter_collada(boolean,(optional)) – Filter COLLADA files",
            "filter_alembic(boolean,(optional)) – Filter Alembic files",
            "filter_usd(boolean,(optional)) – Filter USD files",
            "filter_obj(boolean,(optional)) – Filter OBJ files",
            "filter_volume(boolean,(optional)) – Filter OpenVDB volume files",
            "filter_folder(boolean,(optional)) – Filter folders",
            "filter_blenlib(boolean,(optional)) – Filter Blender IDs",
            "filemode(int in[1,9],(optional)) – File Browser Mode, The setting for the file browser mode to load a .blend file, a library or a special file",
            "relative_path(boolean,(optional)) – Relative Path, Select the file relative to the blend file",
            "show_multiview(boolean,(optional)) – Enable Multi-View",
            "use_multiview(boolean,(optional)) – Use Multi-View",
            "display_type(enum in['DEFAULT','LIST_VERTICAL','LIST_HORIZONTAL','THUMBNAIL'],(optional)) –Display TypeDEFAULTDefault – Automatically determine display type for files.LIST_VERTICALShort List – Display files as short list.LIST_HORIZONTALLong List – Display files as a detailed list.THUMBNAILThumbnails – Display files as thumbnails.",
            "DEFAULTDefault – Automatically determine display type for files.",
            "LIST_VERTICALShort List – Display files as short list.",
            "LIST_HORIZONTALLong List – Display files as a detailed list.",
            "THUMBNAILThumbnails – Display files as thumbnails.",
            "sort_method(enum in['DEFAULT','FILE_SORT_ALPHA','FILE_SORT_EXTENSION','FILE_SORT_TIME','FILE_SORT_SIZE'],(optional)) –File sorting modeDEFAULTDefault – Automatically determine sort method for files.FILE_SORT_ALPHAName – Sort the file list alphabetically.FILE_SORT_EXTENSIONExtension – Sort the file list by extension/type.FILE_SORT_TIMEModified Date – Sort files by modification time.FILE_SORT_SIZESize – Sort files by size.",
            "DEFAULTDefault – Automatically determine sort method for files.",
            "FILE_SORT_ALPHAName – Sort the file list alphabetically.",
            "FILE_SORT_EXTENSIONExtension – Sort the file list by extension/type.",
            "FILE_SORT_TIMEModified Date – Sort files by modification time.",
            "FILE_SORT_SIZESize – Sort files by size.",
            "frame_start(int in[-inf,inf],(optional)) – Start Frame, Start frame of the sequence strip",
            "channel(int in[1,128],(optional)) – Channel, Channel to place this strip into",
            "replace_sel(boolean,(optional)) – Replace Selection, Replace the current selection",
            "overlap(boolean,(optional)) – Allow Overlap, Don’t correct overlap on new sequence strips",
            "overlap_shuffle_override(boolean,(optional)) – Override Overlap Shuffle Behavior, Use the overlap_mode tool settings to determine how to shuffle overlapping strips",
            "fit_method(enum in['FIT','FILL','STRETCH','ORIGINAL'],(optional)) –Fit Method, Scale fit methodFITScale to Fit – Scale image to fit within the canvas.FILLScale to Fill – Scale image to completely fill the canvas.STRETCHStretch to Fill – Stretch image to fill the canvas.ORIGINALUse Original Size – Keep image at its original size.",
            "FITScale to Fit – Scale image to fit within the canvas.",
            "FILLScale to Fill – Scale image to completely fill the canvas.",
            "STRETCHStretch to Fill – Stretch image to fill the canvas.",
            "ORIGINALUse Original Size – Keep image at its original size.",
            "set_view_transform(boolean,(optional)) – Set View Transform, Set appropriate view transform based on media color space",
            "adjust_playback_rate(boolean,(optional)) – Adjust Playback Rate, Play at normal speed regardless of scene FPS",
            "sound(boolean,(optional)) – Sound, Load sound with the movie",
            "use_framerate(boolean,(optional)) – Set Scene Frame Rate, Set frame rate of the current scene to the frame rate of the movie"
        ]
    },
    {
        "function_id": "bpy.ops.sequencer.movieclip_strip_add",
        "signature": "bpy.ops.sequencer.movieclip_strip_add(frame_start=0,channel=1,replace_sel=True,overlap=False,overlap_shuffle_override=False,clip='')#",
        "description": "Add a movieclip strip to the sequencer",
        "parameters": [
            "frame_start=0",
            "channel=1",
            "replace_sel=True",
            "overlap=False",
            "overlap_shuffle_override=False",
            "clip=''"
        ],
        "parameter_descriptions": [
            "frame_start(int in[-inf,inf],(optional)) – Start Frame, Start frame of the sequence strip",
            "channel(int in[1,128],(optional)) – Channel, Channel to place this strip into",
            "replace_sel(boolean,(optional)) – Replace Selection, Replace the current selection",
            "overlap(boolean,(optional)) – Allow Overlap, Don’t correct overlap on new sequence strips",
            "overlap_shuffle_override(boolean,(optional)) – Override Overlap Shuffle Behavior, Use the overlap_mode tool settings to determine how to shuffle overlapping strips",
            "clip(enum in[],(optional)) – Clip"
        ]
    },
    {
        "function_id": "bpy.ops.sequencer.mute",
        "signature": "bpy.ops.sequencer.mute(unselected=False)#",
        "description": "Mute (un)selected strips",
        "parameters": [
            "unselected=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.sequencer.offset_clear",
        "signature": "bpy.ops.sequencer.offset_clear()#",
        "description": "Clear strip offsets from the start and end frames",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.sequencer.paste",
        "signature": "bpy.ops.sequencer.paste(keep_offset=False)#",
        "description": "Paste strips from the internal clipboard",
        "parameters": [
            "keep_offset=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.sequencer.reassign_inputs",
        "signature": "bpy.ops.sequencer.reassign_inputs()#",
        "description": "Reassign the inputs for the effect strip",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.sequencer.rebuild_proxy",
        "signature": "bpy.ops.sequencer.rebuild_proxy()#",
        "description": "Rebuild all selected proxies and timecode indices using the job system",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.sequencer.refresh_all",
        "signature": "bpy.ops.sequencer.refresh_all()#",
        "description": "Refresh the sequencer editor",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.sequencer.reload",
        "signature": "bpy.ops.sequencer.reload(adjust_length=False)#",
        "description": "Reload strips in the sequencer",
        "parameters": [
            "adjust_length=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.sequencer.rename_channel",
        "signature": "bpy.ops.sequencer.rename_channel()#",
        "description": "Undocumented, considercontributing.",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.sequencer.rendersize",
        "signature": "bpy.ops.sequencer.rendersize()#",
        "description": "Set render size and aspect from active sequence",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.sequencer.retiming_add_freeze_frame_slide",
        "signature": "bpy.ops.sequencer.retiming_add_freeze_frame_slide(SEQUENCER_OT_retiming_freeze_frame_add=None,TRANSFORM_OT_seq_slide=None)#",
        "description": "Add freeze frame and move it",
        "parameters": [
            "SEQUENCER_OT_retiming_freeze_frame_add=None",
            "TRANSFORM_OT_seq_slide=None"
        ],
        "parameter_descriptions": [
            "SEQUENCER_OT_retiming_freeze_frame_add(SEQUENCER_OT_retiming_freeze_frame_add, (optional)) – Add Freeze Frame, Add freeze frame",
            "TRANSFORM_OT_seq_slide(TRANSFORM_OT_seq_slide, (optional)) – Sequence Slide, Slide a sequence strip in time"
        ]
    },
    {
        "function_id": "bpy.ops.sequencer.retiming_add_transition_slide",
        "signature": "bpy.ops.sequencer.retiming_add_transition_slide(SEQUENCER_OT_retiming_transition_add=None,TRANSFORM_OT_seq_slide=None)#",
        "description": "Add smooth transition between 2 retimed segments and change its duration",
        "parameters": [
            "SEQUENCER_OT_retiming_transition_add=None",
            "TRANSFORM_OT_seq_slide=None"
        ],
        "parameter_descriptions": [
            "SEQUENCER_OT_retiming_transition_add(SEQUENCER_OT_retiming_transition_add, (optional)) – Add Speed Transition, Add smooth transition between 2 retimed segments",
            "TRANSFORM_OT_seq_slide(TRANSFORM_OT_seq_slide, (optional)) – Sequence Slide, Slide a sequence strip in time"
        ]
    },
    {
        "function_id": "bpy.ops.sequencer.retiming_freeze_frame_add",
        "signature": "bpy.ops.sequencer.retiming_freeze_frame_add(duration=0)#",
        "description": "Add freeze frame",
        "parameters": [
            "duration=0"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.sequencer.retiming_key_add",
        "signature": "bpy.ops.sequencer.retiming_key_add(timeline_frame=0)#",
        "description": "Add retiming Key",
        "parameters": [
            "timeline_frame=0"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.sequencer.retiming_key_delete",
        "signature": "bpy.ops.sequencer.retiming_key_delete()#",
        "description": "Delete selected strips from the sequencer",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.sequencer.retiming_reset",
        "signature": "bpy.ops.sequencer.retiming_reset()#",
        "description": "Reset strip retiming",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.sequencer.retiming_segment_speed_set",
        "signature": "bpy.ops.sequencer.retiming_segment_speed_set(speed=100.0,keep_retiming=True)#",
        "description": "Set speed of retimed segment",
        "parameters": [
            "speed=100.0",
            "keep_retiming=True"
        ],
        "parameter_descriptions": [
            "speed(float in[0.001,inf],(optional)) – Speed, New speed of retimed segment",
            "keep_retiming(boolean,(optional)) – Preserve Current Retiming, Keep speed of other segments unchanged, change strip length instead"
        ]
    },
    {
        "function_id": "bpy.ops.sequencer.retiming_show",
        "signature": "bpy.ops.sequencer.retiming_show()#",
        "description": "Show retiming keys in selected strips",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.sequencer.retiming_transition_add",
        "signature": "bpy.ops.sequencer.retiming_transition_add(duration=0)#",
        "description": "Add smooth transition between 2 retimed segments",
        "parameters": [
            "duration=0"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.sequencer.sample",
        "signature": "bpy.ops.sequencer.sample(size=1)#",
        "description": "Use mouse to sample color in current frame",
        "parameters": [
            "size=1"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.sequencer.scene_frame_range_update",
        "signature": "bpy.ops.sequencer.scene_frame_range_update()#",
        "description": "Update frame range of scene strip",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.sequencer.scene_strip_add",
        "signature": "bpy.ops.sequencer.scene_strip_add(frame_start=0,channel=1,replace_sel=True,overlap=False,overlap_shuffle_override=False,scene='')#",
        "description": "Add a strip to the sequencer using a Blender scene as a source",
        "parameters": [
            "frame_start=0",
            "channel=1",
            "replace_sel=True",
            "overlap=False",
            "overlap_shuffle_override=False",
            "scene=''"
        ],
        "parameter_descriptions": [
            "frame_start(int in[-inf,inf],(optional)) – Start Frame, Start frame of the sequence strip",
            "channel(int in[1,128],(optional)) – Channel, Channel to place this strip into",
            "replace_sel(boolean,(optional)) – Replace Selection, Replace the current selection",
            "overlap(boolean,(optional)) – Allow Overlap, Don’t correct overlap on new sequence strips",
            "overlap_shuffle_override(boolean,(optional)) – Override Overlap Shuffle Behavior, Use the overlap_mode tool settings to determine how to shuffle overlapping strips",
            "scene(enum in[],(optional)) – Scene"
        ]
    },
    {
        "function_id": "bpy.ops.sequencer.scene_strip_add_new",
        "signature": "bpy.ops.sequencer.scene_strip_add_new(frame_start=0,channel=1,replace_sel=True,overlap=False,overlap_shuffle_override=False,type='NEW')#",
        "description": "Create a new Strip and assign a new Scene as source",
        "parameters": [
            "frame_start=0",
            "channel=1",
            "replace_sel=True",
            "overlap=False",
            "overlap_shuffle_override=False",
            "type='NEW'"
        ],
        "parameter_descriptions": [
            "frame_start(int in[-inf,inf],(optional)) – Start Frame, Start frame of the sequence strip",
            "channel(int in[1,128],(optional)) – Channel, Channel to place this strip into",
            "replace_sel(boolean,(optional)) – Replace Selection, Replace the current selection",
            "overlap(boolean,(optional)) – Allow Overlap, Don’t correct overlap on new sequence strips",
            "overlap_shuffle_override(boolean,(optional)) – Override Overlap Shuffle Behavior, Use the overlap_mode tool settings to determine how to shuffle overlapping strips",
            "type(enum in['NEW','EMPTY','LINK_COPY','FULL_COPY'],(optional)) –TypeNEWNew – Add new Strip with a new empty Scene with default settings.EMPTYCopy Settings – Add a new Strip, with an empty scene, and copy settings from the current scene.LINK_COPYLinked Copy – Add a Strip and link in the collections from the current scene (shallow copy).FULL_COPYFull Copy – Add a Strip and make a full copy of the current scene.",
            "NEWNew – Add new Strip with a new empty Scene with default settings.",
            "EMPTYCopy Settings – Add a new Strip, with an empty scene, and copy settings from the current scene.",
            "LINK_COPYLinked Copy – Add a Strip and link in the collections from the current scene (shallow copy).",
            "FULL_COPYFull Copy – Add a Strip and make a full copy of the current scene."
        ]
    },
    {
        "function_id": "bpy.ops.sequencer.select",
        "signature": "bpy.ops.sequencer.select(wait_to_deselect_others=False,mouse_x=0,mouse_y=0,extend=False,deselect=False,toggle=False,deselect_all=False,select_passthrough=False,center=False,linked_handle=False,linked_time=False,side_of_frame=False)#",
        "description": "Select a strip (last selected becomes the “active strip”)",
        "parameters": [
            "wait_to_deselect_others=False",
            "mouse_x=0",
            "mouse_y=0",
            "extend=False",
            "deselect=False",
            "toggle=False",
            "deselect_all=False",
            "select_passthrough=False",
            "center=False",
            "linked_handle=False",
            "linked_time=False",
            "side_of_frame=False"
        ],
        "parameter_descriptions": [
            "wait_to_deselect_others(boolean,(optional)) – Wait to Deselect Others",
            "mouse_x(int in[-inf,inf],(optional)) – Mouse X",
            "mouse_y(int in[-inf,inf],(optional)) – Mouse Y",
            "extend(boolean,(optional)) – Extend, Extend selection instead of deselecting everything first",
            "deselect(boolean,(optional)) – Deselect, Remove from selection",
            "toggle(boolean,(optional)) – Toggle Selection, Toggle the selection",
            "deselect_all(boolean,(optional)) – Deselect On Nothing, Deselect all when nothing under the cursor",
            "select_passthrough(boolean,(optional)) – Only Select Unselected, Ignore the select action when the element is already selected",
            "center(boolean,(optional)) – Center, Use the object center when selecting, in edit mode used to extend object selection",
            "linked_handle(boolean,(optional)) – Linked Handle, Select handles next to the active strip",
            "linked_time(boolean,(optional)) – Linked Time, Select other strips at the same time",
            "side_of_frame(boolean,(optional)) – Side of Frame, Select all strips on same side of the current frame as the mouse cursor"
        ]
    },
    {
        "function_id": "bpy.ops.sequencer.select_all",
        "signature": "bpy.ops.sequencer.select_all(action='TOGGLE')#",
        "description": "Select or deselect all strips",
        "parameters": [
            "action='TOGGLE'"
        ],
        "parameter_descriptions": [
            "TOGGLEToggle – Toggle selection for all elements.",
            "SELECTSelect – Select all elements.",
            "DESELECTDeselect – Deselect all elements.",
            "INVERTInvert – Invert selection of all elements."
        ]
    },
    {
        "function_id": "bpy.ops.sequencer.select_box",
        "signature": "bpy.ops.sequencer.select_box(xmin=0,xmax=0,ymin=0,ymax=0,wait_for_input=True,mode='SET',tweak=False,include_handles=False)#",
        "description": "Select strips using box selection",
        "parameters": [
            "xmin=0",
            "xmax=0",
            "ymin=0",
            "ymax=0",
            "wait_for_input=True",
            "mode='SET'",
            "tweak=False",
            "include_handles=False"
        ],
        "parameter_descriptions": [
            "xmin(int in[-inf,inf],(optional)) – X Min",
            "xmax(int in[-inf,inf],(optional)) – X Max",
            "ymin(int in[-inf,inf],(optional)) – Y Min",
            "ymax(int in[-inf,inf],(optional)) – Y Max",
            "wait_for_input(boolean,(optional)) – Wait for Input",
            "mode(enum in['SET','ADD','SUB'],(optional)) –ModeSETSet – Set a new selection.ADDExtend – Extend existing selection.SUBSubtract – Subtract existing selection.",
            "SETSet – Set a new selection.",
            "ADDExtend – Extend existing selection.",
            "SUBSubtract – Subtract existing selection.",
            "tweak(boolean,(optional)) – Tweak, Operator has been activated using a click-drag event",
            "include_handles(boolean,(optional)) – Select Handles, Select the strips and their handles"
        ]
    },
    {
        "function_id": "bpy.ops.sequencer.select_grouped",
        "signature": "bpy.ops.sequencer.select_grouped(type='TYPE',extend=False,use_active_channel=False)#",
        "description": "Select all strips grouped by various properties",
        "parameters": [
            "type='TYPE'",
            "extend=False",
            "use_active_channel=False"
        ],
        "parameter_descriptions": [
            "type(enum in['TYPE','TYPE_BASIC','TYPE_EFFECT','DATA','EFFECT','EFFECT_LINK','OVERLAP'],(optional)) –TypeTYPEType – Shared strip type.TYPE_BASICGlobal Type – All strips of same basic type (graphical or sound).TYPE_EFFECTEffect Type – Shared strip effect type (if active strip is not an effect one, select all non-effect strips).DATAData – Shared data (scene, image, sound, etc.).EFFECTEffect – Shared effects.EFFECT_LINKEffect/Linked – Other strips affected by the active one (sharing some time, and below or effect-assigned).OVERLAPOverlap – Overlapping time.",
            "TYPEType – Shared strip type.",
            "TYPE_BASICGlobal Type – All strips of same basic type (graphical or sound).",
            "TYPE_EFFECTEffect Type – Shared strip effect type (if active strip is not an effect one, select all non-effect strips).",
            "DATAData – Shared data (scene, image, sound, etc.).",
            "EFFECTEffect – Shared effects.",
            "EFFECT_LINKEffect/Linked – Other strips affected by the active one (sharing some time, and below or effect-assigned).",
            "OVERLAPOverlap – Overlapping time.",
            "extend(boolean,(optional)) – Extend, Extend selection instead of deselecting everything first",
            "use_active_channel(boolean,(optional)) – Same Channel, Only consider strips on the same channel as the active one"
        ]
    },
    {
        "function_id": "bpy.ops.sequencer.select_handle",
        "signature": "bpy.ops.sequencer.select_handle(wait_to_deselect_others=False,mouse_x=0,mouse_y=0)#",
        "description": "Select strip handle",
        "parameters": [
            "wait_to_deselect_others=False",
            "mouse_x=0",
            "mouse_y=0"
        ],
        "parameter_descriptions": [
            "wait_to_deselect_others(boolean,(optional)) – Wait to Deselect Others",
            "mouse_x(int in[-inf,inf],(optional)) – Mouse X",
            "mouse_y(int in[-inf,inf],(optional)) – Mouse Y"
        ]
    },
    {
        "function_id": "bpy.ops.sequencer.select_handles",
        "signature": "bpy.ops.sequencer.select_handles(side='BOTH')#",
        "description": "Select gizmo handles on the sides of the selected strip",
        "parameters": [
            "side='BOTH'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.sequencer.select_less",
        "signature": "bpy.ops.sequencer.select_less()#",
        "description": "Shrink the current selection of adjacent selected strips",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.sequencer.select_linked",
        "signature": "bpy.ops.sequencer.select_linked()#",
        "description": "Select all strips adjacent to the current selection",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.sequencer.select_linked_pick",
        "signature": "bpy.ops.sequencer.select_linked_pick(extend=False)#",
        "description": "Select a chain of linked strips nearest to the mouse pointer",
        "parameters": [
            "extend=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.sequencer.select_more",
        "signature": "bpy.ops.sequencer.select_more()#",
        "description": "Select more strips adjacent to the current selection",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.sequencer.select_side",
        "signature": "bpy.ops.sequencer.select_side(side='BOTH')#",
        "description": "Select strips on the nominated side of the selected strips",
        "parameters": [
            "side='BOTH'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.sequencer.select_side_of_frame",
        "signature": "bpy.ops.sequencer.select_side_of_frame(extend=False,side='LEFT')#",
        "description": "Select strips relative to the current frame",
        "parameters": [
            "extend=False",
            "side='LEFT'"
        ],
        "parameter_descriptions": [
            "extend(boolean,(optional)) – Extend, Extend the selection",
            "side(enum in['LEFT','RIGHT','CURRENT'],(optional)) –SideLEFTLeft – Select to the left of the current frame.RIGHTRight – Select to the right of the current frame.CURRENTCurrent Frame – Select intersecting with the current frame.",
            "LEFTLeft – Select to the left of the current frame.",
            "RIGHTRight – Select to the right of the current frame.",
            "CURRENTCurrent Frame – Select intersecting with the current frame."
        ]
    },
    {
        "function_id": "bpy.ops.sequencer.set_range_to_strips",
        "signature": "bpy.ops.sequencer.set_range_to_strips(preview=False)#",
        "description": "Set the frame range to the selected strips start and end",
        "parameters": [
            "preview=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.sequencer.slip",
        "signature": "bpy.ops.sequencer.slip(offset=0)#",
        "description": "Slip the contents of selected strips",
        "parameters": [
            "offset=0"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.sequencer.snap",
        "signature": "bpy.ops.sequencer.snap(frame=0)#",
        "description": "Frame where selected strips will be snapped",
        "parameters": [
            "frame=0"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.sequencer.sound_strip_add",
        "signature": "bpy.ops.sequencer.sound_strip_add(filepath='',directory='',files=None,check_existing=False,filter_blender=False,filter_backup=False,filter_image=False,filter_movie=False,filter_python=False,filter_font=False,filter_sound=True,filter_text=False,filter_archive=False,filter_btx=False,filter_collada=False,filter_alembic=False,filter_usd=False,filter_obj=False,filter_volume=False,filter_folder=True,filter_blenlib=False,filemode=9,relative_path=True,display_type='DEFAULT',sort_method='',frame_start=0,channel=1,replace_sel=True,overlap=False,overlap_shuffle_override=False,cache=False,mono=False)#",
        "description": "Add a sound strip to the sequencer",
        "parameters": [
            "filepath=''",
            "directory=''",
            "files=None",
            "check_existing=False",
            "filter_blender=False",
            "filter_backup=False",
            "filter_image=False",
            "filter_movie=False",
            "filter_python=False",
            "filter_font=False",
            "filter_sound=True",
            "filter_text=False",
            "filter_archive=False",
            "filter_btx=False",
            "filter_collada=False",
            "filter_alembic=False",
            "filter_usd=False",
            "filter_obj=False",
            "filter_volume=False",
            "filter_folder=True",
            "filter_blenlib=False",
            "filemode=9",
            "relative_path=True",
            "display_type='DEFAULT'",
            "sort_method=''",
            "frame_start=0",
            "channel=1",
            "replace_sel=True",
            "overlap=False",
            "overlap_shuffle_override=False",
            "cache=False",
            "mono=False"
        ],
        "parameter_descriptions": [
            "filepath(string,(optional,never None)) – File Path, Path to file",
            "directory(string,(optional,never None)) – Directory, Directory of the file",
            "files(bpy_prop_collectionofOperatorFileListElement, (optional)) – Files",
            "check_existing(boolean,(optional)) – Check Existing, Check and warn on overwriting existing files",
            "filter_blender(boolean,(optional)) – Filter .blend files",
            "filter_backup(boolean,(optional)) – Filter .blend files",
            "filter_image(boolean,(optional)) – Filter image files",
            "filter_movie(boolean,(optional)) – Filter movie files",
            "filter_python(boolean,(optional)) – Filter Python files",
            "filter_font(boolean,(optional)) – Filter font files",
            "filter_sound(boolean,(optional)) – Filter sound files",
            "filter_text(boolean,(optional)) – Filter text files",
            "filter_archive(boolean,(optional)) – Filter archive files",
            "filter_btx(boolean,(optional)) – Filter btx files",
            "filter_collada(boolean,(optional)) – Filter COLLADA files",
            "filter_alembic(boolean,(optional)) – Filter Alembic files",
            "filter_usd(boolean,(optional)) – Filter USD files",
            "filter_obj(boolean,(optional)) – Filter OBJ files",
            "filter_volume(boolean,(optional)) – Filter OpenVDB volume files",
            "filter_folder(boolean,(optional)) – Filter folders",
            "filter_blenlib(boolean,(optional)) – Filter Blender IDs",
            "filemode(int in[1,9],(optional)) – File Browser Mode, The setting for the file browser mode to load a .blend file, a library or a special file",
            "relative_path(boolean,(optional)) – Relative Path, Select the file relative to the blend file",
            "display_type(enum in['DEFAULT','LIST_VERTICAL','LIST_HORIZONTAL','THUMBNAIL'],(optional)) –Display TypeDEFAULTDefault – Automatically determine display type for files.LIST_VERTICALShort List – Display files as short list.LIST_HORIZONTALLong List – Display files as a detailed list.THUMBNAILThumbnails – Display files as thumbnails.",
            "DEFAULTDefault – Automatically determine display type for files.",
            "LIST_VERTICALShort List – Display files as short list.",
            "LIST_HORIZONTALLong List – Display files as a detailed list.",
            "THUMBNAILThumbnails – Display files as thumbnails.",
            "sort_method(enum in['DEFAULT','FILE_SORT_ALPHA','FILE_SORT_EXTENSION','FILE_SORT_TIME','FILE_SORT_SIZE'],(optional)) –File sorting modeDEFAULTDefault – Automatically determine sort method for files.FILE_SORT_ALPHAName – Sort the file list alphabetically.FILE_SORT_EXTENSIONExtension – Sort the file list by extension/type.FILE_SORT_TIMEModified Date – Sort files by modification time.FILE_SORT_SIZESize – Sort files by size.",
            "DEFAULTDefault – Automatically determine sort method for files.",
            "FILE_SORT_ALPHAName – Sort the file list alphabetically.",
            "FILE_SORT_EXTENSIONExtension – Sort the file list by extension/type.",
            "FILE_SORT_TIMEModified Date – Sort files by modification time.",
            "FILE_SORT_SIZESize – Sort files by size.",
            "frame_start(int in[-inf,inf],(optional)) – Start Frame, Start frame of the sequence strip",
            "channel(int in[1,128],(optional)) – Channel, Channel to place this strip into",
            "replace_sel(boolean,(optional)) – Replace Selection, Replace the current selection",
            "overlap(boolean,(optional)) – Allow Overlap, Don’t correct overlap on new sequence strips",
            "overlap_shuffle_override(boolean,(optional)) – Override Overlap Shuffle Behavior, Use the overlap_mode tool settings to determine how to shuffle overlapping strips",
            "cache(boolean,(optional)) – Cache, Cache the sound in memory",
            "mono(boolean,(optional)) – Mono, Merge all the sound’s channels into one"
        ]
    },
    {
        "function_id": "bpy.ops.sequencer.split",
        "signature": "bpy.ops.sequencer.split(frame=0,channel=0,type='SOFT',use_cursor_position=False,side='MOUSE',ignore_selection=False)#",
        "description": "Split the selected strips in two",
        "parameters": [
            "frame=0",
            "channel=0",
            "type='SOFT'",
            "use_cursor_position=False",
            "side='MOUSE'",
            "ignore_selection=False"
        ],
        "parameter_descriptions": [
            "frame(int in[-inf,inf],(optional)) – Frame, Frame where selected strips will be split",
            "channel(int in[-inf,inf],(optional)) – Channel, Channel in which strip will be cut",
            "type(enum in['SOFT','HARD'],(optional)) – Type, The type of split operation to perform on strips",
            "use_cursor_position(boolean,(optional)) – Use Cursor Position, Split at position of the cursor instead of current frame",
            "side(enum in['MOUSE','LEFT','RIGHT','BOTH','NO_CHANGE'],(optional)) – Side, The side that remains selected after splitting",
            "ignore_selection(boolean,(optional)) – Ignore Selection, Make cut even if strip is not selected preserving selection state after cut"
        ]
    },
    {
        "function_id": "bpy.ops.sequencer.split_multicam",
        "signature": "bpy.ops.sequencer.split_multicam(camera=1)#",
        "description": "Split multicam strip and select camera",
        "parameters": [
            "camera=1"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.sequencer.strip_color_tag_set",
        "signature": "bpy.ops.sequencer.strip_color_tag_set(color='NONE')#",
        "description": "Set a color tag for the selected strips",
        "parameters": [
            "color='NONE'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.sequencer.strip_jump",
        "signature": "bpy.ops.sequencer.strip_jump(next=True,center=True)#",
        "description": "Move frame to previous edit point",
        "parameters": [
            "next=True",
            "center=True"
        ],
        "parameter_descriptions": [
            "next(boolean,(optional)) – Next Strip",
            "center(boolean,(optional)) – Use Strip Center"
        ]
    },
    {
        "function_id": "bpy.ops.sequencer.strip_modifier_add",
        "signature": "bpy.ops.sequencer.strip_modifier_add(type='')#",
        "description": "Add a modifier to the strip",
        "parameters": [
            "type=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.sequencer.strip_modifier_copy",
        "signature": "bpy.ops.sequencer.strip_modifier_copy(type='REPLACE')#",
        "description": "Copy modifiers of the active strip to all selected strips",
        "parameters": [
            "type='REPLACE'"
        ],
        "parameter_descriptions": [
            "REPLACEReplace – Replace modifiers in destination.",
            "APPENDAppend – Append active modifiers to selected strips."
        ]
    },
    {
        "function_id": "bpy.ops.sequencer.strip_modifier_equalizer_redefine",
        "signature": "bpy.ops.sequencer.strip_modifier_equalizer_redefine(graphs='SIMPLE',name='Name')#",
        "description": "Redefine equalizer graphs",
        "parameters": [
            "graphs='SIMPLE'",
            "name='Name'"
        ],
        "parameter_descriptions": [
            "graphs(enum in['SIMPLE','DOUBLE','TRIPLE'],(optional)) –Graphs, Number of graphsSIMPLEUnique – One unique graphical definition.DOUBLEDouble – Graphical definition in 2 sections.TRIPLETriplet – Graphical definition in 3 sections.",
            "SIMPLEUnique – One unique graphical definition.",
            "DOUBLEDouble – Graphical definition in 2 sections.",
            "TRIPLETriplet – Graphical definition in 3 sections.",
            "name(string,(optional,never None)) – Name, Name of modifier to redefine"
        ]
    },
    {
        "function_id": "bpy.ops.sequencer.strip_modifier_move",
        "signature": "bpy.ops.sequencer.strip_modifier_move(name='Name',direction='UP')#",
        "description": "Move modifier up and down in the stack",
        "parameters": [
            "name='Name'",
            "direction='UP'"
        ],
        "parameter_descriptions": [
            "name(string,(optional,never None)) – Name, Name of modifier to remove",
            "direction(enum in['UP','DOWN'],(optional)) –TypeUPUp – Move modifier up in the stack.DOWNDown – Move modifier down in the stack.",
            "UPUp – Move modifier up in the stack.",
            "DOWNDown – Move modifier down in the stack."
        ]
    },
    {
        "function_id": "bpy.ops.sequencer.strip_modifier_remove",
        "signature": "bpy.ops.sequencer.strip_modifier_remove(name='Name')#",
        "description": "Remove a modifier from the strip",
        "parameters": [
            "name='Name'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.sequencer.strip_transform_clear",
        "signature": "bpy.ops.sequencer.strip_transform_clear(property='ALL')#",
        "description": "Reset image transformation to default value",
        "parameters": [
            "property='ALL'"
        ],
        "parameter_descriptions": [
            "POSITIONPosition – Reset strip transform location.",
            "SCALEScale – Reset strip transform scale.",
            "ROTATIONRotation – Reset strip transform rotation.",
            "ALLAll – Reset strip transform location, scale and rotation."
        ]
    },
    {
        "function_id": "bpy.ops.sequencer.strip_transform_fit",
        "signature": "bpy.ops.sequencer.strip_transform_fit(fit_method='FIT')#",
        "description": "Undocumented, considercontributing.",
        "parameters": [
            "fit_method='FIT'"
        ],
        "parameter_descriptions": [
            "FITScale to Fit – Scale image so fits in preview.",
            "FILLScale to Fill – Scale image so it fills preview completely.",
            "STRETCHStretch to Fill – Stretch image so it fills preview."
        ]
    },
    {
        "function_id": "bpy.ops.sequencer.swap",
        "signature": "bpy.ops.sequencer.swap(side='RIGHT')#",
        "description": "Swap active strip with strip to the right or left",
        "parameters": [
            "side='RIGHT'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.sequencer.swap_data",
        "signature": "bpy.ops.sequencer.swap_data()#",
        "description": "Swap 2 sequencer strips",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.sequencer.swap_inputs",
        "signature": "bpy.ops.sequencer.swap_inputs()#",
        "description": "Swap the first two inputs for the effect strip",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.sequencer.unlock",
        "signature": "bpy.ops.sequencer.unlock()#",
        "description": "Unlock strips so they can be transformed",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.sequencer.unmute",
        "signature": "bpy.ops.sequencer.unmute(unselected=False)#",
        "description": "Unmute (un)selected strips",
        "parameters": [
            "unselected=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.sequencer.view_all",
        "signature": "bpy.ops.sequencer.view_all()#",
        "description": "View all the strips in the sequencer",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.sequencer.view_all_preview",
        "signature": "bpy.ops.sequencer.view_all_preview()#",
        "description": "Zoom preview to fit in the area",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.sequencer.view_frame",
        "signature": "bpy.ops.sequencer.view_frame()#",
        "description": "Move the view to the current frame",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.sequencer.view_ghost_border",
        "signature": "bpy.ops.sequencer.view_ghost_border(xmin=0,xmax=0,ymin=0,ymax=0,wait_for_input=True)#",
        "description": "Set the boundaries of the border used for offset view",
        "parameters": [
            "xmin=0",
            "xmax=0",
            "ymin=0",
            "ymax=0",
            "wait_for_input=True"
        ],
        "parameter_descriptions": [
            "xmin(int in[-inf,inf],(optional)) – X Min",
            "xmax(int in[-inf,inf],(optional)) – X Max",
            "ymin(int in[-inf,inf],(optional)) – Y Min",
            "ymax(int in[-inf,inf],(optional)) – Y Max",
            "wait_for_input(boolean,(optional)) – Wait for Input"
        ]
    },
    {
        "function_id": "bpy.ops.sequencer.view_selected",
        "signature": "bpy.ops.sequencer.view_selected()#",
        "description": "Zoom the sequencer on the selected strips",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.sequencer.view_zoom_ratio",
        "signature": "bpy.ops.sequencer.view_zoom_ratio(ratio=1.0)#",
        "description": "Change zoom ratio of sequencer preview",
        "parameters": [
            "ratio=1.0"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy_extras.keyconfig_utils.addon_keymap_register",
        "signature": "bpy_extras.keyconfig_utils.addon_keymap_register(keymap_data)#",
        "description": "Register a set of keymaps for addons using a list of keymaps.",
        "parameters": [
            "keymap_data"
        ]
    },
    {
        "function_id": "bpy_extras.keyconfig_utils.addon_keymap_unregister",
        "signature": "bpy_extras.keyconfig_utils.addon_keymap_unregister(keymap_data)#",
        "description": "Unregister a set of keymaps for addons.",
        "parameters": [
            "keymap_data"
        ]
    },
    {
        "function_id": "bpy_extras.keyconfig_utils.keyconfig_test",
        "signature": "bpy_extras.keyconfig_utils.keyconfig_test(kc)#",
        "parameters": [
            "kc"
        ]
    },
    {
        "function_id": "freestyle.utils.getCurrentScene",
        "signature": "freestyle.utils.getCurrentScene()#",
        "description": "Returns the current scene.",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "freestyle.utils.integrate",
        "signature": "freestyle.utils.integrate(func,it,it_end,integration_type)#",
        "description": "Returns a single value from a set of values evaluated at each 0D\nelement of this 1D element.",
        "parameters": [
            "func",
            "it",
            "it_end",
            "integration_type"
        ],
        "parameter_descriptions": [
            "func(UnaryFunction0D) – The UnaryFunction0D used to compute a value at each\nInterface0D.",
            "it(Interface0DIterator) – The Interface0DIterator used to iterate over the 0D\nelements of this 1D element. The integration will occur over\nthe 0D elements starting from the one pointed by it.",
            "it_end(Interface0DIterator) – The Interface0DIterator pointing the end of the 0D\nelements of the 1D element.",
            "integration_type(IntegrationType) – The integration method used to compute a\nsingle value from a set of values."
        ]
    },
    {
        "function_id": "freestyle.utils.angle_x_normal",
        "signature": "freestyle.utils.angle_x_normal(it:Interface0DIterator)#",
        "description": "unsigned angle between a Point’s normal and the X axis, in radians",
        "parameters": [
            "it:Interface0DIterator"
        ]
    },
    {
        "function_id": "freestyle.utils.bound",
        "signature": "freestyle.utils.bound(lower,x,higher)#",
        "description": "return min(max(x, lower), higher)",
        "parameters": [
            "lower",
            "x",
            "higher"
        ]
    },
    {
        "function_id": "freestyle.utils.bounding_box",
        "signature": "freestyle.utils.bounding_box(stroke)#",
        "description": "Returns the maximum and minimum coordinates (the bounding box) of the stroke’s vertices",
        "parameters": [
            "stroke"
        ]
    },
    {
        "function_id": "freestyle.utils.curvature_from_stroke_vertex",
        "signature": "freestyle.utils.curvature_from_stroke_vertex(svert)#",
        "description": "The result is None or in the range [-inf, inf]",
        "parameters": [
            "svert"
        ]
    },
    {
        "function_id": "freestyle.utils.find_matching_vertex",
        "signature": "freestyle.utils.find_matching_vertex(id,it)#",
        "description": "Finds the matching vertex, or returns None.",
        "parameters": [
            "id",
            "it"
        ]
    },
    {
        "function_id": "freestyle.utils.get_chain_length",
        "signature": "freestyle.utils.get_chain_length(ve,orientation)#",
        "description": "Returns the 2d length of a given ViewEdge.",
        "parameters": [
            "ve",
            "orientation"
        ]
    },
    {
        "function_id": "freestyle.utils.get_object_name",
        "signature": "freestyle.utils.get_object_name(stroke)#",
        "description": "Returns the name of the object that this stroke is drawn on.",
        "parameters": [
            "stroke"
        ]
    },
    {
        "function_id": "freestyle.utils.get_strokes",
        "signature": "freestyle.utils.get_strokes()#",
        "description": "Get all strokes that are currently available",
        "parameters": []
    },
    {
        "function_id": "freestyle.utils.get_test_stroke",
        "signature": "freestyle.utils.get_test_stroke()#",
        "description": "Returns a static stroke object for testing",
        "parameters": []
    },
    {
        "function_id": "freestyle.utils.is_poly_clockwise",
        "signature": "freestyle.utils.is_poly_clockwise(stroke)#",
        "description": "True if the stroke is orientated in a clockwise way, False otherwise",
        "parameters": [
            "stroke"
        ]
    },
    {
        "function_id": "freestyle.utils.iter_distance_along_stroke",
        "signature": "freestyle.utils.iter_distance_along_stroke(stroke)#",
        "description": "Yields the absolute distance along the stroke up to the current vertex.",
        "parameters": [
            "stroke"
        ]
    },
    {
        "function_id": "freestyle.utils.iter_distance_from_camera",
        "signature": "freestyle.utils.iter_distance_from_camera(stroke,range_min,range_max,normfac)#",
        "description": "Yields the distance to the camera relative to the maximum\npossible distance for every stroke vertex, constrained by\ngiven minimum and maximum values.",
        "parameters": [
            "stroke",
            "range_min",
            "range_max",
            "normfac"
        ]
    },
    {
        "function_id": "freestyle.utils.iter_distance_from_object",
        "signature": "freestyle.utils.iter_distance_from_object(stroke,location,range_min,range_max,normfac)#",
        "description": "yields the distance to the given object relative to the maximum\npossible distance for every stroke vertex, constrained by\ngiven minimum and maximum values.",
        "parameters": [
            "stroke",
            "location",
            "range_min",
            "range_max",
            "normfac"
        ]
    },
    {
        "function_id": "freestyle.utils.iter_material_value",
        "signature": "freestyle.utils.iter_material_value(stroke,func,attribute)#",
        "description": "Yields a specific material attribute from the vertex’ underlying material.",
        "parameters": [
            "stroke",
            "func",
            "attribute"
        ]
    },
    {
        "function_id": "freestyle.utils.iter_t2d_along_stroke",
        "signature": "freestyle.utils.iter_t2d_along_stroke(stroke)#",
        "description": "Yields the progress along the stroke.",
        "parameters": [
            "stroke"
        ]
    },
    {
        "function_id": "freestyle.utils.material_from_fedge",
        "signature": "freestyle.utils.material_from_fedge(fe)#",
        "description": "get the diffuse RGBA color from an FEdge",
        "parameters": [
            "fe"
        ]
    },
    {
        "function_id": "freestyle.utils.normal_at_I0D",
        "signature": "freestyle.utils.normal_at_I0D(it:Interface0DIterator)→Vector#",
        "description": "function uses the actual data instead of underlying Fedge objects.",
        "parameters": [
            "it:Interface0DIterator"
        ]
    },
    {
        "function_id": "freestyle.utils.pairwise",
        "signature": "freestyle.utils.pairwise(iterable,types={<class'StrokeVertexIterator'>,<class'Stroke'>})#",
        "description": "Yields a tuple containing the previous and current object",
        "parameters": [
            "iterable",
            "types={<class'StrokeVertexIterator'>",
            "<class'Stroke'>}"
        ]
    },
    {
        "function_id": "freestyle.utils.rgb_to_bw",
        "signature": "freestyle.utils.rgb_to_bw(r,g,b)#",
        "description": "Method to convert rgb to a bw intensity value.",
        "parameters": [
            "r",
            "g",
            "b"
        ]
    },
    {
        "function_id": "freestyle.utils.simplify",
        "signature": "freestyle.utils.simplify(points,tolerance)#",
        "description": "Simplifies a set of points",
        "parameters": [
            "points",
            "tolerance"
        ]
    },
    {
        "function_id": "freestyle.utils.stroke_curvature",
        "signature": "freestyle.utils.stroke_curvature(it)#",
        "description": "Compute the 2D curvature at the stroke vertex pointed by the iterator ‘it’.\nK = 1 / R\nwhere R is the radius of the circle going through the current vertex and its neighbors",
        "parameters": [
            "it"
        ]
    },
    {
        "function_id": "freestyle.utils.stroke_normal",
        "signature": "freestyle.utils.stroke_normal(stroke)#",
        "description": "Compute the 2D normal at the stroke vertex pointed by the iterator\n‘it’.  It is noted that Normal2DF0D computes normals based on\nunderlying FEdges instead, which is inappropriate for strokes when\nthey have already been modified by stroke geometry modifiers.",
        "parameters": [
            "stroke"
        ]
    },
    {
        "function_id": "freestyle.utils.tripplewise",
        "signature": "freestyle.utils.tripplewise(iterable)#",
        "description": "Yields a tuple containing the current object and its immediate neighbors",
        "parameters": [
            "iterable"
        ]
    },
    {
        "function_id": "bpy_extras.mesh_utils.mesh_linked_uv_islands",
        "signature": "bpy_extras.mesh_utils.mesh_linked_uv_islands(mesh)#",
        "description": "Returns lists of polygon indices connected by UV islands.",
        "parameters": [
            "mesh"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy_extras.mesh_utils.mesh_linked_triangles",
        "signature": "bpy_extras.mesh_utils.mesh_linked_triangles(mesh)#",
        "description": "Splits the mesh into connected triangles, use this for separating cubes from\nother mesh elements within 1 mesh datablock.",
        "parameters": [
            "mesh"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy_extras.mesh_utils.edge_face_count_dict",
        "signature": "bpy_extras.mesh_utils.edge_face_count_dict(mesh)#",
        "description": "dict of edge keys with their value set to the number of\nfaces using each edge.",
        "parameters": [
            "mesh"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy_extras.mesh_utils.edge_face_count",
        "signature": "bpy_extras.mesh_utils.edge_face_count(mesh)#",
        "description": "list face users for each item in mesh.edges.",
        "parameters": [
            "mesh"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy_extras.mesh_utils.edge_loops_from_edges",
        "signature": "bpy_extras.mesh_utils.edge_loops_from_edges(mesh,edges=None)#",
        "description": "Edge loops defined by edges",
        "parameters": [
            "mesh",
            "edges=None"
        ]
    },
    {
        "function_id": "bpy_extras.mesh_utils.ngon_tessellate",
        "signature": "bpy_extras.mesh_utils.ngon_tessellate(from_data,indices,fix_loops=True,debug_print=True)#",
        "description": "Takes a poly-line of indices (ngon) and returns a list of face\nindex lists. Designed to be used for importers that need indices for an\nngon to create from existing verts.",
        "parameters": [
            "from_data",
            "indices",
            "fix_loops=True",
            "debug_print=True"
        ],
        "parameter_descriptions": [
            "from_data(list orbpy.types.Mesh) – either a mesh, or a list/tuple of vectors.",
            "indices(list) – a list of indices to use this list\nis the ordered closed poly-line\nto fill, and can be a subset of the data given.",
            "fix_loops(bool) – If this is enabled poly-lines\nthat use loops to make multiple\npoly-lines are dealt with correctly."
        ]
    },
    {
        "function_id": "bpy_extras.mesh_utils.triangle_random_points",
        "signature": "bpy_extras.mesh_utils.triangle_random_points(num_points,loop_triangles)#",
        "description": "Generates a list of random points over mesh loop triangles.",
        "parameters": [
            "num_points",
            "loop_triangles"
        ],
        "parameter_descriptions": [
            "num_points– the number of random points to generate on each triangle.",
            "loop_triangles(bpy.types.MeshLoopTriangle, sequence) – list of the triangles to generate points on."
        ]
    },
    {
        "function_id": "mathutils.Color.copy",
        "signature": "copy()#",
        "description": "Returns a copy of this color.",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "mathutils.Color.freeze",
        "signature": "freeze()#",
        "description": "Make this object immutable.",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "mathutils.Color.from_aces_to_scene_linear",
        "signature": "from_aces_to_scene_linear()#",
        "description": "Convert from ACES2065-1 linear to scene linear color space.",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "mathutils.Color.from_rec709_linear_to_scene_linear",
        "signature": "from_rec709_linear_to_scene_linear()#",
        "description": "Convert from Rec.709 linear color space to scene linear color space.",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "mathutils.Color.from_scene_linear_to_aces",
        "signature": "from_scene_linear_to_aces()#",
        "description": "Convert from scene linear to ACES2065-1 linear color space.",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "mathutils.Color.from_scene_linear_to_rec709_linear",
        "signature": "from_scene_linear_to_rec709_linear()#",
        "description": "Convert from scene linear to Rec.709 linear color space.",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "mathutils.Color.from_scene_linear_to_srgb",
        "signature": "from_scene_linear_to_srgb()#",
        "description": "Convert from scene linear to sRGB color space.",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "mathutils.Color.from_scene_linear_to_xyz_d65",
        "signature": "from_scene_linear_to_xyz_d65()#",
        "description": "Convert from scene linear to CIE XYZ (Illuminant D65) color space.",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "mathutils.Color.from_srgb_to_scene_linear",
        "signature": "from_srgb_to_scene_linear()#",
        "description": "Convert from sRGB to scene linear color space.",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "mathutils.Color.from_xyz_d65_to_scene_linear",
        "signature": "from_xyz_d65_to_scene_linear()#",
        "description": "Convert from CIE XYZ (Illuminant D65) to scene linear color space.",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "mathutils.Euler.copy",
        "signature": "copy()#",
        "description": "Returns a copy of this euler.",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "mathutils.Euler.freeze",
        "signature": "freeze()#",
        "description": "Make this object immutable.",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "mathutils.Matrix.freeze",
        "signature": "freeze()#",
        "description": "Make this object immutable.",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "mathutils.Matrix.lerp",
        "signature": "lerp(other,factor)#",
        "description": "Returns the interpolation of two matrices. Uses polar decomposition, see   “Matrix Animation and Polar Decomposition”, Shoemake and Duff, 1992.",
        "parameters": [
            "other",
            "factor"
        ],
        "parameter_descriptions": [
            "other(Matrix) – value to interpolate with.",
            "factor(float) – The interpolation value in [0.0, 1.0]."
        ]
    },
    {
        "function_id": "mathutils.Quaternion.conjugate",
        "signature": "conjugate()#",
        "description": "Set the quaternion to its conjugate (negate x, y, z).",
        "parameters": []
    },
    {
        "function_id": "mathutils.Quaternion.conjugated",
        "signature": "conjugated()#",
        "description": "Return a new conjugated quaternion.",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "mathutils.Quaternion.copy",
        "signature": "copy()#",
        "description": "Returns a copy of this quaternion.",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "mathutils.Quaternion.freeze",
        "signature": "freeze()#",
        "description": "Make this object immutable.",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "mathutils.Quaternion.identity",
        "signature": "identity()#",
        "description": "Set the quaternion to an identity quaternion.",
        "parameters": []
    },
    {
        "function_id": "mathutils.Quaternion.invert",
        "signature": "invert()#",
        "description": "Set the quaternion to its inverse.",
        "parameters": []
    },
    {
        "function_id": "mathutils.Quaternion.inverted",
        "signature": "inverted()#",
        "description": "Return a new, inverted quaternion.",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "mathutils.Quaternion.negate",
        "signature": "negate()#",
        "description": "Set the quaternion to its negative.",
        "parameters": []
    },
    {
        "function_id": "mathutils.Quaternion.normalize",
        "signature": "normalize()#",
        "description": "Normalize the quaternion.",
        "parameters": []
    },
    {
        "function_id": "mathutils.Quaternion.normalized",
        "signature": "normalized()#",
        "description": "Return a new normalized quaternion.",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "mathutils.Quaternion.rotation_difference",
        "signature": "rotation_difference(other)#",
        "description": "Returns a quaternion representing the rotational difference.",
        "parameters": [
            "other"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "mathutils.Quaternion.slerp",
        "signature": "slerp(other,factor)#",
        "description": "Returns the interpolation of two quaternions.",
        "parameters": [
            "other",
            "factor"
        ],
        "parameter_descriptions": [
            "other(Quaternion) – value to interpolate with.",
            "factor(float) – The interpolation value in [0.0, 1.0]."
        ]
    },
    {
        "function_id": "mathutils.Vector.angle",
        "signature": "angle(other,fallback=None)#",
        "description": "Return the angle between two vectors.",
        "parameters": [
            "other",
            "fallback=None"
        ],
        "parameter_descriptions": [
            "other(Vector) – another vector to compare the angle with",
            "fallback(any) – return this when the angle can’t be calculated (zero length vector),\n(instead of raising aValueError)."
        ]
    },
    {
        "function_id": "mathutils.Vector.angle_signed",
        "signature": "angle_signed(other,fallback)#",
        "description": "Return the signed angle between two 2D vectors (clockwise is positive).",
        "parameters": [
            "other",
            "fallback"
        ],
        "parameter_descriptions": [
            "other(Vector) – another vector to compare the angle with",
            "fallback(any) – return this when the angle can’t be calculated (zero length vector),\n(instead of raising aValueError)."
        ]
    },
    {
        "function_id": "mathutils.Vector.copy",
        "signature": "copy()#",
        "description": "Returns a copy of this vector.",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "mathutils.Vector.freeze",
        "signature": "freeze()#",
        "description": "Make this object immutable.",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "mathutils.Vector.lerp",
        "signature": "lerp(other,factor)#",
        "description": "Returns the interpolation of two vectors.",
        "parameters": [
            "other",
            "factor"
        ],
        "parameter_descriptions": [
            "other(Vector) – value to interpolate with.",
            "factor(float) – The interpolation value in [0.0, 1.0]."
        ]
    },
    {
        "function_id": "mathutils.Vector.project",
        "signature": "project(other)#",
        "description": "Return the projection of this vector onto theother.",
        "parameters": [
            "other"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "mathutils.Vector.rotate",
        "signature": "rotate(other)#",
        "description": "Rotate the vector by a rotation value.",
        "parameters": [
            "other"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "mathutils.Vector.rotation_difference",
        "signature": "rotation_difference(other)#",
        "description": "Returns a quaternion representing the rotational difference between this\nvector and another.",
        "parameters": [
            "other"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "mathutils.Vector.slerp",
        "signature": "slerp(other,factor,fallback=None)#",
        "description": "Returns the interpolation of two non-zero vectors (spherical coordinates).",
        "parameters": [
            "other",
            "factor",
            "fallback=None"
        ],
        "parameter_descriptions": [
            "other(Vector) – value to interpolate with.",
            "factor(float) – The interpolation value typically in [0.0, 1.0].",
            "fallback(any) – return this when the vector can’t be calculated (zero length vector or direct opposites),\n(instead of raising aValueError)."
        ]
    },
    {
        "function_id": "bpy.utils.previews.new",
        "signature": "bpy.utils.previews.new()#",
        "description": "a new preview collection.",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.utils.previews.remove",
        "signature": "bpy.utils.previews.remove(pcoll)#",
        "description": "Remove the specified previews collection.",
        "parameters": [
            "pcoll"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy_extras.object_utils.add_object_align_init",
        "signature": "bpy_extras.object_utils.add_object_align_init(context,operator)#",
        "description": "Return a matrix using the operator settings and view context.",
        "parameters": [
            "context",
            "operator"
        ],
        "parameter_descriptions": [
            "context(bpy.types.Context) – The context to use.",
            "operator(bpy.types.Operator) – The operator, checked for location and rotation properties."
        ]
    },
    {
        "function_id": "bpy_extras.object_utils.object_data_add",
        "signature": "bpy_extras.object_utils.object_data_add(context,obdata,operator=None,name=None)#",
        "description": "Add an object using the view context and preference to initialize the\nlocation, rotation and layer.",
        "parameters": [
            "context",
            "obdata",
            "operator=None",
            "name=None"
        ],
        "parameter_descriptions": [
            "context(bpy.types.Context) – The context to use.",
            "obdata(valid object data typeorNone.) – the data used for the new object.",
            "operator(bpy.types.Operator) – The operator, checked for location and rotation properties.",
            "name(string) – Optional name"
        ]
    },
    {
        "function_id": "bpy_extras.object_utils.object_add_grid_scale",
        "signature": "bpy_extras.object_utils.object_add_grid_scale(context)#",
        "description": "Return scale which should be applied on object\ndata to align it to grid scale",
        "parameters": [
            "context"
        ]
    },
    {
        "function_id": "bpy_extras.object_utils.object_add_grid_scale_apply_operator",
        "signature": "bpy_extras.object_utils.object_add_grid_scale_apply_operator(operator,context)#",
        "description": "Scale an operators distance values by the grid size.",
        "parameters": [
            "operator",
            "context"
        ]
    },
    {
        "function_id": "bpy_extras.object_utils.world_to_camera_view",
        "signature": "bpy_extras.object_utils.world_to_camera_view(scene,obj,coord)#",
        "description": "Returns the camera space coords for a 3d point.\n(also known as: normalized device coordinates - NDC).",
        "parameters": [
            "scene",
            "obj",
            "coord"
        ],
        "parameter_descriptions": [
            "scene(bpy.types.Scene) – Scene to use for frame size.",
            "obj(bpy.types.Object) – Camera object.",
            "coord(mathutils.Vector) – World space location."
        ]
    },
    {
        "function_id": "bpy_extras.object_utils.object_report_if_active_shape_key_is_locked",
        "signature": "bpy_extras.object_utils.object_report_if_active_shape_key_is_locked(obj,operator)#",
        "description": "Checks if the active shape key of the specified object is locked, and reports an error if so.",
        "parameters": [
            "obj",
            "operator"
        ],
        "parameter_descriptions": [
            "obj(bpy.types.Object) – Object to check.",
            "operator(bpy.types.Operator) – Currently running operator to report the error through. Use None to suppress emitting the message."
        ]
    },
    {
        "function_id": "bpy.ops.image.add_render_slot",
        "signature": "bpy.ops.image.add_render_slot()#",
        "description": "Add a new render slot",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.image.change_frame",
        "signature": "bpy.ops.image.change_frame(frame=0)#",
        "description": "Interactively change the current frame number",
        "parameters": [
            "frame=0"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.image.clear_render_border",
        "signature": "bpy.ops.image.clear_render_border()#",
        "description": "Clear the boundaries of the render region and disable render region",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.image.clear_render_slot",
        "signature": "bpy.ops.image.clear_render_slot()#",
        "description": "Clear the currently selected render slot",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.image.clipboard_copy",
        "signature": "bpy.ops.image.clipboard_copy()#",
        "description": "Copy the image to the clipboard",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.image.clipboard_paste",
        "signature": "bpy.ops.image.clipboard_paste()#",
        "description": "Paste new image from the clipboard",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.image.convert_to_mesh_plane",
        "signature": "bpy.ops.image.convert_to_mesh_plane(interpolation='Linear',extension='CLIP',alpha_mode='STRAIGHT',use_auto_refresh=True,relative=True,shader='PRINCIPLED',emit_strength=1.0,use_transparency=True,render_method='DITHERED',use_backface_culling=False,show_transparent_back=True,overwrite_material=True,name_from='OBJECT',delete_ref=True)#",
        "description": "Convert selected reference images to textured mesh plane",
        "parameters": [
            "interpolation='Linear'",
            "extension='CLIP'",
            "alpha_mode='STRAIGHT'",
            "use_auto_refresh=True",
            "relative=True",
            "shader='PRINCIPLED'",
            "emit_strength=1.0",
            "use_transparency=True",
            "render_method='DITHERED'",
            "use_backface_culling=False",
            "show_transparent_back=True",
            "overwrite_material=True",
            "name_from='OBJECT'",
            "delete_ref=True"
        ],
        "parameter_descriptions": [
            "interpolation(enum in['Linear','Closest','Cubic','Smart'],(optional)) –Interpolation, Texture interpolationLinearLinear – Linear interpolation.ClosestClosest – No interpolation (sample closest texel).CubicCubic – Cubic interpolation.SmartSmart – Bicubic when magnifying, else bilinear (OSL only).",
            "LinearLinear – Linear interpolation.",
            "ClosestClosest – No interpolation (sample closest texel).",
            "CubicCubic – Cubic interpolation.",
            "SmartSmart – Bicubic when magnifying, else bilinear (OSL only).",
            "extension(enum in['CLIP','EXTEND','REPEAT'],(optional)) –Extension, How the image is extrapolated past its original boundsCLIPClip – Clip to image size and set exterior pixels as transparent.EXTENDExtend – Extend by repeating edge pixels of the image.REPEATRepeat – Cause the image to repeat horizontally and vertically.",
            "CLIPClip – Clip to image size and set exterior pixels as transparent.",
            "EXTENDExtend – Extend by repeating edge pixels of the image.",
            "REPEATRepeat – Cause the image to repeat horizontally and vertically.",
            "alpha_mode(enum in['STRAIGHT','PREMUL','CHANNEL_PACKED','NONE'],(optional)) –Alpha Mode, Representation of alpha in the image file, to convert to and from when saving and loading the imageSTRAIGHTStraight – Store RGB and alpha channels separately with alpha acting as a mask, also known as unassociated alpha. Commonly used by image editing applications and file formats like PNG.PREMULPremultiplied – Store RGB channels with alpha multiplied in, also known as associated alpha. The natural format for renders and used by file formats like OpenEXR.CHANNEL_PACKEDChannel Packed – Different images are packed in the RGB and alpha channels, and they should not affect each other. Channel packing is commonly used by game engines to save memory.NONENone – Ignore alpha channel from the file and make image fully opaque.",
            "STRAIGHTStraight – Store RGB and alpha channels separately with alpha acting as a mask, also known as unassociated alpha. Commonly used by image editing applications and file formats like PNG.",
            "PREMULPremultiplied – Store RGB channels with alpha multiplied in, also known as associated alpha. The natural format for renders and used by file formats like OpenEXR.",
            "CHANNEL_PACKEDChannel Packed – Different images are packed in the RGB and alpha channels, and they should not affect each other. Channel packing is commonly used by game engines to save memory.",
            "NONENone – Ignore alpha channel from the file and make image fully opaque.",
            "use_auto_refresh(boolean,(optional)) – Auto Refresh, Always refresh image on frame changes",
            "relative(boolean,(optional)) – Relative Paths, Use relative file paths",
            "shader(enum in['PRINCIPLED','SHADELESS','EMISSION'],(optional)) –Shader, Node shader to usePRINCIPLEDPrincipled – Principled shader.SHADELESSShadeless – Only visible to camera and reflections.EMISSIONEmission – Emission shader.",
            "PRINCIPLEDPrincipled – Principled shader.",
            "SHADELESSShadeless – Only visible to camera and reflections.",
            "EMISSIONEmission – Emission shader.",
            "emit_strength(float in[0,inf],(optional)) – Emission Strength, Strength of emission",
            "use_transparency(boolean,(optional)) – Use Alpha, Use alpha channel for transparency",
            "render_method(enum in['DITHERED','BLENDED'],(optional)) –Render MethodDITHEREDDithered – Allows for grayscale hashed transparency, and compatible with render passes and raytracing. Also known as deferred rendering..BLENDEDBlended – Allows for colored transparency, but incompatible with render passes and raytracing. Also known as forward rendering..",
            "DITHEREDDithered – Allows for grayscale hashed transparency, and compatible with render passes and raytracing. Also known as deferred rendering..",
            "BLENDEDBlended – Allows for colored transparency, but incompatible with render passes and raytracing. Also known as forward rendering..",
            "use_backface_culling(boolean,(optional)) – Backface Culling, Use backface culling to hide the back side of faces",
            "show_transparent_back(boolean,(optional)) – Show Backface, Render multiple transparent layers (may introduce transparency sorting problems)",
            "overwrite_material(boolean,(optional)) – Overwrite Material, Overwrite existing material with the same name",
            "name_from(enum in['OBJECT','IMAGE'],(optional)) –Name After, Name for new mesh object and materialOBJECTSource Object – Name after object source with a suffix.IMAGESource Image – name from laoded image.",
            "OBJECTSource Object – Name after object source with a suffix.",
            "IMAGESource Image – name from laoded image.",
            "delete_ref(boolean,(optional)) – Delete Reference Object, Delete empty image object once mesh plane is created"
        ]
    },
    {
        "function_id": "bpy.ops.image.curves_point_set",
        "signature": "bpy.ops.image.curves_point_set(point='BLACK_POINT',size=1)#",
        "description": "Set black point or white point for curves",
        "parameters": [
            "point='BLACK_POINT'",
            "size=1"
        ],
        "parameter_descriptions": [
            "point(enum in['BLACK_POINT','WHITE_POINT'],(optional)) – Point, Set black point or white point for curves",
            "size(int in[1,128],(optional)) – Sample Size"
        ]
    },
    {
        "function_id": "bpy.ops.image.cycle_render_slot",
        "signature": "bpy.ops.image.cycle_render_slot(reverse=False)#",
        "description": "Cycle through all non-void render slots",
        "parameters": [
            "reverse=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.image.external_edit",
        "signature": "bpy.ops.image.external_edit(filepath='')#",
        "description": "Edit image in an external application",
        "parameters": [
            "filepath=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.image.file_browse",
        "signature": "bpy.ops.image.file_browse(filepath='',hide_props_region=True,check_existing=False,filter_blender=False,filter_backup=False,filter_image=True,filter_movie=True,filter_python=False,filter_font=False,filter_sound=False,filter_text=False,filter_archive=False,filter_btx=False,filter_collada=False,filter_alembic=False,filter_usd=False,filter_obj=False,filter_volume=False,filter_folder=True,filter_blenlib=False,filemode=9,relative_path=True,show_multiview=False,use_multiview=False,display_type='DEFAULT',sort_method='')#",
        "description": "Open an image file browser, hold Shift to open the file, Alt to browse containing directory",
        "parameters": [
            "filepath=''",
            "hide_props_region=True",
            "check_existing=False",
            "filter_blender=False",
            "filter_backup=False",
            "filter_image=True",
            "filter_movie=True",
            "filter_python=False",
            "filter_font=False",
            "filter_sound=False",
            "filter_text=False",
            "filter_archive=False",
            "filter_btx=False",
            "filter_collada=False",
            "filter_alembic=False",
            "filter_usd=False",
            "filter_obj=False",
            "filter_volume=False",
            "filter_folder=True",
            "filter_blenlib=False",
            "filemode=9",
            "relative_path=True",
            "show_multiview=False",
            "use_multiview=False",
            "display_type='DEFAULT'",
            "sort_method=''"
        ],
        "parameter_descriptions": [
            "filepath(string,(optional,never None)) – File Path, Path to file",
            "hide_props_region(boolean,(optional)) – Hide Operator Properties, Collapse the region displaying the operator settings",
            "check_existing(boolean,(optional)) – Check Existing, Check and warn on overwriting existing files",
            "filter_blender(boolean,(optional)) – Filter .blend files",
            "filter_backup(boolean,(optional)) – Filter .blend files",
            "filter_image(boolean,(optional)) – Filter image files",
            "filter_movie(boolean,(optional)) – Filter movie files",
            "filter_python(boolean,(optional)) – Filter Python files",
            "filter_font(boolean,(optional)) – Filter font files",
            "filter_sound(boolean,(optional)) – Filter sound files",
            "filter_text(boolean,(optional)) – Filter text files",
            "filter_archive(boolean,(optional)) – Filter archive files",
            "filter_btx(boolean,(optional)) – Filter btx files",
            "filter_collada(boolean,(optional)) – Filter COLLADA files",
            "filter_alembic(boolean,(optional)) – Filter Alembic files",
            "filter_usd(boolean,(optional)) – Filter USD files",
            "filter_obj(boolean,(optional)) – Filter OBJ files",
            "filter_volume(boolean,(optional)) – Filter OpenVDB volume files",
            "filter_folder(boolean,(optional)) – Filter folders",
            "filter_blenlib(boolean,(optional)) – Filter Blender IDs",
            "filemode(int in[1,9],(optional)) – File Browser Mode, The setting for the file browser mode to load a .blend file, a library or a special file",
            "relative_path(boolean,(optional)) – Relative Path, Select the file relative to the blend file",
            "show_multiview(boolean,(optional)) – Enable Multi-View",
            "use_multiview(boolean,(optional)) – Use Multi-View",
            "display_type(enum in['DEFAULT','LIST_VERTICAL','LIST_HORIZONTAL','THUMBNAIL'],(optional)) –Display TypeDEFAULTDefault – Automatically determine display type for files.LIST_VERTICALShort List – Display files as short list.LIST_HORIZONTALLong List – Display files as a detailed list.THUMBNAILThumbnails – Display files as thumbnails.",
            "DEFAULTDefault – Automatically determine display type for files.",
            "LIST_VERTICALShort List – Display files as short list.",
            "LIST_HORIZONTALLong List – Display files as a detailed list.",
            "THUMBNAILThumbnails – Display files as thumbnails.",
            "sort_method(enum in[],(optional)) – File sorting mode"
        ]
    },
    {
        "function_id": "bpy.ops.image.flip",
        "signature": "bpy.ops.image.flip(use_flip_x=False,use_flip_y=False)#",
        "description": "Flip the image",
        "parameters": [
            "use_flip_x=False",
            "use_flip_y=False"
        ],
        "parameter_descriptions": [
            "use_flip_x(boolean,(optional)) – Horizontal, Flip the image horizontally",
            "use_flip_y(boolean,(optional)) – Vertical, Flip the image vertically"
        ]
    },
    {
        "function_id": "bpy.ops.image.import_as_mesh_planes",
        "signature": "bpy.ops.image.import_as_mesh_planes(interpolation='Linear',extension='CLIP',alpha_mode='STRAIGHT',use_auto_refresh=True,relative=True,shader='PRINCIPLED',emit_strength=1.0,use_transparency=True,render_method='DITHERED',use_backface_culling=False,show_transparent_back=True,overwrite_material=True,filepath='',align='WORLD',location=(0.0,0.0,0.0),rotation=(0.0,0.0,0.0),files=None,directory='',filter_image=True,filter_movie=True,filter_folder=True,force_reload=False,image_sequence=False,offset=True,offset_axis='+X',offset_amount=0.1,align_axis='CAM_AX',prev_align_axis='NONE',align_track=False,size_mode='ABSOLUTE',fill_mode='FILL',height=1.0,factor=600.0)#",
        "description": "Create mesh plane(s) from image files with the appropriate aspect ratio",
        "parameters": [
            "interpolation='Linear'",
            "extension='CLIP'",
            "alpha_mode='STRAIGHT'",
            "use_auto_refresh=True",
            "relative=True",
            "shader='PRINCIPLED'",
            "emit_strength=1.0",
            "use_transparency=True",
            "render_method='DITHERED'",
            "use_backface_culling=False",
            "show_transparent_back=True",
            "overwrite_material=True",
            "filepath=''",
            "align='WORLD'",
            "location=(0.0,0.0,0.0)",
            "rotation=(0.0,0.0,0.0)",
            "files=None",
            "directory=''",
            "filter_image=True",
            "filter_movie=True",
            "filter_folder=True",
            "force_reload=False",
            "image_sequence=False",
            "offset=True",
            "offset_axis='+X'",
            "offset_amount=0.1",
            "align_axis='CAM_AX'",
            "prev_align_axis='NONE'",
            "align_track=False",
            "size_mode='ABSOLUTE'",
            "fill_mode='FILL'",
            "height=1.0",
            "factor=600.0"
        ],
        "parameter_descriptions": [
            "interpolation(enum in['Linear','Closest','Cubic','Smart'],(optional)) –Interpolation, Texture interpolationLinearLinear – Linear interpolation.ClosestClosest – No interpolation (sample closest texel).CubicCubic – Cubic interpolation.SmartSmart – Bicubic when magnifying, else bilinear (OSL only).",
            "LinearLinear – Linear interpolation.",
            "ClosestClosest – No interpolation (sample closest texel).",
            "CubicCubic – Cubic interpolation.",
            "SmartSmart – Bicubic when magnifying, else bilinear (OSL only).",
            "extension(enum in['CLIP','EXTEND','REPEAT'],(optional)) –Extension, How the image is extrapolated past its original boundsCLIPClip – Clip to image size and set exterior pixels as transparent.EXTENDExtend – Extend by repeating edge pixels of the image.REPEATRepeat – Cause the image to repeat horizontally and vertically.",
            "CLIPClip – Clip to image size and set exterior pixels as transparent.",
            "EXTENDExtend – Extend by repeating edge pixels of the image.",
            "REPEATRepeat – Cause the image to repeat horizontally and vertically.",
            "alpha_mode(enum in['STRAIGHT','PREMUL','CHANNEL_PACKED','NONE'],(optional)) –Alpha Mode, Representation of alpha in the image file, to convert to and from when saving and loading the imageSTRAIGHTStraight – Store RGB and alpha channels separately with alpha acting as a mask, also known as unassociated alpha. Commonly used by image editing applications and file formats like PNG.PREMULPremultiplied – Store RGB channels with alpha multiplied in, also known as associated alpha. The natural format for renders and used by file formats like OpenEXR.CHANNEL_PACKEDChannel Packed – Different images are packed in the RGB and alpha channels, and they should not affect each other. Channel packing is commonly used by game engines to save memory.NONENone – Ignore alpha channel from the file and make image fully opaque.",
            "STRAIGHTStraight – Store RGB and alpha channels separately with alpha acting as a mask, also known as unassociated alpha. Commonly used by image editing applications and file formats like PNG.",
            "PREMULPremultiplied – Store RGB channels with alpha multiplied in, also known as associated alpha. The natural format for renders and used by file formats like OpenEXR.",
            "CHANNEL_PACKEDChannel Packed – Different images are packed in the RGB and alpha channels, and they should not affect each other. Channel packing is commonly used by game engines to save memory.",
            "NONENone – Ignore alpha channel from the file and make image fully opaque.",
            "use_auto_refresh(boolean,(optional)) – Auto Refresh, Always refresh image on frame changes",
            "relative(boolean,(optional)) – Relative Paths, Use relative file paths",
            "shader(enum in['PRINCIPLED','SHADELESS','EMISSION'],(optional)) –Shader, Node shader to usePRINCIPLEDPrincipled – Principled shader.SHADELESSShadeless – Only visible to camera and reflections.EMISSIONEmission – Emission shader.",
            "PRINCIPLEDPrincipled – Principled shader.",
            "SHADELESSShadeless – Only visible to camera and reflections.",
            "EMISSIONEmission – Emission shader.",
            "emit_strength(float in[0,inf],(optional)) – Emission Strength, Strength of emission",
            "use_transparency(boolean,(optional)) – Use Alpha, Use alpha channel for transparency",
            "render_method(enum in['DITHERED','BLENDED'],(optional)) –Render MethodDITHEREDDithered – Allows for grayscale hashed transparency, and compatible with render passes and raytracing. Also known as deferred rendering..BLENDEDBlended – Allows for colored transparency, but incompatible with render passes and raytracing. Also known as forward rendering..",
            "DITHEREDDithered – Allows for grayscale hashed transparency, and compatible with render passes and raytracing. Also known as deferred rendering..",
            "BLENDEDBlended – Allows for colored transparency, but incompatible with render passes and raytracing. Also known as forward rendering..",
            "use_backface_culling(boolean,(optional)) – Backface Culling, Use backface culling to hide the back side of faces",
            "show_transparent_back(boolean,(optional)) – Show Backface, Render multiple transparent layers (may introduce transparency sorting problems)",
            "overwrite_material(boolean,(optional)) – Overwrite Material, Overwrite existing material with the same name",
            "filepath(string,(optional,never None)) – File Path, Filepath used for importing the file",
            "align(enum in['WORLD','VIEW','CURSOR'],(optional)) –AlignWORLDWorld – Align the new object to the world.VIEWView – Align the new object to the view.CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "WORLDWorld – Align the new object to the world.",
            "VIEWView – Align the new object to the view.",
            "CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "location(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Location",
            "rotation(mathutils.Eulerrotation of 3 items in [-inf, inf], (optional)) – Rotation",
            "files(bpy_prop_collectionofOperatorFileListElement, (optional)) – files",
            "directory(string,(optional,never None)) – directory",
            "filter_image(boolean,(optional)) – filter_image",
            "filter_movie(boolean,(optional)) – filter_movie",
            "filter_folder(boolean,(optional)) – filter_folder",
            "force_reload(boolean,(optional)) – Force Reload, Force reload the image if it is already opened elsewhere in Blender",
            "image_sequence(boolean,(optional)) – Detect Image Sequences, Import sequentially numbered images as an animated image sequence instead of separate planes",
            "offset(boolean,(optional)) – Offset Planes, Offset planes from each other. If disabled, multiple planes will be created at the same location",
            "offset_axis(enum in['+X','+Y','+Z','-X','-Y','-Z'],(optional)) –Offset Direction, How planes are oriented relative to each others’ local axis+X+X – Side by Side to the Left.+Y+Y – Side by Side, Downward.+Z+Z – Stacked Above.-X-X – Side by Side to the Right.-Y-Y – Side by Side, Upward.-Z-Z – Stacked Below.",
            "+X+X – Side by Side to the Left.",
            "+Y+Y – Side by Side, Downward.",
            "+Z+Z – Stacked Above.",
            "-X-X – Side by Side to the Right.",
            "-Y-Y – Side by Side, Upward.",
            "-Z-Z – Stacked Below.",
            "offset_amount(float in[-inf,inf],(optional)) – Offset Distance, Set distance between each plane",
            "align_axis(enum in['+X','+Y','+Z','-X','-Y','-Z','CAM','CAM_AX'],(optional)) –Align, How to align the planes+X+X – Facing positive X.+Y+Y – Facing positive Y.+Z+Z – Facing positive Z.-X-X – Facing negative X.-Y-Y – Facing negative Y.-Z-Z – Facing negative Z.CAMFace Camera – Facing camera.CAM_AXCamera’s Main Axis – Facing the camera’s dominant axis.",
            "+X+X – Facing positive X.",
            "+Y+Y – Facing positive Y.",
            "+Z+Z – Facing positive Z.",
            "-X-X – Facing negative X.",
            "-Y-Y – Facing negative Y.",
            "-Z-Z – Facing negative Z.",
            "CAMFace Camera – Facing camera.",
            "CAM_AXCamera’s Main Axis – Facing the camera’s dominant axis.",
            "prev_align_axis(enum in['+X','+Y','+Z','-X','-Y','-Z','CAM','CAM_AX','NONE'],(optional)) –prev_align_axis+X+X – Facing positive X.+Y+Y – Facing positive Y.+Z+Z – Facing positive Z.-X-X – Facing negative X.-Y-Y – Facing negative Y.-Z-Z – Facing negative Z.CAMFace Camera – Facing camera.CAM_AXCamera’s Main Axis – Facing the camera’s dominant axis.NONEUndocumented.",
            "+X+X – Facing positive X.",
            "+Y+Y – Facing positive Y.",
            "+Z+Z – Facing positive Z.",
            "-X-X – Facing negative X.",
            "-Y-Y – Facing negative Y.",
            "-Z-Z – Facing negative Z.",
            "CAMFace Camera – Facing camera.",
            "CAM_AXCamera’s Main Axis – Facing the camera’s dominant axis.",
            "NONEUndocumented.",
            "align_track(boolean,(optional)) – Track Camera, Add a constraint to make the planes track the camera",
            "size_mode(enum in['ABSOLUTE','CAMERA','DPI','DPBU'],(optional)) –Size Mode, Method for computing the plane sizeABSOLUTEAbsolute – Use absolute size.CAMERAScale to Camera Frame – Scale to fit or fill the camera frame.DPIPixels per Inch – Scale based on pixels per inch.DPBUPixels per Blender Unit – Scale based on pixels per Blender Unit.",
            "ABSOLUTEAbsolute – Use absolute size.",
            "CAMERAScale to Camera Frame – Scale to fit or fill the camera frame.",
            "DPIPixels per Inch – Scale based on pixels per inch.",
            "DPBUPixels per Blender Unit – Scale based on pixels per Blender Unit.",
            "fill_mode(enum in['FILL','FIT'],(optional)) –Scale, Method to scale the plane with the camera frameFILLFill – Fill camera frame, spilling outside the frame.FITFit – Fit entire image within the camera frame.",
            "FILLFill – Fill camera frame, spilling outside the frame.",
            "FITFit – Fit entire image within the camera frame.",
            "height(float in[0.001,inf],(optional)) – Height, Height of the created plane",
            "factor(float in[1,inf],(optional)) – Definition, Number of pixels per inch or Blender Unit"
        ]
    },
    {
        "function_id": "bpy.ops.image.invert",
        "signature": "bpy.ops.image.invert(invert_r=False,invert_g=False,invert_b=False,invert_a=False)#",
        "description": "Invert image’s channels",
        "parameters": [
            "invert_r=False",
            "invert_g=False",
            "invert_b=False",
            "invert_a=False"
        ],
        "parameter_descriptions": [
            "invert_r(boolean,(optional)) – Red, Invert red channel",
            "invert_g(boolean,(optional)) – Green, Invert green channel",
            "invert_b(boolean,(optional)) – Blue, Invert blue channel",
            "invert_a(boolean,(optional)) – Alpha, Invert alpha channel"
        ]
    },
    {
        "function_id": "bpy.ops.image.match_movie_length",
        "signature": "bpy.ops.image.match_movie_length()#",
        "description": "Set image’s user’s length to the one of this video",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.image.new",
        "signature": "bpy.ops.image.new(name='Untitled',width=1024,height=1024,color=(0.0,0.0,0.0,1.0),alpha=True,generated_type='BLANK',float=False,use_stereo_3d=False,tiled=False)#",
        "description": "Create a new image",
        "parameters": [
            "name='Untitled'",
            "width=1024",
            "height=1024",
            "color=(0.0,0.0,0.0,1.0)",
            "alpha=True",
            "generated_type='BLANK'",
            "float=False",
            "use_stereo_3d=False",
            "tiled=False"
        ],
        "parameter_descriptions": [
            "name(string,(optional,never None)) – Name, Image data-block name",
            "width(int in[1,inf],(optional)) – Width, Image width",
            "height(int in[1,inf],(optional)) – Height, Image height",
            "color(float arrayof4 items in[0,inf],(optional)) – Color, Default fill color",
            "alpha(boolean,(optional)) – Alpha, Create an image with an alpha channel",
            "generated_type(enum inImage Generated Type Items, (optional)) – Generated Type, Fill the image with a grid for UV map testing",
            "float(boolean,(optional)) – 32-bit Float, Create image with 32-bit floating-point bit depth",
            "use_stereo_3d(boolean,(optional)) – Stereo 3D, Create an image with left and right views",
            "tiled(boolean,(optional)) – Tiled, Create a tiled image"
        ]
    },
    {
        "function_id": "bpy.ops.image.open",
        "signature": "bpy.ops.image.open(allow_path_tokens=True,filepath='',directory='',files=None,hide_props_region=True,check_existing=False,filter_blender=False,filter_backup=False,filter_image=True,filter_movie=True,filter_python=False,filter_font=False,filter_sound=False,filter_text=False,filter_archive=False,filter_btx=False,filter_collada=False,filter_alembic=False,filter_usd=False,filter_obj=False,filter_volume=False,filter_folder=True,filter_blenlib=False,filemode=9,relative_path=True,show_multiview=False,use_multiview=False,display_type='DEFAULT',sort_method='',use_sequence_detection=True,use_udim_detecting=True)#",
        "description": "Open image",
        "parameters": [
            "allow_path_tokens=True",
            "filepath=''",
            "directory=''",
            "files=None",
            "hide_props_region=True",
            "check_existing=False",
            "filter_blender=False",
            "filter_backup=False",
            "filter_image=True",
            "filter_movie=True",
            "filter_python=False",
            "filter_font=False",
            "filter_sound=False",
            "filter_text=False",
            "filter_archive=False",
            "filter_btx=False",
            "filter_collada=False",
            "filter_alembic=False",
            "filter_usd=False",
            "filter_obj=False",
            "filter_volume=False",
            "filter_folder=True",
            "filter_blenlib=False",
            "filemode=9",
            "relative_path=True",
            "show_multiview=False",
            "use_multiview=False",
            "display_type='DEFAULT'",
            "sort_method=''",
            "use_sequence_detection=True",
            "use_udim_detecting=True"
        ],
        "parameter_descriptions": [
            "allow_path_tokens(boolean,(optional)) – Allow the path to contain substitution tokens",
            "filepath(string,(optional,never None)) – File Path, Path to file",
            "directory(string,(optional,never None)) – Directory, Directory of the file",
            "files(bpy_prop_collectionofOperatorFileListElement, (optional)) – Files",
            "hide_props_region(boolean,(optional)) – Hide Operator Properties, Collapse the region displaying the operator settings",
            "check_existing(boolean,(optional)) – Check Existing, Check and warn on overwriting existing files",
            "filter_blender(boolean,(optional)) – Filter .blend files",
            "filter_backup(boolean,(optional)) – Filter .blend files",
            "filter_image(boolean,(optional)) – Filter image files",
            "filter_movie(boolean,(optional)) – Filter movie files",
            "filter_python(boolean,(optional)) – Filter Python files",
            "filter_font(boolean,(optional)) – Filter font files",
            "filter_sound(boolean,(optional)) – Filter sound files",
            "filter_text(boolean,(optional)) – Filter text files",
            "filter_archive(boolean,(optional)) – Filter archive files",
            "filter_btx(boolean,(optional)) – Filter btx files",
            "filter_collada(boolean,(optional)) – Filter COLLADA files",
            "filter_alembic(boolean,(optional)) – Filter Alembic files",
            "filter_usd(boolean,(optional)) – Filter USD files",
            "filter_obj(boolean,(optional)) – Filter OBJ files",
            "filter_volume(boolean,(optional)) – Filter OpenVDB volume files",
            "filter_folder(boolean,(optional)) – Filter folders",
            "filter_blenlib(boolean,(optional)) – Filter Blender IDs",
            "filemode(int in[1,9],(optional)) – File Browser Mode, The setting for the file browser mode to load a .blend file, a library or a special file",
            "relative_path(boolean,(optional)) – Relative Path, Select the file relative to the blend file",
            "show_multiview(boolean,(optional)) – Enable Multi-View",
            "use_multiview(boolean,(optional)) – Use Multi-View",
            "display_type(enum in['DEFAULT','LIST_VERTICAL','LIST_HORIZONTAL','THUMBNAIL'],(optional)) –Display TypeDEFAULTDefault – Automatically determine display type for files.LIST_VERTICALShort List – Display files as short list.LIST_HORIZONTALLong List – Display files as a detailed list.THUMBNAILThumbnails – Display files as thumbnails.",
            "DEFAULTDefault – Automatically determine display type for files.",
            "LIST_VERTICALShort List – Display files as short list.",
            "LIST_HORIZONTALLong List – Display files as a detailed list.",
            "THUMBNAILThumbnails – Display files as thumbnails.",
            "sort_method(enum in[],(optional)) – File sorting mode",
            "use_sequence_detection(boolean,(optional)) – Detect Sequences, Automatically detect animated sequences in selected images (based on file names)",
            "use_udim_detecting(boolean,(optional)) – Detect UDIMs, Detect selected UDIM files and load all matching tiles"
        ]
    },
    {
        "function_id": "bpy.ops.image.open_images",
        "signature": "bpy.ops.image.open_images(directory='',files=None,relative_path=True,use_sequence_detection=True,use_udim_detection=True)#",
        "description": "Undocumented, considercontributing.",
        "parameters": [
            "directory=''",
            "files=None",
            "relative_path=True",
            "use_sequence_detection=True",
            "use_udim_detection=True"
        ],
        "parameter_descriptions": [
            "directory(string,(optional,never None)) – directory",
            "files(bpy_prop_collectionofOperatorFileListElement, (optional)) – files",
            "relative_path(boolean,(optional)) – Use relative path",
            "use_sequence_detection(boolean,(optional)) – Use sequence detection",
            "use_udim_detection(boolean,(optional)) – Use UDIM detection"
        ]
    },
    {
        "function_id": "bpy.ops.image.pack",
        "signature": "bpy.ops.image.pack()#",
        "description": "Pack an image as embedded data into the .blend file",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.image.project_apply",
        "signature": "bpy.ops.image.project_apply()#",
        "description": "Project edited image back onto the object",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.image.project_edit",
        "signature": "bpy.ops.image.project_edit()#",
        "description": "Edit a snapshot of the 3D Viewport in an external image editor",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.image.read_viewlayers",
        "signature": "bpy.ops.image.read_viewlayers()#",
        "description": "Read all the current scene’s view layers from cache, as needed",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.image.reload",
        "signature": "bpy.ops.image.reload()#",
        "description": "Reload current image from disk",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.image.remove_render_slot",
        "signature": "bpy.ops.image.remove_render_slot()#",
        "description": "Remove the current render slot",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.image.render_border",
        "signature": "bpy.ops.image.render_border(xmin=0,xmax=0,ymin=0,ymax=0,wait_for_input=True)#",
        "description": "Set the boundaries of the render region and enable render region",
        "parameters": [
            "xmin=0",
            "xmax=0",
            "ymin=0",
            "ymax=0",
            "wait_for_input=True"
        ],
        "parameter_descriptions": [
            "xmin(int in[-inf,inf],(optional)) – X Min",
            "xmax(int in[-inf,inf],(optional)) – X Max",
            "ymin(int in[-inf,inf],(optional)) – Y Min",
            "ymax(int in[-inf,inf],(optional)) – Y Max",
            "wait_for_input(boolean,(optional)) – Wait for Input"
        ]
    },
    {
        "function_id": "bpy.ops.image.replace",
        "signature": "bpy.ops.image.replace(filepath='',hide_props_region=True,check_existing=False,filter_blender=False,filter_backup=False,filter_image=True,filter_movie=True,filter_python=False,filter_font=False,filter_sound=False,filter_text=False,filter_archive=False,filter_btx=False,filter_collada=False,filter_alembic=False,filter_usd=False,filter_obj=False,filter_volume=False,filter_folder=True,filter_blenlib=False,filemode=9,relative_path=True,show_multiview=False,use_multiview=False,display_type='DEFAULT',sort_method='')#",
        "description": "Replace current image by another one from disk",
        "parameters": [
            "filepath=''",
            "hide_props_region=True",
            "check_existing=False",
            "filter_blender=False",
            "filter_backup=False",
            "filter_image=True",
            "filter_movie=True",
            "filter_python=False",
            "filter_font=False",
            "filter_sound=False",
            "filter_text=False",
            "filter_archive=False",
            "filter_btx=False",
            "filter_collada=False",
            "filter_alembic=False",
            "filter_usd=False",
            "filter_obj=False",
            "filter_volume=False",
            "filter_folder=True",
            "filter_blenlib=False",
            "filemode=9",
            "relative_path=True",
            "show_multiview=False",
            "use_multiview=False",
            "display_type='DEFAULT'",
            "sort_method=''"
        ],
        "parameter_descriptions": [
            "filepath(string,(optional,never None)) – File Path, Path to file",
            "hide_props_region(boolean,(optional)) – Hide Operator Properties, Collapse the region displaying the operator settings",
            "check_existing(boolean,(optional)) – Check Existing, Check and warn on overwriting existing files",
            "filter_blender(boolean,(optional)) – Filter .blend files",
            "filter_backup(boolean,(optional)) – Filter .blend files",
            "filter_image(boolean,(optional)) – Filter image files",
            "filter_movie(boolean,(optional)) – Filter movie files",
            "filter_python(boolean,(optional)) – Filter Python files",
            "filter_font(boolean,(optional)) – Filter font files",
            "filter_sound(boolean,(optional)) – Filter sound files",
            "filter_text(boolean,(optional)) – Filter text files",
            "filter_archive(boolean,(optional)) – Filter archive files",
            "filter_btx(boolean,(optional)) – Filter btx files",
            "filter_collada(boolean,(optional)) – Filter COLLADA files",
            "filter_alembic(boolean,(optional)) – Filter Alembic files",
            "filter_usd(boolean,(optional)) – Filter USD files",
            "filter_obj(boolean,(optional)) – Filter OBJ files",
            "filter_volume(boolean,(optional)) – Filter OpenVDB volume files",
            "filter_folder(boolean,(optional)) – Filter folders",
            "filter_blenlib(boolean,(optional)) – Filter Blender IDs",
            "filemode(int in[1,9],(optional)) – File Browser Mode, The setting for the file browser mode to load a .blend file, a library or a special file",
            "relative_path(boolean,(optional)) – Relative Path, Select the file relative to the blend file",
            "show_multiview(boolean,(optional)) – Enable Multi-View",
            "use_multiview(boolean,(optional)) – Use Multi-View",
            "display_type(enum in['DEFAULT','LIST_VERTICAL','LIST_HORIZONTAL','THUMBNAIL'],(optional)) –Display TypeDEFAULTDefault – Automatically determine display type for files.LIST_VERTICALShort List – Display files as short list.LIST_HORIZONTALLong List – Display files as a detailed list.THUMBNAILThumbnails – Display files as thumbnails.",
            "DEFAULTDefault – Automatically determine display type for files.",
            "LIST_VERTICALShort List – Display files as short list.",
            "LIST_HORIZONTALLong List – Display files as a detailed list.",
            "THUMBNAILThumbnails – Display files as thumbnails.",
            "sort_method(enum in[],(optional)) – File sorting mode"
        ]
    },
    {
        "function_id": "bpy.ops.image.resize",
        "signature": "bpy.ops.image.resize(size=(0,0))#",
        "description": "Resize the image",
        "parameters": [
            "size=(0,0)"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.image.rotate_orthogonal",
        "signature": "bpy.ops.image.rotate_orthogonal(degrees='90')#",
        "description": "Rotate the image",
        "parameters": [
            "degrees='90'"
        ],
        "parameter_descriptions": [
            "9090 Degrees – Rotate 90 degrees clockwise.",
            "180180 Degrees – Rotate 180 degrees clockwise.",
            "270270 Degrees – Rotate 270 degrees clockwise."
        ]
    },
    {
        "function_id": "bpy.ops.image.sample",
        "signature": "bpy.ops.image.sample(size=1)#",
        "description": "Use mouse to sample a color in current image",
        "parameters": [
            "size=1"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.image.sample_line",
        "signature": "bpy.ops.image.sample_line(xstart=0,xend=0,ystart=0,yend=0,flip=False,cursor=5)#",
        "description": "Sample a line and show it in Scope panels",
        "parameters": [
            "xstart=0",
            "xend=0",
            "ystart=0",
            "yend=0",
            "flip=False",
            "cursor=5"
        ],
        "parameter_descriptions": [
            "xstart(int in[-inf,inf],(optional)) – X Start",
            "xend(int in[-inf,inf],(optional)) – X End",
            "ystart(int in[-inf,inf],(optional)) – Y Start",
            "yend(int in[-inf,inf],(optional)) – Y End",
            "flip(boolean,(optional)) – Flip",
            "cursor(int in[0,inf],(optional)) – Cursor, Mouse cursor style to use during the modal operator"
        ]
    },
    {
        "function_id": "bpy.ops.image.save",
        "signature": "bpy.ops.image.save()#",
        "description": "Save the image with current name and settings",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.image.save_all_modified",
        "signature": "bpy.ops.image.save_all_modified()#",
        "description": "Save all modified images",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.image.save_as",
        "signature": "bpy.ops.image.save_as(save_as_render=False,copy=False,allow_path_tokens=True,filepath='',check_existing=True,filter_blender=False,filter_backup=False,filter_image=True,filter_movie=True,filter_python=False,filter_font=False,filter_sound=False,filter_text=False,filter_archive=False,filter_btx=False,filter_collada=False,filter_alembic=False,filter_usd=False,filter_obj=False,filter_volume=False,filter_folder=True,filter_blenlib=False,filemode=9,relative_path=True,show_multiview=False,use_multiview=False,display_type='DEFAULT',sort_method='')#",
        "description": "Save the image with another name and/or settings",
        "parameters": [
            "save_as_render=False",
            "copy=False",
            "allow_path_tokens=True",
            "filepath=''",
            "check_existing=True",
            "filter_blender=False",
            "filter_backup=False",
            "filter_image=True",
            "filter_movie=True",
            "filter_python=False",
            "filter_font=False",
            "filter_sound=False",
            "filter_text=False",
            "filter_archive=False",
            "filter_btx=False",
            "filter_collada=False",
            "filter_alembic=False",
            "filter_usd=False",
            "filter_obj=False",
            "filter_volume=False",
            "filter_folder=True",
            "filter_blenlib=False",
            "filemode=9",
            "relative_path=True",
            "show_multiview=False",
            "use_multiview=False",
            "display_type='DEFAULT'",
            "sort_method=''"
        ],
        "parameter_descriptions": [
            "save_as_render(boolean,(optional)) – Save As Render, Save image with render color management.For display image formats like PNG, apply view and display transform.For intermediate image formats like OpenEXR, use the default render output color space",
            "copy(boolean,(optional)) – Copy, Create a new image file without modifying the current image in Blender",
            "allow_path_tokens(boolean,(optional)) – Allow the path to contain substitution tokens",
            "filepath(string,(optional,never None)) – File Path, Path to file",
            "check_existing(boolean,(optional)) – Check Existing, Check and warn on overwriting existing files",
            "filter_blender(boolean,(optional)) – Filter .blend files",
            "filter_backup(boolean,(optional)) – Filter .blend files",
            "filter_image(boolean,(optional)) – Filter image files",
            "filter_movie(boolean,(optional)) – Filter movie files",
            "filter_python(boolean,(optional)) – Filter Python files",
            "filter_font(boolean,(optional)) – Filter font files",
            "filter_sound(boolean,(optional)) – Filter sound files",
            "filter_text(boolean,(optional)) – Filter text files",
            "filter_archive(boolean,(optional)) – Filter archive files",
            "filter_btx(boolean,(optional)) – Filter btx files",
            "filter_collada(boolean,(optional)) – Filter COLLADA files",
            "filter_alembic(boolean,(optional)) – Filter Alembic files",
            "filter_usd(boolean,(optional)) – Filter USD files",
            "filter_obj(boolean,(optional)) – Filter OBJ files",
            "filter_volume(boolean,(optional)) – Filter OpenVDB volume files",
            "filter_folder(boolean,(optional)) – Filter folders",
            "filter_blenlib(boolean,(optional)) – Filter Blender IDs",
            "filemode(int in[1,9],(optional)) – File Browser Mode, The setting for the file browser mode to load a .blend file, a library or a special file",
            "relative_path(boolean,(optional)) – Relative Path, Select the file relative to the blend file",
            "show_multiview(boolean,(optional)) – Enable Multi-View",
            "use_multiview(boolean,(optional)) – Use Multi-View",
            "display_type(enum in['DEFAULT','LIST_VERTICAL','LIST_HORIZONTAL','THUMBNAIL'],(optional)) –Display TypeDEFAULTDefault – Automatically determine display type for files.LIST_VERTICALShort List – Display files as short list.LIST_HORIZONTALLong List – Display files as a detailed list.THUMBNAILThumbnails – Display files as thumbnails.",
            "DEFAULTDefault – Automatically determine display type for files.",
            "LIST_VERTICALShort List – Display files as short list.",
            "LIST_HORIZONTALLong List – Display files as a detailed list.",
            "THUMBNAILThumbnails – Display files as thumbnails.",
            "sort_method(enum in[],(optional)) – File sorting mode"
        ]
    },
    {
        "function_id": "bpy.ops.image.save_sequence",
        "signature": "bpy.ops.image.save_sequence()#",
        "description": "Save a sequence of images",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.image.tile_add",
        "signature": "bpy.ops.image.tile_add(number=1002,count=1,label='',fill=True,color=(0.0,0.0,0.0,1.0),generated_type='BLANK',width=1024,height=1024,float=False,alpha=True)#",
        "description": "Adds a tile to the image",
        "parameters": [
            "number=1002",
            "count=1",
            "label=''",
            "fill=True",
            "color=(0.0,0.0,0.0,1.0)",
            "generated_type='BLANK'",
            "width=1024",
            "height=1024",
            "float=False",
            "alpha=True"
        ],
        "parameter_descriptions": [
            "number(int in[1001,2000],(optional)) – Number, UDIM number of the tile",
            "count(int in[1,inf],(optional)) – Count, How many tiles to add",
            "label(string,(optional,never None)) – Label, Optional tile label",
            "fill(boolean,(optional)) – Fill, Fill new tile with a generated image",
            "color(float arrayof4 items in[0,inf],(optional)) – Color, Default fill color",
            "generated_type(enum inImage Generated Type Items, (optional)) – Generated Type, Fill the image with a grid for UV map testing",
            "width(int in[1,inf],(optional)) – Width, Image width",
            "height(int in[1,inf],(optional)) – Height, Image height",
            "float(boolean,(optional)) – 32-bit Float, Create image with 32-bit floating-point bit depth",
            "alpha(boolean,(optional)) – Alpha, Create an image with an alpha channel"
        ]
    },
    {
        "function_id": "bpy.ops.image.tile_fill",
        "signature": "bpy.ops.image.tile_fill(color=(0.0,0.0,0.0,1.0),generated_type='BLANK',width=1024,height=1024,float=False,alpha=True)#",
        "description": "Fill the current tile with a generated image",
        "parameters": [
            "color=(0.0,0.0,0.0,1.0)",
            "generated_type='BLANK'",
            "width=1024",
            "height=1024",
            "float=False",
            "alpha=True"
        ],
        "parameter_descriptions": [
            "color(float arrayof4 items in[0,inf],(optional)) – Color, Default fill color",
            "generated_type(enum inImage Generated Type Items, (optional)) – Generated Type, Fill the image with a grid for UV map testing",
            "width(int in[1,inf],(optional)) – Width, Image width",
            "height(int in[1,inf],(optional)) – Height, Image height",
            "float(boolean,(optional)) – 32-bit Float, Create image with 32-bit floating-point bit depth",
            "alpha(boolean,(optional)) – Alpha, Create an image with an alpha channel"
        ]
    },
    {
        "function_id": "bpy.ops.image.tile_remove",
        "signature": "bpy.ops.image.tile_remove()#",
        "description": "Removes a tile from the image",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.image.unpack",
        "signature": "bpy.ops.image.unpack(method='USE_LOCAL',id='')#",
        "description": "Save an image packed in the .blend file to disk",
        "parameters": [
            "method='USE_LOCAL'",
            "id=''"
        ],
        "parameter_descriptions": [
            "method(enum inUnpack Method Items, (optional)) – Method, How to unpack",
            "id(string,(optional,never None)) – Image Name, Image data-block name to unpack"
        ]
    },
    {
        "function_id": "bpy.ops.image.view_all",
        "signature": "bpy.ops.image.view_all(fit_view=False)#",
        "description": "View the entire image",
        "parameters": [
            "fit_view=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.image.view_center_cursor",
        "signature": "bpy.ops.image.view_center_cursor()#",
        "description": "Center the view so that the cursor is in the middle of the view",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.image.view_cursor_center",
        "signature": "bpy.ops.image.view_cursor_center(fit_view=False)#",
        "description": "Set 2D Cursor To Center View location",
        "parameters": [
            "fit_view=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.image.view_ndof",
        "signature": "bpy.ops.image.view_ndof()#",
        "description": "Use a 3D mouse device to pan/zoom the view",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.image.view_pan",
        "signature": "bpy.ops.image.view_pan(offset=(0.0,0.0))#",
        "description": "Pan the view",
        "parameters": [
            "offset=(0.0,0.0)"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.image.view_selected",
        "signature": "bpy.ops.image.view_selected()#",
        "description": "View all selected UVs",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.image.view_zoom",
        "signature": "bpy.ops.image.view_zoom(factor=0.0,use_cursor_init=True)#",
        "description": "Zoom in/out the image",
        "parameters": [
            "factor=0.0",
            "use_cursor_init=True"
        ],
        "parameter_descriptions": [
            "factor(float in[-inf,inf],(optional)) – Factor, Zoom factor, values higher than 1.0 zoom in, lower values zoom out",
            "use_cursor_init(boolean,(optional)) – Use Mouse Position, Allow the initial mouse position to be used"
        ]
    },
    {
        "function_id": "bpy.ops.image.view_zoom_border",
        "signature": "bpy.ops.image.view_zoom_border(xmin=0,xmax=0,ymin=0,ymax=0,wait_for_input=True,zoom_out=False)#",
        "description": "Zoom in the view to the nearest item contained in the border",
        "parameters": [
            "xmin=0",
            "xmax=0",
            "ymin=0",
            "ymax=0",
            "wait_for_input=True",
            "zoom_out=False"
        ],
        "parameter_descriptions": [
            "xmin(int in[-inf,inf],(optional)) – X Min",
            "xmax(int in[-inf,inf],(optional)) – X Max",
            "ymin(int in[-inf,inf],(optional)) – Y Min",
            "ymax(int in[-inf,inf],(optional)) – Y Max",
            "wait_for_input(boolean,(optional)) – Wait for Input",
            "zoom_out(boolean,(optional)) – Zoom Out"
        ]
    },
    {
        "function_id": "bpy.ops.image.view_zoom_in",
        "signature": "bpy.ops.image.view_zoom_in(location=(0.0,0.0))#",
        "description": "Zoom in the image (centered around 2D cursor)",
        "parameters": [
            "location=(0.0,0.0)"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.image.view_zoom_out",
        "signature": "bpy.ops.image.view_zoom_out(location=(0.0,0.0))#",
        "description": "Zoom out the image (centered around 2D cursor)",
        "parameters": [
            "location=(0.0,0.0)"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.image.view_zoom_ratio",
        "signature": "bpy.ops.image.view_zoom_ratio(ratio=0.0)#",
        "description": "Set zoom ratio of the view",
        "parameters": [
            "ratio=0.0"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.nla.action_pushdown",
        "signature": "bpy.ops.nla.action_pushdown(track_index=-1)#",
        "description": "Push action down onto the top of the NLA stack as a new strip",
        "parameters": [
            "track_index=-1"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.nla.action_sync_length",
        "signature": "bpy.ops.nla.action_sync_length(active=True)#",
        "description": "Synchronize the length of the referenced Action with the length used in the strip",
        "parameters": [
            "active=True"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.nla.action_unlink",
        "signature": "bpy.ops.nla.action_unlink(force_delete=False)#",
        "description": "Unlink this action from the active action slot (and/or exit Tweak Mode)",
        "parameters": [
            "force_delete=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.nla.actionclip_add",
        "signature": "bpy.ops.nla.actionclip_add(action='')#",
        "description": "Add an Action-Clip strip (i.e. an NLA Strip referencing an Action) to the active track",
        "parameters": [
            "action=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.nla.apply_scale",
        "signature": "bpy.ops.nla.apply_scale()#",
        "description": "Apply scaling of selected strips to their referenced Actions",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.nla.bake",
        "signature": "bpy.ops.nla.bake(frame_start=1,frame_end=250,step=1,only_selected=True,visual_keying=False,clear_constraints=False,clear_parents=False,use_current_action=False,clean_curves=False,bake_types={'POSE'},channel_types={'BBONE','LOCATION','PROPS','ROTATION','SCALE'})#",
        "description": "Bake all selected objects location/scale/rotation animation to an action",
        "parameters": [
            "frame_start=1",
            "frame_end=250",
            "step=1",
            "only_selected=True",
            "visual_keying=False",
            "clear_constraints=False",
            "clear_parents=False",
            "use_current_action=False",
            "clean_curves=False",
            "bake_types={'POSE'}",
            "channel_types={'BBONE','LOCATION','PROPS','ROTATION','SCALE'}"
        ],
        "parameter_descriptions": [
            "frame_start(int in[0,300000],(optional)) – Start Frame, Start frame for baking",
            "frame_end(int in[1,300000],(optional)) – End Frame, End frame for baking",
            "step(int in[1,120],(optional)) – Frame Step, Number of frames to skip forward while baking each frame",
            "only_selected(boolean,(optional)) – Only Selected Bones, Only key selected bones (Pose baking only)",
            "visual_keying(boolean,(optional)) – Visual Keying, Keyframe from the final transformations (with constraints applied)",
            "clear_constraints(boolean,(optional)) – Clear Constraints, Remove all constraints from keyed object/bones, and do ‘visual’ keying",
            "clear_parents(boolean,(optional)) – Clear Parents, Bake animation onto the object then clear parents (objects only)",
            "use_current_action(boolean,(optional)) – Overwrite Current Action, Bake animation into current action, instead of creating a new one (useful for baking only part of bones in an armature)",
            "clean_curves(boolean,(optional)) – Clean Curves, After baking curves, remove redundant keys",
            "bake_types(enum set in {'POSE','OBJECT'},(optional)) –Bake Data, Which data’s transformations to bakePOSEPose – Bake bones transformations.OBJECTObject – Bake object transformations.",
            "POSEPose – Bake bones transformations.",
            "OBJECTObject – Bake object transformations.",
            "channel_types(enum set in {'LOCATION','ROTATION','SCALE','BBONE','PROPS'},(optional)) –Channels, Which channels to bakeLOCATIONLocation – Bake location channels.ROTATIONRotation – Bake rotation channels.SCALEScale – Bake scale channels.BBONEB-Bone – Bake B-Bone channels.PROPSCustom Properties – Bake custom properties.",
            "LOCATIONLocation – Bake location channels.",
            "ROTATIONRotation – Bake rotation channels.",
            "SCALEScale – Bake scale channels.",
            "BBONEB-Bone – Bake B-Bone channels.",
            "PROPSCustom Properties – Bake custom properties."
        ]
    },
    {
        "function_id": "bpy.ops.nla.channels_click",
        "signature": "bpy.ops.nla.channels_click(extend=False)#",
        "description": "Handle clicks to select NLA tracks",
        "parameters": [
            "extend=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.nla.clear_scale",
        "signature": "bpy.ops.nla.clear_scale()#",
        "description": "Reset scaling of selected strips",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.nla.click_select",
        "signature": "bpy.ops.nla.click_select(wait_to_deselect_others=False,mouse_x=0,mouse_y=0,extend=False,deselect_all=False)#",
        "description": "Handle clicks to select NLA Strips",
        "parameters": [
            "wait_to_deselect_others=False",
            "mouse_x=0",
            "mouse_y=0",
            "extend=False",
            "deselect_all=False"
        ],
        "parameter_descriptions": [
            "wait_to_deselect_others(boolean,(optional)) – Wait to Deselect Others",
            "mouse_x(int in[-inf,inf],(optional)) – Mouse X",
            "mouse_y(int in[-inf,inf],(optional)) – Mouse Y",
            "extend(boolean,(optional)) – Extend Select",
            "deselect_all(boolean,(optional)) – Deselect On Nothing, Deselect all when nothing under the cursor"
        ]
    },
    {
        "function_id": "bpy.ops.nla.delete",
        "signature": "bpy.ops.nla.delete()#",
        "description": "Delete selected strips",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.nla.duplicate",
        "signature": "bpy.ops.nla.duplicate(linked=False)#",
        "description": "Duplicate selected NLA-Strips, adding the new strips to new track(s)",
        "parameters": [
            "linked=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.nla.duplicate_linked_move",
        "signature": "bpy.ops.nla.duplicate_linked_move(NLA_OT_duplicate=None,TRANSFORM_OT_translate=None)#",
        "description": "Duplicate Linked selected NLA-Strips, adding the new strips to new track(s)",
        "parameters": [
            "NLA_OT_duplicate=None",
            "TRANSFORM_OT_translate=None"
        ],
        "parameter_descriptions": [
            "NLA_OT_duplicate(NLA_OT_duplicate, (optional)) – Duplicate Strips, Duplicate selected NLA-Strips, adding the new strips to new track(s)",
            "TRANSFORM_OT_translate(TRANSFORM_OT_translate, (optional)) – Move, Move selected items"
        ]
    },
    {
        "function_id": "bpy.ops.nla.duplicate_move",
        "signature": "bpy.ops.nla.duplicate_move(NLA_OT_duplicate=None,TRANSFORM_OT_translate=None)#",
        "description": "Duplicate selected NLA-Strips, adding the new strips to new track(s)",
        "parameters": [
            "NLA_OT_duplicate=None",
            "TRANSFORM_OT_translate=None"
        ],
        "parameter_descriptions": [
            "NLA_OT_duplicate(NLA_OT_duplicate, (optional)) – Duplicate Strips, Duplicate selected NLA-Strips, adding the new strips to new track(s)",
            "TRANSFORM_OT_translate(TRANSFORM_OT_translate, (optional)) – Move, Move selected items"
        ]
    },
    {
        "function_id": "bpy.ops.nla.fmodifier_add",
        "signature": "bpy.ops.nla.fmodifier_add(type='NULL',only_active=True)#",
        "description": "Add F-Modifier to the active/selected NLA-Strips",
        "parameters": [
            "type='NULL'",
            "only_active=True"
        ],
        "parameter_descriptions": [
            "type(enum inFmodifier Type Items, (optional)) – Type",
            "only_active(boolean,(optional)) – Only Active, Only add a F-Modifier of the specified type to the active strip"
        ]
    },
    {
        "function_id": "bpy.ops.nla.fmodifier_copy",
        "signature": "bpy.ops.nla.fmodifier_copy()#",
        "description": "Copy the F-Modifier(s) of the active NLA-Strip",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.nla.fmodifier_paste",
        "signature": "bpy.ops.nla.fmodifier_paste(only_active=True,replace=False)#",
        "description": "Add copied F-Modifiers to the selected NLA-Strips",
        "parameters": [
            "only_active=True",
            "replace=False"
        ],
        "parameter_descriptions": [
            "only_active(boolean,(optional)) – Only Active, Only paste F-Modifiers on active strip",
            "replace(boolean,(optional)) – Replace Existing, Replace existing F-Modifiers, instead of just appending to the end of the existing list"
        ]
    },
    {
        "function_id": "bpy.ops.nla.make_single_user",
        "signature": "bpy.ops.nla.make_single_user(confirm=True)#",
        "description": "Make linked action local to each strip",
        "parameters": [
            "confirm=True"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.nla.meta_add",
        "signature": "bpy.ops.nla.meta_add()#",
        "description": "Add new meta-strips incorporating the selected strips",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.nla.meta_remove",
        "signature": "bpy.ops.nla.meta_remove()#",
        "description": "Separate out the strips held by the selected meta-strips",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.nla.move_down",
        "signature": "bpy.ops.nla.move_down()#",
        "description": "Move selected strips down a track if there’s room",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.nla.move_up",
        "signature": "bpy.ops.nla.move_up()#",
        "description": "Move selected strips up a track if there’s room",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.nla.mute_toggle",
        "signature": "bpy.ops.nla.mute_toggle()#",
        "description": "Mute or un-mute selected strips",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.nla.previewrange_set",
        "signature": "bpy.ops.nla.previewrange_set()#",
        "description": "Set Preview Range based on extends of selected strips",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.nla.select_all",
        "signature": "bpy.ops.nla.select_all(action='TOGGLE')#",
        "description": "Select or deselect all NLA-Strips",
        "parameters": [
            "action='TOGGLE'"
        ],
        "parameter_descriptions": [
            "TOGGLEToggle – Toggle selection for all elements.",
            "SELECTSelect – Select all elements.",
            "DESELECTDeselect – Deselect all elements.",
            "INVERTInvert – Invert selection of all elements."
        ]
    },
    {
        "function_id": "bpy.ops.nla.select_box",
        "signature": "bpy.ops.nla.select_box(axis_range=False,tweak=False,xmin=0,xmax=0,ymin=0,ymax=0,wait_for_input=True,mode='SET')#",
        "description": "Use box selection to grab NLA-Strips",
        "parameters": [
            "axis_range=False",
            "tweak=False",
            "xmin=0",
            "xmax=0",
            "ymin=0",
            "ymax=0",
            "wait_for_input=True",
            "mode='SET'"
        ],
        "parameter_descriptions": [
            "axis_range(boolean,(optional)) – Axis Range",
            "tweak(boolean,(optional)) – Tweak, Operator has been activated using a click-drag event",
            "xmin(int in[-inf,inf],(optional)) – X Min",
            "xmax(int in[-inf,inf],(optional)) – X Max",
            "ymin(int in[-inf,inf],(optional)) – Y Min",
            "ymax(int in[-inf,inf],(optional)) – Y Max",
            "wait_for_input(boolean,(optional)) – Wait for Input",
            "mode(enum in['SET','ADD','SUB'],(optional)) –ModeSETSet – Set a new selection.ADDExtend – Extend existing selection.SUBSubtract – Subtract existing selection.",
            "SETSet – Set a new selection.",
            "ADDExtend – Extend existing selection.",
            "SUBSubtract – Subtract existing selection."
        ]
    },
    {
        "function_id": "bpy.ops.nla.select_leftright",
        "signature": "bpy.ops.nla.select_leftright(mode='CHECK',extend=False)#",
        "description": "Select strips to the left or the right of the current frame",
        "parameters": [
            "mode='CHECK'",
            "extend=False"
        ],
        "parameter_descriptions": [
            "mode(enum in['CHECK','LEFT','RIGHT'],(optional)) – Mode",
            "extend(boolean,(optional)) – Extend Select"
        ]
    },
    {
        "function_id": "bpy.ops.nla.selected_objects_add",
        "signature": "bpy.ops.nla.selected_objects_add()#",
        "description": "Make selected objects appear in NLA Editor by adding Animation Data",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.nla.snap",
        "signature": "bpy.ops.nla.snap(type='CFRA')#",
        "description": "Move start of strips to specified time",
        "parameters": [
            "type='CFRA'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.nla.soundclip_add",
        "signature": "bpy.ops.nla.soundclip_add()#",
        "description": "Add a strip for controlling when speaker plays its sound clip",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.nla.split",
        "signature": "bpy.ops.nla.split()#",
        "description": "Split selected strips at their midpoints",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.nla.swap",
        "signature": "bpy.ops.nla.swap()#",
        "description": "Swap order of selected strips within tracks",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.nla.tracks_add",
        "signature": "bpy.ops.nla.tracks_add(above_selected=False)#",
        "description": "Add NLA-Tracks above/after the selected tracks",
        "parameters": [
            "above_selected=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.nla.tracks_delete",
        "signature": "bpy.ops.nla.tracks_delete()#",
        "description": "Delete selected NLA-Tracks and the strips they contain",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.nla.transition_add",
        "signature": "bpy.ops.nla.transition_add()#",
        "description": "Add a transition strip between two adjacent selected strips",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.nla.tweakmode_enter",
        "signature": "bpy.ops.nla.tweakmode_enter(isolate_action=False,use_upper_stack_evaluation=False)#",
        "description": "Enter tweaking mode for the action referenced by the active strip to edit its keyframes",
        "parameters": [
            "isolate_action=False",
            "use_upper_stack_evaluation=False"
        ],
        "parameter_descriptions": [
            "isolate_action(boolean,(optional)) – Isolate Action, Enable ‘solo’ on the NLA Track containing the active strip, to edit it without seeing the effects of the NLA stack",
            "use_upper_stack_evaluation(boolean,(optional)) – Evaluate Upper Stack, In tweak mode, display the effects of the tracks above the tweak strip"
        ]
    },
    {
        "function_id": "bpy.ops.nla.tweakmode_exit",
        "signature": "bpy.ops.nla.tweakmode_exit(isolate_action=False)#",
        "description": "Exit tweaking mode for the action referenced by the active strip",
        "parameters": [
            "isolate_action=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.nla.view_all",
        "signature": "bpy.ops.nla.view_all()#",
        "description": "Reset viewable area to show full strips range",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.nla.view_frame",
        "signature": "bpy.ops.nla.view_frame()#",
        "description": "Move the view to the current frame",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.nla.view_selected",
        "signature": "bpy.ops.nla.view_selected()#",
        "description": "Reset viewable area to show selected strips range",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.palette.color_add",
        "signature": "bpy.ops.palette.color_add()#",
        "description": "Add new color to active palette",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.palette.color_delete",
        "signature": "bpy.ops.palette.color_delete()#",
        "description": "Remove active color from palette",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.palette.color_move",
        "signature": "bpy.ops.palette.color_move(type='UP')#",
        "description": "Move the active Color up/down in the list",
        "parameters": [
            "type='UP'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.palette.extract_from_image",
        "signature": "bpy.ops.palette.extract_from_image(threshold=1)#",
        "description": "Extract all colors used in Image and create a Palette",
        "parameters": [
            "threshold=1"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.palette.join",
        "signature": "bpy.ops.palette.join(palette='')#",
        "description": "Join Palette Swatches",
        "parameters": [
            "palette=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.palette.new",
        "signature": "bpy.ops.palette.new()#",
        "description": "Add new palette",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.palette.sort",
        "signature": "bpy.ops.palette.sort(type='HSV')#",
        "description": "Sort Palette Colors",
        "parameters": [
            "type='HSV'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.path.abspath",
        "signature": "bpy.path.abspath(path,*,start=None,library=None)#",
        "description": "Returns the absolute path relative to the current blend file\nusing the “//” prefix.",
        "parameters": [
            "path",
            "*",
            "start=None",
            "library=None"
        ],
        "parameter_descriptions": [
            "start(stringorbytes) – Relative to this path,\nwhen not set the current filename is used.",
            "library(bpy.types.Library) – The library this path is from. This is only included for\nconvenience, when the library is not None its path replacesstart."
        ]
    },
    {
        "function_id": "bpy.path.basename",
        "signature": "bpy.path.basename(path)#",
        "description": "Equivalent toos.path.basename, but skips a “//” prefix.",
        "parameters": [
            "path"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.path.clean_name",
        "signature": "bpy.path.clean_name(name,*,replace='_')#",
        "description": "Returns a name with characters replaced that\nmay cause problems under various circumstances,\nsuch as writing to a file.",
        "parameters": [
            "name",
            "*",
            "replace='_'"
        ],
        "parameter_descriptions": [
            "name(stringorbytes) – The path name.",
            "replace(string) – The replacement for non-valid characters."
        ]
    },
    {
        "function_id": "bpy.path.display_name",
        "signature": "bpy.path.display_name(name,*,has_ext=True,title_case=True)#",
        "description": "Creates a display string from name to be used menus and the user interface.\nIntended for use with filenames and module names.",
        "parameters": [
            "name",
            "*",
            "has_ext=True",
            "title_case=True"
        ],
        "parameter_descriptions": [
            "name(string) – The name to be used for displaying the user interface.",
            "has_ext(boolean) – Remove file extension from name.",
            "title_case(boolean) – Convert lowercase names to title case."
        ]
    },
    {
        "function_id": "bpy.path.display_name_to_filepath",
        "signature": "bpy.path.display_name_to_filepath(name)#",
        "description": "Performs the reverse of display_name using literal versions of characters\nwhich aren’t supported in a filepath.",
        "parameters": [
            "name"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.path.display_name_from_filepath",
        "signature": "bpy.path.display_name_from_filepath(name)#",
        "description": "Returns the path stripped of directory and extension,\nensured to be utf8 compatible.",
        "parameters": [
            "name"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.path.ensure_ext",
        "signature": "bpy.path.ensure_ext(filepath,ext,*,case_sensitive=False)#",
        "description": "Return the path with the extension added if it is not already set.",
        "parameters": [
            "filepath",
            "ext",
            "*",
            "case_sensitive=False"
        ],
        "parameter_descriptions": [
            "filepath(string) – The file path.",
            "ext(string) – The extension to check for, can be a compound extension. Should\nstart with a dot, such as ‘.blend’ or ‘.tar.gz’.",
            "case_sensitive(boolean) – Check for matching case when comparing extensions."
        ]
    },
    {
        "function_id": "bpy.path.is_subdir",
        "signature": "bpy.path.is_subdir(path,directory)#",
        "description": "Returns true ifpathin a subdirectory ofdirectory.\nBoth paths must be absolute.",
        "parameters": [
            "path",
            "directory"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.path.module_names",
        "signature": "bpy.path.module_names(path,*,recursive=False,package='')#",
        "description": "Return a list of modules which can be imported frompath.",
        "parameters": [
            "path",
            "*",
            "recursive=False",
            "package=''"
        ],
        "parameter_descriptions": [
            "path(string) – a directory to scan.",
            "recursive(bool) – Also return submodule names for packages.",
            "package(string) – Optional string, used as the prefix for module names (without the trailing “.”)."
        ]
    },
    {
        "function_id": "bpy.path.native_pathsep",
        "signature": "bpy.path.native_pathsep(path)#",
        "description": "Replace the path separator with the systems nativeos.sep.",
        "parameters": [
            "path"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.path.reduce_dirs",
        "signature": "bpy.path.reduce_dirs(dirs)#",
        "description": "Given a sequence of directories, remove duplicates and\nany directories nested in one of the other paths.\n(Useful for recursive path searching).",
        "parameters": [
            "dirs"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.path.relpath",
        "signature": "bpy.path.relpath(path,*,start=None)#",
        "description": "Returns the path relative to the current blend file using the “//” prefix.",
        "parameters": [
            "path",
            "*",
            "start=None"
        ],
        "parameter_descriptions": [
            "path(stringorbytes) – An absolute path.",
            "start(stringorbytes) – Relative to this path,\nwhen not set the current filename is used."
        ]
    },
    {
        "function_id": "bpy.path.resolve_ncase",
        "signature": "bpy.path.resolve_ncase(path)#",
        "description": "Resolve a case insensitive path on a case sensitive system,\nreturning a string with the path if found else return the original path.",
        "parameters": [
            "path"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "gpu.capabilities.compute_shader_support_get",
        "signature": "gpu.capabilities.compute_shader_support_get()#",
        "description": "Are compute shaders supported.",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "gpu.capabilities.extensions_get",
        "signature": "gpu.capabilities.extensions_get()#",
        "description": "Get supported extensions in the current context.",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "gpu.capabilities.hdr_support_get",
        "signature": "gpu.capabilities.hdr_support_get()#",
        "description": "Return whether GPU backend supports High Dynamic range for viewport.",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "gpu.capabilities.max_batch_indices_get",
        "signature": "gpu.capabilities.max_batch_indices_get()#",
        "description": "Get maximum number of vertex array indices.",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "gpu.capabilities.max_batch_vertices_get",
        "signature": "gpu.capabilities.max_batch_vertices_get()#",
        "description": "Get maximum number of vertex array vertices.",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "gpu.capabilities.max_images_get",
        "signature": "gpu.capabilities.max_images_get()#",
        "description": "Get maximum supported number of image units.",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "gpu.capabilities.max_texture_layers_get",
        "signature": "gpu.capabilities.max_texture_layers_get()#",
        "description": "Get maximum number of layers in texture.",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "gpu.capabilities.max_texture_size_get",
        "signature": "gpu.capabilities.max_texture_size_get()#",
        "description": "Get estimated maximum texture size to be able to handle.",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "gpu.capabilities.max_textures_frag_get",
        "signature": "gpu.capabilities.max_textures_frag_get()#",
        "description": "Get maximum supported texture image units used for\naccessing texture maps from the fragment shader.",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "gpu.capabilities.max_textures_geom_get",
        "signature": "gpu.capabilities.max_textures_geom_get()#",
        "description": "Get maximum supported texture image units used for\naccessing texture maps from the geometry shader.",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "gpu.capabilities.max_textures_get",
        "signature": "gpu.capabilities.max_textures_get()#",
        "description": "Get maximum supported texture image units used for\naccessing texture maps from the vertex shader and the\nfragment processor.",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "gpu.capabilities.max_textures_vert_get",
        "signature": "gpu.capabilities.max_textures_vert_get()#",
        "description": "Get maximum supported texture image units used for\naccessing texture maps from the vertex shader.",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "gpu.capabilities.max_uniforms_frag_get",
        "signature": "gpu.capabilities.max_uniforms_frag_get()#",
        "description": "Get maximum number of values held in uniform variable\nstorage for a fragment shader.",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "gpu.capabilities.max_uniforms_vert_get",
        "signature": "gpu.capabilities.max_uniforms_vert_get()#",
        "description": "Get maximum number of values held in uniform variable\nstorage for a vertex shader.",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "gpu.capabilities.max_varying_floats_get",
        "signature": "gpu.capabilities.max_varying_floats_get()#",
        "description": "Get maximum number of varying variables used by\nvertex and fragment shaders.",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "gpu.capabilities.max_vertex_attribs_get",
        "signature": "gpu.capabilities.max_vertex_attribs_get()#",
        "description": "Get maximum number of vertex attributes accessible to\na vertex shader.",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "gpu.capabilities.max_work_group_count_get",
        "signature": "gpu.capabilities.max_work_group_count_get(index)#",
        "description": "Get maximum number of work groups that may be dispatched to a compute shader.",
        "parameters": [
            "index"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "gpu.capabilities.max_work_group_size_get",
        "signature": "gpu.capabilities.max_work_group_size_get(index)#",
        "description": "Get maximum size of a work group that may be dispatched to a compute shader.",
        "parameters": [
            "index"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "gpu.capabilities.shader_image_load_store_support_get",
        "signature": "gpu.capabilities.shader_image_load_store_support_get()#",
        "description": "Is image load/store supported.",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.wm.alembic_export",
        "signature": "bpy.ops.wm.alembic_export(filepath='',check_existing=True,filter_blender=False,filter_backup=False,filter_image=False,filter_movie=False,filter_python=False,filter_font=False,filter_sound=False,filter_text=False,filter_archive=False,filter_btx=False,filter_collada=False,filter_alembic=True,filter_usd=False,filter_obj=False,filter_volume=False,filter_folder=True,filter_blenlib=False,filemode=8,display_type='DEFAULT',sort_method='',filter_glob='*.abc',start=-2147483648,end=-2147483648,xsamples=1,gsamples=1,sh_open=0.0,sh_close=1.0,selected=False,visible_objects_only=False,flatten=False,collection='',uvs=True,packuv=True,normals=True,vcolors=False,orcos=True,face_sets=False,subdiv_schema=False,apply_subdiv=False,curves_as_mesh=False,use_instancing=True,global_scale=1.0,triangulate=False,quad_method='SHORTEST_DIAGONAL',ngon_method='BEAUTY',export_hair=True,export_particles=True,export_custom_properties=True,as_background_job=False,evaluation_mode='RENDER',init_scene_frame_range=True)#",
        "description": "Export current scene in an Alembic archive",
        "parameters": [
            "filepath=''",
            "check_existing=True",
            "filter_blender=False",
            "filter_backup=False",
            "filter_image=False",
            "filter_movie=False",
            "filter_python=False",
            "filter_font=False",
            "filter_sound=False",
            "filter_text=False",
            "filter_archive=False",
            "filter_btx=False",
            "filter_collada=False",
            "filter_alembic=True",
            "filter_usd=False",
            "filter_obj=False",
            "filter_volume=False",
            "filter_folder=True",
            "filter_blenlib=False",
            "filemode=8",
            "display_type='DEFAULT'",
            "sort_method=''",
            "filter_glob='*.abc'",
            "start=-2147483648",
            "end=-2147483648",
            "xsamples=1",
            "gsamples=1",
            "sh_open=0.0",
            "sh_close=1.0",
            "selected=False",
            "visible_objects_only=False",
            "flatten=False",
            "collection=''",
            "uvs=True",
            "packuv=True",
            "normals=True",
            "vcolors=False",
            "orcos=True",
            "face_sets=False",
            "subdiv_schema=False",
            "apply_subdiv=False",
            "curves_as_mesh=False",
            "use_instancing=True",
            "global_scale=1.0",
            "triangulate=False",
            "quad_method='SHORTEST_DIAGONAL'",
            "ngon_method='BEAUTY'",
            "export_hair=True",
            "export_particles=True",
            "export_custom_properties=True",
            "as_background_job=False",
            "evaluation_mode='RENDER'",
            "init_scene_frame_range=True"
        ],
        "parameter_descriptions": [
            "filepath(string,(optional,never None)) – File Path, Path to file",
            "check_existing(boolean,(optional)) – Check Existing, Check and warn on overwriting existing files",
            "filter_blender(boolean,(optional)) – Filter .blend files",
            "filter_backup(boolean,(optional)) – Filter .blend files",
            "filter_image(boolean,(optional)) – Filter image files",
            "filter_movie(boolean,(optional)) – Filter movie files",
            "filter_python(boolean,(optional)) – Filter Python files",
            "filter_font(boolean,(optional)) – Filter font files",
            "filter_sound(boolean,(optional)) – Filter sound files",
            "filter_text(boolean,(optional)) – Filter text files",
            "filter_archive(boolean,(optional)) – Filter archive files",
            "filter_btx(boolean,(optional)) – Filter btx files",
            "filter_collada(boolean,(optional)) – Filter COLLADA files",
            "filter_alembic(boolean,(optional)) – Filter Alembic files",
            "filter_usd(boolean,(optional)) – Filter USD files",
            "filter_obj(boolean,(optional)) – Filter OBJ files",
            "filter_volume(boolean,(optional)) – Filter OpenVDB volume files",
            "filter_folder(boolean,(optional)) – Filter folders",
            "filter_blenlib(boolean,(optional)) – Filter Blender IDs",
            "filemode(int in[1,9],(optional)) – File Browser Mode, The setting for the file browser mode to load a .blend file, a library or a special file",
            "display_type(enum in['DEFAULT','LIST_VERTICAL','LIST_HORIZONTAL','THUMBNAIL'],(optional)) –Display TypeDEFAULTDefault – Automatically determine display type for files.LIST_VERTICALShort List – Display files as short list.LIST_HORIZONTALLong List – Display files as a detailed list.THUMBNAILThumbnails – Display files as thumbnails.",
            "DEFAULTDefault – Automatically determine display type for files.",
            "LIST_VERTICALShort List – Display files as short list.",
            "LIST_HORIZONTALLong List – Display files as a detailed list.",
            "THUMBNAILThumbnails – Display files as thumbnails.",
            "sort_method(enum in[],(optional)) – File sorting mode",
            "start(int in[-inf,inf],(optional)) – Start Frame, Start frame of the export, use the default value to take the start frame of the current scene",
            "end(int in[-inf,inf],(optional)) – End Frame, End frame of the export, use the default value to take the end frame of the current scene",
            "xsamples(int in[1,128],(optional)) – Transform Samples, Number of times per frame transformations are sampled",
            "gsamples(int in[1,128],(optional)) – Geometry Samples, Number of times per frame object data are sampled",
            "sh_open(float in[-1,1],(optional)) – Shutter Open, Time at which the shutter is open",
            "sh_close(float in[-1,1],(optional)) – Shutter Close, Time at which the shutter is closed",
            "selected(boolean,(optional)) – Selected Objects Only, Export only selected objects",
            "visible_objects_only(boolean,(optional)) – Visible Objects Only, Export only objects that are visible",
            "flatten(boolean,(optional)) – Flatten Hierarchy, Do not preserve objects’ parent/children relationship",
            "collection(string,(optional,never None)) – Collection",
            "uvs(boolean,(optional)) – UV Coordinates, Export UV coordinates",
            "packuv(boolean,(optional)) – Merge UVs",
            "normals(boolean,(optional)) – Normals, Export normals",
            "vcolors(boolean,(optional)) – Color Attributes, Export color attributes",
            "orcos(boolean,(optional)) – Generated Coordinates, Export undeformed mesh vertex coordinates",
            "face_sets(boolean,(optional)) – Face Sets, Export per face shading group assignments",
            "subdiv_schema(boolean,(optional)) – Use Subdivision Schema, Export meshes using Alembic’s subdivision schema",
            "apply_subdiv(boolean,(optional)) – Apply Subdivision Surface, Export subdivision surfaces as meshes",
            "curves_as_mesh(boolean,(optional)) – Curves as Mesh, Export curves and NURBS surfaces as meshes",
            "use_instancing(boolean,(optional)) – Use Instancing, Export data of duplicated objects as Alembic instances; speeds up the export and can be disabled for compatibility with other software",
            "global_scale(float in[0.0001,1000],(optional)) – Scale, Value by which to enlarge or shrink the objects with respect to the world’s origin",
            "triangulate(boolean,(optional)) – Triangulate, Export polygons (quads and n-gons) as triangles",
            "quad_method(enum inModifier Triangulate Quad Method Items, (optional)) – Quad Method, Method for splitting the quads into triangles",
            "ngon_method(enum inModifier Triangulate Ngon Method Items, (optional)) – N-gon Method, Method for splitting the n-gons into triangles",
            "export_hair(boolean,(optional)) – Export Hair, Exports hair particle systems as animated curves",
            "export_particles(boolean,(optional)) – Export Particles, Exports non-hair particle systems",
            "export_custom_properties(boolean,(optional)) – Export Custom Properties, Export custom properties to Alembic .userProperties",
            "as_background_job(boolean,(optional)) – Run as Background Job, Enable this to run the import in the background, disable to block Blender while importing. This option is deprecated; EXECUTE this operator to run in the foreground, and INVOKE it to run as a background job",
            "evaluation_mode(enum in['RENDER','VIEWPORT'],(optional)) –Settings, Determines visibility of objects, modifier settings, and other areas where there are different settings for viewport and renderingRENDERRender – Use Render settings for object visibility, modifier settings, etc.VIEWPORTViewport – Use Viewport settings for object visibility, modifier settings, etc.",
            "RENDERRender – Use Render settings for object visibility, modifier settings, etc.",
            "VIEWPORTViewport – Use Viewport settings for object visibility, modifier settings, etc."
        ]
    },
    {
        "function_id": "bpy.ops.wm.alembic_import",
        "signature": "bpy.ops.wm.alembic_import(filepath='',directory='',files=None,check_existing=False,filter_blender=False,filter_backup=False,filter_image=False,filter_movie=False,filter_python=False,filter_font=False,filter_sound=False,filter_text=False,filter_archive=False,filter_btx=False,filter_collada=False,filter_alembic=True,filter_usd=False,filter_obj=False,filter_volume=False,filter_folder=True,filter_blenlib=False,filemode=8,relative_path=True,display_type='DEFAULT',sort_method='',filter_glob='*.abc',scale=1.0,set_frame_range=True,validate_meshes=False,always_add_cache_reader=False,is_sequence=False,as_background_job=False)#",
        "description": "Load an Alembic archive",
        "parameters": [
            "filepath=''",
            "directory=''",
            "files=None",
            "check_existing=False",
            "filter_blender=False",
            "filter_backup=False",
            "filter_image=False",
            "filter_movie=False",
            "filter_python=False",
            "filter_font=False",
            "filter_sound=False",
            "filter_text=False",
            "filter_archive=False",
            "filter_btx=False",
            "filter_collada=False",
            "filter_alembic=True",
            "filter_usd=False",
            "filter_obj=False",
            "filter_volume=False",
            "filter_folder=True",
            "filter_blenlib=False",
            "filemode=8",
            "relative_path=True",
            "display_type='DEFAULT'",
            "sort_method=''",
            "filter_glob='*.abc'",
            "scale=1.0",
            "set_frame_range=True",
            "validate_meshes=False",
            "always_add_cache_reader=False",
            "is_sequence=False",
            "as_background_job=False"
        ],
        "parameter_descriptions": [
            "filepath(string,(optional,never None)) – File Path, Path to file",
            "directory(string,(optional,never None)) – Directory, Directory of the file",
            "files(bpy_prop_collectionofOperatorFileListElement, (optional)) – Files",
            "check_existing(boolean,(optional)) – Check Existing, Check and warn on overwriting existing files",
            "filter_blender(boolean,(optional)) – Filter .blend files",
            "filter_backup(boolean,(optional)) – Filter .blend files",
            "filter_image(boolean,(optional)) – Filter image files",
            "filter_movie(boolean,(optional)) – Filter movie files",
            "filter_python(boolean,(optional)) – Filter Python files",
            "filter_font(boolean,(optional)) – Filter font files",
            "filter_sound(boolean,(optional)) – Filter sound files",
            "filter_text(boolean,(optional)) – Filter text files",
            "filter_archive(boolean,(optional)) – Filter archive files",
            "filter_btx(boolean,(optional)) – Filter btx files",
            "filter_collada(boolean,(optional)) – Filter COLLADA files",
            "filter_alembic(boolean,(optional)) – Filter Alembic files",
            "filter_usd(boolean,(optional)) – Filter USD files",
            "filter_obj(boolean,(optional)) – Filter OBJ files",
            "filter_volume(boolean,(optional)) – Filter OpenVDB volume files",
            "filter_folder(boolean,(optional)) – Filter folders",
            "filter_blenlib(boolean,(optional)) – Filter Blender IDs",
            "filemode(int in[1,9],(optional)) – File Browser Mode, The setting for the file browser mode to load a .blend file, a library or a special file",
            "relative_path(boolean,(optional)) – Relative Path, Select the file relative to the blend file",
            "display_type(enum in['DEFAULT','LIST_VERTICAL','LIST_HORIZONTAL','THUMBNAIL'],(optional)) –Display TypeDEFAULTDefault – Automatically determine display type for files.LIST_VERTICALShort List – Display files as short list.LIST_HORIZONTALLong List – Display files as a detailed list.THUMBNAILThumbnails – Display files as thumbnails.",
            "DEFAULTDefault – Automatically determine display type for files.",
            "LIST_VERTICALShort List – Display files as short list.",
            "LIST_HORIZONTALLong List – Display files as a detailed list.",
            "THUMBNAILThumbnails – Display files as thumbnails.",
            "sort_method(enum in[],(optional)) – File sorting mode",
            "scale(float in[0.0001,1000],(optional)) – Scale, Value by which to enlarge or shrink the objects with respect to the world’s origin",
            "set_frame_range(boolean,(optional)) – Set Frame Range, If checked, update scene’s start and end frame to match those of the Alembic archive",
            "validate_meshes(boolean,(optional)) – Validate Meshes, Ensure the data is valid (when disabled, data may be imported which causes crashes displaying or editing)",
            "always_add_cache_reader(boolean,(optional)) – Always Add Cache Reader, Add cache modifiers and constraints to imported objects even if they are not animated so that they can be updated when reloading the Alembic archive",
            "is_sequence(boolean,(optional)) – Is Sequence, Set to true if the cache is split into separate files",
            "as_background_job(boolean,(optional)) – Run as Background Job, Enable this to run the export in the background, disable to block Blender while exporting. This option is deprecated; EXECUTE this operator to run in the foreground, and INVOKE it to run as a background job"
        ]
    },
    {
        "function_id": "bpy.ops.wm.append",
        "signature": "bpy.ops.wm.append(filepath='',directory='',filename='',files=None,check_existing=False,filter_blender=True,filter_backup=False,filter_image=False,filter_movie=False,filter_python=False,filter_font=False,filter_sound=False,filter_text=False,filter_archive=False,filter_btx=False,filter_collada=False,filter_alembic=False,filter_usd=False,filter_obj=False,filter_volume=False,filter_folder=True,filter_blenlib=True,filemode=1,display_type='DEFAULT',sort_method='',link=False,do_reuse_local_id=False,clear_asset_data=False,autoselect=True,active_collection=True,instance_collections=False,instance_object_data=True,set_fake=False,use_recursive=True)#",
        "description": "Append from a Library .blend file",
        "parameters": [
            "filepath=''",
            "directory=''",
            "filename=''",
            "files=None",
            "check_existing=False",
            "filter_blender=True",
            "filter_backup=False",
            "filter_image=False",
            "filter_movie=False",
            "filter_python=False",
            "filter_font=False",
            "filter_sound=False",
            "filter_text=False",
            "filter_archive=False",
            "filter_btx=False",
            "filter_collada=False",
            "filter_alembic=False",
            "filter_usd=False",
            "filter_obj=False",
            "filter_volume=False",
            "filter_folder=True",
            "filter_blenlib=True",
            "filemode=1",
            "display_type='DEFAULT'",
            "sort_method=''",
            "link=False",
            "do_reuse_local_id=False",
            "clear_asset_data=False",
            "autoselect=True",
            "active_collection=True",
            "instance_collections=False",
            "instance_object_data=True",
            "set_fake=False",
            "use_recursive=True"
        ],
        "parameter_descriptions": [
            "filepath(string,(optional,never None)) – File Path, Path to file",
            "directory(string,(optional,never None)) – Directory, Directory of the file",
            "filename(string,(optional,never None)) – File Name, Name of the file",
            "files(bpy_prop_collectionofOperatorFileListElement, (optional)) – Files",
            "check_existing(boolean,(optional)) – Check Existing, Check and warn on overwriting existing files",
            "filter_blender(boolean,(optional)) – Filter .blend files",
            "filter_backup(boolean,(optional)) – Filter .blend files",
            "filter_image(boolean,(optional)) – Filter image files",
            "filter_movie(boolean,(optional)) – Filter movie files",
            "filter_python(boolean,(optional)) – Filter Python files",
            "filter_font(boolean,(optional)) – Filter font files",
            "filter_sound(boolean,(optional)) – Filter sound files",
            "filter_text(boolean,(optional)) – Filter text files",
            "filter_archive(boolean,(optional)) – Filter archive files",
            "filter_btx(boolean,(optional)) – Filter btx files",
            "filter_collada(boolean,(optional)) – Filter COLLADA files",
            "filter_alembic(boolean,(optional)) – Filter Alembic files",
            "filter_usd(boolean,(optional)) – Filter USD files",
            "filter_obj(boolean,(optional)) – Filter OBJ files",
            "filter_volume(boolean,(optional)) – Filter OpenVDB volume files",
            "filter_folder(boolean,(optional)) – Filter folders",
            "filter_blenlib(boolean,(optional)) – Filter Blender IDs",
            "filemode(int in[1,9],(optional)) – File Browser Mode, The setting for the file browser mode to load a .blend file, a library or a special file",
            "display_type(enum in['DEFAULT','LIST_VERTICAL','LIST_HORIZONTAL','THUMBNAIL'],(optional)) –Display TypeDEFAULTDefault – Automatically determine display type for files.LIST_VERTICALShort List – Display files as short list.LIST_HORIZONTALLong List – Display files as a detailed list.THUMBNAILThumbnails – Display files as thumbnails.",
            "DEFAULTDefault – Automatically determine display type for files.",
            "LIST_VERTICALShort List – Display files as short list.",
            "LIST_HORIZONTALLong List – Display files as a detailed list.",
            "THUMBNAILThumbnails – Display files as thumbnails.",
            "sort_method(enum in[],(optional)) – File sorting mode",
            "link(boolean,(optional)) – Link, Link the objects or data-blocks rather than appending",
            "do_reuse_local_id(boolean,(optional)) – Re-Use Local Data, Try to re-use previously matching appended data-blocks instead of appending a new copy",
            "clear_asset_data(boolean,(optional)) – Clear Asset Data, Don’t add asset meta-data or tags from the original data-block",
            "autoselect(boolean,(optional)) – Select, Select new objects",
            "active_collection(boolean,(optional)) – Active Collection, Put new objects on the active collection",
            "instance_collections(boolean,(optional)) – Instance Collections, Create instances for collections, rather than adding them directly to the scene",
            "instance_object_data(boolean,(optional)) – Instance Object Data, Create instances for object data which are not referenced by any objects",
            "set_fake(boolean,(optional)) – Fake User, Set “Fake User” for appended items (except objects and collections)",
            "use_recursive(boolean,(optional)) – Localize All, Localize all appended data, including those indirectly linked from other libraries"
        ]
    },
    {
        "function_id": "bpy.ops.wm.batch_rename",
        "signature": "bpy.ops.wm.batch_rename(data_type='OBJECT',data_source='SELECT',actions=None)#",
        "description": "Rename multiple items at once",
        "parameters": [
            "data_type='OBJECT'",
            "data_source='SELECT'",
            "actions=None"
        ],
        "parameter_descriptions": [
            "data_type(enum in['OBJECT','COLLECTION','MATERIAL','MESH','CURVE','META','VOLUME','GPENCIL','ARMATURE','LATTICE','LIGHT','LIGHT_PROBE','CAMERA','SPEAKER','BONE','NODE','SEQUENCE_STRIP','ACTION_CLIP','SCENE','BRUSH'],(optional)) – Type, Type of data to rename",
            "data_source(enum in['SELECT','ALL'],(optional)) – Source",
            "actions(bpy_prop_collectionofBatchRenameAction, (optional)) – actions"
        ]
    },
    {
        "function_id": "bpy.ops.wm.blend_strings_utf8_validate",
        "signature": "bpy.ops.wm.blend_strings_utf8_validate()#",
        "description": "Check and fix all strings in current .blend file to be valid UTF-8 Unicode (needed for some old, 2.4x area files)",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.wm.call_menu",
        "signature": "bpy.ops.wm.call_menu(name='')#",
        "description": "Open a predefined menu",
        "parameters": [
            "name=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.wm.call_menu_pie",
        "signature": "bpy.ops.wm.call_menu_pie(name='')#",
        "description": "Open a predefined pie menu",
        "parameters": [
            "name=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.wm.call_panel",
        "signature": "bpy.ops.wm.call_panel(name='',keep_open=True)#",
        "description": "Open a predefined panel",
        "parameters": [
            "name=''",
            "keep_open=True"
        ],
        "parameter_descriptions": [
            "name(string,(optional,never None)) – Name, Name of the menu",
            "keep_open(boolean,(optional)) – Keep Open"
        ]
    },
    {
        "function_id": "bpy.ops.wm.clear_recent_files",
        "signature": "bpy.ops.wm.clear_recent_files()#",
        "description": "Clear the recent files list",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.wm.collada_export",
        "signature": "bpy.ops.wm.collada_export(filepath='',check_existing=True,filter_blender=False,filter_backup=False,filter_image=False,filter_movie=False,filter_python=False,filter_font=False,filter_sound=False,filter_text=False,filter_archive=False,filter_btx=False,filter_collada=True,filter_alembic=False,filter_usd=False,filter_obj=False,filter_volume=False,filter_folder=True,filter_blenlib=False,filemode=8,display_type='DEFAULT',sort_method='',filter_glob='*.dae',prop_bc_export_ui_section='main',apply_modifiers=False,export_mesh_type=0,export_mesh_type_selection='view',export_global_forward_selection='Y',export_global_up_selection='Z',apply_global_orientation=False,selected=False,include_children=False,include_armatures=False,include_shapekeys=False,deform_bones_only=False,include_animations=True,include_all_actions=True,export_animation_type_selection='sample',sampling_rate=1,keep_smooth_curves=False,keep_keyframes=False,keep_flat_curves=False,active_uv_only=False,use_texture_copies=True,triangulate=True,use_object_instantiation=True,use_blender_profile=True,sort_by_name=False,export_object_transformation_type=0,export_object_transformation_type_selection='matrix',export_animation_transformation_type=0,export_animation_transformation_type_selection='matrix',open_sim=False,limit_precision=False,keep_bind_info=False)#",
        "description": "Save a Collada file",
        "parameters": [
            "filepath=''",
            "check_existing=True",
            "filter_blender=False",
            "filter_backup=False",
            "filter_image=False",
            "filter_movie=False",
            "filter_python=False",
            "filter_font=False",
            "filter_sound=False",
            "filter_text=False",
            "filter_archive=False",
            "filter_btx=False",
            "filter_collada=True",
            "filter_alembic=False",
            "filter_usd=False",
            "filter_obj=False",
            "filter_volume=False",
            "filter_folder=True",
            "filter_blenlib=False",
            "filemode=8",
            "display_type='DEFAULT'",
            "sort_method=''",
            "filter_glob='*.dae'",
            "prop_bc_export_ui_section='main'",
            "apply_modifiers=False",
            "export_mesh_type=0",
            "export_mesh_type_selection='view'",
            "export_global_forward_selection='Y'",
            "export_global_up_selection='Z'",
            "apply_global_orientation=False",
            "selected=False",
            "include_children=False",
            "include_armatures=False",
            "include_shapekeys=False",
            "deform_bones_only=False",
            "include_animations=True",
            "include_all_actions=True",
            "export_animation_type_selection='sample'",
            "sampling_rate=1",
            "keep_smooth_curves=False",
            "keep_keyframes=False",
            "keep_flat_curves=False",
            "active_uv_only=False",
            "use_texture_copies=True",
            "triangulate=True",
            "use_object_instantiation=True",
            "use_blender_profile=True",
            "sort_by_name=False",
            "export_object_transformation_type=0",
            "export_object_transformation_type_selection='matrix'",
            "export_animation_transformation_type=0",
            "export_animation_transformation_type_selection='matrix'",
            "open_sim=False",
            "limit_precision=False",
            "keep_bind_info=False"
        ],
        "parameter_descriptions": [
            "filepath(string,(optional,never None)) – File Path, Path to file",
            "check_existing(boolean,(optional)) – Check Existing, Check and warn on overwriting existing files",
            "filter_blender(boolean,(optional)) – Filter .blend files",
            "filter_backup(boolean,(optional)) – Filter .blend files",
            "filter_image(boolean,(optional)) – Filter image files",
            "filter_movie(boolean,(optional)) – Filter movie files",
            "filter_python(boolean,(optional)) – Filter Python files",
            "filter_font(boolean,(optional)) – Filter font files",
            "filter_sound(boolean,(optional)) – Filter sound files",
            "filter_text(boolean,(optional)) – Filter text files",
            "filter_archive(boolean,(optional)) – Filter archive files",
            "filter_btx(boolean,(optional)) – Filter btx files",
            "filter_collada(boolean,(optional)) – Filter COLLADA files",
            "filter_alembic(boolean,(optional)) – Filter Alembic files",
            "filter_usd(boolean,(optional)) – Filter USD files",
            "filter_obj(boolean,(optional)) – Filter OBJ files",
            "filter_volume(boolean,(optional)) – Filter OpenVDB volume files",
            "filter_folder(boolean,(optional)) – Filter folders",
            "filter_blenlib(boolean,(optional)) – Filter Blender IDs",
            "filemode(int in[1,9],(optional)) – File Browser Mode, The setting for the file browser mode to load a .blend file, a library or a special file",
            "display_type(enum in['DEFAULT','LIST_VERTICAL','LIST_HORIZONTAL','THUMBNAIL'],(optional)) –Display TypeDEFAULTDefault – Automatically determine display type for files.LIST_VERTICALShort List – Display files as short list.LIST_HORIZONTALLong List – Display files as a detailed list.THUMBNAILThumbnails – Display files as thumbnails.",
            "DEFAULTDefault – Automatically determine display type for files.",
            "LIST_VERTICALShort List – Display files as short list.",
            "LIST_HORIZONTALLong List – Display files as a detailed list.",
            "THUMBNAILThumbnails – Display files as thumbnails.",
            "sort_method(enum in[],(optional)) – File sorting mode",
            "prop_bc_export_ui_section(enum in['main','geometry','armature','animation','collada'],(optional)) –Export Section, Only for User Interface organizationmainMain – Data export section.geometryGeom – Geometry export section.armatureArm – Armature export section.animationAnim – Animation export section.colladaExtra – Collada export section.",
            "mainMain – Data export section.",
            "geometryGeom – Geometry export section.",
            "armatureArm – Armature export section.",
            "animationAnim – Animation export section.",
            "colladaExtra – Collada export section.",
            "apply_modifiers(boolean,(optional)) – Apply Modifiers, Apply modifiers to exported mesh (non destructive)",
            "export_mesh_type(int in[-inf,inf],(optional)) – Resolution, Modifier resolution for export",
            "export_mesh_type_selection(enum in['view','render'],(optional)) –Resolution, Modifier resolution for exportviewViewport – Apply modifier’s viewport settings.renderRender – Apply modifier’s render settings.",
            "viewViewport – Apply modifier’s viewport settings.",
            "renderRender – Apply modifier’s render settings.",
            "export_global_forward_selection(enum in['X','Y','Z','-X','-Y','-Z'],(optional)) –Global Forward Axis, Global Forward axis for exportXX – Global Forward is positive X Axis.YY – Global Forward is positive Y Axis.ZZ – Global Forward is positive Z Axis.-X-X – Global Forward is negative X Axis.-Y-Y – Global Forward is negative Y Axis.-Z-Z – Global Forward is negative Z Axis.",
            "XX – Global Forward is positive X Axis.",
            "YY – Global Forward is positive Y Axis.",
            "ZZ – Global Forward is positive Z Axis.",
            "-X-X – Global Forward is negative X Axis.",
            "-Y-Y – Global Forward is negative Y Axis.",
            "-Z-Z – Global Forward is negative Z Axis.",
            "export_global_up_selection(enum in['X','Y','Z','-X','-Y','-Z'],(optional)) –Global Up Axis, Global Up axis for exportXX – Global UP is positive X Axis.YY – Global UP is positive Y Axis.ZZ – Global UP is positive Z Axis.-X-X – Global UP is negative X Axis.-Y-Y – Global UP is negative Y Axis.-Z-Z – Global UP is negative Z Axis.",
            "XX – Global UP is positive X Axis.",
            "YY – Global UP is positive Y Axis.",
            "ZZ – Global UP is positive Z Axis.",
            "-X-X – Global UP is negative X Axis.",
            "-Y-Y – Global UP is negative Y Axis.",
            "-Z-Z – Global UP is negative Z Axis.",
            "apply_global_orientation(boolean,(optional)) – Apply Global Orientation, Rotate all root objects to match the global orientation settings otherwise set the global orientation per Collada asset",
            "selected(boolean,(optional)) – Selection Only, Export only selected elements",
            "include_children(boolean,(optional)) – Include Children, Export all children of selected objects (even if not selected)",
            "include_armatures(boolean,(optional)) – Include Armatures, Export related armatures (even if not selected)",
            "include_shapekeys(boolean,(optional)) – Include Shape Keys, Export all Shape Keys from Mesh Objects",
            "deform_bones_only(boolean,(optional)) – Deform Bones Only, Only export deforming bones with armatures",
            "include_animations(boolean,(optional)) – Include Animations, Export animations if available (exporting animations will enforce the decomposition of node transforms into <translation> <rotation> and <scale> components)",
            "include_all_actions(boolean,(optional)) – Include all Actions, Export also unassigned actions (this allows you to export entire animation libraries for your character(s))",
            "export_animation_type_selection(enum in['sample','keys'],(optional)) –Key Type, Type for exported animations (use sample keys or Curve keys)sampleSamples – Export Sampled points guided by sampling rate.keysCurves – Export Curves (note: guided by curve keys).",
            "sampleSamples – Export Sampled points guided by sampling rate.",
            "keysCurves – Export Curves (note: guided by curve keys).",
            "sampling_rate(int in[1,inf],(optional)) – Sampling Rate, The distance between 2 keyframes (1 to key every frame)",
            "keep_smooth_curves(boolean,(optional)) – Keep Smooth curves, Export also the curve handles (if available) (this does only work when the inverse parent matrix is the unity matrix, otherwise you may end up with odd results)",
            "keep_keyframes(boolean,(optional)) – Keep Keyframes, Use existing keyframes as additional sample points (this helps when you want to keep manual tweaks)",
            "keep_flat_curves(boolean,(optional)) – All Keyed Curves, Export also curves which have only one key or are totally flat",
            "active_uv_only(boolean,(optional)) – Only Selected UV Map, Export only the selected UV Map",
            "use_texture_copies(boolean,(optional)) – Copy, Copy textures to same folder where the .dae file is exported",
            "triangulate(boolean,(optional)) – Triangulate, Export polygons (quads and n-gons) as triangles",
            "use_object_instantiation(boolean,(optional)) – Use Object Instances, Instantiate multiple Objects from same Data",
            "use_blender_profile(boolean,(optional)) – Use Blender Profile, Export additional Blender specific information (for material, shaders, bones, etc.)",
            "sort_by_name(boolean,(optional)) – Sort by Object name, Sort exported data by Object name",
            "export_object_transformation_type(int in[-inf,inf],(optional)) – Transform, Object Transformation type for translation, scale and rotation",
            "export_object_transformation_type_selection(enum in['matrix','decomposed'],(optional)) –Transform, Object Transformation type for translation, scale and rotationmatrixMatrix – Use <matrix> representation for exported transformations.decomposedDecomposed – Use <rotate>, <translate> and <scale> representation for exported transformations.",
            "matrixMatrix – Use <matrix> representation for exported transformations.",
            "decomposedDecomposed – Use <rotate>, <translate> and <scale> representation for exported transformations.",
            "export_animation_transformation_type(int in[-inf,inf],(optional)) – Transform, Transformation type for translation, scale and rotation. Note: The Animation transformation type in the Anim Tab is always equal to the Object transformation type in the Geom tab",
            "export_animation_transformation_type_selection(enum in['matrix','decomposed'],(optional)) –Transform, Transformation type for translation, scale and rotation. Note: The Animation transformation type in the Anim Tab is always equal to the Object transformation type in the Geom tabmatrixMatrix – Use <matrix> representation for exported transformations.decomposedDecomposed – Use <rotate>, <translate> and <scale> representation for exported transformations.",
            "matrixMatrix – Use <matrix> representation for exported transformations.",
            "decomposedDecomposed – Use <rotate>, <translate> and <scale> representation for exported transformations.",
            "open_sim(boolean,(optional)) – Export to SL/OpenSim, Compatibility mode for Second Life, OpenSimulator and other compatible online worlds",
            "limit_precision(boolean,(optional)) – Limit Precision, Reduce the precision of the exported data to 6 digits",
            "keep_bind_info(boolean,(optional)) – Keep Bind Info, Store Bindpose information in custom bone properties for later use during Collada export"
        ]
    },
    {
        "function_id": "bpy.ops.wm.collada_import",
        "signature": "bpy.ops.wm.collada_import(filepath='',check_existing=False,filter_blender=False,filter_backup=False,filter_image=False,filter_movie=False,filter_python=False,filter_font=False,filter_sound=False,filter_text=False,filter_archive=False,filter_btx=False,filter_collada=True,filter_alembic=False,filter_usd=False,filter_obj=False,filter_volume=False,filter_folder=True,filter_blenlib=False,filemode=8,display_type='DEFAULT',sort_method='',filter_glob='*.dae',import_units=False,custom_normals=True,fix_orientation=False,find_chains=False,auto_connect=False,min_chain_length=0,keep_bind_info=False)#",
        "description": "Load a Collada file",
        "parameters": [
            "filepath=''",
            "check_existing=False",
            "filter_blender=False",
            "filter_backup=False",
            "filter_image=False",
            "filter_movie=False",
            "filter_python=False",
            "filter_font=False",
            "filter_sound=False",
            "filter_text=False",
            "filter_archive=False",
            "filter_btx=False",
            "filter_collada=True",
            "filter_alembic=False",
            "filter_usd=False",
            "filter_obj=False",
            "filter_volume=False",
            "filter_folder=True",
            "filter_blenlib=False",
            "filemode=8",
            "display_type='DEFAULT'",
            "sort_method=''",
            "filter_glob='*.dae'",
            "import_units=False",
            "custom_normals=True",
            "fix_orientation=False",
            "find_chains=False",
            "auto_connect=False",
            "min_chain_length=0",
            "keep_bind_info=False"
        ],
        "parameter_descriptions": [
            "filepath(string,(optional,never None)) – File Path, Path to file",
            "check_existing(boolean,(optional)) – Check Existing, Check and warn on overwriting existing files",
            "filter_blender(boolean,(optional)) – Filter .blend files",
            "filter_backup(boolean,(optional)) – Filter .blend files",
            "filter_image(boolean,(optional)) – Filter image files",
            "filter_movie(boolean,(optional)) – Filter movie files",
            "filter_python(boolean,(optional)) – Filter Python files",
            "filter_font(boolean,(optional)) – Filter font files",
            "filter_sound(boolean,(optional)) – Filter sound files",
            "filter_text(boolean,(optional)) – Filter text files",
            "filter_archive(boolean,(optional)) – Filter archive files",
            "filter_btx(boolean,(optional)) – Filter btx files",
            "filter_collada(boolean,(optional)) – Filter COLLADA files",
            "filter_alembic(boolean,(optional)) – Filter Alembic files",
            "filter_usd(boolean,(optional)) – Filter USD files",
            "filter_obj(boolean,(optional)) – Filter OBJ files",
            "filter_volume(boolean,(optional)) – Filter OpenVDB volume files",
            "filter_folder(boolean,(optional)) – Filter folders",
            "filter_blenlib(boolean,(optional)) – Filter Blender IDs",
            "filemode(int in[1,9],(optional)) – File Browser Mode, The setting for the file browser mode to load a .blend file, a library or a special file",
            "display_type(enum in['DEFAULT','LIST_VERTICAL','LIST_HORIZONTAL','THUMBNAIL'],(optional)) –Display TypeDEFAULTDefault – Automatically determine display type for files.LIST_VERTICALShort List – Display files as short list.LIST_HORIZONTALLong List – Display files as a detailed list.THUMBNAILThumbnails – Display files as thumbnails.",
            "DEFAULTDefault – Automatically determine display type for files.",
            "LIST_VERTICALShort List – Display files as short list.",
            "LIST_HORIZONTALLong List – Display files as a detailed list.",
            "THUMBNAILThumbnails – Display files as thumbnails.",
            "sort_method(enum in[],(optional)) – File sorting mode",
            "import_units(boolean,(optional)) – Import Units, If disabled match import to Blender’s current Unit settings, otherwise use the settings from the Imported scene",
            "custom_normals(boolean,(optional)) – Custom Normals, Import custom normals, if available (otherwise Blender will compute them)",
            "fix_orientation(boolean,(optional)) – Fix Leaf Bones, Fix Orientation of Leaf Bones (Collada does only support Joints)",
            "find_chains(boolean,(optional)) – Find Bone Chains, Find best matching Bone Chains and ensure bones in chain are connected",
            "auto_connect(boolean,(optional)) – Auto Connect, Set use_connect for parent bones which have exactly one child bone",
            "min_chain_length(int in[0,inf],(optional)) – Minimum Chain Length, When searching Bone Chains disregard chains of length below this value",
            "keep_bind_info(boolean,(optional)) – Keep Bind Info, Store Bindpose information in custom bone properties for later use during Collada export"
        ]
    },
    {
        "function_id": "bpy.ops.wm.collection_export_all",
        "signature": "bpy.ops.wm.collection_export_all()#",
        "description": "Invoke all configured exporters for all collections",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.wm.context_collection_boolean_set",
        "signature": "bpy.ops.wm.context_collection_boolean_set(data_path_iter='',data_path_item='',type='TOGGLE')#",
        "description": "Set boolean values for a collection of items",
        "parameters": [
            "data_path_iter=''",
            "data_path_item=''",
            "type='TOGGLE'"
        ],
        "parameter_descriptions": [
            "data_path_iter(string,(optional,never None)) – data_path_iter, The data path relative to the context, must point to an iterable",
            "data_path_item(string,(optional,never None)) – data_path_item, The data path from each iterable to the value (int or float)",
            "type(enum in['TOGGLE','ENABLE','DISABLE'],(optional)) – Type"
        ]
    },
    {
        "function_id": "bpy.ops.wm.context_cycle_array",
        "signature": "bpy.ops.wm.context_cycle_array(data_path='',reverse=False)#",
        "description": "Set a context array value (useful for cycling the active mesh edit mode)",
        "parameters": [
            "data_path=''",
            "reverse=False"
        ],
        "parameter_descriptions": [
            "data_path(string,(optional,never None)) – Context Attributes, Context data-path (expanded using visible windows in the current .blend file)",
            "reverse(boolean,(optional)) – Reverse, Cycle backwards"
        ]
    },
    {
        "function_id": "bpy.ops.wm.context_cycle_enum",
        "signature": "bpy.ops.wm.context_cycle_enum(data_path='',reverse=False,wrap=False)#",
        "description": "Toggle a context value",
        "parameters": [
            "data_path=''",
            "reverse=False",
            "wrap=False"
        ],
        "parameter_descriptions": [
            "data_path(string,(optional,never None)) – Context Attributes, Context data-path (expanded using visible windows in the current .blend file)",
            "reverse(boolean,(optional)) – Reverse, Cycle backwards",
            "wrap(boolean,(optional)) – Wrap, Wrap back to the first/last values"
        ]
    },
    {
        "function_id": "bpy.ops.wm.context_cycle_int",
        "signature": "bpy.ops.wm.context_cycle_int(data_path='',reverse=False,wrap=False)#",
        "description": "Set a context value (useful for cycling active material, shape keys, groups, etc.)",
        "parameters": [
            "data_path=''",
            "reverse=False",
            "wrap=False"
        ],
        "parameter_descriptions": [
            "data_path(string,(optional,never None)) – Context Attributes, Context data-path (expanded using visible windows in the current .blend file)",
            "reverse(boolean,(optional)) – Reverse, Cycle backwards",
            "wrap(boolean,(optional)) – Wrap, Wrap back to the first/last values"
        ]
    },
    {
        "function_id": "bpy.ops.wm.context_menu_enum",
        "signature": "bpy.ops.wm.context_menu_enum(data_path='')#",
        "description": "Undocumented, considercontributing.",
        "parameters": [
            "data_path=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.wm.context_modal_mouse",
        "signature": "bpy.ops.wm.context_modal_mouse(data_path_iter='',data_path_item='',header_text='',input_scale=0.01,invert=False,initial_x=0)#",
        "description": "Adjust arbitrary values with mouse input",
        "parameters": [
            "data_path_iter=''",
            "data_path_item=''",
            "header_text=''",
            "input_scale=0.01",
            "invert=False",
            "initial_x=0"
        ],
        "parameter_descriptions": [
            "data_path_iter(string,(optional,never None)) – data_path_iter, The data path relative to the context, must point to an iterable",
            "data_path_item(string,(optional,never None)) – data_path_item, The data path from each iterable to the value (int or float)",
            "header_text(string,(optional,never None)) – Header Text, Text to display in header during scale",
            "input_scale(float in[-inf,inf],(optional)) – input_scale, Scale the mouse movement by this value before applying the delta",
            "invert(boolean,(optional)) – invert, Invert the mouse input",
            "initial_x(int in[-inf,inf],(optional)) – initial_x"
        ]
    },
    {
        "function_id": "bpy.ops.wm.context_pie_enum",
        "signature": "bpy.ops.wm.context_pie_enum(data_path='')#",
        "description": "Undocumented, considercontributing.",
        "parameters": [
            "data_path=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.wm.context_scale_float",
        "signature": "bpy.ops.wm.context_scale_float(data_path='',value=1.0)#",
        "description": "Scale a float context value",
        "parameters": [
            "data_path=''",
            "value=1.0"
        ],
        "parameter_descriptions": [
            "data_path(string,(optional,never None)) – Context Attributes, Context data-path (expanded using visible windows in the current .blend file)",
            "value(float in[-inf,inf],(optional)) – Value, Assign value"
        ]
    },
    {
        "function_id": "bpy.ops.wm.context_scale_int",
        "signature": "bpy.ops.wm.context_scale_int(data_path='',value=1.0,always_step=True)#",
        "description": "Scale an int context value",
        "parameters": [
            "data_path=''",
            "value=1.0",
            "always_step=True"
        ],
        "parameter_descriptions": [
            "data_path(string,(optional,never None)) – Context Attributes, Context data-path (expanded using visible windows in the current .blend file)",
            "value(float in[-inf,inf],(optional)) – Value, Assign value",
            "always_step(boolean,(optional)) – Always Step, Always adjust the value by a minimum of 1 when ‘value’ is not 1.0"
        ]
    },
    {
        "function_id": "bpy.ops.wm.context_set_boolean",
        "signature": "bpy.ops.wm.context_set_boolean(data_path='',value=True)#",
        "description": "Set a context value",
        "parameters": [
            "data_path=''",
            "value=True"
        ],
        "parameter_descriptions": [
            "data_path(string,(optional,never None)) – Context Attributes, Context data-path (expanded using visible windows in the current .blend file)",
            "value(boolean,(optional)) – Value, Assignment value"
        ]
    },
    {
        "function_id": "bpy.ops.wm.context_set_enum",
        "signature": "bpy.ops.wm.context_set_enum(data_path='',value='')#",
        "description": "Set a context value",
        "parameters": [
            "data_path=''",
            "value=''"
        ],
        "parameter_descriptions": [
            "data_path(string,(optional,never None)) – Context Attributes, Context data-path (expanded using visible windows in the current .blend file)",
            "value(string,(optional,never None)) – Value, Assignment value (as a string)"
        ]
    },
    {
        "function_id": "bpy.ops.wm.context_set_float",
        "signature": "bpy.ops.wm.context_set_float(data_path='',value=0.0,relative=False)#",
        "description": "Set a context value",
        "parameters": [
            "data_path=''",
            "value=0.0",
            "relative=False"
        ],
        "parameter_descriptions": [
            "data_path(string,(optional,never None)) – Context Attributes, Context data-path (expanded using visible windows in the current .blend file)",
            "value(float in[-inf,inf],(optional)) – Value, Assignment value",
            "relative(boolean,(optional)) – Relative, Apply relative to the current value (delta)"
        ]
    },
    {
        "function_id": "bpy.ops.wm.context_set_id",
        "signature": "bpy.ops.wm.context_set_id(data_path='',value='')#",
        "description": "Set a context value to an ID data-block",
        "parameters": [
            "data_path=''",
            "value=''"
        ],
        "parameter_descriptions": [
            "data_path(string,(optional,never None)) – Context Attributes, Context data-path (expanded using visible windows in the current .blend file)",
            "value(string,(optional,never None)) – Value, Assign value"
        ]
    },
    {
        "function_id": "bpy.ops.wm.context_set_int",
        "signature": "bpy.ops.wm.context_set_int(data_path='',value=0,relative=False)#",
        "description": "Set a context value",
        "parameters": [
            "data_path=''",
            "value=0",
            "relative=False"
        ],
        "parameter_descriptions": [
            "data_path(string,(optional,never None)) – Context Attributes, Context data-path (expanded using visible windows in the current .blend file)",
            "value(int in[-inf,inf],(optional)) – Value, Assign value",
            "relative(boolean,(optional)) – Relative, Apply relative to the current value (delta)"
        ]
    },
    {
        "function_id": "bpy.ops.wm.context_set_string",
        "signature": "bpy.ops.wm.context_set_string(data_path='',value='')#",
        "description": "Set a context value",
        "parameters": [
            "data_path=''",
            "value=''"
        ],
        "parameter_descriptions": [
            "data_path(string,(optional,never None)) – Context Attributes, Context data-path (expanded using visible windows in the current .blend file)",
            "value(string,(optional,never None)) – Value, Assign value"
        ]
    },
    {
        "function_id": "bpy.ops.wm.context_set_value",
        "signature": "bpy.ops.wm.context_set_value(data_path='',value='')#",
        "description": "Set a context value",
        "parameters": [
            "data_path=''",
            "value=''"
        ],
        "parameter_descriptions": [
            "data_path(string,(optional,never None)) – Context Attributes, Context data-path (expanded using visible windows in the current .blend file)",
            "value(string,(optional,never None)) – Value, Assignment value (as a string)"
        ]
    },
    {
        "function_id": "bpy.ops.wm.context_toggle",
        "signature": "bpy.ops.wm.context_toggle(data_path='',module='')#",
        "description": "Toggle a context value",
        "parameters": [
            "data_path=''",
            "module=''"
        ],
        "parameter_descriptions": [
            "data_path(string,(optional,never None)) – Context Attributes, Context data-path (expanded using visible windows in the current .blend file)",
            "module(string,(optional,never None)) – Module, Optionally override the context with a module"
        ]
    },
    {
        "function_id": "bpy.ops.wm.context_toggle_enum",
        "signature": "bpy.ops.wm.context_toggle_enum(data_path='',value_1='',value_2='')#",
        "description": "Toggle a context value",
        "parameters": [
            "data_path=''",
            "value_1=''",
            "value_2=''"
        ],
        "parameter_descriptions": [
            "data_path(string,(optional,never None)) – Context Attributes, Context data-path (expanded using visible windows in the current .blend file)",
            "value_1(string,(optional,never None)) – Value, Toggle enum",
            "value_2(string,(optional,never None)) – Value, Toggle enum"
        ]
    },
    {
        "function_id": "bpy.ops.wm.debug_menu",
        "signature": "bpy.ops.wm.debug_menu(debug_value=0)#",
        "description": "Open a popup to set the debug level",
        "parameters": [
            "debug_value=0"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.wm.doc_view",
        "signature": "bpy.ops.wm.doc_view(doc_id='')#",
        "description": "Open online reference docs in a web browser",
        "parameters": [
            "doc_id=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.wm.doc_view_manual",
        "signature": "bpy.ops.wm.doc_view_manual(doc_id='')#",
        "description": "Load online manual",
        "parameters": [
            "doc_id=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.wm.doc_view_manual_ui_context",
        "signature": "bpy.ops.wm.doc_view_manual_ui_context()#",
        "description": "View a context based online manual in a web browser",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.wm.drop_blend_file",
        "signature": "bpy.ops.wm.drop_blend_file(filepath='')#",
        "description": "Undocumented, considercontributing.",
        "parameters": [
            "filepath=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.wm.drop_import_file",
        "signature": "bpy.ops.wm.drop_import_file(directory='',files=None)#",
        "description": "Operator that allows file handlers to receive file drops",
        "parameters": [
            "directory=''",
            "files=None"
        ],
        "parameter_descriptions": [
            "directory(string,(optional,never None)) – Directory, Directory of the file",
            "files(bpy_prop_collectionofOperatorFileListElement, (optional)) – Files"
        ]
    },
    {
        "function_id": "bpy.ops.wm.gpencil_export_pdf",
        "signature": "bpy.ops.wm.gpencil_export_pdf(filepath='',check_existing=True,filter_blender=False,filter_backup=False,filter_image=False,filter_movie=False,filter_python=False,filter_font=False,filter_sound=False,filter_text=False,filter_archive=False,filter_btx=False,filter_collada=False,filter_alembic=False,filter_usd=False,filter_obj=True,filter_volume=False,filter_folder=True,filter_blenlib=False,filemode=8,display_type='DEFAULT',sort_method='',use_fill=True,selected_object_type='SELECTED',stroke_sample=0.0,use_normalized_thickness=False,frame_mode='ACTIVE')#",
        "description": "Export grease pencil to PDF",
        "parameters": [
            "filepath=''",
            "check_existing=True",
            "filter_blender=False",
            "filter_backup=False",
            "filter_image=False",
            "filter_movie=False",
            "filter_python=False",
            "filter_font=False",
            "filter_sound=False",
            "filter_text=False",
            "filter_archive=False",
            "filter_btx=False",
            "filter_collada=False",
            "filter_alembic=False",
            "filter_usd=False",
            "filter_obj=True",
            "filter_volume=False",
            "filter_folder=True",
            "filter_blenlib=False",
            "filemode=8",
            "display_type='DEFAULT'",
            "sort_method=''",
            "use_fill=True",
            "selected_object_type='SELECTED'",
            "stroke_sample=0.0",
            "use_normalized_thickness=False",
            "frame_mode='ACTIVE'"
        ],
        "parameter_descriptions": [
            "filepath(string,(optional,never None)) – File Path, Path to file",
            "check_existing(boolean,(optional)) – Check Existing, Check and warn on overwriting existing files",
            "filter_blender(boolean,(optional)) – Filter .blend files",
            "filter_backup(boolean,(optional)) – Filter .blend files",
            "filter_image(boolean,(optional)) – Filter image files",
            "filter_movie(boolean,(optional)) – Filter movie files",
            "filter_python(boolean,(optional)) – Filter Python files",
            "filter_font(boolean,(optional)) – Filter font files",
            "filter_sound(boolean,(optional)) – Filter sound files",
            "filter_text(boolean,(optional)) – Filter text files",
            "filter_archive(boolean,(optional)) – Filter archive files",
            "filter_btx(boolean,(optional)) – Filter btx files",
            "filter_collada(boolean,(optional)) – Filter COLLADA files",
            "filter_alembic(boolean,(optional)) – Filter Alembic files",
            "filter_usd(boolean,(optional)) – Filter USD files",
            "filter_obj(boolean,(optional)) – Filter OBJ files",
            "filter_volume(boolean,(optional)) – Filter OpenVDB volume files",
            "filter_folder(boolean,(optional)) – Filter folders",
            "filter_blenlib(boolean,(optional)) – Filter Blender IDs",
            "filemode(int in[1,9],(optional)) – File Browser Mode, The setting for the file browser mode to load a .blend file, a library or a special file",
            "display_type(enum in['DEFAULT','LIST_VERTICAL','LIST_HORIZONTAL','THUMBNAIL'],(optional)) –Display TypeDEFAULTDefault – Automatically determine display type for files.LIST_VERTICALShort List – Display files as short list.LIST_HORIZONTALLong List – Display files as a detailed list.THUMBNAILThumbnails – Display files as thumbnails.",
            "DEFAULTDefault – Automatically determine display type for files.",
            "LIST_VERTICALShort List – Display files as short list.",
            "LIST_HORIZONTALLong List – Display files as a detailed list.",
            "THUMBNAILThumbnails – Display files as thumbnails.",
            "sort_method(enum in[],(optional)) – File sorting mode",
            "use_fill(boolean,(optional)) – Fill, Export strokes with fill enabled",
            "selected_object_type(enum in['ACTIVE','SELECTED','VISIBLE'],(optional)) –Object, Which objects to include in the exportACTIVEActive – Include only the active object.SELECTEDSelected – Include selected objects.VISIBLEVisible – Include all visible objects.",
            "ACTIVEActive – Include only the active object.",
            "SELECTEDSelected – Include selected objects.",
            "VISIBLEVisible – Include all visible objects.",
            "stroke_sample(float in[0,100],(optional)) – Sampling, Precision of stroke sampling. Low values mean a more precise result, and zero disables sampling",
            "use_normalized_thickness(boolean,(optional)) – Normalize, Export strokes with constant thickness",
            "frame_mode(enum in['ACTIVE','SELECTED','SCENE'],(optional)) –Frames, Which frames to include in the exportACTIVEActive – Include only active frame.SELECTEDSelected – Include selected frames.SCENEScene – Include all scene frames.",
            "ACTIVEActive – Include only active frame.",
            "SELECTEDSelected – Include selected frames.",
            "SCENEScene – Include all scene frames."
        ]
    },
    {
        "function_id": "bpy.ops.wm.gpencil_export_svg",
        "signature": "bpy.ops.wm.gpencil_export_svg(filepath='',check_existing=True,filter_blender=False,filter_backup=False,filter_image=False,filter_movie=False,filter_python=False,filter_font=False,filter_sound=False,filter_text=False,filter_archive=False,filter_btx=False,filter_collada=False,filter_alembic=False,filter_usd=False,filter_obj=True,filter_volume=False,filter_folder=True,filter_blenlib=False,filemode=8,display_type='DEFAULT',sort_method='',use_fill=True,selected_object_type='SELECTED',stroke_sample=0.0,use_normalized_thickness=False,use_clip_camera=False)#",
        "description": "Export grease pencil to SVG",
        "parameters": [
            "filepath=''",
            "check_existing=True",
            "filter_blender=False",
            "filter_backup=False",
            "filter_image=False",
            "filter_movie=False",
            "filter_python=False",
            "filter_font=False",
            "filter_sound=False",
            "filter_text=False",
            "filter_archive=False",
            "filter_btx=False",
            "filter_collada=False",
            "filter_alembic=False",
            "filter_usd=False",
            "filter_obj=True",
            "filter_volume=False",
            "filter_folder=True",
            "filter_blenlib=False",
            "filemode=8",
            "display_type='DEFAULT'",
            "sort_method=''",
            "use_fill=True",
            "selected_object_type='SELECTED'",
            "stroke_sample=0.0",
            "use_normalized_thickness=False",
            "use_clip_camera=False"
        ],
        "parameter_descriptions": [
            "filepath(string,(optional,never None)) – File Path, Path to file",
            "check_existing(boolean,(optional)) – Check Existing, Check and warn on overwriting existing files",
            "filter_blender(boolean,(optional)) – Filter .blend files",
            "filter_backup(boolean,(optional)) – Filter .blend files",
            "filter_image(boolean,(optional)) – Filter image files",
            "filter_movie(boolean,(optional)) – Filter movie files",
            "filter_python(boolean,(optional)) – Filter Python files",
            "filter_font(boolean,(optional)) – Filter font files",
            "filter_sound(boolean,(optional)) – Filter sound files",
            "filter_text(boolean,(optional)) – Filter text files",
            "filter_archive(boolean,(optional)) – Filter archive files",
            "filter_btx(boolean,(optional)) – Filter btx files",
            "filter_collada(boolean,(optional)) – Filter COLLADA files",
            "filter_alembic(boolean,(optional)) – Filter Alembic files",
            "filter_usd(boolean,(optional)) – Filter USD files",
            "filter_obj(boolean,(optional)) – Filter OBJ files",
            "filter_volume(boolean,(optional)) – Filter OpenVDB volume files",
            "filter_folder(boolean,(optional)) – Filter folders",
            "filter_blenlib(boolean,(optional)) – Filter Blender IDs",
            "filemode(int in[1,9],(optional)) – File Browser Mode, The setting for the file browser mode to load a .blend file, a library or a special file",
            "display_type(enum in['DEFAULT','LIST_VERTICAL','LIST_HORIZONTAL','THUMBNAIL'],(optional)) –Display TypeDEFAULTDefault – Automatically determine display type for files.LIST_VERTICALShort List – Display files as short list.LIST_HORIZONTALLong List – Display files as a detailed list.THUMBNAILThumbnails – Display files as thumbnails.",
            "DEFAULTDefault – Automatically determine display type for files.",
            "LIST_VERTICALShort List – Display files as short list.",
            "LIST_HORIZONTALLong List – Display files as a detailed list.",
            "THUMBNAILThumbnails – Display files as thumbnails.",
            "sort_method(enum in[],(optional)) – File sorting mode",
            "use_fill(boolean,(optional)) – Fill, Export strokes with fill enabled",
            "selected_object_type(enum in['ACTIVE','SELECTED','VISIBLE'],(optional)) –Object, Which objects to include in the exportACTIVEActive – Include only the active object.SELECTEDSelected – Include selected objects.VISIBLEVisible – Include all visible objects.",
            "ACTIVEActive – Include only the active object.",
            "SELECTEDSelected – Include selected objects.",
            "VISIBLEVisible – Include all visible objects.",
            "stroke_sample(float in[0,100],(optional)) – Sampling, Precision of stroke sampling. Low values mean a more precise result, and zero disables sampling",
            "use_normalized_thickness(boolean,(optional)) – Normalize, Export strokes with constant thickness",
            "use_clip_camera(boolean,(optional)) – Clip Camera, Clip drawings to camera size when export in camera view"
        ]
    },
    {
        "function_id": "bpy.ops.wm.gpencil_import_svg",
        "signature": "bpy.ops.wm.gpencil_import_svg(filepath='',directory='',files=None,check_existing=False,filter_blender=False,filter_backup=False,filter_image=False,filter_movie=False,filter_python=False,filter_font=False,filter_sound=False,filter_text=False,filter_archive=False,filter_btx=False,filter_collada=False,filter_alembic=False,filter_usd=False,filter_obj=True,filter_volume=False,filter_folder=True,filter_blenlib=False,filemode=8,relative_path=True,display_type='DEFAULT',sort_method='',resolution=10,scale=10.0)#",
        "description": "Import SVG into grease pencil",
        "parameters": [
            "filepath=''",
            "directory=''",
            "files=None",
            "check_existing=False",
            "filter_blender=False",
            "filter_backup=False",
            "filter_image=False",
            "filter_movie=False",
            "filter_python=False",
            "filter_font=False",
            "filter_sound=False",
            "filter_text=False",
            "filter_archive=False",
            "filter_btx=False",
            "filter_collada=False",
            "filter_alembic=False",
            "filter_usd=False",
            "filter_obj=True",
            "filter_volume=False",
            "filter_folder=True",
            "filter_blenlib=False",
            "filemode=8",
            "relative_path=True",
            "display_type='DEFAULT'",
            "sort_method=''",
            "resolution=10",
            "scale=10.0"
        ],
        "parameter_descriptions": [
            "filepath(string,(optional,never None)) – File Path, Path to file",
            "directory(string,(optional,never None)) – Directory, Directory of the file",
            "files(bpy_prop_collectionofOperatorFileListElement, (optional)) – Files",
            "check_existing(boolean,(optional)) – Check Existing, Check and warn on overwriting existing files",
            "filter_blender(boolean,(optional)) – Filter .blend files",
            "filter_backup(boolean,(optional)) – Filter .blend files",
            "filter_image(boolean,(optional)) – Filter image files",
            "filter_movie(boolean,(optional)) – Filter movie files",
            "filter_python(boolean,(optional)) – Filter Python files",
            "filter_font(boolean,(optional)) – Filter font files",
            "filter_sound(boolean,(optional)) – Filter sound files",
            "filter_text(boolean,(optional)) – Filter text files",
            "filter_archive(boolean,(optional)) – Filter archive files",
            "filter_btx(boolean,(optional)) – Filter btx files",
            "filter_collada(boolean,(optional)) – Filter COLLADA files",
            "filter_alembic(boolean,(optional)) – Filter Alembic files",
            "filter_usd(boolean,(optional)) – Filter USD files",
            "filter_obj(boolean,(optional)) – Filter OBJ files",
            "filter_volume(boolean,(optional)) – Filter OpenVDB volume files",
            "filter_folder(boolean,(optional)) – Filter folders",
            "filter_blenlib(boolean,(optional)) – Filter Blender IDs",
            "filemode(int in[1,9],(optional)) – File Browser Mode, The setting for the file browser mode to load a .blend file, a library or a special file",
            "relative_path(boolean,(optional)) – Relative Path, Select the file relative to the blend file",
            "display_type(enum in['DEFAULT','LIST_VERTICAL','LIST_HORIZONTAL','THUMBNAIL'],(optional)) –Display TypeDEFAULTDefault – Automatically determine display type for files.LIST_VERTICALShort List – Display files as short list.LIST_HORIZONTALLong List – Display files as a detailed list.THUMBNAILThumbnails – Display files as thumbnails.",
            "DEFAULTDefault – Automatically determine display type for files.",
            "LIST_VERTICALShort List – Display files as short list.",
            "LIST_HORIZONTALLong List – Display files as a detailed list.",
            "THUMBNAILThumbnails – Display files as thumbnails.",
            "sort_method(enum in[],(optional)) – File sorting mode",
            "resolution(int in[1,30],(optional)) – Resolution, Resolution of the generated strokes",
            "scale(float in[0.001,100],(optional)) – Scale, Scale of the final strokes"
        ]
    },
    {
        "function_id": "bpy.ops.wm.interface_theme_preset_add",
        "signature": "bpy.ops.wm.interface_theme_preset_add(name='',remove_name=False,remove_active=False)#",
        "description": "Add a custom theme to the preset list",
        "parameters": [
            "name=''",
            "remove_name=False",
            "remove_active=False"
        ],
        "parameter_descriptions": [
            "name(string,(optional,never None)) – Name, Name of the preset, used to make the path name",
            "remove_name(boolean,(optional)) – remove_name",
            "remove_active(boolean,(optional)) – remove_active"
        ]
    },
    {
        "function_id": "bpy.ops.wm.interface_theme_preset_remove",
        "signature": "bpy.ops.wm.interface_theme_preset_remove(name='',remove_name=False,remove_active=True)#",
        "description": "Remove a custom theme from the preset list",
        "parameters": [
            "name=''",
            "remove_name=False",
            "remove_active=True"
        ],
        "parameter_descriptions": [
            "name(string,(optional,never None)) – Name, Name of the preset, used to make the path name",
            "remove_name(boolean,(optional)) – remove_name",
            "remove_active(boolean,(optional)) – remove_active"
        ]
    },
    {
        "function_id": "bpy.ops.wm.interface_theme_preset_save",
        "signature": "bpy.ops.wm.interface_theme_preset_save(name='',remove_name=False,remove_active=True)#",
        "description": "Save a custom theme in the preset list",
        "parameters": [
            "name=''",
            "remove_name=False",
            "remove_active=True"
        ],
        "parameter_descriptions": [
            "name(string,(optional,never None)) – Name, Name of the preset, used to make the path name",
            "remove_name(boolean,(optional)) – remove_name",
            "remove_active(boolean,(optional)) – remove_active"
        ]
    },
    {
        "function_id": "bpy.ops.wm.keyconfig_preset_add",
        "signature": "bpy.ops.wm.keyconfig_preset_add(name='',remove_name=False,remove_active=False)#",
        "description": "Add a custom keymap configuration to the preset list",
        "parameters": [
            "name=''",
            "remove_name=False",
            "remove_active=False"
        ],
        "parameter_descriptions": [
            "name(string,(optional,never None)) – Name, Name of the preset, used to make the path name",
            "remove_name(boolean,(optional)) – remove_name",
            "remove_active(boolean,(optional)) – remove_active"
        ]
    },
    {
        "function_id": "bpy.ops.wm.keyconfig_preset_remove",
        "signature": "bpy.ops.wm.keyconfig_preset_remove(name='',remove_name=False,remove_active=True)#",
        "description": "Remove a custom keymap configuration from the preset list",
        "parameters": [
            "name=''",
            "remove_name=False",
            "remove_active=True"
        ],
        "parameter_descriptions": [
            "name(string,(optional,never None)) – Name, Name of the preset, used to make the path name",
            "remove_name(boolean,(optional)) – remove_name",
            "remove_active(boolean,(optional)) – remove_active"
        ]
    },
    {
        "function_id": "bpy.ops.wm.lib_reload",
        "signature": "bpy.ops.wm.lib_reload(library='',filepath='',directory='',filename='',hide_props_region=True,check_existing=False,filter_blender=True,filter_backup=False,filter_image=False,filter_movie=False,filter_python=False,filter_font=False,filter_sound=False,filter_text=False,filter_archive=False,filter_btx=False,filter_collada=False,filter_alembic=False,filter_usd=False,filter_obj=False,filter_volume=False,filter_folder=True,filter_blenlib=False,filemode=8,relative_path=True,display_type='DEFAULT',sort_method='')#",
        "description": "Reload the given library",
        "parameters": [
            "library=''",
            "filepath=''",
            "directory=''",
            "filename=''",
            "hide_props_region=True",
            "check_existing=False",
            "filter_blender=True",
            "filter_backup=False",
            "filter_image=False",
            "filter_movie=False",
            "filter_python=False",
            "filter_font=False",
            "filter_sound=False",
            "filter_text=False",
            "filter_archive=False",
            "filter_btx=False",
            "filter_collada=False",
            "filter_alembic=False",
            "filter_usd=False",
            "filter_obj=False",
            "filter_volume=False",
            "filter_folder=True",
            "filter_blenlib=False",
            "filemode=8",
            "relative_path=True",
            "display_type='DEFAULT'",
            "sort_method=''"
        ],
        "parameter_descriptions": [
            "library(string,(optional,never None)) – Library, Library to reload",
            "filepath(string,(optional,never None)) – File Path, Path to file",
            "directory(string,(optional,never None)) – Directory, Directory of the file",
            "filename(string,(optional,never None)) – File Name, Name of the file",
            "hide_props_region(boolean,(optional)) – Hide Operator Properties, Collapse the region displaying the operator settings",
            "check_existing(boolean,(optional)) – Check Existing, Check and warn on overwriting existing files",
            "filter_blender(boolean,(optional)) – Filter .blend files",
            "filter_backup(boolean,(optional)) – Filter .blend files",
            "filter_image(boolean,(optional)) – Filter image files",
            "filter_movie(boolean,(optional)) – Filter movie files",
            "filter_python(boolean,(optional)) – Filter Python files",
            "filter_font(boolean,(optional)) – Filter font files",
            "filter_sound(boolean,(optional)) – Filter sound files",
            "filter_text(boolean,(optional)) – Filter text files",
            "filter_archive(boolean,(optional)) – Filter archive files",
            "filter_btx(boolean,(optional)) – Filter btx files",
            "filter_collada(boolean,(optional)) – Filter COLLADA files",
            "filter_alembic(boolean,(optional)) – Filter Alembic files",
            "filter_usd(boolean,(optional)) – Filter USD files",
            "filter_obj(boolean,(optional)) – Filter OBJ files",
            "filter_volume(boolean,(optional)) – Filter OpenVDB volume files",
            "filter_folder(boolean,(optional)) – Filter folders",
            "filter_blenlib(boolean,(optional)) – Filter Blender IDs",
            "filemode(int in[1,9],(optional)) – File Browser Mode, The setting for the file browser mode to load a .blend file, a library or a special file",
            "relative_path(boolean,(optional)) – Relative Path, Select the file relative to the blend file",
            "display_type(enum in['DEFAULT','LIST_VERTICAL','LIST_HORIZONTAL','THUMBNAIL'],(optional)) –Display TypeDEFAULTDefault – Automatically determine display type for files.LIST_VERTICALShort List – Display files as short list.LIST_HORIZONTALLong List – Display files as a detailed list.THUMBNAILThumbnails – Display files as thumbnails.",
            "DEFAULTDefault – Automatically determine display type for files.",
            "LIST_VERTICALShort List – Display files as short list.",
            "LIST_HORIZONTALLong List – Display files as a detailed list.",
            "THUMBNAILThumbnails – Display files as thumbnails.",
            "sort_method(enum in[],(optional)) – File sorting mode"
        ]
    },
    {
        "function_id": "bpy.ops.wm.lib_relocate",
        "signature": "bpy.ops.wm.lib_relocate(library='',filepath='',directory='',filename='',files=None,hide_props_region=True,check_existing=False,filter_blender=True,filter_backup=False,filter_image=False,filter_movie=False,filter_python=False,filter_font=False,filter_sound=False,filter_text=False,filter_archive=False,filter_btx=False,filter_collada=False,filter_alembic=False,filter_usd=False,filter_obj=False,filter_volume=False,filter_folder=True,filter_blenlib=False,filemode=8,relative_path=True,display_type='DEFAULT',sort_method='')#",
        "description": "Relocate the given library to one or several others",
        "parameters": [
            "library=''",
            "filepath=''",
            "directory=''",
            "filename=''",
            "files=None",
            "hide_props_region=True",
            "check_existing=False",
            "filter_blender=True",
            "filter_backup=False",
            "filter_image=False",
            "filter_movie=False",
            "filter_python=False",
            "filter_font=False",
            "filter_sound=False",
            "filter_text=False",
            "filter_archive=False",
            "filter_btx=False",
            "filter_collada=False",
            "filter_alembic=False",
            "filter_usd=False",
            "filter_obj=False",
            "filter_volume=False",
            "filter_folder=True",
            "filter_blenlib=False",
            "filemode=8",
            "relative_path=True",
            "display_type='DEFAULT'",
            "sort_method=''"
        ],
        "parameter_descriptions": [
            "library(string,(optional,never None)) – Library, Library to relocate",
            "filepath(string,(optional,never None)) – File Path, Path to file",
            "directory(string,(optional,never None)) – Directory, Directory of the file",
            "filename(string,(optional,never None)) – File Name, Name of the file",
            "files(bpy_prop_collectionofOperatorFileListElement, (optional)) – Files",
            "hide_props_region(boolean,(optional)) – Hide Operator Properties, Collapse the region displaying the operator settings",
            "check_existing(boolean,(optional)) – Check Existing, Check and warn on overwriting existing files",
            "filter_blender(boolean,(optional)) – Filter .blend files",
            "filter_backup(boolean,(optional)) – Filter .blend files",
            "filter_image(boolean,(optional)) – Filter image files",
            "filter_movie(boolean,(optional)) – Filter movie files",
            "filter_python(boolean,(optional)) – Filter Python files",
            "filter_font(boolean,(optional)) – Filter font files",
            "filter_sound(boolean,(optional)) – Filter sound files",
            "filter_text(boolean,(optional)) – Filter text files",
            "filter_archive(boolean,(optional)) – Filter archive files",
            "filter_btx(boolean,(optional)) – Filter btx files",
            "filter_collada(boolean,(optional)) – Filter COLLADA files",
            "filter_alembic(boolean,(optional)) – Filter Alembic files",
            "filter_usd(boolean,(optional)) – Filter USD files",
            "filter_obj(boolean,(optional)) – Filter OBJ files",
            "filter_volume(boolean,(optional)) – Filter OpenVDB volume files",
            "filter_folder(boolean,(optional)) – Filter folders",
            "filter_blenlib(boolean,(optional)) – Filter Blender IDs",
            "filemode(int in[1,9],(optional)) – File Browser Mode, The setting for the file browser mode to load a .blend file, a library or a special file",
            "relative_path(boolean,(optional)) – Relative Path, Select the file relative to the blend file",
            "display_type(enum in['DEFAULT','LIST_VERTICAL','LIST_HORIZONTAL','THUMBNAIL'],(optional)) –Display TypeDEFAULTDefault – Automatically determine display type for files.LIST_VERTICALShort List – Display files as short list.LIST_HORIZONTALLong List – Display files as a detailed list.THUMBNAILThumbnails – Display files as thumbnails.",
            "DEFAULTDefault – Automatically determine display type for files.",
            "LIST_VERTICALShort List – Display files as short list.",
            "LIST_HORIZONTALLong List – Display files as a detailed list.",
            "THUMBNAILThumbnails – Display files as thumbnails.",
            "sort_method(enum in[],(optional)) – File sorting mode"
        ]
    },
    {
        "function_id": "bpy.ops.wm.link",
        "signature": "bpy.ops.wm.link(filepath='',directory='',filename='',files=None,check_existing=False,filter_blender=True,filter_backup=False,filter_image=False,filter_movie=False,filter_python=False,filter_font=False,filter_sound=False,filter_text=False,filter_archive=False,filter_btx=False,filter_collada=False,filter_alembic=False,filter_usd=False,filter_obj=False,filter_volume=False,filter_folder=True,filter_blenlib=True,filemode=1,relative_path=True,display_type='DEFAULT',sort_method='',link=True,do_reuse_local_id=False,clear_asset_data=False,autoselect=True,active_collection=True,instance_collections=True,instance_object_data=True)#",
        "description": "Link from a Library .blend file",
        "parameters": [
            "filepath=''",
            "directory=''",
            "filename=''",
            "files=None",
            "check_existing=False",
            "filter_blender=True",
            "filter_backup=False",
            "filter_image=False",
            "filter_movie=False",
            "filter_python=False",
            "filter_font=False",
            "filter_sound=False",
            "filter_text=False",
            "filter_archive=False",
            "filter_btx=False",
            "filter_collada=False",
            "filter_alembic=False",
            "filter_usd=False",
            "filter_obj=False",
            "filter_volume=False",
            "filter_folder=True",
            "filter_blenlib=True",
            "filemode=1",
            "relative_path=True",
            "display_type='DEFAULT'",
            "sort_method=''",
            "link=True",
            "do_reuse_local_id=False",
            "clear_asset_data=False",
            "autoselect=True",
            "active_collection=True",
            "instance_collections=True",
            "instance_object_data=True"
        ],
        "parameter_descriptions": [
            "filepath(string,(optional,never None)) – File Path, Path to file",
            "directory(string,(optional,never None)) – Directory, Directory of the file",
            "filename(string,(optional,never None)) – File Name, Name of the file",
            "files(bpy_prop_collectionofOperatorFileListElement, (optional)) – Files",
            "check_existing(boolean,(optional)) – Check Existing, Check and warn on overwriting existing files",
            "filter_blender(boolean,(optional)) – Filter .blend files",
            "filter_backup(boolean,(optional)) – Filter .blend files",
            "filter_image(boolean,(optional)) – Filter image files",
            "filter_movie(boolean,(optional)) – Filter movie files",
            "filter_python(boolean,(optional)) – Filter Python files",
            "filter_font(boolean,(optional)) – Filter font files",
            "filter_sound(boolean,(optional)) – Filter sound files",
            "filter_text(boolean,(optional)) – Filter text files",
            "filter_archive(boolean,(optional)) – Filter archive files",
            "filter_btx(boolean,(optional)) – Filter btx files",
            "filter_collada(boolean,(optional)) – Filter COLLADA files",
            "filter_alembic(boolean,(optional)) – Filter Alembic files",
            "filter_usd(boolean,(optional)) – Filter USD files",
            "filter_obj(boolean,(optional)) – Filter OBJ files",
            "filter_volume(boolean,(optional)) – Filter OpenVDB volume files",
            "filter_folder(boolean,(optional)) – Filter folders",
            "filter_blenlib(boolean,(optional)) – Filter Blender IDs",
            "filemode(int in[1,9],(optional)) – File Browser Mode, The setting for the file browser mode to load a .blend file, a library or a special file",
            "relative_path(boolean,(optional)) – Relative Path, Select the file relative to the blend file",
            "display_type(enum in['DEFAULT','LIST_VERTICAL','LIST_HORIZONTAL','THUMBNAIL'],(optional)) –Display TypeDEFAULTDefault – Automatically determine display type for files.LIST_VERTICALShort List – Display files as short list.LIST_HORIZONTALLong List – Display files as a detailed list.THUMBNAILThumbnails – Display files as thumbnails.",
            "DEFAULTDefault – Automatically determine display type for files.",
            "LIST_VERTICALShort List – Display files as short list.",
            "LIST_HORIZONTALLong List – Display files as a detailed list.",
            "THUMBNAILThumbnails – Display files as thumbnails.",
            "sort_method(enum in[],(optional)) – File sorting mode",
            "link(boolean,(optional)) – Link, Link the objects or data-blocks rather than appending",
            "do_reuse_local_id(boolean,(optional)) – Re-Use Local Data, Try to re-use previously matching appended data-blocks instead of appending a new copy",
            "clear_asset_data(boolean,(optional)) – Clear Asset Data, Don’t add asset meta-data or tags from the original data-block",
            "autoselect(boolean,(optional)) – Select, Select new objects",
            "active_collection(boolean,(optional)) – Active Collection, Put new objects on the active collection",
            "instance_collections(boolean,(optional)) – Instance Collections, Create instances for collections, rather than adding them directly to the scene",
            "instance_object_data(boolean,(optional)) – Instance Object Data, Create instances for object data which are not referenced by any objects"
        ]
    },
    {
        "function_id": "bpy.ops.wm.memory_statistics",
        "signature": "bpy.ops.wm.memory_statistics()#",
        "description": "Print memory statistics to the console",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.wm.obj_export",
        "signature": "bpy.ops.wm.obj_export(filepath='',check_existing=True,filter_blender=False,filter_backup=False,filter_image=False,filter_movie=False,filter_python=False,filter_font=False,filter_sound=False,filter_text=False,filter_archive=False,filter_btx=False,filter_collada=False,filter_alembic=False,filter_usd=False,filter_obj=False,filter_volume=False,filter_folder=True,filter_blenlib=False,filemode=8,display_type='DEFAULT',sort_method='',export_animation=False,start_frame=-2147483648,end_frame=2147483647,forward_axis='NEGATIVE_Z',up_axis='Y',global_scale=1.0,apply_modifiers=True,export_eval_mode='DAG_EVAL_VIEWPORT',export_selected_objects=False,export_uv=True,export_normals=True,export_colors=False,export_materials=True,export_pbr_extensions=False,path_mode='AUTO',export_triangulated_mesh=False,export_curves_as_nurbs=False,export_object_groups=False,export_material_groups=False,export_vertex_groups=False,export_smooth_groups=False,smooth_group_bitflags=False,filter_glob='*.obj;*.mtl',collection='')#",
        "description": "Save the scene to a Wavefront OBJ file",
        "parameters": [
            "filepath=''",
            "check_existing=True",
            "filter_blender=False",
            "filter_backup=False",
            "filter_image=False",
            "filter_movie=False",
            "filter_python=False",
            "filter_font=False",
            "filter_sound=False",
            "filter_text=False",
            "filter_archive=False",
            "filter_btx=False",
            "filter_collada=False",
            "filter_alembic=False",
            "filter_usd=False",
            "filter_obj=False",
            "filter_volume=False",
            "filter_folder=True",
            "filter_blenlib=False",
            "filemode=8",
            "display_type='DEFAULT'",
            "sort_method=''",
            "export_animation=False",
            "start_frame=-2147483648",
            "end_frame=2147483647",
            "forward_axis='NEGATIVE_Z'",
            "up_axis='Y'",
            "global_scale=1.0",
            "apply_modifiers=True",
            "export_eval_mode='DAG_EVAL_VIEWPORT'",
            "export_selected_objects=False",
            "export_uv=True",
            "export_normals=True",
            "export_colors=False",
            "export_materials=True",
            "export_pbr_extensions=False",
            "path_mode='AUTO'",
            "export_triangulated_mesh=False",
            "export_curves_as_nurbs=False",
            "export_object_groups=False",
            "export_material_groups=False",
            "export_vertex_groups=False",
            "export_smooth_groups=False",
            "smooth_group_bitflags=False",
            "filter_glob='*.obj;*.mtl'",
            "collection=''"
        ],
        "parameter_descriptions": [
            "filepath(string,(optional,never None)) – File Path, Path to file",
            "check_existing(boolean,(optional)) – Check Existing, Check and warn on overwriting existing files",
            "filter_blender(boolean,(optional)) – Filter .blend files",
            "filter_backup(boolean,(optional)) – Filter .blend files",
            "filter_image(boolean,(optional)) – Filter image files",
            "filter_movie(boolean,(optional)) – Filter movie files",
            "filter_python(boolean,(optional)) – Filter Python files",
            "filter_font(boolean,(optional)) – Filter font files",
            "filter_sound(boolean,(optional)) – Filter sound files",
            "filter_text(boolean,(optional)) – Filter text files",
            "filter_archive(boolean,(optional)) – Filter archive files",
            "filter_btx(boolean,(optional)) – Filter btx files",
            "filter_collada(boolean,(optional)) – Filter COLLADA files",
            "filter_alembic(boolean,(optional)) – Filter Alembic files",
            "filter_usd(boolean,(optional)) – Filter USD files",
            "filter_obj(boolean,(optional)) – Filter OBJ files",
            "filter_volume(boolean,(optional)) – Filter OpenVDB volume files",
            "filter_folder(boolean,(optional)) – Filter folders",
            "filter_blenlib(boolean,(optional)) – Filter Blender IDs",
            "filemode(int in[1,9],(optional)) – File Browser Mode, The setting for the file browser mode to load a .blend file, a library or a special file",
            "display_type(enum in['DEFAULT','LIST_VERTICAL','LIST_HORIZONTAL','THUMBNAIL'],(optional)) –Display TypeDEFAULTDefault – Automatically determine display type for files.LIST_VERTICALShort List – Display files as short list.LIST_HORIZONTALLong List – Display files as a detailed list.THUMBNAILThumbnails – Display files as thumbnails.",
            "DEFAULTDefault – Automatically determine display type for files.",
            "LIST_VERTICALShort List – Display files as short list.",
            "LIST_HORIZONTALLong List – Display files as a detailed list.",
            "THUMBNAILThumbnails – Display files as thumbnails.",
            "sort_method(enum in[],(optional)) – File sorting mode",
            "export_animation(boolean,(optional)) – Export Animation, Export multiple frames instead of the current frame only",
            "start_frame(int in[-inf,inf],(optional)) – Start Frame, The first frame to be exported",
            "end_frame(int in[-inf,inf],(optional)) – End Frame, The last frame to be exported",
            "forward_axis(enum in['X','Y','Z','NEGATIVE_X','NEGATIVE_Y','NEGATIVE_Z'],(optional)) –Forward AxisXX – Positive X axis.YY – Positive Y axis.ZZ – Positive Z axis.NEGATIVE_X-X – Negative X axis.NEGATIVE_Y-Y – Negative Y axis.NEGATIVE_Z-Z – Negative Z axis.",
            "XX – Positive X axis.",
            "YY – Positive Y axis.",
            "ZZ – Positive Z axis.",
            "NEGATIVE_X-X – Negative X axis.",
            "NEGATIVE_Y-Y – Negative Y axis.",
            "NEGATIVE_Z-Z – Negative Z axis.",
            "up_axis(enum in['X','Y','Z','NEGATIVE_X','NEGATIVE_Y','NEGATIVE_Z'],(optional)) –Up AxisXX – Positive X axis.YY – Positive Y axis.ZZ – Positive Z axis.NEGATIVE_X-X – Negative X axis.NEGATIVE_Y-Y – Negative Y axis.NEGATIVE_Z-Z – Negative Z axis.",
            "XX – Positive X axis.",
            "YY – Positive Y axis.",
            "ZZ – Positive Z axis.",
            "NEGATIVE_X-X – Negative X axis.",
            "NEGATIVE_Y-Y – Negative Y axis.",
            "NEGATIVE_Z-Z – Negative Z axis.",
            "global_scale(float in[0.0001,10000],(optional)) – Scale, Value by which to enlarge or shrink the objects with respect to the world’s origin",
            "apply_modifiers(boolean,(optional)) – Apply Modifiers, Apply modifiers to exported meshes",
            "export_eval_mode(enum in['DAG_EVAL_RENDER','DAG_EVAL_VIEWPORT'],(optional)) –Object Properties, Determines properties like object visibility, modifiers etc., where they differ for Render and ViewportDAG_EVAL_RENDERRender – Export objects as they appear in render.DAG_EVAL_VIEWPORTViewport – Export objects as they appear in the viewport.",
            "DAG_EVAL_RENDERRender – Export objects as they appear in render.",
            "DAG_EVAL_VIEWPORTViewport – Export objects as they appear in the viewport.",
            "export_selected_objects(boolean,(optional)) – Export Selected Objects, Export only selected objects instead of all supported objects",
            "export_uv(boolean,(optional)) – Export UVs",
            "export_normals(boolean,(optional)) – Export Normals, Export per-face normals if the face is flat-shaded, per-face-per-loop normals if smooth-shaded",
            "export_colors(boolean,(optional)) – Export Colors, Export per-vertex colors",
            "export_materials(boolean,(optional)) – Export Materials, Export MTL library. There must be a Principled-BSDF node for image textures to be exported to the MTL file",
            "export_pbr_extensions(boolean,(optional)) – Export Materials with PBR Extensions, Export MTL library using PBR extensions (roughness, metallic, sheen, coat, anisotropy, transmission)",
            "path_mode(enum in['AUTO','ABSOLUTE','RELATIVE','MATCH','STRIP','COPY'],(optional)) –Path Mode, Method used to reference pathsAUTOAuto – Use relative paths with subdirectories only.ABSOLUTEAbsolute – Always write absolute paths.RELATIVERelative – Write relative paths where possible.MATCHMatch – Match absolute/relative setting with input path.STRIPStrip – Write filename only.COPYCopy – Copy the file to the destination path.",
            "AUTOAuto – Use relative paths with subdirectories only.",
            "ABSOLUTEAbsolute – Always write absolute paths.",
            "RELATIVERelative – Write relative paths where possible.",
            "MATCHMatch – Match absolute/relative setting with input path.",
            "STRIPStrip – Write filename only.",
            "COPYCopy – Copy the file to the destination path.",
            "export_triangulated_mesh(boolean,(optional)) – Export Triangulated Mesh, All ngons with four or more vertices will be triangulated. Meshes in the scene will not be affected. Behaves like Triangulate Modifier with ngon-method: “Beauty”, quad-method: “Shortest Diagonal”, min vertices: 4",
            "export_curves_as_nurbs(boolean,(optional)) – Export Curves as NURBS, Export curves in parametric form instead of exporting as mesh",
            "export_object_groups(boolean,(optional)) – Export Object Groups, Append mesh name to object name, separated by a ‘_’",
            "export_material_groups(boolean,(optional)) – Export Material Groups, Generate an OBJ group for each part of a geometry using a different material",
            "export_vertex_groups(boolean,(optional)) – Export Vertex Groups, Export the name of the vertex group of a face. It is approximated by choosing the vertex group with the most members among the vertices of a face",
            "export_smooth_groups(boolean,(optional)) – Export Smooth Groups, Every smooth-shaded face is assigned group “1” and every flat-shaded face “off”",
            "smooth_group_bitflags(boolean,(optional)) – Generate Bitflags for Smooth Groups",
            "filter_glob(string,(optional,never None)) – Extension Filter",
            "collection(string,(optional,never None)) – Collection"
        ]
    },
    {
        "function_id": "bpy.ops.wm.obj_import",
        "signature": "bpy.ops.wm.obj_import(filepath='',directory='',files=None,check_existing=False,filter_blender=False,filter_backup=False,filter_image=False,filter_movie=False,filter_python=False,filter_font=False,filter_sound=False,filter_text=False,filter_archive=False,filter_btx=False,filter_collada=False,filter_alembic=False,filter_usd=False,filter_obj=False,filter_volume=False,filter_folder=True,filter_blenlib=False,filemode=8,display_type='DEFAULT',sort_method='',global_scale=1.0,clamp_size=0.0,forward_axis='NEGATIVE_Z',up_axis='Y',use_split_objects=True,use_split_groups=False,import_vertex_groups=False,validate_meshes=True,collection_separator='',filter_glob='*.obj;*.mtl')#",
        "description": "Load a Wavefront OBJ scene",
        "parameters": [
            "filepath=''",
            "directory=''",
            "files=None",
            "check_existing=False",
            "filter_blender=False",
            "filter_backup=False",
            "filter_image=False",
            "filter_movie=False",
            "filter_python=False",
            "filter_font=False",
            "filter_sound=False",
            "filter_text=False",
            "filter_archive=False",
            "filter_btx=False",
            "filter_collada=False",
            "filter_alembic=False",
            "filter_usd=False",
            "filter_obj=False",
            "filter_volume=False",
            "filter_folder=True",
            "filter_blenlib=False",
            "filemode=8",
            "display_type='DEFAULT'",
            "sort_method=''",
            "global_scale=1.0",
            "clamp_size=0.0",
            "forward_axis='NEGATIVE_Z'",
            "up_axis='Y'",
            "use_split_objects=True",
            "use_split_groups=False",
            "import_vertex_groups=False",
            "validate_meshes=True",
            "collection_separator=''",
            "filter_glob='*.obj;*.mtl'"
        ],
        "parameter_descriptions": [
            "filepath(string,(optional,never None)) – File Path, Path to file",
            "directory(string,(optional,never None)) – Directory, Directory of the file",
            "files(bpy_prop_collectionofOperatorFileListElement, (optional)) – Files",
            "check_existing(boolean,(optional)) – Check Existing, Check and warn on overwriting existing files",
            "filter_blender(boolean,(optional)) – Filter .blend files",
            "filter_backup(boolean,(optional)) – Filter .blend files",
            "filter_image(boolean,(optional)) – Filter image files",
            "filter_movie(boolean,(optional)) – Filter movie files",
            "filter_python(boolean,(optional)) – Filter Python files",
            "filter_font(boolean,(optional)) – Filter font files",
            "filter_sound(boolean,(optional)) – Filter sound files",
            "filter_text(boolean,(optional)) – Filter text files",
            "filter_archive(boolean,(optional)) – Filter archive files",
            "filter_btx(boolean,(optional)) – Filter btx files",
            "filter_collada(boolean,(optional)) – Filter COLLADA files",
            "filter_alembic(boolean,(optional)) – Filter Alembic files",
            "filter_usd(boolean,(optional)) – Filter USD files",
            "filter_obj(boolean,(optional)) – Filter OBJ files",
            "filter_volume(boolean,(optional)) – Filter OpenVDB volume files",
            "filter_folder(boolean,(optional)) – Filter folders",
            "filter_blenlib(boolean,(optional)) – Filter Blender IDs",
            "filemode(int in[1,9],(optional)) – File Browser Mode, The setting for the file browser mode to load a .blend file, a library or a special file",
            "display_type(enum in['DEFAULT','LIST_VERTICAL','LIST_HORIZONTAL','THUMBNAIL'],(optional)) –Display TypeDEFAULTDefault – Automatically determine display type for files.LIST_VERTICALShort List – Display files as short list.LIST_HORIZONTALLong List – Display files as a detailed list.THUMBNAILThumbnails – Display files as thumbnails.",
            "DEFAULTDefault – Automatically determine display type for files.",
            "LIST_VERTICALShort List – Display files as short list.",
            "LIST_HORIZONTALLong List – Display files as a detailed list.",
            "THUMBNAILThumbnails – Display files as thumbnails.",
            "sort_method(enum in[],(optional)) – File sorting mode",
            "global_scale(float in[0.0001,10000],(optional)) – Scale, Value by which to enlarge or shrink the objects with respect to the world’s origin",
            "clamp_size(float in[0,1000],(optional)) – Clamp Bounding Box, Resize the objects to keep bounding box under this value. Value 0 disables clamping",
            "forward_axis(enum in['X','Y','Z','NEGATIVE_X','NEGATIVE_Y','NEGATIVE_Z'],(optional)) –Forward AxisXX – Positive X axis.YY – Positive Y axis.ZZ – Positive Z axis.NEGATIVE_X-X – Negative X axis.NEGATIVE_Y-Y – Negative Y axis.NEGATIVE_Z-Z – Negative Z axis.",
            "XX – Positive X axis.",
            "YY – Positive Y axis.",
            "ZZ – Positive Z axis.",
            "NEGATIVE_X-X – Negative X axis.",
            "NEGATIVE_Y-Y – Negative Y axis.",
            "NEGATIVE_Z-Z – Negative Z axis.",
            "up_axis(enum in['X','Y','Z','NEGATIVE_X','NEGATIVE_Y','NEGATIVE_Z'],(optional)) –Up AxisXX – Positive X axis.YY – Positive Y axis.ZZ – Positive Z axis.NEGATIVE_X-X – Negative X axis.NEGATIVE_Y-Y – Negative Y axis.NEGATIVE_Z-Z – Negative Z axis.",
            "XX – Positive X axis.",
            "YY – Positive Y axis.",
            "ZZ – Positive Z axis.",
            "NEGATIVE_X-X – Negative X axis.",
            "NEGATIVE_Y-Y – Negative Y axis.",
            "NEGATIVE_Z-Z – Negative Z axis.",
            "use_split_objects(boolean,(optional)) – Split By Object, Import each OBJ ‘o’ as a separate object",
            "use_split_groups(boolean,(optional)) – Split By Group, Import each OBJ ‘g’ as a separate object",
            "import_vertex_groups(boolean,(optional)) – Vertex Groups, Import OBJ groups as vertex groups",
            "validate_meshes(boolean,(optional)) – Validate Meshes, Ensure the data is valid (when disabled, data may be imported which causes crashes displaying or editing)",
            "collection_separator(string,(optional,never None)) – Path Separator, Character used to separate objects name into hierarchical structure",
            "filter_glob(string,(optional,never None)) – Extension Filter"
        ]
    },
    {
        "function_id": "bpy.ops.wm.open_mainfile",
        "signature": "bpy.ops.wm.open_mainfile(filepath='',hide_props_region=True,check_existing=False,filter_blender=True,filter_backup=False,filter_image=False,filter_movie=False,filter_python=False,filter_font=False,filter_sound=False,filter_text=False,filter_archive=False,filter_btx=False,filter_collada=False,filter_alembic=False,filter_usd=False,filter_obj=False,filter_volume=False,filter_folder=True,filter_blenlib=False,filemode=8,display_type='DEFAULT',sort_method='',load_ui=True,use_scripts=True,display_file_selector=True,state=0)#",
        "description": "Open a Blender file",
        "parameters": [
            "filepath=''",
            "hide_props_region=True",
            "check_existing=False",
            "filter_blender=True",
            "filter_backup=False",
            "filter_image=False",
            "filter_movie=False",
            "filter_python=False",
            "filter_font=False",
            "filter_sound=False",
            "filter_text=False",
            "filter_archive=False",
            "filter_btx=False",
            "filter_collada=False",
            "filter_alembic=False",
            "filter_usd=False",
            "filter_obj=False",
            "filter_volume=False",
            "filter_folder=True",
            "filter_blenlib=False",
            "filemode=8",
            "display_type='DEFAULT'",
            "sort_method=''",
            "load_ui=True",
            "use_scripts=True",
            "display_file_selector=True",
            "state=0"
        ],
        "parameter_descriptions": [
            "filepath(string,(optional,never None)) – File Path, Path to file",
            "hide_props_region(boolean,(optional)) – Hide Operator Properties, Collapse the region displaying the operator settings",
            "check_existing(boolean,(optional)) – Check Existing, Check and warn on overwriting existing files",
            "filter_blender(boolean,(optional)) – Filter .blend files",
            "filter_backup(boolean,(optional)) – Filter .blend files",
            "filter_image(boolean,(optional)) – Filter image files",
            "filter_movie(boolean,(optional)) – Filter movie files",
            "filter_python(boolean,(optional)) – Filter Python files",
            "filter_font(boolean,(optional)) – Filter font files",
            "filter_sound(boolean,(optional)) – Filter sound files",
            "filter_text(boolean,(optional)) – Filter text files",
            "filter_archive(boolean,(optional)) – Filter archive files",
            "filter_btx(boolean,(optional)) – Filter btx files",
            "filter_collada(boolean,(optional)) – Filter COLLADA files",
            "filter_alembic(boolean,(optional)) – Filter Alembic files",
            "filter_usd(boolean,(optional)) – Filter USD files",
            "filter_obj(boolean,(optional)) – Filter OBJ files",
            "filter_volume(boolean,(optional)) – Filter OpenVDB volume files",
            "filter_folder(boolean,(optional)) – Filter folders",
            "filter_blenlib(boolean,(optional)) – Filter Blender IDs",
            "filemode(int in[1,9],(optional)) – File Browser Mode, The setting for the file browser mode to load a .blend file, a library or a special file",
            "display_type(enum in['DEFAULT','LIST_VERTICAL','LIST_HORIZONTAL','THUMBNAIL'],(optional)) –Display TypeDEFAULTDefault – Automatically determine display type for files.LIST_VERTICALShort List – Display files as short list.LIST_HORIZONTALLong List – Display files as a detailed list.THUMBNAILThumbnails – Display files as thumbnails.",
            "DEFAULTDefault – Automatically determine display type for files.",
            "LIST_VERTICALShort List – Display files as short list.",
            "LIST_HORIZONTALLong List – Display files as a detailed list.",
            "THUMBNAILThumbnails – Display files as thumbnails.",
            "sort_method(enum in[],(optional)) – File sorting mode",
            "load_ui(boolean,(optional)) – Load UI, Load user interface setup in the .blend file",
            "use_scripts(boolean,(optional)) – Trusted Source, Allow .blend file to execute scripts automatically, default available from system preferences",
            "display_file_selector(boolean,(optional)) – Display File Selector",
            "state(int in[-inf,inf],(optional)) – State"
        ]
    },
    {
        "function_id": "bpy.ops.wm.operator_cheat_sheet",
        "signature": "bpy.ops.wm.operator_cheat_sheet()#",
        "description": "List all the operators in a text-block, useful for scripting",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.wm.operator_defaults",
        "signature": "bpy.ops.wm.operator_defaults()#",
        "description": "Set the active operator to its default values",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.wm.operator_pie_enum",
        "signature": "bpy.ops.wm.operator_pie_enum(data_path='',prop_string='')#",
        "description": "Undocumented, considercontributing.",
        "parameters": [
            "data_path=''",
            "prop_string=''"
        ],
        "parameter_descriptions": [
            "data_path(string,(optional,never None)) – Operator, Operator name (in Python as string)",
            "prop_string(string,(optional,never None)) – Property, Property name (as a string)"
        ]
    },
    {
        "function_id": "bpy.ops.wm.operator_preset_add",
        "signature": "bpy.ops.wm.operator_preset_add(name='',remove_name=False,remove_active=False,operator='')#",
        "description": "Add or remove an Operator Preset",
        "parameters": [
            "name=''",
            "remove_name=False",
            "remove_active=False",
            "operator=''"
        ],
        "parameter_descriptions": [
            "name(string,(optional,never None)) – Name, Name of the preset, used to make the path name",
            "remove_name(boolean,(optional)) – remove_name",
            "remove_active(boolean,(optional)) – remove_active",
            "operator(string,(optional,never None)) – Operator"
        ]
    },
    {
        "function_id": "bpy.ops.wm.operator_presets_cleanup",
        "signature": "bpy.ops.wm.operator_presets_cleanup(operator='',properties=None)#",
        "description": "Remove outdated operator properties from presets that may cause problems",
        "parameters": [
            "operator=''",
            "properties=None"
        ],
        "parameter_descriptions": [
            "operator(string,(optional,never None)) – operator",
            "properties(bpy_prop_collectionofOperatorFileListElement, (optional)) – properties"
        ]
    },
    {
        "function_id": "bpy.ops.wm.owner_disable",
        "signature": "bpy.ops.wm.owner_disable(owner_id='')#",
        "description": "Disable add-on for workspace",
        "parameters": [
            "owner_id=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.wm.owner_enable",
        "signature": "bpy.ops.wm.owner_enable(owner_id='')#",
        "description": "Enable add-on for workspace",
        "parameters": [
            "owner_id=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.wm.path_open",
        "signature": "bpy.ops.wm.path_open(filepath='')#",
        "description": "Open a path in a file browser",
        "parameters": [
            "filepath=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.wm.ply_export",
        "signature": "bpy.ops.wm.ply_export(filepath='',check_existing=True,filter_blender=False,filter_backup=False,filter_image=False,filter_movie=False,filter_python=False,filter_font=False,filter_sound=False,filter_text=False,filter_archive=False,filter_btx=False,filter_collada=False,filter_alembic=False,filter_usd=False,filter_obj=False,filter_volume=False,filter_folder=True,filter_blenlib=False,filemode=8,display_type='DEFAULT',sort_method='',forward_axis='Y',up_axis='Z',global_scale=1.0,apply_modifiers=True,export_selected_objects=False,collection='',export_uv=True,export_normals=False,export_colors='SRGB',export_attributes=True,export_triangulated_mesh=False,ascii_format=False,filter_glob='*.ply')#",
        "description": "Save the scene to a PLY file",
        "parameters": [
            "filepath=''",
            "check_existing=True",
            "filter_blender=False",
            "filter_backup=False",
            "filter_image=False",
            "filter_movie=False",
            "filter_python=False",
            "filter_font=False",
            "filter_sound=False",
            "filter_text=False",
            "filter_archive=False",
            "filter_btx=False",
            "filter_collada=False",
            "filter_alembic=False",
            "filter_usd=False",
            "filter_obj=False",
            "filter_volume=False",
            "filter_folder=True",
            "filter_blenlib=False",
            "filemode=8",
            "display_type='DEFAULT'",
            "sort_method=''",
            "forward_axis='Y'",
            "up_axis='Z'",
            "global_scale=1.0",
            "apply_modifiers=True",
            "export_selected_objects=False",
            "collection=''",
            "export_uv=True",
            "export_normals=False",
            "export_colors='SRGB'",
            "export_attributes=True",
            "export_triangulated_mesh=False",
            "ascii_format=False",
            "filter_glob='*.ply'"
        ],
        "parameter_descriptions": [
            "filepath(string,(optional,never None)) – File Path, Path to file",
            "check_existing(boolean,(optional)) – Check Existing, Check and warn on overwriting existing files",
            "filter_blender(boolean,(optional)) – Filter .blend files",
            "filter_backup(boolean,(optional)) – Filter .blend files",
            "filter_image(boolean,(optional)) – Filter image files",
            "filter_movie(boolean,(optional)) – Filter movie files",
            "filter_python(boolean,(optional)) – Filter Python files",
            "filter_font(boolean,(optional)) – Filter font files",
            "filter_sound(boolean,(optional)) – Filter sound files",
            "filter_text(boolean,(optional)) – Filter text files",
            "filter_archive(boolean,(optional)) – Filter archive files",
            "filter_btx(boolean,(optional)) – Filter btx files",
            "filter_collada(boolean,(optional)) – Filter COLLADA files",
            "filter_alembic(boolean,(optional)) – Filter Alembic files",
            "filter_usd(boolean,(optional)) – Filter USD files",
            "filter_obj(boolean,(optional)) – Filter OBJ files",
            "filter_volume(boolean,(optional)) – Filter OpenVDB volume files",
            "filter_folder(boolean,(optional)) – Filter folders",
            "filter_blenlib(boolean,(optional)) – Filter Blender IDs",
            "filemode(int in[1,9],(optional)) – File Browser Mode, The setting for the file browser mode to load a .blend file, a library or a special file",
            "display_type(enum in['DEFAULT','LIST_VERTICAL','LIST_HORIZONTAL','THUMBNAIL'],(optional)) –Display TypeDEFAULTDefault – Automatically determine display type for files.LIST_VERTICALShort List – Display files as short list.LIST_HORIZONTALLong List – Display files as a detailed list.THUMBNAILThumbnails – Display files as thumbnails.",
            "DEFAULTDefault – Automatically determine display type for files.",
            "LIST_VERTICALShort List – Display files as short list.",
            "LIST_HORIZONTALLong List – Display files as a detailed list.",
            "THUMBNAILThumbnails – Display files as thumbnails.",
            "sort_method(enum in[],(optional)) – File sorting mode",
            "forward_axis(enum in['X','Y','Z','NEGATIVE_X','NEGATIVE_Y','NEGATIVE_Z'],(optional)) –Forward AxisXX – Positive X axis.YY – Positive Y axis.ZZ – Positive Z axis.NEGATIVE_X-X – Negative X axis.NEGATIVE_Y-Y – Negative Y axis.NEGATIVE_Z-Z – Negative Z axis.",
            "XX – Positive X axis.",
            "YY – Positive Y axis.",
            "ZZ – Positive Z axis.",
            "NEGATIVE_X-X – Negative X axis.",
            "NEGATIVE_Y-Y – Negative Y axis.",
            "NEGATIVE_Z-Z – Negative Z axis.",
            "up_axis(enum in['X','Y','Z','NEGATIVE_X','NEGATIVE_Y','NEGATIVE_Z'],(optional)) –Up AxisXX – Positive X axis.YY – Positive Y axis.ZZ – Positive Z axis.NEGATIVE_X-X – Negative X axis.NEGATIVE_Y-Y – Negative Y axis.NEGATIVE_Z-Z – Negative Z axis.",
            "XX – Positive X axis.",
            "YY – Positive Y axis.",
            "ZZ – Positive Z axis.",
            "NEGATIVE_X-X – Negative X axis.",
            "NEGATIVE_Y-Y – Negative Y axis.",
            "NEGATIVE_Z-Z – Negative Z axis.",
            "global_scale(float in[0.0001,10000],(optional)) – Scale, Value by which to enlarge or shrink the objects with respect to the world’s origin",
            "apply_modifiers(boolean,(optional)) – Apply Modifiers, Apply modifiers to exported meshes",
            "export_selected_objects(boolean,(optional)) – Export Selected Objects, Export only selected objects instead of all supported objects",
            "collection(string,(optional,never None)) – Source Collection, Export only objects from this collection (and its children)",
            "export_uv(boolean,(optional)) – Export UVs",
            "export_normals(boolean,(optional)) – Export Vertex Normals, Export specific vertex normals if available, export calculated normals otherwise",
            "export_colors(enum in['NONE','SRGB','LINEAR'],(optional)) –Export Vertex Colors, Export vertex color attributesNONENone – Do not import/export color attributes.SRGBsRGB – Vertex colors in the file are in sRGB color space.LINEARLinear – Vertex colors in the file are in linear color space.",
            "NONENone – Do not import/export color attributes.",
            "SRGBsRGB – Vertex colors in the file are in sRGB color space.",
            "LINEARLinear – Vertex colors in the file are in linear color space.",
            "export_attributes(boolean,(optional)) – Export Vertex Attributes, Export custom vertex attributes",
            "export_triangulated_mesh(boolean,(optional)) – Export Triangulated Mesh, All ngons with four or more vertices will be triangulated. Meshes in the scene will not be affected. Behaves like Triangulate Modifier with ngon-method: “Beauty”, quad-method: “Shortest Diagonal”, min vertices: 4",
            "ascii_format(boolean,(optional)) – ASCII Format, Export file in ASCII format, export as binary otherwise",
            "filter_glob(string,(optional,never None)) – Extension Filter"
        ]
    },
    {
        "function_id": "bpy.ops.wm.ply_import",
        "signature": "bpy.ops.wm.ply_import(filepath='',directory='',files=None,check_existing=False,filter_blender=False,filter_backup=False,filter_image=False,filter_movie=False,filter_python=False,filter_font=False,filter_sound=False,filter_text=False,filter_archive=False,filter_btx=False,filter_collada=False,filter_alembic=False,filter_usd=False,filter_obj=False,filter_volume=False,filter_folder=True,filter_blenlib=False,filemode=8,display_type='DEFAULT',sort_method='',global_scale=1.0,use_scene_unit=False,forward_axis='Y',up_axis='Z',merge_verts=False,import_colors='SRGB',import_attributes=True,filter_glob='*.ply')#",
        "description": "Import an PLY file as an object",
        "parameters": [
            "filepath=''",
            "directory=''",
            "files=None",
            "check_existing=False",
            "filter_blender=False",
            "filter_backup=False",
            "filter_image=False",
            "filter_movie=False",
            "filter_python=False",
            "filter_font=False",
            "filter_sound=False",
            "filter_text=False",
            "filter_archive=False",
            "filter_btx=False",
            "filter_collada=False",
            "filter_alembic=False",
            "filter_usd=False",
            "filter_obj=False",
            "filter_volume=False",
            "filter_folder=True",
            "filter_blenlib=False",
            "filemode=8",
            "display_type='DEFAULT'",
            "sort_method=''",
            "global_scale=1.0",
            "use_scene_unit=False",
            "forward_axis='Y'",
            "up_axis='Z'",
            "merge_verts=False",
            "import_colors='SRGB'",
            "import_attributes=True",
            "filter_glob='*.ply'"
        ],
        "parameter_descriptions": [
            "filepath(string,(optional,never None)) – File Path, Path to file",
            "directory(string,(optional,never None)) – Directory, Directory of the file",
            "files(bpy_prop_collectionofOperatorFileListElement, (optional)) – Files",
            "check_existing(boolean,(optional)) – Check Existing, Check and warn on overwriting existing files",
            "filter_blender(boolean,(optional)) – Filter .blend files",
            "filter_backup(boolean,(optional)) – Filter .blend files",
            "filter_image(boolean,(optional)) – Filter image files",
            "filter_movie(boolean,(optional)) – Filter movie files",
            "filter_python(boolean,(optional)) – Filter Python files",
            "filter_font(boolean,(optional)) – Filter font files",
            "filter_sound(boolean,(optional)) – Filter sound files",
            "filter_text(boolean,(optional)) – Filter text files",
            "filter_archive(boolean,(optional)) – Filter archive files",
            "filter_btx(boolean,(optional)) – Filter btx files",
            "filter_collada(boolean,(optional)) – Filter COLLADA files",
            "filter_alembic(boolean,(optional)) – Filter Alembic files",
            "filter_usd(boolean,(optional)) – Filter USD files",
            "filter_obj(boolean,(optional)) – Filter OBJ files",
            "filter_volume(boolean,(optional)) – Filter OpenVDB volume files",
            "filter_folder(boolean,(optional)) – Filter folders",
            "filter_blenlib(boolean,(optional)) – Filter Blender IDs",
            "filemode(int in[1,9],(optional)) – File Browser Mode, The setting for the file browser mode to load a .blend file, a library or a special file",
            "display_type(enum in['DEFAULT','LIST_VERTICAL','LIST_HORIZONTAL','THUMBNAIL'],(optional)) –Display TypeDEFAULTDefault – Automatically determine display type for files.LIST_VERTICALShort List – Display files as short list.LIST_HORIZONTALLong List – Display files as a detailed list.THUMBNAILThumbnails – Display files as thumbnails.",
            "DEFAULTDefault – Automatically determine display type for files.",
            "LIST_VERTICALShort List – Display files as short list.",
            "LIST_HORIZONTALLong List – Display files as a detailed list.",
            "THUMBNAILThumbnails – Display files as thumbnails.",
            "sort_method(enum in[],(optional)) – File sorting mode",
            "global_scale(float in[1e-06,1e+06],(optional)) – Scale",
            "use_scene_unit(boolean,(optional)) – Scene Unit, Apply current scene’s unit (as defined by unit scale) to imported data",
            "forward_axis(enum in['X','Y','Z','NEGATIVE_X','NEGATIVE_Y','NEGATIVE_Z'],(optional)) –Forward AxisXX – Positive X axis.YY – Positive Y axis.ZZ – Positive Z axis.NEGATIVE_X-X – Negative X axis.NEGATIVE_Y-Y – Negative Y axis.NEGATIVE_Z-Z – Negative Z axis.",
            "XX – Positive X axis.",
            "YY – Positive Y axis.",
            "ZZ – Positive Z axis.",
            "NEGATIVE_X-X – Negative X axis.",
            "NEGATIVE_Y-Y – Negative Y axis.",
            "NEGATIVE_Z-Z – Negative Z axis.",
            "up_axis(enum in['X','Y','Z','NEGATIVE_X','NEGATIVE_Y','NEGATIVE_Z'],(optional)) –Up AxisXX – Positive X axis.YY – Positive Y axis.ZZ – Positive Z axis.NEGATIVE_X-X – Negative X axis.NEGATIVE_Y-Y – Negative Y axis.NEGATIVE_Z-Z – Negative Z axis.",
            "XX – Positive X axis.",
            "YY – Positive Y axis.",
            "ZZ – Positive Z axis.",
            "NEGATIVE_X-X – Negative X axis.",
            "NEGATIVE_Y-Y – Negative Y axis.",
            "NEGATIVE_Z-Z – Negative Z axis.",
            "merge_verts(boolean,(optional)) – Merge Vertices, Merges vertices by distance",
            "import_colors(enum in['NONE','SRGB','LINEAR'],(optional)) –Vertex Colors, Import vertex color attributesNONENone – Do not import/export color attributes.SRGBsRGB – Vertex colors in the file are in sRGB color space.LINEARLinear – Vertex colors in the file are in linear color space.",
            "NONENone – Do not import/export color attributes.",
            "SRGBsRGB – Vertex colors in the file are in sRGB color space.",
            "LINEARLinear – Vertex colors in the file are in linear color space.",
            "import_attributes(boolean,(optional)) – Vertex Attributes, Import custom vertex attributes",
            "filter_glob(string,(optional,never None)) – Extension Filter"
        ]
    },
    {
        "function_id": "bpy.ops.wm.previews_batch_clear",
        "signature": "bpy.ops.wm.previews_batch_clear(files=None,directory='',filter_blender=True,filter_folder=True,use_scenes=True,use_collections=True,use_objects=True,use_intern_data=True,use_trusted=False,use_backups=True)#",
        "description": "Clear selected .blend file’s previews",
        "parameters": [
            "files=None",
            "directory=''",
            "filter_blender=True",
            "filter_folder=True",
            "use_scenes=True",
            "use_collections=True",
            "use_objects=True",
            "use_intern_data=True",
            "use_trusted=False",
            "use_backups=True"
        ],
        "parameter_descriptions": [
            "files(bpy_prop_collectionofOperatorFileListElement, (optional)) – files",
            "directory(string,(optional,never None)) – directory",
            "filter_blender(boolean,(optional)) – filter_blender",
            "filter_folder(boolean,(optional)) – filter_folder",
            "use_scenes(boolean,(optional)) – Scenes, Clear scenes’ previews",
            "use_collections(boolean,(optional)) – Collections, Clear collections’ previews",
            "use_objects(boolean,(optional)) – Objects, Clear objects’ previews",
            "use_intern_data(boolean,(optional)) – Materials & Textures, Clear ‘internal’ previews (materials, textures, images, etc.)",
            "use_trusted(boolean,(optional)) – Trusted Blend Files, Enable Python evaluation for selected files",
            "use_backups(boolean,(optional)) – Save Backups, Keep a backup (.blend1) version of the files when saving with cleared previews"
        ]
    },
    {
        "function_id": "bpy.ops.wm.previews_batch_generate",
        "signature": "bpy.ops.wm.previews_batch_generate(files=None,directory='',filter_blender=True,filter_folder=True,use_scenes=True,use_collections=True,use_objects=True,use_intern_data=True,use_trusted=False,use_backups=True)#",
        "description": "Generate selected .blend file’s previews",
        "parameters": [
            "files=None",
            "directory=''",
            "filter_blender=True",
            "filter_folder=True",
            "use_scenes=True",
            "use_collections=True",
            "use_objects=True",
            "use_intern_data=True",
            "use_trusted=False",
            "use_backups=True"
        ],
        "parameter_descriptions": [
            "files(bpy_prop_collectionofOperatorFileListElement, (optional)) – Collection of file paths with commondirectoryroot",
            "directory(string,(optional,never None)) – Root path of all files listed infilescollection",
            "filter_blender(boolean,(optional)) – Show Blender files in the File Browser",
            "filter_folder(boolean,(optional)) – Show folders in the File Browser",
            "use_scenes(boolean,(optional)) – Scenes, Generate scenes’ previews",
            "use_collections(boolean,(optional)) – Collections, Generate collections’ previews",
            "use_objects(boolean,(optional)) – Objects, Generate objects’ previews",
            "use_intern_data(boolean,(optional)) – Materials & Textures, Generate ‘internal’ previews (materials, textures, images, etc.)",
            "use_trusted(boolean,(optional)) – Trusted Blend Files, Enable Python evaluation for selected files",
            "use_backups(boolean,(optional)) – Save Backups, Keep a backup (.blend1) version of the files when saving with generated previews"
        ]
    },
    {
        "function_id": "bpy.ops.wm.previews_clear",
        "signature": "bpy.ops.wm.previews_clear(id_type={})#",
        "description": "Clear data-block previews (only for some types like objects, materials, textures, etc.)",
        "parameters": [
            "id_type={}"
        ],
        "parameter_descriptions": [
            "ALLAll Types.",
            "GEOMETRYAll Geometry Types – Clear previews for scenes, collections and objects.",
            "SHADINGAll Shading Types – Clear previews for materials, lights, worlds, textures and images.",
            "SCENEScenes.",
            "COLLECTIONCollections.",
            "OBJECTObjects.",
            "MATERIALMaterials.",
            "LIGHTLights.",
            "WORLDWorlds.",
            "TEXTURETextures.",
            "IMAGEImages."
        ]
    },
    {
        "function_id": "bpy.ops.wm.previews_ensure",
        "signature": "bpy.ops.wm.previews_ensure()#",
        "description": "Ensure data-block previews are available and up-to-date (to be saved in .blend file, only for some types like materials, textures, etc.)",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.wm.properties_add",
        "signature": "bpy.ops.wm.properties_add(data_path='')#",
        "description": "Add your own property to the data-block",
        "parameters": [
            "data_path=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.wm.properties_context_change",
        "signature": "bpy.ops.wm.properties_context_change(context='')#",
        "description": "Jump to a different tab inside the properties editor",
        "parameters": [
            "context=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.wm.properties_edit",
        "signature": "bpy.ops.wm.properties_edit(data_path='',property_name='',property_type='FLOAT',is_overridable_library=False,description='',use_soft_limits=False,array_length=3,default_int=(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),min_int=-10000,max_int=10000,soft_min_int=-10000,soft_max_int=10000,step_int=1,default_bool=(False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False),default_float=(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0),min_float=-10000.0,max_float=-10000.0,soft_min_float=-10000.0,soft_max_float=-10000.0,precision=3,step_float=0.1,subtype='',default_string='',id_type='OBJECT',eval_string='')#",
        "description": "Change a custom property’s type, or adjust how it is displayed in the interface",
        "parameters": [
            "data_path=''",
            "property_name=''",
            "property_type='FLOAT'",
            "is_overridable_library=False",
            "description=''",
            "use_soft_limits=False",
            "array_length=3",
            "default_int=(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)",
            "min_int=-10000",
            "max_int=10000",
            "soft_min_int=-10000",
            "soft_max_int=10000",
            "step_int=1",
            "default_bool=(False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False)",
            "default_float=(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0)",
            "min_float=-10000.0",
            "max_float=-10000.0",
            "soft_min_float=-10000.0",
            "soft_max_float=-10000.0",
            "precision=3",
            "step_float=0.1",
            "subtype=''",
            "default_string=''",
            "id_type='OBJECT'",
            "eval_string=''"
        ],
        "parameter_descriptions": [
            "data_path(string,(optional,never None)) – Property Edit, Property data_path edit",
            "property_name(string,(optional,never None)) – Property Name, Property name edit",
            "property_type(enum in['FLOAT','FLOAT_ARRAY','INT','INT_ARRAY','BOOL','BOOL_ARRAY','STRING','DATA_BLOCK','PYTHON'],(optional)) –TypeFLOATFloat – A single floating-point value.FLOAT_ARRAYFloat Array – An array of floating-point values.INTInteger – A single integer.INT_ARRAYInteger Array – An array of integers.BOOLBoolean – A true or false value.BOOL_ARRAYBoolean Array – An array of true or false values.STRINGString – A string value.DATA_BLOCKData-Block – A data-block value.PYTHONPython – Edit a Python value directly, for unsupported property types.",
            "FLOATFloat – A single floating-point value.",
            "FLOAT_ARRAYFloat Array – An array of floating-point values.",
            "INTInteger – A single integer.",
            "INT_ARRAYInteger Array – An array of integers.",
            "BOOLBoolean – A true or false value.",
            "BOOL_ARRAYBoolean Array – An array of true or false values.",
            "STRINGString – A string value.",
            "DATA_BLOCKData-Block – A data-block value.",
            "PYTHONPython – Edit a Python value directly, for unsupported property types.",
            "is_overridable_library(boolean,(optional)) – Library Overridable, Allow the property to be overridden when the data-block is linked",
            "description(string,(optional,never None)) – Description",
            "use_soft_limits(boolean,(optional)) – Soft Limits, Limits the Property Value slider to a range, values outside the range must be inputted numerically",
            "array_length(int in[1,32],(optional)) – Array Length",
            "default_int(int arrayof32 items in[-inf,inf],(optional)) – Default Value",
            "min_int(int in[-inf,inf],(optional)) – Min",
            "max_int(int in[-inf,inf],(optional)) – Max",
            "soft_min_int(int in[-inf,inf],(optional)) – Soft Min",
            "soft_max_int(int in[-inf,inf],(optional)) – Soft Max",
            "step_int(int in[1,inf],(optional)) – Step",
            "default_bool(boolean arrayof32 items,(optional)) – Default Value",
            "default_float(float arrayof32 items in[-inf,inf],(optional)) – Default Value",
            "min_float(float in[-inf,inf],(optional)) – Min",
            "max_float(float in[-inf,inf],(optional)) – Max",
            "soft_min_float(float in[-inf,inf],(optional)) – Soft Min",
            "soft_max_float(float in[-inf,inf],(optional)) – Soft Max",
            "precision(int in[0,8],(optional)) – Precision",
            "step_float(float in[0.001,inf],(optional)) – Step",
            "subtype(enum in[],(optional)) – Subtype",
            "default_string(string,(optional,never None)) – Default Value",
            "id_type(enum in['ACTION','ARMATURE','BRUSH','CACHEFILE','CAMERA','COLLECTION','CURVE','CURVES','FONT','GREASEPENCIL','GREASEPENCIL_V3','IMAGE','KEY','LATTICE','LIBRARY','LIGHT','LIGHT_PROBE','LINESTYLE','MASK','MATERIAL','MESH','META','MOVIECLIP','NODETREE','OBJECT','PAINTCURVE','PALETTE','PARTICLE','POINTCLOUD','SCENE','SCREEN','SOUND','SPEAKER','TEXT','TEXTURE','VOLUME','WINDOWMANAGER','WORKSPACE','WORLD'],(optional)) – ID Type",
            "eval_string(string,(optional,never None)) – Value, Python value for unsupported custom property types"
        ]
    },
    {
        "function_id": "bpy.ops.wm.properties_edit_value",
        "signature": "bpy.ops.wm.properties_edit_value(data_path='',property_name='',eval_string='')#",
        "description": "Edit the value of a custom property",
        "parameters": [
            "data_path=''",
            "property_name=''",
            "eval_string=''"
        ],
        "parameter_descriptions": [
            "data_path(string,(optional,never None)) – Property Edit, Property data_path edit",
            "property_name(string,(optional,never None)) – Property Name, Property name edit",
            "eval_string(string,(optional,never None)) – Value, Value for custom property types that can only be edited as a Python expression"
        ]
    },
    {
        "function_id": "bpy.ops.wm.properties_remove",
        "signature": "bpy.ops.wm.properties_remove(data_path='',property_name='')#",
        "description": "Internal use (edit a property data_path)",
        "parameters": [
            "data_path=''",
            "property_name=''"
        ],
        "parameter_descriptions": [
            "data_path(string,(optional,never None)) – Property Edit, Property data_path edit",
            "property_name(string,(optional,never None)) – Property Name, Property name edit"
        ]
    },
    {
        "function_id": "bpy.ops.wm.quit_blender",
        "signature": "bpy.ops.wm.quit_blender()#",
        "description": "Quit Blender",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.wm.radial_control",
        "signature": "bpy.ops.wm.radial_control(data_path_primary='',data_path_secondary='',use_secondary='',rotation_path='',color_path='',fill_color_path='',fill_color_override_path='',fill_color_override_test_path='',zoom_path='',image_id='',secondary_tex=False,release_confirm=False)#",
        "description": "Set some size property (e.g. brush size) with mouse wheel",
        "parameters": [
            "data_path_primary=''",
            "data_path_secondary=''",
            "use_secondary=''",
            "rotation_path=''",
            "color_path=''",
            "fill_color_path=''",
            "fill_color_override_path=''",
            "fill_color_override_test_path=''",
            "zoom_path=''",
            "image_id=''",
            "secondary_tex=False",
            "release_confirm=False"
        ],
        "parameter_descriptions": [
            "data_path_primary(string,(optional,never None)) – Primary Data Path, Primary path of property to be set by the radial control",
            "data_path_secondary(string,(optional,never None)) – Secondary Data Path, Secondary path of property to be set by the radial control",
            "use_secondary(string,(optional,never None)) – Use Secondary, Path of property to select between the primary and secondary data paths",
            "rotation_path(string,(optional,never None)) – Rotation Path, Path of property used to rotate the texture display",
            "color_path(string,(optional,never None)) – Color Path, Path of property used to set the color of the control",
            "fill_color_path(string,(optional,never None)) – Fill Color Path, Path of property used to set the fill color of the control",
            "fill_color_override_path(string,(optional,never None)) – Fill Color Override Path",
            "fill_color_override_test_path(string,(optional,never None)) – Fill Color Override Test",
            "zoom_path(string,(optional,never None)) – Zoom Path, Path of property used to set the zoom level for the control",
            "image_id(string,(optional,never None)) – Image ID, Path of ID that is used to generate an image for the control",
            "secondary_tex(boolean,(optional)) – Secondary Texture, Tweak brush secondary/mask texture",
            "release_confirm(boolean,(optional)) – Confirm On Release, Finish operation on key release"
        ]
    },
    {
        "function_id": "bpy.ops.wm.read_factory_settings",
        "signature": "bpy.ops.wm.read_factory_settings(use_factory_startup_app_template_only=False,app_template='Template',use_empty=False)#",
        "description": "Load factory default startup file and preferences. To make changes permanent, use “Save Startup File” and “Save Preferences”",
        "parameters": [
            "use_factory_startup_app_template_only=False",
            "app_template='Template'",
            "use_empty=False"
        ],
        "parameter_descriptions": [
            "use_factory_startup_app_template_only(boolean,(optional)) – Factory Startup App-Template Only",
            "use_empty(boolean,(optional)) – Empty, After loading, remove everything except scenes, windows, and workspaces. This makes it possible to load the startup file with its scene configuration and window layout intact, but no objects, materials, animations, …"
        ]
    },
    {
        "function_id": "bpy.ops.wm.read_factory_userpref",
        "signature": "bpy.ops.wm.read_factory_userpref(use_factory_startup_app_template_only=False)#",
        "description": "Load factory default preferences. To make changes to preferences permanent, use “Save Preferences”",
        "parameters": [
            "use_factory_startup_app_template_only=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.wm.read_history",
        "signature": "bpy.ops.wm.read_history()#",
        "description": "Reloads history and bookmarks",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.wm.read_homefile",
        "signature": "bpy.ops.wm.read_homefile(filepath='',load_ui=True,use_splash=False,use_factory_startup=False,use_factory_startup_app_template_only=False,app_template='Template',use_empty=False)#",
        "description": "Open the default file",
        "parameters": [
            "filepath=''",
            "load_ui=True",
            "use_splash=False",
            "use_factory_startup=False",
            "use_factory_startup_app_template_only=False",
            "app_template='Template'",
            "use_empty=False"
        ],
        "parameter_descriptions": [
            "filepath(string,(optional,never None)) – File Path, Path to an alternative start-up file",
            "load_ui(boolean,(optional)) – Load UI, Load user interface setup from the .blend file",
            "use_splash(boolean,(optional)) – Splash",
            "use_factory_startup(boolean,(optional)) – Factory Startup, Load the default (‘factory startup’) blend file. This is independent of the normal start-up file that the user can save",
            "use_factory_startup_app_template_only(boolean,(optional)) – Factory Startup App-Template Only",
            "use_empty(boolean,(optional)) – Empty, After loading, remove everything except scenes, windows, and workspaces. This makes it possible to load the startup file with its scene configuration and window layout intact, but no objects, materials, animations, …"
        ]
    },
    {
        "function_id": "bpy.ops.wm.read_userpref",
        "signature": "bpy.ops.wm.read_userpref()#",
        "description": "Load last saved preferences",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.wm.recover_auto_save",
        "signature": "bpy.ops.wm.recover_auto_save(filepath='',hide_props_region=True,check_existing=False,filter_blender=True,filter_backup=False,filter_image=False,filter_movie=False,filter_python=False,filter_font=False,filter_sound=False,filter_text=False,filter_archive=False,filter_btx=False,filter_collada=False,filter_alembic=False,filter_usd=False,filter_obj=False,filter_volume=False,filter_folder=False,filter_blenlib=False,filemode=8,display_type='LIST_VERTICAL',sort_method='',use_scripts=True)#",
        "description": "Open an automatically saved file to recover it",
        "parameters": [
            "filepath=''",
            "hide_props_region=True",
            "check_existing=False",
            "filter_blender=True",
            "filter_backup=False",
            "filter_image=False",
            "filter_movie=False",
            "filter_python=False",
            "filter_font=False",
            "filter_sound=False",
            "filter_text=False",
            "filter_archive=False",
            "filter_btx=False",
            "filter_collada=False",
            "filter_alembic=False",
            "filter_usd=False",
            "filter_obj=False",
            "filter_volume=False",
            "filter_folder=False",
            "filter_blenlib=False",
            "filemode=8",
            "display_type='LIST_VERTICAL'",
            "sort_method=''",
            "use_scripts=True"
        ],
        "parameter_descriptions": [
            "filepath(string,(optional,never None)) – File Path, Path to file",
            "hide_props_region(boolean,(optional)) – Hide Operator Properties, Collapse the region displaying the operator settings",
            "check_existing(boolean,(optional)) – Check Existing, Check and warn on overwriting existing files",
            "filter_blender(boolean,(optional)) – Filter .blend files",
            "filter_backup(boolean,(optional)) – Filter .blend files",
            "filter_image(boolean,(optional)) – Filter image files",
            "filter_movie(boolean,(optional)) – Filter movie files",
            "filter_python(boolean,(optional)) – Filter Python files",
            "filter_font(boolean,(optional)) – Filter font files",
            "filter_sound(boolean,(optional)) – Filter sound files",
            "filter_text(boolean,(optional)) – Filter text files",
            "filter_archive(boolean,(optional)) – Filter archive files",
            "filter_btx(boolean,(optional)) – Filter btx files",
            "filter_collada(boolean,(optional)) – Filter COLLADA files",
            "filter_alembic(boolean,(optional)) – Filter Alembic files",
            "filter_usd(boolean,(optional)) – Filter USD files",
            "filter_obj(boolean,(optional)) – Filter OBJ files",
            "filter_volume(boolean,(optional)) – Filter OpenVDB volume files",
            "filter_folder(boolean,(optional)) – Filter folders",
            "filter_blenlib(boolean,(optional)) – Filter Blender IDs",
            "filemode(int in[1,9],(optional)) – File Browser Mode, The setting for the file browser mode to load a .blend file, a library or a special file",
            "display_type(enum in['DEFAULT','LIST_VERTICAL','LIST_HORIZONTAL','THUMBNAIL'],(optional)) –Display TypeDEFAULTDefault – Automatically determine display type for files.LIST_VERTICALShort List – Display files as short list.LIST_HORIZONTALLong List – Display files as a detailed list.THUMBNAILThumbnails – Display files as thumbnails.",
            "DEFAULTDefault – Automatically determine display type for files.",
            "LIST_VERTICALShort List – Display files as short list.",
            "LIST_HORIZONTALLong List – Display files as a detailed list.",
            "THUMBNAILThumbnails – Display files as thumbnails.",
            "sort_method(enum in[],(optional)) – File sorting mode",
            "use_scripts(boolean,(optional)) – Trusted Source, Allow .blend file to execute scripts automatically, default available from system preferences"
        ]
    },
    {
        "function_id": "bpy.ops.wm.recover_last_session",
        "signature": "bpy.ops.wm.recover_last_session(use_scripts=True)#",
        "description": "Open the last closed file (“quit.blend”)",
        "parameters": [
            "use_scripts=True"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.wm.redraw_timer",
        "signature": "bpy.ops.wm.redraw_timer(type='DRAW',iterations=10,time_limit=0.0)#",
        "description": "Simple redraw timer to test the speed of updating the interface",
        "parameters": [
            "type='DRAW'",
            "iterations=10",
            "time_limit=0.0"
        ],
        "parameter_descriptions": [
            "type(enum in['DRAW','DRAW_SWAP','DRAW_WIN','DRAW_WIN_SWAP','ANIM_STEP','ANIM_PLAY','UNDO'],(optional)) –TypeDRAWDraw Region – Draw region.DRAW_SWAPDraw Region & Swap – Draw region and swap.DRAW_WINDraw Window – Draw window.DRAW_WIN_SWAPDraw Window & Swap – Draw window and swap.ANIM_STEPAnimation Step – Animation steps.ANIM_PLAYAnimation Play – Animation playback.UNDOUndo/Redo – Undo and redo.",
            "DRAWDraw Region – Draw region.",
            "DRAW_SWAPDraw Region & Swap – Draw region and swap.",
            "DRAW_WINDraw Window – Draw window.",
            "DRAW_WIN_SWAPDraw Window & Swap – Draw window and swap.",
            "ANIM_STEPAnimation Step – Animation steps.",
            "ANIM_PLAYAnimation Play – Animation playback.",
            "UNDOUndo/Redo – Undo and redo.",
            "iterations(int in[1,inf],(optional)) – Iterations, Number of times to redraw",
            "time_limit(float in[0,inf],(optional)) – Time Limit, Seconds to run the test for (override iterations)"
        ]
    },
    {
        "function_id": "bpy.ops.wm.revert_mainfile",
        "signature": "bpy.ops.wm.revert_mainfile(use_scripts=True)#",
        "description": "Reload the saved file",
        "parameters": [
            "use_scripts=True"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.wm.save_as_mainfile",
        "signature": "bpy.ops.wm.save_as_mainfile(filepath='',hide_props_region=True,check_existing=True,filter_blender=True,filter_backup=False,filter_image=False,filter_movie=False,filter_python=False,filter_font=False,filter_sound=False,filter_text=False,filter_archive=False,filter_btx=False,filter_collada=False,filter_alembic=False,filter_usd=False,filter_obj=False,filter_volume=False,filter_folder=True,filter_blenlib=False,filemode=8,display_type='DEFAULT',sort_method='',compress=False,relative_remap=True,copy=False)#",
        "description": "Save the current file in the desired location",
        "parameters": [
            "filepath=''",
            "hide_props_region=True",
            "check_existing=True",
            "filter_blender=True",
            "filter_backup=False",
            "filter_image=False",
            "filter_movie=False",
            "filter_python=False",
            "filter_font=False",
            "filter_sound=False",
            "filter_text=False",
            "filter_archive=False",
            "filter_btx=False",
            "filter_collada=False",
            "filter_alembic=False",
            "filter_usd=False",
            "filter_obj=False",
            "filter_volume=False",
            "filter_folder=True",
            "filter_blenlib=False",
            "filemode=8",
            "display_type='DEFAULT'",
            "sort_method=''",
            "compress=False",
            "relative_remap=True",
            "copy=False"
        ],
        "parameter_descriptions": [
            "filepath(string,(optional,never None)) – File Path, Path to file",
            "hide_props_region(boolean,(optional)) – Hide Operator Properties, Collapse the region displaying the operator settings",
            "check_existing(boolean,(optional)) – Check Existing, Check and warn on overwriting existing files",
            "filter_blender(boolean,(optional)) – Filter .blend files",
            "filter_backup(boolean,(optional)) – Filter .blend files",
            "filter_image(boolean,(optional)) – Filter image files",
            "filter_movie(boolean,(optional)) – Filter movie files",
            "filter_python(boolean,(optional)) – Filter Python files",
            "filter_font(boolean,(optional)) – Filter font files",
            "filter_sound(boolean,(optional)) – Filter sound files",
            "filter_text(boolean,(optional)) – Filter text files",
            "filter_archive(boolean,(optional)) – Filter archive files",
            "filter_btx(boolean,(optional)) – Filter btx files",
            "filter_collada(boolean,(optional)) – Filter COLLADA files",
            "filter_alembic(boolean,(optional)) – Filter Alembic files",
            "filter_usd(boolean,(optional)) – Filter USD files",
            "filter_obj(boolean,(optional)) – Filter OBJ files",
            "filter_volume(boolean,(optional)) – Filter OpenVDB volume files",
            "filter_folder(boolean,(optional)) – Filter folders",
            "filter_blenlib(boolean,(optional)) – Filter Blender IDs",
            "filemode(int in[1,9],(optional)) – File Browser Mode, The setting for the file browser mode to load a .blend file, a library or a special file",
            "display_type(enum in['DEFAULT','LIST_VERTICAL','LIST_HORIZONTAL','THUMBNAIL'],(optional)) –Display TypeDEFAULTDefault – Automatically determine display type for files.LIST_VERTICALShort List – Display files as short list.LIST_HORIZONTALLong List – Display files as a detailed list.THUMBNAILThumbnails – Display files as thumbnails.",
            "DEFAULTDefault – Automatically determine display type for files.",
            "LIST_VERTICALShort List – Display files as short list.",
            "LIST_HORIZONTALLong List – Display files as a detailed list.",
            "THUMBNAILThumbnails – Display files as thumbnails.",
            "sort_method(enum in[],(optional)) – File sorting mode",
            "compress(boolean,(optional)) – Compress, Write compressed .blend file",
            "relative_remap(boolean,(optional)) – Remap Relative, Remap relative paths when saving to a different directory",
            "copy(boolean,(optional)) – Save Copy, Save a copy of the actual working state but does not make saved file active"
        ]
    },
    {
        "function_id": "bpy.ops.wm.save_homefile",
        "signature": "bpy.ops.wm.save_homefile()#",
        "description": "Make the current file the default startup file",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.wm.save_mainfile",
        "signature": "bpy.ops.wm.save_mainfile(filepath='',hide_props_region=True,check_existing=True,filter_blender=True,filter_backup=False,filter_image=False,filter_movie=False,filter_python=False,filter_font=False,filter_sound=False,filter_text=False,filter_archive=False,filter_btx=False,filter_collada=False,filter_alembic=False,filter_usd=False,filter_obj=False,filter_volume=False,filter_folder=True,filter_blenlib=False,filemode=8,display_type='DEFAULT',sort_method='',compress=False,relative_remap=False,exit=False,incremental=False)#",
        "description": "Save the current Blender file",
        "parameters": [
            "filepath=''",
            "hide_props_region=True",
            "check_existing=True",
            "filter_blender=True",
            "filter_backup=False",
            "filter_image=False",
            "filter_movie=False",
            "filter_python=False",
            "filter_font=False",
            "filter_sound=False",
            "filter_text=False",
            "filter_archive=False",
            "filter_btx=False",
            "filter_collada=False",
            "filter_alembic=False",
            "filter_usd=False",
            "filter_obj=False",
            "filter_volume=False",
            "filter_folder=True",
            "filter_blenlib=False",
            "filemode=8",
            "display_type='DEFAULT'",
            "sort_method=''",
            "compress=False",
            "relative_remap=False",
            "exit=False",
            "incremental=False"
        ],
        "parameter_descriptions": [
            "filepath(string,(optional,never None)) – File Path, Path to file",
            "hide_props_region(boolean,(optional)) – Hide Operator Properties, Collapse the region displaying the operator settings",
            "check_existing(boolean,(optional)) – Check Existing, Check and warn on overwriting existing files",
            "filter_blender(boolean,(optional)) – Filter .blend files",
            "filter_backup(boolean,(optional)) – Filter .blend files",
            "filter_image(boolean,(optional)) – Filter image files",
            "filter_movie(boolean,(optional)) – Filter movie files",
            "filter_python(boolean,(optional)) – Filter Python files",
            "filter_font(boolean,(optional)) – Filter font files",
            "filter_sound(boolean,(optional)) – Filter sound files",
            "filter_text(boolean,(optional)) – Filter text files",
            "filter_archive(boolean,(optional)) – Filter archive files",
            "filter_btx(boolean,(optional)) – Filter btx files",
            "filter_collada(boolean,(optional)) – Filter COLLADA files",
            "filter_alembic(boolean,(optional)) – Filter Alembic files",
            "filter_usd(boolean,(optional)) – Filter USD files",
            "filter_obj(boolean,(optional)) – Filter OBJ files",
            "filter_volume(boolean,(optional)) – Filter OpenVDB volume files",
            "filter_folder(boolean,(optional)) – Filter folders",
            "filter_blenlib(boolean,(optional)) – Filter Blender IDs",
            "filemode(int in[1,9],(optional)) – File Browser Mode, The setting for the file browser mode to load a .blend file, a library or a special file",
            "display_type(enum in['DEFAULT','LIST_VERTICAL','LIST_HORIZONTAL','THUMBNAIL'],(optional)) –Display TypeDEFAULTDefault – Automatically determine display type for files.LIST_VERTICALShort List – Display files as short list.LIST_HORIZONTALLong List – Display files as a detailed list.THUMBNAILThumbnails – Display files as thumbnails.",
            "DEFAULTDefault – Automatically determine display type for files.",
            "LIST_VERTICALShort List – Display files as short list.",
            "LIST_HORIZONTALLong List – Display files as a detailed list.",
            "THUMBNAILThumbnails – Display files as thumbnails.",
            "sort_method(enum in[],(optional)) – File sorting mode",
            "compress(boolean,(optional)) – Compress, Write compressed .blend file",
            "relative_remap(boolean,(optional)) – Remap Relative, Remap relative paths when saving to a different directory",
            "exit(boolean,(optional)) – Exit, Exit Blender after saving",
            "incremental(boolean,(optional)) – Incremental, Save the current Blender file with a numerically incremented name that does not overwrite any existing files"
        ]
    },
    {
        "function_id": "bpy.ops.wm.save_userpref",
        "signature": "bpy.ops.wm.save_userpref()#",
        "description": "Make the current preferences default",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.wm.search_menu",
        "signature": "bpy.ops.wm.search_menu()#",
        "description": "Pop-up a search over all menus in the current context",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.wm.search_operator",
        "signature": "bpy.ops.wm.search_operator()#",
        "description": "Pop-up a search over all available operators in current context",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.wm.search_single_menu",
        "signature": "bpy.ops.wm.search_single_menu(menu_idname='',initial_query='')#",
        "description": "Pop-up a search for a menu in current context",
        "parameters": [
            "menu_idname=''",
            "initial_query=''"
        ],
        "parameter_descriptions": [
            "menu_idname(string,(optional,never None)) – Menu Name, Menu to search in",
            "initial_query(string,(optional,never None)) – Initial Query, Query to insert into the search box"
        ]
    },
    {
        "function_id": "bpy.ops.wm.set_stereo_3d",
        "signature": "bpy.ops.wm.set_stereo_3d(display_mode='ANAGLYPH',anaglyph_type='RED_CYAN',interlace_type='ROW_INTERLEAVED',use_interlace_swap=False,use_sidebyside_crosseyed=False)#",
        "description": "Toggle 3D stereo support for current window (or change the display mode)",
        "parameters": [
            "display_mode='ANAGLYPH'",
            "anaglyph_type='RED_CYAN'",
            "interlace_type='ROW_INTERLEAVED'",
            "use_interlace_swap=False",
            "use_sidebyside_crosseyed=False"
        ],
        "parameter_descriptions": [
            "display_mode(enum inStereo3D Display Items, (optional)) – Display Mode",
            "anaglyph_type(enum inStereo3D Anaglyph Type Items, (optional)) – Anaglyph Type",
            "interlace_type(enum inStereo3D Interlace Type Items, (optional)) – Interlace Type",
            "use_interlace_swap(boolean,(optional)) – Swap Left/Right, Swap left and right stereo channels",
            "use_sidebyside_crosseyed(boolean,(optional)) – Cross-Eyed, Right eye should see left image and vice versa"
        ]
    },
    {
        "function_id": "bpy.ops.wm.splash",
        "signature": "bpy.ops.wm.splash()#",
        "description": "Open the splash screen with release info",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.wm.splash_about",
        "signature": "bpy.ops.wm.splash_about()#",
        "description": "Open a window with information about Blender",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.wm.stl_export",
        "signature": "bpy.ops.wm.stl_export(filepath='',check_existing=True,filter_blender=False,filter_backup=False,filter_image=False,filter_movie=False,filter_python=False,filter_font=False,filter_sound=False,filter_text=False,filter_archive=False,filter_btx=False,filter_collada=False,filter_alembic=False,filter_usd=False,filter_obj=False,filter_volume=False,filter_folder=True,filter_blenlib=False,filemode=8,display_type='DEFAULT',sort_method='',ascii_format=False,use_batch=False,export_selected_objects=False,collection='',global_scale=1.0,use_scene_unit=False,forward_axis='Y',up_axis='Z',apply_modifiers=True,filter_glob='*.stl')#",
        "description": "Save the scene to an STL file",
        "parameters": [
            "filepath=''",
            "check_existing=True",
            "filter_blender=False",
            "filter_backup=False",
            "filter_image=False",
            "filter_movie=False",
            "filter_python=False",
            "filter_font=False",
            "filter_sound=False",
            "filter_text=False",
            "filter_archive=False",
            "filter_btx=False",
            "filter_collada=False",
            "filter_alembic=False",
            "filter_usd=False",
            "filter_obj=False",
            "filter_volume=False",
            "filter_folder=True",
            "filter_blenlib=False",
            "filemode=8",
            "display_type='DEFAULT'",
            "sort_method=''",
            "ascii_format=False",
            "use_batch=False",
            "export_selected_objects=False",
            "collection=''",
            "global_scale=1.0",
            "use_scene_unit=False",
            "forward_axis='Y'",
            "up_axis='Z'",
            "apply_modifiers=True",
            "filter_glob='*.stl'"
        ],
        "parameter_descriptions": [
            "filepath(string,(optional,never None)) – File Path, Path to file",
            "check_existing(boolean,(optional)) – Check Existing, Check and warn on overwriting existing files",
            "filter_blender(boolean,(optional)) – Filter .blend files",
            "filter_backup(boolean,(optional)) – Filter .blend files",
            "filter_image(boolean,(optional)) – Filter image files",
            "filter_movie(boolean,(optional)) – Filter movie files",
            "filter_python(boolean,(optional)) – Filter Python files",
            "filter_font(boolean,(optional)) – Filter font files",
            "filter_sound(boolean,(optional)) – Filter sound files",
            "filter_text(boolean,(optional)) – Filter text files",
            "filter_archive(boolean,(optional)) – Filter archive files",
            "filter_btx(boolean,(optional)) – Filter btx files",
            "filter_collada(boolean,(optional)) – Filter COLLADA files",
            "filter_alembic(boolean,(optional)) – Filter Alembic files",
            "filter_usd(boolean,(optional)) – Filter USD files",
            "filter_obj(boolean,(optional)) – Filter OBJ files",
            "filter_volume(boolean,(optional)) – Filter OpenVDB volume files",
            "filter_folder(boolean,(optional)) – Filter folders",
            "filter_blenlib(boolean,(optional)) – Filter Blender IDs",
            "filemode(int in[1,9],(optional)) – File Browser Mode, The setting for the file browser mode to load a .blend file, a library or a special file",
            "display_type(enum in['DEFAULT','LIST_VERTICAL','LIST_HORIZONTAL','THUMBNAIL'],(optional)) –Display TypeDEFAULTDefault – Automatically determine display type for files.LIST_VERTICALShort List – Display files as short list.LIST_HORIZONTALLong List – Display files as a detailed list.THUMBNAILThumbnails – Display files as thumbnails.",
            "DEFAULTDefault – Automatically determine display type for files.",
            "LIST_VERTICALShort List – Display files as short list.",
            "LIST_HORIZONTALLong List – Display files as a detailed list.",
            "THUMBNAILThumbnails – Display files as thumbnails.",
            "sort_method(enum in[],(optional)) – File sorting mode",
            "ascii_format(boolean,(optional)) – ASCII Format, Export file in ASCII format, export as binary otherwise",
            "use_batch(boolean,(optional)) – Batch Export, Export each object to a separate file",
            "export_selected_objects(boolean,(optional)) – Export Selected Objects, Export only selected objects instead of all supported objects",
            "collection(string,(optional,never None)) – Source Collection, Export only objects from this collection (and its children)",
            "global_scale(float in[1e-06,1e+06],(optional)) – Scale",
            "use_scene_unit(boolean,(optional)) – Scene Unit, Apply current scene’s unit (as defined by unit scale) to exported data",
            "forward_axis(enum in['X','Y','Z','NEGATIVE_X','NEGATIVE_Y','NEGATIVE_Z'],(optional)) –Forward AxisXX – Positive X axis.YY – Positive Y axis.ZZ – Positive Z axis.NEGATIVE_X-X – Negative X axis.NEGATIVE_Y-Y – Negative Y axis.NEGATIVE_Z-Z – Negative Z axis.",
            "XX – Positive X axis.",
            "YY – Positive Y axis.",
            "ZZ – Positive Z axis.",
            "NEGATIVE_X-X – Negative X axis.",
            "NEGATIVE_Y-Y – Negative Y axis.",
            "NEGATIVE_Z-Z – Negative Z axis.",
            "up_axis(enum in['X','Y','Z','NEGATIVE_X','NEGATIVE_Y','NEGATIVE_Z'],(optional)) –Up AxisXX – Positive X axis.YY – Positive Y axis.ZZ – Positive Z axis.NEGATIVE_X-X – Negative X axis.NEGATIVE_Y-Y – Negative Y axis.NEGATIVE_Z-Z – Negative Z axis.",
            "XX – Positive X axis.",
            "YY – Positive Y axis.",
            "ZZ – Positive Z axis.",
            "NEGATIVE_X-X – Negative X axis.",
            "NEGATIVE_Y-Y – Negative Y axis.",
            "NEGATIVE_Z-Z – Negative Z axis.",
            "apply_modifiers(boolean,(optional)) – Apply Modifiers, Apply modifiers to exported meshes",
            "filter_glob(string,(optional,never None)) – Extension Filter"
        ]
    },
    {
        "function_id": "bpy.ops.wm.stl_import",
        "signature": "bpy.ops.wm.stl_import(filepath='',directory='',files=None,check_existing=False,filter_blender=False,filter_backup=False,filter_image=False,filter_movie=False,filter_python=False,filter_font=False,filter_sound=False,filter_text=False,filter_archive=False,filter_btx=False,filter_collada=False,filter_alembic=False,filter_usd=False,filter_obj=False,filter_volume=False,filter_folder=True,filter_blenlib=False,filemode=8,display_type='DEFAULT',sort_method='',global_scale=1.0,use_scene_unit=False,use_facet_normal=False,forward_axis='Y',up_axis='Z',use_mesh_validate=True,filter_glob='*.stl')#",
        "description": "Import an STL file as an object",
        "parameters": [
            "filepath=''",
            "directory=''",
            "files=None",
            "check_existing=False",
            "filter_blender=False",
            "filter_backup=False",
            "filter_image=False",
            "filter_movie=False",
            "filter_python=False",
            "filter_font=False",
            "filter_sound=False",
            "filter_text=False",
            "filter_archive=False",
            "filter_btx=False",
            "filter_collada=False",
            "filter_alembic=False",
            "filter_usd=False",
            "filter_obj=False",
            "filter_volume=False",
            "filter_folder=True",
            "filter_blenlib=False",
            "filemode=8",
            "display_type='DEFAULT'",
            "sort_method=''",
            "global_scale=1.0",
            "use_scene_unit=False",
            "use_facet_normal=False",
            "forward_axis='Y'",
            "up_axis='Z'",
            "use_mesh_validate=True",
            "filter_glob='*.stl'"
        ],
        "parameter_descriptions": [
            "filepath(string,(optional,never None)) – File Path, Path to file",
            "directory(string,(optional,never None)) – Directory, Directory of the file",
            "files(bpy_prop_collectionofOperatorFileListElement, (optional)) – Files",
            "check_existing(boolean,(optional)) – Check Existing, Check and warn on overwriting existing files",
            "filter_blender(boolean,(optional)) – Filter .blend files",
            "filter_backup(boolean,(optional)) – Filter .blend files",
            "filter_image(boolean,(optional)) – Filter image files",
            "filter_movie(boolean,(optional)) – Filter movie files",
            "filter_python(boolean,(optional)) – Filter Python files",
            "filter_font(boolean,(optional)) – Filter font files",
            "filter_sound(boolean,(optional)) – Filter sound files",
            "filter_text(boolean,(optional)) – Filter text files",
            "filter_archive(boolean,(optional)) – Filter archive files",
            "filter_btx(boolean,(optional)) – Filter btx files",
            "filter_collada(boolean,(optional)) – Filter COLLADA files",
            "filter_alembic(boolean,(optional)) – Filter Alembic files",
            "filter_usd(boolean,(optional)) – Filter USD files",
            "filter_obj(boolean,(optional)) – Filter OBJ files",
            "filter_volume(boolean,(optional)) – Filter OpenVDB volume files",
            "filter_folder(boolean,(optional)) – Filter folders",
            "filter_blenlib(boolean,(optional)) – Filter Blender IDs",
            "filemode(int in[1,9],(optional)) – File Browser Mode, The setting for the file browser mode to load a .blend file, a library or a special file",
            "display_type(enum in['DEFAULT','LIST_VERTICAL','LIST_HORIZONTAL','THUMBNAIL'],(optional)) –Display TypeDEFAULTDefault – Automatically determine display type for files.LIST_VERTICALShort List – Display files as short list.LIST_HORIZONTALLong List – Display files as a detailed list.THUMBNAILThumbnails – Display files as thumbnails.",
            "DEFAULTDefault – Automatically determine display type for files.",
            "LIST_VERTICALShort List – Display files as short list.",
            "LIST_HORIZONTALLong List – Display files as a detailed list.",
            "THUMBNAILThumbnails – Display files as thumbnails.",
            "sort_method(enum in[],(optional)) – File sorting mode",
            "global_scale(float in[1e-06,1e+06],(optional)) – Scale",
            "use_scene_unit(boolean,(optional)) – Scene Unit, Apply current scene’s unit (as defined by unit scale) to imported data",
            "use_facet_normal(boolean,(optional)) – Facet Normals, Use (import) facet normals (note that this will still give flat shading)",
            "forward_axis(enum in['X','Y','Z','NEGATIVE_X','NEGATIVE_Y','NEGATIVE_Z'],(optional)) –Forward AxisXX – Positive X axis.YY – Positive Y axis.ZZ – Positive Z axis.NEGATIVE_X-X – Negative X axis.NEGATIVE_Y-Y – Negative Y axis.NEGATIVE_Z-Z – Negative Z axis.",
            "XX – Positive X axis.",
            "YY – Positive Y axis.",
            "ZZ – Positive Z axis.",
            "NEGATIVE_X-X – Negative X axis.",
            "NEGATIVE_Y-Y – Negative Y axis.",
            "NEGATIVE_Z-Z – Negative Z axis.",
            "up_axis(enum in['X','Y','Z','NEGATIVE_X','NEGATIVE_Y','NEGATIVE_Z'],(optional)) –Up AxisXX – Positive X axis.YY – Positive Y axis.ZZ – Positive Z axis.NEGATIVE_X-X – Negative X axis.NEGATIVE_Y-Y – Negative Y axis.NEGATIVE_Z-Z – Negative Z axis.",
            "XX – Positive X axis.",
            "YY – Positive Y axis.",
            "ZZ – Positive Z axis.",
            "NEGATIVE_X-X – Negative X axis.",
            "NEGATIVE_Y-Y – Negative Y axis.",
            "NEGATIVE_Z-Z – Negative Z axis.",
            "use_mesh_validate(boolean,(optional)) – Validate Mesh, Ensure the data is valid (when disabled, data may be imported which causes crashes displaying or editing)",
            "filter_glob(string,(optional,never None)) – Extension Filter"
        ]
    },
    {
        "function_id": "bpy.ops.wm.sysinfo",
        "signature": "bpy.ops.wm.sysinfo(filepath='')#",
        "description": "Generate system information, saved into a text file",
        "parameters": [
            "filepath=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.wm.tool_set_by_id",
        "signature": "bpy.ops.wm.tool_set_by_id(name='',cycle=False,as_fallback=False,space_type='EMPTY')#",
        "description": "Set the tool by name (for key-maps)",
        "parameters": [
            "name=''",
            "cycle=False",
            "as_fallback=False",
            "space_type='EMPTY'"
        ],
        "parameter_descriptions": [
            "name(string,(optional,never None)) – Identifier, Identifier of the tool",
            "cycle(boolean,(optional)) – Cycle, Cycle through tools in this group",
            "as_fallback(boolean,(optional)) – Set Fallback, Set the fallback tool instead of the primary tool",
            "space_type(enum in['EMPTY','VIEW_3D','IMAGE_EDITOR','NODE_EDITOR','SEQUENCE_EDITOR','CLIP_EDITOR','DOPESHEET_EDITOR','GRAPH_EDITOR','NLA_EDITOR','TEXT_EDITOR','CONSOLE','INFO','TOPBAR','STATUSBAR','OUTLINER','PROPERTIES','FILE_BROWSER','SPREADSHEET','PREFERENCES'],(optional)) – Type"
        ]
    },
    {
        "function_id": "bpy.ops.wm.tool_set_by_index",
        "signature": "bpy.ops.wm.tool_set_by_index(index=0,cycle=False,expand=True,as_fallback=False,space_type='EMPTY')#",
        "description": "Set the tool by index (for key-maps)",
        "parameters": [
            "index=0",
            "cycle=False",
            "expand=True",
            "as_fallback=False",
            "space_type='EMPTY'"
        ],
        "parameter_descriptions": [
            "index(int in[-inf,inf],(optional)) – Index in Toolbar",
            "cycle(boolean,(optional)) – Cycle, Cycle through tools in this group",
            "expand(boolean,(optional)) – expand, Include tool subgroups",
            "as_fallback(boolean,(optional)) – Set Fallback, Set the fallback tool instead of the primary",
            "space_type(enum in['EMPTY','VIEW_3D','IMAGE_EDITOR','NODE_EDITOR','SEQUENCE_EDITOR','CLIP_EDITOR','DOPESHEET_EDITOR','GRAPH_EDITOR','NLA_EDITOR','TEXT_EDITOR','CONSOLE','INFO','TOPBAR','STATUSBAR','OUTLINER','PROPERTIES','FILE_BROWSER','SPREADSHEET','PREFERENCES'],(optional)) – Type"
        ]
    },
    {
        "function_id": "bpy.ops.wm.toolbar",
        "signature": "bpy.ops.wm.toolbar()#",
        "description": "Undocumented, considercontributing.",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.wm.toolbar_fallback_pie",
        "signature": "bpy.ops.wm.toolbar_fallback_pie()#",
        "description": "Undocumented, considercontributing.",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.wm.toolbar_prompt",
        "signature": "bpy.ops.wm.toolbar_prompt()#",
        "description": "Leader key like functionality for accessing tools",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.wm.url_open",
        "signature": "bpy.ops.wm.url_open(url='')#",
        "description": "Open a website in the web browser",
        "parameters": [
            "url=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.wm.url_open_preset",
        "signature": "bpy.ops.wm.url_open_preset(type='')#",
        "description": "Open a preset website in the web browser",
        "parameters": [
            "type=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.wm.usd_export",
        "signature": "bpy.ops.wm.usd_export(filepath='',check_existing=True,filter_blender=False,filter_backup=False,filter_image=False,filter_movie=False,filter_python=False,filter_font=False,filter_sound=False,filter_text=False,filter_archive=False,filter_btx=False,filter_collada=False,filter_alembic=False,filter_usd=True,filter_obj=False,filter_volume=False,filter_folder=True,filter_blenlib=False,filemode=8,display_type='DEFAULT',sort_method='',filter_glob='*.usd',selected_objects_only=False,visible_objects_only=True,collection='',export_animation=False,export_hair=False,export_uvmaps=True,rename_uvmaps=True,export_mesh_colors=True,export_normals=True,export_materials=True,export_subdivision='BEST_MATCH',export_armatures=True,only_deform_bones=False,export_shapekeys=True,use_instancing=False,evaluation_mode='RENDER',generate_preview_surface=True,generate_materialx_network=False,convert_orientation=False,export_global_forward_selection='NEGATIVE_Z',export_global_up_selection='Y',export_textures=True,overwrite_textures=False,relative_paths=True,xform_op_mode='TRS',root_prim_path='/root',export_custom_properties=True,custom_properties_namespace='userProperties',author_blender_name=True,convert_world_material=True,allow_unicode=False,export_meshes=True,export_lights=True,export_cameras=True,export_curves=True,export_volumes=True,triangulate_meshes=False,quad_method='SHORTEST_DIAGONAL',ngon_method='BEAUTY',usdz_downscale_size='KEEP',usdz_downscale_custom_size=128)#",
        "description": "Export current scene in a USD archive",
        "parameters": [
            "filepath=''",
            "check_existing=True",
            "filter_blender=False",
            "filter_backup=False",
            "filter_image=False",
            "filter_movie=False",
            "filter_python=False",
            "filter_font=False",
            "filter_sound=False",
            "filter_text=False",
            "filter_archive=False",
            "filter_btx=False",
            "filter_collada=False",
            "filter_alembic=False",
            "filter_usd=True",
            "filter_obj=False",
            "filter_volume=False",
            "filter_folder=True",
            "filter_blenlib=False",
            "filemode=8",
            "display_type='DEFAULT'",
            "sort_method=''",
            "filter_glob='*.usd'",
            "selected_objects_only=False",
            "visible_objects_only=True",
            "collection=''",
            "export_animation=False",
            "export_hair=False",
            "export_uvmaps=True",
            "rename_uvmaps=True",
            "export_mesh_colors=True",
            "export_normals=True",
            "export_materials=True",
            "export_subdivision='BEST_MATCH'",
            "export_armatures=True",
            "only_deform_bones=False",
            "export_shapekeys=True",
            "use_instancing=False",
            "evaluation_mode='RENDER'",
            "generate_preview_surface=True",
            "generate_materialx_network=False",
            "convert_orientation=False",
            "export_global_forward_selection='NEGATIVE_Z'",
            "export_global_up_selection='Y'",
            "export_textures=True",
            "overwrite_textures=False",
            "relative_paths=True",
            "xform_op_mode='TRS'",
            "root_prim_path='/root'",
            "export_custom_properties=True",
            "custom_properties_namespace='userProperties'",
            "author_blender_name=True",
            "convert_world_material=True",
            "allow_unicode=False",
            "export_meshes=True",
            "export_lights=True",
            "export_cameras=True",
            "export_curves=True",
            "export_volumes=True",
            "triangulate_meshes=False",
            "quad_method='SHORTEST_DIAGONAL'",
            "ngon_method='BEAUTY'",
            "usdz_downscale_size='KEEP'",
            "usdz_downscale_custom_size=128"
        ],
        "parameter_descriptions": [
            "filepath(string,(optional,never None)) – File Path, Path to file",
            "check_existing(boolean,(optional)) – Check Existing, Check and warn on overwriting existing files",
            "filter_blender(boolean,(optional)) – Filter .blend files",
            "filter_backup(boolean,(optional)) – Filter .blend files",
            "filter_image(boolean,(optional)) – Filter image files",
            "filter_movie(boolean,(optional)) – Filter movie files",
            "filter_python(boolean,(optional)) – Filter Python files",
            "filter_font(boolean,(optional)) – Filter font files",
            "filter_sound(boolean,(optional)) – Filter sound files",
            "filter_text(boolean,(optional)) – Filter text files",
            "filter_archive(boolean,(optional)) – Filter archive files",
            "filter_btx(boolean,(optional)) – Filter btx files",
            "filter_collada(boolean,(optional)) – Filter COLLADA files",
            "filter_alembic(boolean,(optional)) – Filter Alembic files",
            "filter_usd(boolean,(optional)) – Filter USD files",
            "filter_obj(boolean,(optional)) – Filter OBJ files",
            "filter_volume(boolean,(optional)) – Filter OpenVDB volume files",
            "filter_folder(boolean,(optional)) – Filter folders",
            "filter_blenlib(boolean,(optional)) – Filter Blender IDs",
            "filemode(int in[1,9],(optional)) – File Browser Mode, The setting for the file browser mode to load a .blend file, a library or a special file",
            "display_type(enum in['DEFAULT','LIST_VERTICAL','LIST_HORIZONTAL','THUMBNAIL'],(optional)) –Display TypeDEFAULTDefault – Automatically determine display type for files.LIST_VERTICALShort List – Display files as short list.LIST_HORIZONTALLong List – Display files as a detailed list.THUMBNAILThumbnails – Display files as thumbnails.",
            "DEFAULTDefault – Automatically determine display type for files.",
            "LIST_VERTICALShort List – Display files as short list.",
            "LIST_HORIZONTALLong List – Display files as a detailed list.",
            "THUMBNAILThumbnails – Display files as thumbnails.",
            "sort_method(enum in[],(optional)) – File sorting mode",
            "selected_objects_only(boolean,(optional)) – Selection Only, Only export selected objects. Unselected parents of selected objects are exported as empty transform",
            "visible_objects_only(boolean,(optional)) – Visible Only, Only export visible objects. Invisible parents of exported objects are exported as empty transforms",
            "collection(string,(optional,never None)) – Collection",
            "export_animation(boolean,(optional)) – Animation, Export all frames in the render frame range, rather than only the current frame",
            "export_hair(boolean,(optional)) – Hair, Export hair particle systems as USD curves",
            "export_uvmaps(boolean,(optional)) – UV Maps, Include all mesh UV maps in the export",
            "rename_uvmaps(boolean,(optional)) – Rename UV Maps, Rename active render UV map to “st” to match USD conventions",
            "export_mesh_colors(boolean,(optional)) – Color Attributes, Include mesh color attributes in the export",
            "export_normals(boolean,(optional)) – Normals, Include normals of exported meshes in the export",
            "export_materials(boolean,(optional)) – Materials, Export viewport settings of materials as USD preview materials, and export material assignments as geometry subsets",
            "export_subdivision(enum in['IGNORE','TESSELLATE','BEST_MATCH'],(optional)) –Subdivision, Choose how subdivision modifiers will be mapped to the USD subdivision scheme during exportIGNOREIgnore – Scheme = None. Export base mesh without subdivision.TESSELLATETessellate – Scheme = None. Export subdivided mesh.BEST_MATCHBest Match – Scheme = Catmull-Clark, when possible. Reverts to exporting the subdivided mesh for the Simple subdivision type.",
            "IGNOREIgnore – Scheme = None. Export base mesh without subdivision.",
            "TESSELLATETessellate – Scheme = None. Export subdivided mesh.",
            "BEST_MATCHBest Match – Scheme = Catmull-Clark, when possible. Reverts to exporting the subdivided mesh for the Simple subdivision type.",
            "export_armatures(boolean,(optional)) – Armatures, Export armatures and meshes with armature modifiers as USD skeletons and skinned meshes",
            "only_deform_bones(boolean,(optional)) – Only Deform Bones, Only export deform bones and their parents",
            "export_shapekeys(boolean,(optional)) – Shape Keys, Export shape keys as USD blend shapes",
            "use_instancing(boolean,(optional)) – Instancing, Export instanced objects as references in USD rather than real objects",
            "evaluation_mode(enum in['RENDER','VIEWPORT'],(optional)) –Use Settings for, Determines visibility of objects, modifier settings, and other areas where there are different settings for viewport and renderingRENDERRender – Use Render settings for object visibility, modifier settings, etc.VIEWPORTViewport – Use Viewport settings for object visibility, modifier settings, etc.",
            "RENDERRender – Use Render settings for object visibility, modifier settings, etc.",
            "VIEWPORTViewport – Use Viewport settings for object visibility, modifier settings, etc.",
            "generate_preview_surface(boolean,(optional)) – USD Preview Surface Network, Generate an approximate USD Preview Surface shader representation of a Principled BSDF node network",
            "generate_materialx_network(boolean,(optional)) – MaterialX Network, Generate a MaterialX network representation of the materials",
            "convert_orientation(boolean,(optional)) – Convert Orientation, Convert orientation axis to a different convention to match other applications",
            "export_global_forward_selection(enum in['X','Y','Z','NEGATIVE_X','NEGATIVE_Y','NEGATIVE_Z'],(optional)) –Forward AxisXX – Positive X axis.YY – Positive Y axis.ZZ – Positive Z axis.NEGATIVE_X-X – Negative X axis.NEGATIVE_Y-Y – Negative Y axis.NEGATIVE_Z-Z – Negative Z axis.",
            "XX – Positive X axis.",
            "YY – Positive Y axis.",
            "ZZ – Positive Z axis.",
            "NEGATIVE_X-X – Negative X axis.",
            "NEGATIVE_Y-Y – Negative Y axis.",
            "NEGATIVE_Z-Z – Negative Z axis.",
            "export_global_up_selection(enum in['X','Y','Z','NEGATIVE_X','NEGATIVE_Y','NEGATIVE_Z'],(optional)) –Up AxisXX – Positive X axis.YY – Positive Y axis.ZZ – Positive Z axis.NEGATIVE_X-X – Negative X axis.NEGATIVE_Y-Y – Negative Y axis.NEGATIVE_Z-Z – Negative Z axis.",
            "XX – Positive X axis.",
            "YY – Positive Y axis.",
            "ZZ – Positive Z axis.",
            "NEGATIVE_X-X – Negative X axis.",
            "NEGATIVE_Y-Y – Negative Y axis.",
            "NEGATIVE_Z-Z – Negative Z axis.",
            "export_textures(boolean,(optional)) – Export Textures, If exporting materials, export textures referenced by material nodes to a ‘textures’ directory in the same directory as the USD file",
            "overwrite_textures(boolean,(optional)) – Overwrite Textures, Overwrite existing files when exporting textures",
            "relative_paths(boolean,(optional)) – Relative Paths, Use relative paths to reference external files (i.e. textures, volumes) in USD, otherwise use absolute paths",
            "xform_op_mode(enum in['TRS','TOS','MAT'],(optional)) –Xform Ops, The type of transform operators to writeTRSTranslate, Rotate, Scale – Export with translate, rotate, and scale Xform operators.TOSTranslate, Orient, Scale – Export with translate, orient quaternion, and scale Xform operators.MATMatrix – Export matrix operator.",
            "TRSTranslate, Rotate, Scale – Export with translate, rotate, and scale Xform operators.",
            "TOSTranslate, Orient, Scale – Export with translate, orient quaternion, and scale Xform operators.",
            "MATMatrix – Export matrix operator.",
            "root_prim_path(string,(optional,never None)) – Root Prim, If set, add a transform primitive with the given path to the stage as the parent of all exported data",
            "export_custom_properties(boolean,(optional)) – Custom Properties, Export custom properties as USD attributes",
            "custom_properties_namespace(string,(optional,never None)) – Namespace, If set, add the given namespace as a prefix to exported custom property names. This only applies to property names that do not already have a prefix (e.g., it would apply to name ‘bar’ but not ‘foo:bar’) and does not apply to blender object and data names which are always exported in the ‘userProperties:blender’ namespace",
            "author_blender_name(boolean,(optional)) – Blender Names, Author USD custom attributes containing the original Blender object and object data names",
            "convert_world_material(boolean,(optional)) – Convert World Material, Convert the world material to a USD dome light. Currently works for simple materials, consisting of an environment texture connected to a background shader, with an optional vector multiply of the texture color",
            "allow_unicode(boolean,(optional)) – Allow Unicode, Preserve UTF-8 encoded characters when writing USD prim and property names (requires software utilizing USD 24.03 or greater when opening the resulting files)",
            "export_meshes(boolean,(optional)) – Meshes, Export all meshes",
            "export_lights(boolean,(optional)) – Lights, Export all lights",
            "export_cameras(boolean,(optional)) – Cameras, Export all cameras",
            "export_curves(boolean,(optional)) – Curves, Export all curves",
            "export_volumes(boolean,(optional)) – Volumes, Export all volumes",
            "triangulate_meshes(boolean,(optional)) – Triangulate Meshes, Triangulate meshes during export",
            "quad_method(enum inModifier Triangulate Quad Method Items, (optional)) – Quad Method, Method for splitting the quads into triangles",
            "ngon_method(enum inModifier Triangulate Ngon Method Items, (optional)) – N-gon Method, Method for splitting the n-gons into triangles",
            "usdz_downscale_size(enum in['KEEP','256','512','1024','2048','4096','CUSTOM'],(optional)) –USDZ Texture Downsampling, Choose a maximum size for all exported texturesKEEPKeep – Keep all current texture sizes.256256 – Resize to a maximum of 256 pixels.512512 – Resize to a maximum of 512 pixels.10241024 – Resize to a maximum of 1024 pixels.20482048 – Resize to a maximum of 2048 pixels.40964096 – Resize to a maximum of 4096 pixels.CUSTOMCustom – Specify a custom size.",
            "KEEPKeep – Keep all current texture sizes.",
            "256256 – Resize to a maximum of 256 pixels.",
            "512512 – Resize to a maximum of 512 pixels.",
            "10241024 – Resize to a maximum of 1024 pixels.",
            "20482048 – Resize to a maximum of 2048 pixels.",
            "40964096 – Resize to a maximum of 4096 pixels.",
            "CUSTOMCustom – Specify a custom size.",
            "usdz_downscale_custom_size(int in[64,16384],(optional)) – USDZ Custom Downscale Size, Custom size for downscaling exported textures"
        ]
    },
    {
        "function_id": "bpy.ops.wm.usd_import",
        "signature": "bpy.ops.wm.usd_import(filepath='',check_existing=False,filter_blender=False,filter_backup=False,filter_image=False,filter_movie=False,filter_python=False,filter_font=False,filter_sound=False,filter_text=False,filter_archive=False,filter_btx=False,filter_collada=False,filter_alembic=False,filter_usd=True,filter_obj=False,filter_volume=False,filter_folder=True,filter_blenlib=False,filemode=8,relative_path=True,display_type='DEFAULT',sort_method='',filter_glob='*.usd',scale=1.0,set_frame_range=True,import_cameras=True,import_curves=True,import_lights=True,import_materials=True,import_meshes=True,import_volumes=True,import_shapes=True,import_skeletons=True,import_blendshapes=True,import_points=True,import_subdiv=False,support_scene_instancing=True,import_visible_only=True,create_collection=False,read_mesh_uvs=True,read_mesh_colors=True,read_mesh_attributes=True,prim_path_mask='',import_guide=False,import_proxy=False,import_render=True,import_all_materials=False,import_usd_preview=True,set_material_blend=True,light_intensity_scale=1.0,mtl_name_collision_mode='MAKE_UNIQUE',import_textures_mode='IMPORT_PACK',import_textures_dir='//textures/',tex_name_collision_mode='USE_EXISTING',attr_import_mode='ALL',validate_meshes=False,create_world_material=True,import_defined_only=True)#",
        "description": "Import USD stage into current scene",
        "parameters": [
            "filepath=''",
            "check_existing=False",
            "filter_blender=False",
            "filter_backup=False",
            "filter_image=False",
            "filter_movie=False",
            "filter_python=False",
            "filter_font=False",
            "filter_sound=False",
            "filter_text=False",
            "filter_archive=False",
            "filter_btx=False",
            "filter_collada=False",
            "filter_alembic=False",
            "filter_usd=True",
            "filter_obj=False",
            "filter_volume=False",
            "filter_folder=True",
            "filter_blenlib=False",
            "filemode=8",
            "relative_path=True",
            "display_type='DEFAULT'",
            "sort_method=''",
            "filter_glob='*.usd'",
            "scale=1.0",
            "set_frame_range=True",
            "import_cameras=True",
            "import_curves=True",
            "import_lights=True",
            "import_materials=True",
            "import_meshes=True",
            "import_volumes=True",
            "import_shapes=True",
            "import_skeletons=True",
            "import_blendshapes=True",
            "import_points=True",
            "import_subdiv=False",
            "support_scene_instancing=True",
            "import_visible_only=True",
            "create_collection=False",
            "read_mesh_uvs=True",
            "read_mesh_colors=True",
            "read_mesh_attributes=True",
            "prim_path_mask=''",
            "import_guide=False",
            "import_proxy=False",
            "import_render=True",
            "import_all_materials=False",
            "import_usd_preview=True",
            "set_material_blend=True",
            "light_intensity_scale=1.0",
            "mtl_name_collision_mode='MAKE_UNIQUE'",
            "import_textures_mode='IMPORT_PACK'",
            "import_textures_dir='//textures/'",
            "tex_name_collision_mode='USE_EXISTING'",
            "attr_import_mode='ALL'",
            "validate_meshes=False",
            "create_world_material=True",
            "import_defined_only=True"
        ],
        "parameter_descriptions": [
            "filepath(string,(optional,never None)) – File Path, Path to file",
            "check_existing(boolean,(optional)) – Check Existing, Check and warn on overwriting existing files",
            "filter_blender(boolean,(optional)) – Filter .blend files",
            "filter_backup(boolean,(optional)) – Filter .blend files",
            "filter_image(boolean,(optional)) – Filter image files",
            "filter_movie(boolean,(optional)) – Filter movie files",
            "filter_python(boolean,(optional)) – Filter Python files",
            "filter_font(boolean,(optional)) – Filter font files",
            "filter_sound(boolean,(optional)) – Filter sound files",
            "filter_text(boolean,(optional)) – Filter text files",
            "filter_archive(boolean,(optional)) – Filter archive files",
            "filter_btx(boolean,(optional)) – Filter btx files",
            "filter_collada(boolean,(optional)) – Filter COLLADA files",
            "filter_alembic(boolean,(optional)) – Filter Alembic files",
            "filter_usd(boolean,(optional)) – Filter USD files",
            "filter_obj(boolean,(optional)) – Filter OBJ files",
            "filter_volume(boolean,(optional)) – Filter OpenVDB volume files",
            "filter_folder(boolean,(optional)) – Filter folders",
            "filter_blenlib(boolean,(optional)) – Filter Blender IDs",
            "filemode(int in[1,9],(optional)) – File Browser Mode, The setting for the file browser mode to load a .blend file, a library or a special file",
            "relative_path(boolean,(optional)) – Relative Path, Select the file relative to the blend file",
            "display_type(enum in['DEFAULT','LIST_VERTICAL','LIST_HORIZONTAL','THUMBNAIL'],(optional)) –Display TypeDEFAULTDefault – Automatically determine display type for files.LIST_VERTICALShort List – Display files as short list.LIST_HORIZONTALLong List – Display files as a detailed list.THUMBNAILThumbnails – Display files as thumbnails.",
            "DEFAULTDefault – Automatically determine display type for files.",
            "LIST_VERTICALShort List – Display files as short list.",
            "LIST_HORIZONTALLong List – Display files as a detailed list.",
            "THUMBNAILThumbnails – Display files as thumbnails.",
            "sort_method(enum in[],(optional)) – File sorting mode",
            "scale(float in[0.0001,1000],(optional)) – Scale, Value by which to enlarge or shrink the objects with respect to the world’s origin",
            "set_frame_range(boolean,(optional)) – Set Frame Range, Update the scene’s start and end frame to match those of the USD archive",
            "import_cameras(boolean,(optional)) – Cameras",
            "import_curves(boolean,(optional)) – Curves",
            "import_lights(boolean,(optional)) – Lights",
            "import_materials(boolean,(optional)) – Materials",
            "import_meshes(boolean,(optional)) – Meshes",
            "import_volumes(boolean,(optional)) – Volumes",
            "import_shapes(boolean,(optional)) – USD Shapes",
            "import_skeletons(boolean,(optional)) – Armatures",
            "import_blendshapes(boolean,(optional)) – Shape Keys",
            "import_points(boolean,(optional)) – Point Clouds",
            "import_subdiv(boolean,(optional)) – Import Subdivision Scheme, Create subdivision surface modifiers based on the USD SubdivisionScheme attribute",
            "support_scene_instancing(boolean,(optional)) – Scene Instancing, Import USD scene graph instances as collection instances",
            "import_visible_only(boolean,(optional)) – Visible Primitives Only, Do not import invisible USD primitives. Only applies to primitives with a non-animated visibility attribute. Primitives with animated visibility will always be imported",
            "create_collection(boolean,(optional)) – Create Collection, Add all imported objects to a new collection",
            "read_mesh_uvs(boolean,(optional)) – UV Coordinates, Read mesh UV coordinates",
            "read_mesh_colors(boolean,(optional)) – Color Attributes, Read mesh color attributes",
            "read_mesh_attributes(boolean,(optional)) – Mesh Attributes, Read USD Primvars as mesh attributes",
            "prim_path_mask(string,(optional,never None)) – Path Mask, Import only the primitive at the given path and its descendants. Multiple paths may be specified in a list delimited by commas or semicolons",
            "import_guide(boolean,(optional)) – Guide, Import guide geometry",
            "import_proxy(boolean,(optional)) – Proxy, Import proxy geometry",
            "import_render(boolean,(optional)) – Render, Import final render geometry",
            "import_all_materials(boolean,(optional)) – Import All Materials, Also import materials that are not used by any geometry. Note that when this option is false, materials referenced by geometry will still be imported",
            "import_usd_preview(boolean,(optional)) – Import USD Preview, Convert UsdPreviewSurface shaders to Principled BSDF shader networks",
            "set_material_blend(boolean,(optional)) – Set Material Blend, If the Import USD Preview option is enabled, the material blend method will automatically be set based on the shader’s opacity and opacityThreshold inputs",
            "light_intensity_scale(float in[0.0001,10000],(optional)) – Light Intensity Scale, Scale for the intensity of imported lights",
            "mtl_name_collision_mode(enum in['MAKE_UNIQUE','REFERENCE_EXISTING'],(optional)) –Material Name Collision, Behavior when the name of an imported material conflicts with an existing materialMAKE_UNIQUEMake Unique – Import each USD material as a unique Blender material.REFERENCE_EXISTINGReference Existing – If a material with the same name already exists, reference that instead of importing.",
            "MAKE_UNIQUEMake Unique – Import each USD material as a unique Blender material.",
            "REFERENCE_EXISTINGReference Existing – If a material with the same name already exists, reference that instead of importing.",
            "import_textures_mode(enum in['IMPORT_NONE','IMPORT_PACK','IMPORT_COPY'],(optional)) –Import Textures, Behavior when importing textures from a USDZ archiveIMPORT_NONENone – Don’t import textures.IMPORT_PACKPacked – Import textures as packed data.IMPORT_COPYCopy – Copy files to textures directory.",
            "IMPORT_NONENone – Don’t import textures.",
            "IMPORT_PACKPacked – Import textures as packed data.",
            "IMPORT_COPYCopy – Copy files to textures directory.",
            "import_textures_dir(string,(optional,never None)) – Textures Directory, Path to the directory where imported textures will be copied",
            "tex_name_collision_mode(enum in['USE_EXISTING','OVERWRITE'],(optional)) –File Name Collision, Behavior when the name of an imported texture file conflicts with an existing fileUSE_EXISTINGUse Existing – If a file with the same name already exists, use that instead of copying.OVERWRITEOverwrite – Overwrite existing files.",
            "USE_EXISTINGUse Existing – If a file with the same name already exists, use that instead of copying.",
            "OVERWRITEOverwrite – Overwrite existing files.",
            "attr_import_mode(enum in['NONE','USER','ALL'],(optional)) –Custom Properties, Behavior when importing USD attributes as Blender custom propertiesNONENone – Do not import USD custom attributes.USERUser – Import USD attributes in the ‘userProperties’ namespace as Blender custom properties. The namespace will be stripped from the property names.ALLAll Custom – Import all USD custom attributes as Blender custom properties. Namespaces will be retained in the property names.",
            "NONENone – Do not import USD custom attributes.",
            "USERUser – Import USD attributes in the ‘userProperties’ namespace as Blender custom properties. The namespace will be stripped from the property names.",
            "ALLAll Custom – Import all USD custom attributes as Blender custom properties. Namespaces will be retained in the property names.",
            "validate_meshes(boolean,(optional)) – Validate Meshes, Ensure the data is valid (when disabled, data may be imported which causes crashes displaying or editing)",
            "create_world_material(boolean,(optional)) – Create World Material, Convert the first discovered USD dome light to a world background shader",
            "import_defined_only(boolean,(optional)) – Defined Primitives Only, Import only defined USD primitives. When disabled this allows importing USD primitives which are not defined, such as those with an override specifier"
        ]
    },
    {
        "function_id": "bpy.ops.wm.window_close",
        "signature": "bpy.ops.wm.window_close()#",
        "description": "Close the current window",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.wm.window_fullscreen_toggle",
        "signature": "bpy.ops.wm.window_fullscreen_toggle()#",
        "description": "Toggle the current window full-screen",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.wm.window_new",
        "signature": "bpy.ops.wm.window_new()#",
        "description": "Create a new window",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.wm.window_new_main",
        "signature": "bpy.ops.wm.window_new_main()#",
        "description": "Create a new main window with its own workspace and scene selection",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.wm.xr_navigation_fly",
        "signature": "bpy.ops.wm.xr_navigation_fly(mode='VIEWER_FORWARD',lock_location_z=False,lock_direction=False,speed_frame_based=True,speed_min=0.018,speed_max=0.054,speed_interpolation0=(0.0,0.0),speed_interpolation1=(1.0,1.0))#",
        "description": "Move/turn relative to the VR viewer or controller",
        "parameters": [
            "mode='VIEWER_FORWARD'",
            "lock_location_z=False",
            "lock_direction=False",
            "speed_frame_based=True",
            "speed_min=0.018",
            "speed_max=0.054",
            "speed_interpolation0=(0.0,0.0)",
            "speed_interpolation1=(1.0,1.0)"
        ],
        "parameter_descriptions": [
            "mode(enum in['FORWARD','BACK','LEFT','RIGHT','UP','DOWN','TURNLEFT','TURNRIGHT','VIEWER_FORWARD','VIEWER_BACK','VIEWER_LEFT','VIEWER_RIGHT','CONTROLLER_FORWARD'],(optional)) –Mode, Fly modeFORWARDForward – Move along navigation forward axis.BACKBack – Move along navigation back axis.LEFTLeft – Move along navigation left axis.RIGHTRight – Move along navigation right axis.UPUp – Move along navigation up axis.DOWNDown – Move along navigation down axis.TURNLEFTTurn Left – Turn counter-clockwise around navigation up axis.TURNRIGHTTurn Right – Turn clockwise around navigation up axis.VIEWER_FORWARDViewer Forward – Move along viewer’s forward axis.VIEWER_BACKViewer Back – Move along viewer’s back axis.VIEWER_LEFTViewer Left – Move along viewer’s left axis.VIEWER_RIGHTViewer Right – Move along viewer’s right axis.CONTROLLER_FORWARDController Forward – Move along controller’s forward axis.",
            "FORWARDForward – Move along navigation forward axis.",
            "BACKBack – Move along navigation back axis.",
            "LEFTLeft – Move along navigation left axis.",
            "RIGHTRight – Move along navigation right axis.",
            "UPUp – Move along navigation up axis.",
            "DOWNDown – Move along navigation down axis.",
            "TURNLEFTTurn Left – Turn counter-clockwise around navigation up axis.",
            "TURNRIGHTTurn Right – Turn clockwise around navigation up axis.",
            "VIEWER_FORWARDViewer Forward – Move along viewer’s forward axis.",
            "VIEWER_BACKViewer Back – Move along viewer’s back axis.",
            "VIEWER_LEFTViewer Left – Move along viewer’s left axis.",
            "VIEWER_RIGHTViewer Right – Move along viewer’s right axis.",
            "CONTROLLER_FORWARDController Forward – Move along controller’s forward axis.",
            "lock_location_z(boolean,(optional)) – Lock Elevation, Prevent changes to viewer elevation",
            "lock_direction(boolean,(optional)) – Lock Direction, Limit movement to viewer’s initial direction",
            "speed_frame_based(boolean,(optional)) – Frame Based Speed, Apply fixed movement deltas every update",
            "speed_min(float in[0,1000],(optional)) – Minimum Speed, Minimum move (turn) speed in meters (radians) per second or frame",
            "speed_max(float in[0,1000],(optional)) – Maximum Speed, Maximum move (turn) speed in meters (radians) per second or frame",
            "speed_interpolation0(mathutils.Vectorof 2 items in [0, 1], (optional)) – Speed Interpolation 0, First cubic spline control point between min/max speeds",
            "speed_interpolation1(mathutils.Vectorof 2 items in [0, 1], (optional)) – Speed Interpolation 1, Second cubic spline control point between min/max speeds"
        ]
    },
    {
        "function_id": "bpy.ops.wm.xr_navigation_grab",
        "signature": "bpy.ops.wm.xr_navigation_grab(lock_location=False,lock_location_z=False,lock_rotation=False,lock_rotation_z=False,lock_scale=False)#",
        "description": "Navigate the VR scene by grabbing with controllers",
        "parameters": [
            "lock_location=False",
            "lock_location_z=False",
            "lock_rotation=False",
            "lock_rotation_z=False",
            "lock_scale=False"
        ],
        "parameter_descriptions": [
            "lock_location(boolean,(optional)) – Lock Location, Prevent changes to viewer location",
            "lock_location_z(boolean,(optional)) – Lock Elevation, Prevent changes to viewer elevation",
            "lock_rotation(boolean,(optional)) – Lock Rotation, Prevent changes to viewer rotation",
            "lock_rotation_z(boolean,(optional)) – Lock Up Orientation, Prevent changes to viewer up orientation",
            "lock_scale(boolean,(optional)) – Lock Scale, Prevent changes to viewer scale"
        ]
    },
    {
        "function_id": "bpy.ops.wm.xr_navigation_reset",
        "signature": "bpy.ops.wm.xr_navigation_reset(location=True,rotation=True,scale=True)#",
        "description": "Reset VR navigation deltas relative to session base pose",
        "parameters": [
            "location=True",
            "rotation=True",
            "scale=True"
        ],
        "parameter_descriptions": [
            "location(boolean,(optional)) – Location, Reset location deltas",
            "rotation(boolean,(optional)) – Rotation, Reset rotation deltas",
            "scale(boolean,(optional)) – Scale, Reset scale deltas"
        ]
    },
    {
        "function_id": "bpy.ops.wm.xr_navigation_teleport",
        "signature": "bpy.ops.wm.xr_navigation_teleport(teleport_axes=(True,True,True),interpolation=1.0,offset=0.0,selectable_only=True,distance=1.70141e+38,from_viewer=False,axis=(0.0,0.0,-1.0),color=(0.35,0.35,1.0,1.0))#",
        "description": "Set VR viewer location to controller raycast hit location",
        "parameters": [
            "teleport_axes=(True,True,True)",
            "interpolation=1.0",
            "offset=0.0",
            "selectable_only=True",
            "distance=1.70141e+38",
            "from_viewer=False",
            "axis=(0.0,0.0,-1.0)",
            "color=(0.35,0.35,1.0,1.0)"
        ],
        "parameter_descriptions": [
            "teleport_axes(boolean arrayof3 items,(optional)) – Teleport Axes, Enabled teleport axes in navigation space",
            "interpolation(float in[0,1],(optional)) – Interpolation, Interpolation factor between viewer and hit locations",
            "offset(float in[0,inf],(optional)) – Offset, Offset along hit normal to subtract from final location",
            "selectable_only(boolean,(optional)) – Selectable Only, Only allow selectable objects to influence raycast result",
            "distance(float in[0,inf],(optional)) – Maximum raycast distance",
            "from_viewer(boolean,(optional)) – From Viewer, Use viewer pose as raycast origin",
            "axis(mathutils.Vectorof 3 items in [-1, 1], (optional)) – Axis, Raycast axis in controller/viewer space",
            "color(float arrayof4 items in[0,1],(optional)) – Color, Raycast color"
        ]
    },
    {
        "function_id": "bpy.ops.wm.xr_session_toggle",
        "signature": "bpy.ops.wm.xr_session_toggle()#",
        "description": "Open a view for use with virtual reality headsets, or close it if already opened",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.gizmogroup.gizmo_select",
        "signature": "bpy.ops.gizmogroup.gizmo_select(extend=False,deselect=False,toggle=False,deselect_all=False,select_passthrough=False)#",
        "description": "Select the currently highlighted gizmo",
        "parameters": [
            "extend=False",
            "deselect=False",
            "toggle=False",
            "deselect_all=False",
            "select_passthrough=False"
        ],
        "parameter_descriptions": [
            "extend(boolean,(optional)) – Extend, Extend selection instead of deselecting everything first",
            "deselect(boolean,(optional)) – Deselect, Remove from selection",
            "toggle(boolean,(optional)) – Toggle Selection, Toggle the selection",
            "deselect_all(boolean,(optional)) – Deselect On Nothing, Deselect all when nothing under the cursor",
            "select_passthrough(boolean,(optional)) – Only Select Unselected, Ignore the select action when the element is already selected"
        ]
    },
    {
        "function_id": "bpy.ops.gizmogroup.gizmo_tweak",
        "signature": "bpy.ops.gizmogroup.gizmo_tweak()#",
        "description": "Tweak the active gizmo",
        "parameters": []
    },
    {
        "function_id": "gpu.state.active_framebuffer_get",
        "signature": "gpu.state.active_framebuffer_get(enable)#",
        "description": "Return the active frame-buffer in context.",
        "parameters": [
            "enable"
        ]
    },
    {
        "function_id": "gpu.state.blend_get",
        "signature": "gpu.state.blend_get()#",
        "description": "Current blending equation.",
        "parameters": []
    },
    {
        "function_id": "gpu.state.blend_set",
        "signature": "gpu.state.blend_set(mode)#",
        "description": "Defines the fixed pipeline blending equation.",
        "parameters": [
            "mode"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "gpu.state.clip_distances_set",
        "signature": "gpu.state.clip_distances_set(distances_enabled)#",
        "description": "Sets the number ofgl_ClipDistanceplanes used for clip geometry.",
        "parameters": [
            "distances_enabled"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "gpu.state.color_mask_set",
        "signature": "gpu.state.color_mask_set(r,g,b,a)#",
        "description": "Enable or disable writing of frame buffer color components.",
        "parameters": [
            "r",
            "g",
            "b",
            "a"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "gpu.state.depth_mask_get",
        "signature": "gpu.state.depth_mask_get()#",
        "description": "Writing status in the depth component.",
        "parameters": []
    },
    {
        "function_id": "gpu.state.depth_mask_set",
        "signature": "gpu.state.depth_mask_set(value)#",
        "description": "Write to depth component.",
        "parameters": [
            "value"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "gpu.state.depth_test_get",
        "signature": "gpu.state.depth_test_get()#",
        "description": "Current depth_test equation.",
        "parameters": []
    },
    {
        "function_id": "gpu.state.depth_test_set",
        "signature": "gpu.state.depth_test_set(mode)#",
        "description": "Defines the depth_test equation.",
        "parameters": [
            "mode"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "gpu.state.face_culling_set",
        "signature": "gpu.state.face_culling_set(culling)#",
        "description": "Specify whether none, front-facing or back-facing facets can be culled.",
        "parameters": [
            "culling"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "gpu.state.front_facing_set",
        "signature": "gpu.state.front_facing_set(invert)#",
        "description": "Specifies the orientation of front-facing polygons.",
        "parameters": [
            "invert"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "gpu.state.line_width_get",
        "signature": "gpu.state.line_width_get()#",
        "description": "Current width of rasterized lines.",
        "parameters": []
    },
    {
        "function_id": "gpu.state.line_width_set",
        "signature": "gpu.state.line_width_set(width)#",
        "description": "Specify the width of rasterized lines.",
        "parameters": [
            "width"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "gpu.state.point_size_set",
        "signature": "gpu.state.point_size_set(size)#",
        "description": "Specify the diameter of rasterized points.",
        "parameters": [
            "size"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "gpu.state.program_point_size_set",
        "signature": "gpu.state.program_point_size_set(enable)#",
        "description": "If enabled, the derived point size is taken from the (potentially clipped) shader builtin gl_PointSize.",
        "parameters": [
            "enable"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "gpu.state.scissor_get",
        "signature": "gpu.state.scissor_get()#",
        "description": "Retrieve the scissors of the active framebuffer.\nNote: Only valid between ‘scissor_set’ and a framebuffer rebind.",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "gpu.state.scissor_set",
        "signature": "gpu.state.scissor_set(x,y,xsize,ysize)#",
        "description": "Specifies the scissor area of the active framebuffer.\nNote: The scissor state is not saved upon framebuffer rebind.",
        "parameters": [
            "x",
            "y",
            "xsize",
            "ysize"
        ],
        "parameter_descriptions": [
            "y(x,) – lower left corner of the scissor rectangle, in pixels.",
            "ysize(xsize,) – width and height of the scissor rectangle."
        ]
    },
    {
        "function_id": "gpu.state.scissor_test_set",
        "signature": "gpu.state.scissor_test_set(enable)#",
        "description": "Enable/disable scissor testing on the active framebuffer.",
        "parameters": [
            "enable"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "gpu.state.viewport_get",
        "signature": "gpu.state.viewport_get()#",
        "description": "Viewport of the active framebuffer.",
        "parameters": []
    },
    {
        "function_id": "gpu.state.viewport_set",
        "signature": "gpu.state.viewport_set(x,y,xsize,ysize)#",
        "description": "Specifies the viewport of the active framebuffer.\nNote: The viewport state is not saved upon framebuffer rebind.",
        "parameters": [
            "x",
            "y",
            "xsize",
            "ysize"
        ],
        "parameter_descriptions": [
            "y(x,) – lower left corner of the viewport_set rectangle, in pixels.",
            "ysize(xsize,) – width and height of the viewport_set."
        ]
    },
    {
        "function_id": "gpu.texture.from_image",
        "signature": "gpu.texture.from_image(image)#",
        "description": "Get GPUTexture corresponding to an Image datablock. The GPUTexture memory is shared with Blender.\nNote: Colors read from the texture will be in scene linear color space and have premultiplied or straight alpha matching the image alpha mode.",
        "parameters": [
            "image"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.uilist.entry_add",
        "signature": "bpy.ops.uilist.entry_add(list_path='',active_index_path='')#",
        "description": "Add an entry to the list after the current active item",
        "parameters": [
            "list_path=''",
            "active_index_path=''"
        ],
        "parameter_descriptions": [
            "list_path(string,(optional,never None)) – list_path",
            "active_index_path(string,(optional,never None)) – active_index_path"
        ]
    },
    {
        "function_id": "bpy.ops.uilist.entry_move",
        "signature": "bpy.ops.uilist.entry_move(list_path='',active_index_path='',direction='UP')#",
        "description": "Move an entry in the list up or down",
        "parameters": [
            "list_path=''",
            "active_index_path=''",
            "direction='UP'"
        ],
        "parameter_descriptions": [
            "list_path(string,(optional,never None)) – list_path",
            "active_index_path(string,(optional,never None)) – active_index_path",
            "direction(enum in['UP','DOWN'],(optional)) –DirectionUPUP – UP.DOWNDOWN – DOWN.",
            "UPUP – UP.",
            "DOWNDOWN – DOWN."
        ]
    },
    {
        "function_id": "bpy.ops.uilist.entry_remove",
        "signature": "bpy.ops.uilist.entry_remove(list_path='',active_index_path='')#",
        "description": "Remove the selected entry from the list",
        "parameters": [
            "list_path=''",
            "active_index_path=''"
        ],
        "parameter_descriptions": [
            "list_path(string,(optional,never None)) – list_path",
            "active_index_path(string,(optional,never None)) – active_index_path"
        ]
    },
    {
        "function_id": "bpy.ops.anim.binding_unassign_object",
        "signature": "bpy.ops.anim.binding_unassign_object()#",
        "description": "Clear the assigned action binding, effectively making this data-block non-animated",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.anim.change_frame",
        "signature": "bpy.ops.anim.change_frame(frame=0.0,snap=False)#",
        "description": "Interactively change the current frame number",
        "parameters": [
            "frame=0.0",
            "snap=False"
        ],
        "parameter_descriptions": [
            "frame(float in[-1.04857e+06,1.04857e+06],(optional)) – Frame",
            "snap(boolean,(optional)) – Snap"
        ]
    },
    {
        "function_id": "bpy.ops.anim.channel_select_keys",
        "signature": "bpy.ops.anim.channel_select_keys(extend=False)#",
        "description": "Select all keyframes of channel under mouse",
        "parameters": [
            "extend=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.anim.channel_view_pick",
        "signature": "bpy.ops.anim.channel_view_pick(include_handles=True,use_preview_range=True)#",
        "description": "Reset viewable area to show the channel under the cursor",
        "parameters": [
            "include_handles=True",
            "use_preview_range=True"
        ],
        "parameter_descriptions": [
            "include_handles(boolean,(optional)) – Include Handles, Include handles of keyframes when calculating extents",
            "use_preview_range(boolean,(optional)) – Use Preview Range, Ignore frames outside of the preview range"
        ]
    },
    {
        "function_id": "bpy.ops.anim.channels_bake",
        "signature": "bpy.ops.anim.channels_bake(range=(0,0),step=1.0,remove_outside_range=False,interpolation_type='BEZIER',bake_modifiers=True)#",
        "description": "Create keyframes following the current shape of F-Curves of selected channels",
        "parameters": [
            "range=(0,0)",
            "step=1.0",
            "remove_outside_range=False",
            "interpolation_type='BEZIER'",
            "bake_modifiers=True"
        ],
        "parameter_descriptions": [
            "range(int arrayof2 items in[-inf,inf],(optional)) – Frame Range, The range in which to create new keys",
            "step(float in[0.01,inf],(optional)) – Frame Step, At which interval to add keys",
            "remove_outside_range(boolean,(optional)) – Remove Outside Range, Removes keys outside the given range, leaving only the newly baked",
            "interpolation_type(enum in['BEZIER','LIN','CONST'],(optional)) –Interpolation Type, Choose the interpolation type with which new keys will be addedBEZIERBézier – New keys will be Bézier.LINLinear – New keys will be linear.CONSTConstant – New keys will be constant.",
            "BEZIERBézier – New keys will be Bézier.",
            "LINLinear – New keys will be linear.",
            "CONSTConstant – New keys will be constant.",
            "bake_modifiers(boolean,(optional)) – Bake Modifiers, Bake Modifiers into keyframes and delete them after"
        ]
    },
    {
        "function_id": "bpy.ops.anim.channels_clean_empty",
        "signature": "bpy.ops.anim.channels_clean_empty()#",
        "description": "Delete all empty animation data containers from visible data-blocks",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.anim.channels_click",
        "signature": "bpy.ops.anim.channels_click(extend=False,extend_range=False,children_only=False)#",
        "description": "Handle mouse clicks over animation channels",
        "parameters": [
            "extend=False",
            "extend_range=False",
            "children_only=False"
        ],
        "parameter_descriptions": [
            "extend(boolean,(optional)) – Extend Select",
            "extend_range(boolean,(optional)) – Extend Range, Selection of active channel to clicked channel",
            "children_only(boolean,(optional)) – Select Children Only"
        ]
    },
    {
        "function_id": "bpy.ops.anim.channels_collapse",
        "signature": "bpy.ops.anim.channels_collapse(all=True)#",
        "description": "Collapse (close) all selected expandable animation channels",
        "parameters": [
            "all=True"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.anim.channels_delete",
        "signature": "bpy.ops.anim.channels_delete()#",
        "description": "Delete all selected animation channels",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.anim.channels_editable_toggle",
        "signature": "bpy.ops.anim.channels_editable_toggle(mode='TOGGLE',type='PROTECT')#",
        "description": "Toggle editability of selected channels",
        "parameters": [
            "mode='TOGGLE'",
            "type='PROTECT'"
        ],
        "parameter_descriptions": [
            "mode(enum in['TOGGLE','DISABLE','ENABLE','INVERT'],(optional)) – Mode",
            "type(enum in['PROTECT','MUTE'],(optional)) – Type"
        ]
    },
    {
        "function_id": "bpy.ops.anim.channels_expand",
        "signature": "bpy.ops.anim.channels_expand(all=True)#",
        "description": "Expand (open) all selected expandable animation channels",
        "parameters": [
            "all=True"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.anim.channels_fcurves_enable",
        "signature": "bpy.ops.anim.channels_fcurves_enable()#",
        "description": "Clear ‘disabled’ tag from all F-Curves to get broken F-Curves working again",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.anim.channels_group",
        "signature": "bpy.ops.anim.channels_group(name='NewGroup')#",
        "description": "Add selected F-Curves to a new group",
        "parameters": [
            "name='NewGroup'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.anim.channels_move",
        "signature": "bpy.ops.anim.channels_move(direction='DOWN')#",
        "description": "Rearrange selected animation channels",
        "parameters": [
            "direction='DOWN'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.anim.channels_rename",
        "signature": "bpy.ops.anim.channels_rename()#",
        "description": "Rename animation channel under mouse",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.anim.channels_select_all",
        "signature": "bpy.ops.anim.channels_select_all(action='TOGGLE')#",
        "description": "Toggle selection of all animation channels",
        "parameters": [
            "action='TOGGLE'"
        ],
        "parameter_descriptions": [
            "TOGGLEToggle – Toggle selection for all elements.",
            "SELECTSelect – Select all elements.",
            "DESELECTDeselect – Deselect all elements.",
            "INVERTInvert – Invert selection of all elements."
        ]
    },
    {
        "function_id": "bpy.ops.anim.channels_select_box",
        "signature": "bpy.ops.anim.channels_select_box(xmin=0,xmax=0,ymin=0,ymax=0,wait_for_input=True,deselect=False,extend=True)#",
        "description": "Select all animation channels within the specified region",
        "parameters": [
            "xmin=0",
            "xmax=0",
            "ymin=0",
            "ymax=0",
            "wait_for_input=True",
            "deselect=False",
            "extend=True"
        ],
        "parameter_descriptions": [
            "xmin(int in[-inf,inf],(optional)) – X Min",
            "xmax(int in[-inf,inf],(optional)) – X Max",
            "ymin(int in[-inf,inf],(optional)) – Y Min",
            "ymax(int in[-inf,inf],(optional)) – Y Max",
            "wait_for_input(boolean,(optional)) – Wait for Input",
            "deselect(boolean,(optional)) – Deselect, Deselect rather than select items",
            "extend(boolean,(optional)) – Extend, Extend selection instead of deselecting everything first"
        ]
    },
    {
        "function_id": "bpy.ops.anim.channels_select_filter",
        "signature": "bpy.ops.anim.channels_select_filter()#",
        "description": "Start entering text which filters the set of channels shown to only include those with matching names",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.anim.channels_setting_disable",
        "signature": "bpy.ops.anim.channels_setting_disable(mode='DISABLE',type='PROTECT')#",
        "description": "Disable specified setting on all selected animation channels",
        "parameters": [
            "mode='DISABLE'",
            "type='PROTECT'"
        ],
        "parameter_descriptions": [
            "mode(enum in['TOGGLE','DISABLE','ENABLE','INVERT'],(optional)) – Mode",
            "type(enum in['PROTECT','MUTE'],(optional)) – Type"
        ]
    },
    {
        "function_id": "bpy.ops.anim.channels_setting_enable",
        "signature": "bpy.ops.anim.channels_setting_enable(mode='ENABLE',type='PROTECT')#",
        "description": "Enable specified setting on all selected animation channels",
        "parameters": [
            "mode='ENABLE'",
            "type='PROTECT'"
        ],
        "parameter_descriptions": [
            "mode(enum in['TOGGLE','DISABLE','ENABLE','INVERT'],(optional)) – Mode",
            "type(enum in['PROTECT','MUTE'],(optional)) – Type"
        ]
    },
    {
        "function_id": "bpy.ops.anim.channels_setting_toggle",
        "signature": "bpy.ops.anim.channels_setting_toggle(mode='TOGGLE',type='PROTECT')#",
        "description": "Toggle specified setting on all selected animation channels",
        "parameters": [
            "mode='TOGGLE'",
            "type='PROTECT'"
        ],
        "parameter_descriptions": [
            "mode(enum in['TOGGLE','DISABLE','ENABLE','INVERT'],(optional)) – Mode",
            "type(enum in['PROTECT','MUTE'],(optional)) – Type"
        ]
    },
    {
        "function_id": "bpy.ops.anim.channels_ungroup",
        "signature": "bpy.ops.anim.channels_ungroup()#",
        "description": "Remove selected F-Curves from their current groups",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.anim.channels_view_selected",
        "signature": "bpy.ops.anim.channels_view_selected(include_handles=True,use_preview_range=True)#",
        "description": "Reset viewable area to show the selected channels",
        "parameters": [
            "include_handles=True",
            "use_preview_range=True"
        ],
        "parameter_descriptions": [
            "include_handles(boolean,(optional)) – Include Handles, Include handles of keyframes when calculating extents",
            "use_preview_range(boolean,(optional)) – Use Preview Range, Ignore frames outside of the preview range"
        ]
    },
    {
        "function_id": "bpy.ops.anim.clear_useless_actions",
        "signature": "bpy.ops.anim.clear_useless_actions(only_unused=True)#",
        "description": "Mark actions with no F-Curves for deletion after save and reload of file preserving “action libraries”",
        "parameters": [
            "only_unused=True"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.anim.copy_driver_button",
        "signature": "bpy.ops.anim.copy_driver_button()#",
        "description": "Copy the driver for the highlighted button",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.anim.driver_button_add",
        "signature": "bpy.ops.anim.driver_button_add()#",
        "description": "Add driver for the property under the cursor",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.anim.driver_button_edit",
        "signature": "bpy.ops.anim.driver_button_edit()#",
        "description": "Edit the drivers for the connected property represented by the highlighted button",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.anim.driver_button_remove",
        "signature": "bpy.ops.anim.driver_button_remove(all=True)#",
        "description": "Remove the driver(s) for the connected property(s) represented by the highlighted button",
        "parameters": [
            "all=True"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.anim.end_frame_set",
        "signature": "bpy.ops.anim.end_frame_set()#",
        "description": "Set the current frame as the preview or scene end frame",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.anim.keyframe_clear_button",
        "signature": "bpy.ops.anim.keyframe_clear_button(all=True)#",
        "description": "Clear all keyframes on the currently active property",
        "parameters": [
            "all=True"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.anim.keyframe_clear_v3d",
        "signature": "bpy.ops.anim.keyframe_clear_v3d(confirm=True)#",
        "description": "Remove all keyframe animation for selected objects",
        "parameters": [
            "confirm=True"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.anim.keyframe_delete",
        "signature": "bpy.ops.anim.keyframe_delete(type='DEFAULT')#",
        "description": "Delete keyframes on the current frame for all properties in the specified Keying Set",
        "parameters": [
            "type='DEFAULT'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.anim.keyframe_delete_button",
        "signature": "bpy.ops.anim.keyframe_delete_button(all=True)#",
        "description": "Delete current keyframe of current UI-active property",
        "parameters": [
            "all=True"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.anim.keyframe_delete_by_name",
        "signature": "bpy.ops.anim.keyframe_delete_by_name(type='')#",
        "description": "Alternate access to ‘Delete Keyframe’ for keymaps to use",
        "parameters": [
            "type=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.anim.keyframe_delete_v3d",
        "signature": "bpy.ops.anim.keyframe_delete_v3d(confirm=True)#",
        "description": "Remove keyframes on current frame for selected objects and bones",
        "parameters": [
            "confirm=True"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.anim.keyframe_insert",
        "signature": "bpy.ops.anim.keyframe_insert(type='DEFAULT')#",
        "description": "Insert keyframes on the current frame using either the active keying set, or the user preferences if no keying set is active",
        "parameters": [
            "type='DEFAULT'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.anim.keyframe_insert_button",
        "signature": "bpy.ops.anim.keyframe_insert_button(all=True)#",
        "description": "Insert a keyframe for current UI-active property",
        "parameters": [
            "all=True"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.anim.keyframe_insert_by_name",
        "signature": "bpy.ops.anim.keyframe_insert_by_name(type='')#",
        "description": "Alternate access to ‘Insert Keyframe’ for keymaps to use",
        "parameters": [
            "type=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.anim.keyframe_insert_menu",
        "signature": "bpy.ops.anim.keyframe_insert_menu(type='DEFAULT',always_prompt=False)#",
        "description": "Insert Keyframes for specified Keying Set, with menu of available Keying Sets if undefined",
        "parameters": [
            "type='DEFAULT'",
            "always_prompt=False"
        ],
        "parameter_descriptions": [
            "type(enum in['DEFAULT'],(optional)) – Keying Set, The Keying Set to use",
            "always_prompt(boolean,(optional)) – Always Show Menu"
        ]
    },
    {
        "function_id": "bpy.ops.anim.keying_set_active_set",
        "signature": "bpy.ops.anim.keying_set_active_set(type='DEFAULT')#",
        "description": "Set a new active keying set",
        "parameters": [
            "type='DEFAULT'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.anim.keying_set_add",
        "signature": "bpy.ops.anim.keying_set_add()#",
        "description": "Add a new (empty) keying set to the active Scene",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.anim.keying_set_export",
        "signature": "bpy.ops.anim.keying_set_export(filepath='',filter_folder=True,filter_text=True,filter_python=True)#",
        "description": "Export Keying Set to a Python script",
        "parameters": [
            "filepath=''",
            "filter_folder=True",
            "filter_text=True",
            "filter_python=True"
        ],
        "parameter_descriptions": [
            "filepath(string,(optional,never None)) – filepath",
            "filter_folder(boolean,(optional)) – Filter folders",
            "filter_text(boolean,(optional)) – Filter text",
            "filter_python(boolean,(optional)) – Filter Python"
        ]
    },
    {
        "function_id": "bpy.ops.anim.keying_set_path_add",
        "signature": "bpy.ops.anim.keying_set_path_add()#",
        "description": "Add empty path to active keying set",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.anim.keying_set_path_remove",
        "signature": "bpy.ops.anim.keying_set_path_remove()#",
        "description": "Remove active Path from active keying set",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.anim.keying_set_remove",
        "signature": "bpy.ops.anim.keying_set_remove()#",
        "description": "Remove the active keying set",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.anim.keyingset_button_add",
        "signature": "bpy.ops.anim.keyingset_button_add(all=True)#",
        "description": "Add current UI-active property to current keying set",
        "parameters": [
            "all=True"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.anim.keyingset_button_remove",
        "signature": "bpy.ops.anim.keyingset_button_remove()#",
        "description": "Remove current UI-active property from current keying set",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.anim.paste_driver_button",
        "signature": "bpy.ops.anim.paste_driver_button()#",
        "description": "Paste the driver in the internal clipboard to the highlighted button",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.anim.previewrange_clear",
        "signature": "bpy.ops.anim.previewrange_clear()#",
        "description": "Clear preview range",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.anim.previewrange_set",
        "signature": "bpy.ops.anim.previewrange_set(xmin=0,xmax=0,ymin=0,ymax=0,wait_for_input=True)#",
        "description": "Interactively define frame range used for playback",
        "parameters": [
            "xmin=0",
            "xmax=0",
            "ymin=0",
            "ymax=0",
            "wait_for_input=True"
        ],
        "parameter_descriptions": [
            "xmin(int in[-inf,inf],(optional)) – X Min",
            "xmax(int in[-inf,inf],(optional)) – X Max",
            "ymin(int in[-inf,inf],(optional)) – Y Min",
            "ymax(int in[-inf,inf],(optional)) – Y Max",
            "wait_for_input(boolean,(optional)) – Wait for Input"
        ]
    },
    {
        "function_id": "bpy.ops.anim.scene_range_frame",
        "signature": "bpy.ops.anim.scene_range_frame()#",
        "description": "Reset the horizontal view to the current scene frame range, taking the preview range into account if it is active",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.anim.start_frame_set",
        "signature": "bpy.ops.anim.start_frame_set()#",
        "description": "Set the current frame as the preview or scene start frame",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.anim.update_animated_transform_constraints",
        "signature": "bpy.ops.anim.update_animated_transform_constraints(use_convert_to_radians=True)#",
        "description": "Update f-curves/drivers affecting Transform constraints (use it with files from 2.70 and earlier)",
        "parameters": [
            "use_convert_to_radians=True"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.anim.view_curve_in_graph_editor",
        "signature": "bpy.ops.anim.view_curve_in_graph_editor(all=False,isolate=False)#",
        "description": "Frame the property under the cursor in the Graph Editor",
        "parameters": [
            "all=False",
            "isolate=False"
        ],
        "parameter_descriptions": [
            "all(boolean,(optional)) – Show All, Frame the whole array property instead of only the index under the cursor",
            "isolate(boolean,(optional)) – Isolate, Hides all F-Curves other than the ones being framed"
        ]
    },
    {
        "function_id": "bpy.ops.script.execute_preset",
        "signature": "bpy.ops.script.execute_preset(filepath='',menu_idname='')#",
        "description": "Load a preset",
        "parameters": [
            "filepath=''",
            "menu_idname=''"
        ],
        "parameter_descriptions": [
            "filepath(string,(optional,never None)) – filepath",
            "menu_idname(string,(optional,never None)) – Menu ID Name, ID name of the menu this was called from"
        ]
    },
    {
        "function_id": "bpy.ops.script.python_file_run",
        "signature": "bpy.ops.script.python_file_run(filepath='')#",
        "description": "Run Python file",
        "parameters": [
            "filepath=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.script.reload",
        "signature": "bpy.ops.script.reload()#",
        "description": "Reload scripts",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.text.autocomplete",
        "signature": "bpy.ops.text.autocomplete()#",
        "description": "Show a list of used text in the open document",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.text.comment_toggle",
        "signature": "bpy.ops.text.comment_toggle(type='TOGGLE')#",
        "description": "Undocumented, considercontributing.",
        "parameters": [
            "type='TOGGLE'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.text.convert_whitespace",
        "signature": "bpy.ops.text.convert_whitespace(type='SPACES')#",
        "description": "Convert whitespaces by type",
        "parameters": [
            "type='SPACES'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.text.copy",
        "signature": "bpy.ops.text.copy()#",
        "description": "Copy selected text to clipboard",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.text.cursor_set",
        "signature": "bpy.ops.text.cursor_set(x=0,y=0)#",
        "description": "Set cursor position",
        "parameters": [
            "x=0",
            "y=0"
        ],
        "parameter_descriptions": [
            "x(int in[-inf,inf],(optional)) – X",
            "y(int in[-inf,inf],(optional)) – Y"
        ]
    },
    {
        "function_id": "bpy.ops.text.cut",
        "signature": "bpy.ops.text.cut()#",
        "description": "Cut selected text to clipboard",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.text.delete",
        "signature": "bpy.ops.text.delete(type='NEXT_CHARACTER')#",
        "description": "Delete text by cursor position",
        "parameters": [
            "type='NEXT_CHARACTER'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.text.duplicate_line",
        "signature": "bpy.ops.text.duplicate_line()#",
        "description": "Duplicate the current line",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.text.find",
        "signature": "bpy.ops.text.find()#",
        "description": "Find specified text",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.text.find_set_selected",
        "signature": "bpy.ops.text.find_set_selected()#",
        "description": "Find specified text and set as selected",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.text.indent",
        "signature": "bpy.ops.text.indent()#",
        "description": "Indent selected text",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.text.indent_or_autocomplete",
        "signature": "bpy.ops.text.indent_or_autocomplete()#",
        "description": "Indent selected text or autocomplete",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.text.insert",
        "signature": "bpy.ops.text.insert(text='')#",
        "description": "Insert text at cursor position",
        "parameters": [
            "text=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.text.jump",
        "signature": "bpy.ops.text.jump(line=1)#",
        "description": "Jump cursor to line",
        "parameters": [
            "line=1"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.text.jump_to_file_at_point",
        "signature": "bpy.ops.text.jump_to_file_at_point(filepath='',line=0,column=0)#",
        "description": "Jump to a file for the text editor",
        "parameters": [
            "filepath=''",
            "line=0",
            "column=0"
        ],
        "parameter_descriptions": [
            "filepath(string,(optional,never None)) – Filepath",
            "line(int in[0,inf],(optional)) – Line, Line to jump to",
            "column(int in[0,inf],(optional)) – Column, Column to jump to"
        ]
    },
    {
        "function_id": "bpy.ops.text.line_break",
        "signature": "bpy.ops.text.line_break()#",
        "description": "Insert line break at cursor position",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.text.line_number",
        "signature": "bpy.ops.text.line_number()#",
        "description": "The current line number",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.text.make_internal",
        "signature": "bpy.ops.text.make_internal()#",
        "description": "Make active text file internal",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.text.move",
        "signature": "bpy.ops.text.move(type='LINE_BEGIN')#",
        "description": "Move cursor to position type",
        "parameters": [
            "type='LINE_BEGIN'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.text.move_lines",
        "signature": "bpy.ops.text.move_lines(direction='DOWN')#",
        "description": "Move the currently selected line(s) up/down",
        "parameters": [
            "direction='DOWN'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.text.move_select",
        "signature": "bpy.ops.text.move_select(type='LINE_BEGIN')#",
        "description": "Move the cursor while selecting",
        "parameters": [
            "type='LINE_BEGIN'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.text.new",
        "signature": "bpy.ops.text.new()#",
        "description": "Create a new text data-block",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.text.open",
        "signature": "bpy.ops.text.open(filepath='',hide_props_region=True,check_existing=False,filter_blender=False,filter_backup=False,filter_image=False,filter_movie=False,filter_python=True,filter_font=False,filter_sound=False,filter_text=True,filter_archive=False,filter_btx=False,filter_collada=False,filter_alembic=False,filter_usd=False,filter_obj=False,filter_volume=False,filter_folder=True,filter_blenlib=False,filemode=9,display_type='DEFAULT',sort_method='',internal=False)#",
        "description": "Open a new text data-block",
        "parameters": [
            "filepath=''",
            "hide_props_region=True",
            "check_existing=False",
            "filter_blender=False",
            "filter_backup=False",
            "filter_image=False",
            "filter_movie=False",
            "filter_python=True",
            "filter_font=False",
            "filter_sound=False",
            "filter_text=True",
            "filter_archive=False",
            "filter_btx=False",
            "filter_collada=False",
            "filter_alembic=False",
            "filter_usd=False",
            "filter_obj=False",
            "filter_volume=False",
            "filter_folder=True",
            "filter_blenlib=False",
            "filemode=9",
            "display_type='DEFAULT'",
            "sort_method=''",
            "internal=False"
        ],
        "parameter_descriptions": [
            "filepath(string,(optional,never None)) – File Path, Path to file",
            "hide_props_region(boolean,(optional)) – Hide Operator Properties, Collapse the region displaying the operator settings",
            "check_existing(boolean,(optional)) – Check Existing, Check and warn on overwriting existing files",
            "filter_blender(boolean,(optional)) – Filter .blend files",
            "filter_backup(boolean,(optional)) – Filter .blend files",
            "filter_image(boolean,(optional)) – Filter image files",
            "filter_movie(boolean,(optional)) – Filter movie files",
            "filter_python(boolean,(optional)) – Filter Python files",
            "filter_font(boolean,(optional)) – Filter font files",
            "filter_sound(boolean,(optional)) – Filter sound files",
            "filter_text(boolean,(optional)) – Filter text files",
            "filter_archive(boolean,(optional)) – Filter archive files",
            "filter_btx(boolean,(optional)) – Filter btx files",
            "filter_collada(boolean,(optional)) – Filter COLLADA files",
            "filter_alembic(boolean,(optional)) – Filter Alembic files",
            "filter_usd(boolean,(optional)) – Filter USD files",
            "filter_obj(boolean,(optional)) – Filter OBJ files",
            "filter_volume(boolean,(optional)) – Filter OpenVDB volume files",
            "filter_folder(boolean,(optional)) – Filter folders",
            "filter_blenlib(boolean,(optional)) – Filter Blender IDs",
            "filemode(int in[1,9],(optional)) – File Browser Mode, The setting for the file browser mode to load a .blend file, a library or a special file",
            "display_type(enum in['DEFAULT','LIST_VERTICAL','LIST_HORIZONTAL','THUMBNAIL'],(optional)) –Display TypeDEFAULTDefault – Automatically determine display type for files.LIST_VERTICALShort List – Display files as short list.LIST_HORIZONTALLong List – Display files as a detailed list.THUMBNAILThumbnails – Display files as thumbnails.",
            "DEFAULTDefault – Automatically determine display type for files.",
            "LIST_VERTICALShort List – Display files as short list.",
            "LIST_HORIZONTALLong List – Display files as a detailed list.",
            "THUMBNAILThumbnails – Display files as thumbnails.",
            "sort_method(enum in['DEFAULT','FILE_SORT_ALPHA','FILE_SORT_EXTENSION','FILE_SORT_TIME','FILE_SORT_SIZE'],(optional)) –File sorting modeDEFAULTDefault – Automatically determine sort method for files.FILE_SORT_ALPHAName – Sort the file list alphabetically.FILE_SORT_EXTENSIONExtension – Sort the file list by extension/type.FILE_SORT_TIMEModified Date – Sort files by modification time.FILE_SORT_SIZESize – Sort files by size.",
            "DEFAULTDefault – Automatically determine sort method for files.",
            "FILE_SORT_ALPHAName – Sort the file list alphabetically.",
            "FILE_SORT_EXTENSIONExtension – Sort the file list by extension/type.",
            "FILE_SORT_TIMEModified Date – Sort files by modification time.",
            "FILE_SORT_SIZESize – Sort files by size.",
            "internal(boolean,(optional)) – Make Internal, Make text file internal after loading"
        ]
    },
    {
        "function_id": "bpy.ops.text.overwrite_toggle",
        "signature": "bpy.ops.text.overwrite_toggle()#",
        "description": "Toggle overwrite while typing",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.text.paste",
        "signature": "bpy.ops.text.paste(selection=False)#",
        "description": "Paste text from clipboard",
        "parameters": [
            "selection=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.text.refresh_pyconstraints",
        "signature": "bpy.ops.text.refresh_pyconstraints()#",
        "description": "Refresh all pyconstraints",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.text.reload",
        "signature": "bpy.ops.text.reload()#",
        "description": "Reload active text data-block from its file",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.text.replace",
        "signature": "bpy.ops.text.replace(all=False)#",
        "description": "Replace text with the specified text",
        "parameters": [
            "all=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.text.replace_set_selected",
        "signature": "bpy.ops.text.replace_set_selected()#",
        "description": "Replace text with specified text and set as selected",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.text.resolve_conflict",
        "signature": "bpy.ops.text.resolve_conflict(resolution='IGNORE')#",
        "description": "When external text is out of sync, resolve the conflict",
        "parameters": [
            "resolution='IGNORE'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.text.run_script",
        "signature": "bpy.ops.text.run_script()#",
        "description": "Run active script",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.text.save",
        "signature": "bpy.ops.text.save()#",
        "description": "Save active text data-block",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.text.save_as",
        "signature": "bpy.ops.text.save_as(filepath='',hide_props_region=True,check_existing=True,filter_blender=False,filter_backup=False,filter_image=False,filter_movie=False,filter_python=True,filter_font=False,filter_sound=False,filter_text=True,filter_archive=False,filter_btx=False,filter_collada=False,filter_alembic=False,filter_usd=False,filter_obj=False,filter_volume=False,filter_folder=True,filter_blenlib=False,filemode=9,display_type='DEFAULT',sort_method='')#",
        "description": "Save active text file with options",
        "parameters": [
            "filepath=''",
            "hide_props_region=True",
            "check_existing=True",
            "filter_blender=False",
            "filter_backup=False",
            "filter_image=False",
            "filter_movie=False",
            "filter_python=True",
            "filter_font=False",
            "filter_sound=False",
            "filter_text=True",
            "filter_archive=False",
            "filter_btx=False",
            "filter_collada=False",
            "filter_alembic=False",
            "filter_usd=False",
            "filter_obj=False",
            "filter_volume=False",
            "filter_folder=True",
            "filter_blenlib=False",
            "filemode=9",
            "display_type='DEFAULT'",
            "sort_method=''"
        ],
        "parameter_descriptions": [
            "filepath(string,(optional,never None)) – File Path, Path to file",
            "hide_props_region(boolean,(optional)) – Hide Operator Properties, Collapse the region displaying the operator settings",
            "check_existing(boolean,(optional)) – Check Existing, Check and warn on overwriting existing files",
            "filter_blender(boolean,(optional)) – Filter .blend files",
            "filter_backup(boolean,(optional)) – Filter .blend files",
            "filter_image(boolean,(optional)) – Filter image files",
            "filter_movie(boolean,(optional)) – Filter movie files",
            "filter_python(boolean,(optional)) – Filter Python files",
            "filter_font(boolean,(optional)) – Filter font files",
            "filter_sound(boolean,(optional)) – Filter sound files",
            "filter_text(boolean,(optional)) – Filter text files",
            "filter_archive(boolean,(optional)) – Filter archive files",
            "filter_btx(boolean,(optional)) – Filter btx files",
            "filter_collada(boolean,(optional)) – Filter COLLADA files",
            "filter_alembic(boolean,(optional)) – Filter Alembic files",
            "filter_usd(boolean,(optional)) – Filter USD files",
            "filter_obj(boolean,(optional)) – Filter OBJ files",
            "filter_volume(boolean,(optional)) – Filter OpenVDB volume files",
            "filter_folder(boolean,(optional)) – Filter folders",
            "filter_blenlib(boolean,(optional)) – Filter Blender IDs",
            "filemode(int in[1,9],(optional)) – File Browser Mode, The setting for the file browser mode to load a .blend file, a library or a special file",
            "display_type(enum in['DEFAULT','LIST_VERTICAL','LIST_HORIZONTAL','THUMBNAIL'],(optional)) –Display TypeDEFAULTDefault – Automatically determine display type for files.LIST_VERTICALShort List – Display files as short list.LIST_HORIZONTALLong List – Display files as a detailed list.THUMBNAILThumbnails – Display files as thumbnails.",
            "DEFAULTDefault – Automatically determine display type for files.",
            "LIST_VERTICALShort List – Display files as short list.",
            "LIST_HORIZONTALLong List – Display files as a detailed list.",
            "THUMBNAILThumbnails – Display files as thumbnails.",
            "sort_method(enum in[],(optional)) – File sorting mode"
        ]
    },
    {
        "function_id": "bpy.ops.text.scroll",
        "signature": "bpy.ops.text.scroll(lines=1)#",
        "description": "Undocumented, considercontributing.",
        "parameters": [
            "lines=1"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.text.scroll_bar",
        "signature": "bpy.ops.text.scroll_bar(lines=1)#",
        "description": "Undocumented, considercontributing.",
        "parameters": [
            "lines=1"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.text.select_all",
        "signature": "bpy.ops.text.select_all()#",
        "description": "Select all text",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.text.select_line",
        "signature": "bpy.ops.text.select_line()#",
        "description": "Select text by line",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.text.select_word",
        "signature": "bpy.ops.text.select_word()#",
        "description": "Select word under cursor",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.text.selection_set",
        "signature": "bpy.ops.text.selection_set()#",
        "description": "Set text selection",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.text.start_find",
        "signature": "bpy.ops.text.start_find()#",
        "description": "Start searching text",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.text.to_3d_object",
        "signature": "bpy.ops.text.to_3d_object(split_lines=False)#",
        "description": "Create 3D text object from active text data-block",
        "parameters": [
            "split_lines=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.text.unindent",
        "signature": "bpy.ops.text.unindent()#",
        "description": "Unindent selected text",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.text.unlink",
        "signature": "bpy.ops.text.unlink()#",
        "description": "Unlink active text data-block",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.spreadsheet.add_row_filter_rule",
        "signature": "bpy.ops.spreadsheet.add_row_filter_rule()#",
        "description": "Add a filter to remove rows from the displayed data",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.spreadsheet.change_spreadsheet_data_source",
        "signature": "bpy.ops.spreadsheet.change_spreadsheet_data_source(component_type=0,attribute_domain_type=0)#",
        "description": "Change visible data source in the spreadsheet",
        "parameters": [
            "component_type=0",
            "attribute_domain_type=0"
        ],
        "parameter_descriptions": [
            "component_type(int in[0,32767],(optional)) – Component Type",
            "attribute_domain_type(int in[0,32767],(optional)) – Attribute Domain Type"
        ]
    },
    {
        "function_id": "bpy.ops.spreadsheet.remove_row_filter_rule",
        "signature": "bpy.ops.spreadsheet.remove_row_filter_rule(index=0)#",
        "description": "Remove a row filter from the rules",
        "parameters": [
            "index=0"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.spreadsheet.toggle_pin",
        "signature": "bpy.ops.spreadsheet.toggle_pin()#",
        "description": "Turn on or off pinning",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.marker.add",
        "signature": "bpy.ops.marker.add()#",
        "description": "Add a new time marker",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.marker.camera_bind",
        "signature": "bpy.ops.marker.camera_bind()#",
        "description": "Bind the selected camera to a marker on the current frame",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.marker.delete",
        "signature": "bpy.ops.marker.delete(confirm=True)#",
        "description": "Delete selected time marker(s)",
        "parameters": [
            "confirm=True"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.marker.duplicate",
        "signature": "bpy.ops.marker.duplicate(frames=0)#",
        "description": "Duplicate selected time marker(s)",
        "parameters": [
            "frames=0"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.marker.make_links_scene",
        "signature": "bpy.ops.marker.make_links_scene(scene='')#",
        "description": "Copy selected markers to another scene",
        "parameters": [
            "scene=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.marker.move",
        "signature": "bpy.ops.marker.move(frames=0,tweak=False)#",
        "description": "Move selected time marker(s)",
        "parameters": [
            "frames=0",
            "tweak=False"
        ],
        "parameter_descriptions": [
            "frames(int in[-inf,inf],(optional)) – Frames",
            "tweak(boolean,(optional)) – Tweak, Operator has been activated using a click-drag event"
        ]
    },
    {
        "function_id": "bpy.ops.marker.rename",
        "signature": "bpy.ops.marker.rename(name='RenamedMarker')#",
        "description": "Rename first selected time marker",
        "parameters": [
            "name='RenamedMarker'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.marker.select",
        "signature": "bpy.ops.marker.select(wait_to_deselect_others=False,mouse_x=0,mouse_y=0,extend=False,camera=False)#",
        "description": "Select time marker(s)",
        "parameters": [
            "wait_to_deselect_others=False",
            "mouse_x=0",
            "mouse_y=0",
            "extend=False",
            "camera=False"
        ],
        "parameter_descriptions": [
            "wait_to_deselect_others(boolean,(optional)) – Wait to Deselect Others",
            "mouse_x(int in[-inf,inf],(optional)) – Mouse X",
            "mouse_y(int in[-inf,inf],(optional)) – Mouse Y",
            "extend(boolean,(optional)) – Extend, Extend the selection",
            "camera(boolean,(optional)) – Camera, Select the camera"
        ]
    },
    {
        "function_id": "bpy.ops.marker.select_all",
        "signature": "bpy.ops.marker.select_all(action='TOGGLE')#",
        "description": "Change selection of all time markers",
        "parameters": [
            "action='TOGGLE'"
        ],
        "parameter_descriptions": [
            "TOGGLEToggle – Toggle selection for all elements.",
            "SELECTSelect – Select all elements.",
            "DESELECTDeselect – Deselect all elements.",
            "INVERTInvert – Invert selection of all elements."
        ]
    },
    {
        "function_id": "bpy.ops.marker.select_box",
        "signature": "bpy.ops.marker.select_box(xmin=0,xmax=0,ymin=0,ymax=0,wait_for_input=True,mode='SET',tweak=False)#",
        "description": "Select all time markers using box selection",
        "parameters": [
            "xmin=0",
            "xmax=0",
            "ymin=0",
            "ymax=0",
            "wait_for_input=True",
            "mode='SET'",
            "tweak=False"
        ],
        "parameter_descriptions": [
            "xmin(int in[-inf,inf],(optional)) – X Min",
            "xmax(int in[-inf,inf],(optional)) – X Max",
            "ymin(int in[-inf,inf],(optional)) – Y Min",
            "ymax(int in[-inf,inf],(optional)) – Y Max",
            "wait_for_input(boolean,(optional)) – Wait for Input",
            "mode(enum in['SET','ADD','SUB'],(optional)) –ModeSETSet – Set a new selection.ADDExtend – Extend existing selection.SUBSubtract – Subtract existing selection.",
            "SETSet – Set a new selection.",
            "ADDExtend – Extend existing selection.",
            "SUBSubtract – Subtract existing selection.",
            "tweak(boolean,(optional)) – Tweak, Operator has been activated using a click-drag event"
        ]
    },
    {
        "function_id": "bpy.ops.marker.select_leftright",
        "signature": "bpy.ops.marker.select_leftright(mode='LEFT',extend=False)#",
        "description": "Select markers on and left/right of the current frame",
        "parameters": [
            "mode='LEFT'",
            "extend=False"
        ],
        "parameter_descriptions": [
            "mode(enum in['LEFT','RIGHT'],(optional)) – Mode",
            "extend(boolean,(optional)) – Extend Select"
        ]
    },
    {
        "function_id": "bpy.ops.node.add_collection",
        "signature": "bpy.ops.node.add_collection(name='',session_uid=0)#",
        "description": "Add a collection info node to the current node editor",
        "parameters": [
            "name=''",
            "session_uid=0"
        ],
        "parameter_descriptions": [
            "name(string,(optional,never None)) – Name, Name of the data-block to use by the operator",
            "session_uid(int in[-inf,inf],(optional)) – Session UID, Session UID of the data-block to use by the operator"
        ]
    },
    {
        "function_id": "bpy.ops.node.add_file",
        "signature": "bpy.ops.node.add_file(filepath='',directory='',files=None,hide_props_region=True,check_existing=False,filter_blender=False,filter_backup=False,filter_image=True,filter_movie=True,filter_python=False,filter_font=False,filter_sound=False,filter_text=False,filter_archive=False,filter_btx=False,filter_collada=False,filter_alembic=False,filter_usd=False,filter_obj=False,filter_volume=False,filter_folder=True,filter_blenlib=False,filemode=9,relative_path=True,show_multiview=False,use_multiview=False,display_type='DEFAULT',sort_method='',name='',session_uid=0)#",
        "description": "Add a file node to the current node editor",
        "parameters": [
            "filepath=''",
            "directory=''",
            "files=None",
            "hide_props_region=True",
            "check_existing=False",
            "filter_blender=False",
            "filter_backup=False",
            "filter_image=True",
            "filter_movie=True",
            "filter_python=False",
            "filter_font=False",
            "filter_sound=False",
            "filter_text=False",
            "filter_archive=False",
            "filter_btx=False",
            "filter_collada=False",
            "filter_alembic=False",
            "filter_usd=False",
            "filter_obj=False",
            "filter_volume=False",
            "filter_folder=True",
            "filter_blenlib=False",
            "filemode=9",
            "relative_path=True",
            "show_multiview=False",
            "use_multiview=False",
            "display_type='DEFAULT'",
            "sort_method=''",
            "name=''",
            "session_uid=0"
        ],
        "parameter_descriptions": [
            "filepath(string,(optional,never None)) – File Path, Path to file",
            "directory(string,(optional,never None)) – Directory, Directory of the file",
            "files(bpy_prop_collectionofOperatorFileListElement, (optional)) – Files",
            "hide_props_region(boolean,(optional)) – Hide Operator Properties, Collapse the region displaying the operator settings",
            "check_existing(boolean,(optional)) – Check Existing, Check and warn on overwriting existing files",
            "filter_blender(boolean,(optional)) – Filter .blend files",
            "filter_backup(boolean,(optional)) – Filter .blend files",
            "filter_image(boolean,(optional)) – Filter image files",
            "filter_movie(boolean,(optional)) – Filter movie files",
            "filter_python(boolean,(optional)) – Filter Python files",
            "filter_font(boolean,(optional)) – Filter font files",
            "filter_sound(boolean,(optional)) – Filter sound files",
            "filter_text(boolean,(optional)) – Filter text files",
            "filter_archive(boolean,(optional)) – Filter archive files",
            "filter_btx(boolean,(optional)) – Filter btx files",
            "filter_collada(boolean,(optional)) – Filter COLLADA files",
            "filter_alembic(boolean,(optional)) – Filter Alembic files",
            "filter_usd(boolean,(optional)) – Filter USD files",
            "filter_obj(boolean,(optional)) – Filter OBJ files",
            "filter_volume(boolean,(optional)) – Filter OpenVDB volume files",
            "filter_folder(boolean,(optional)) – Filter folders",
            "filter_blenlib(boolean,(optional)) – Filter Blender IDs",
            "filemode(int in[1,9],(optional)) – File Browser Mode, The setting for the file browser mode to load a .blend file, a library or a special file",
            "relative_path(boolean,(optional)) – Relative Path, Select the file relative to the blend file",
            "show_multiview(boolean,(optional)) – Enable Multi-View",
            "use_multiview(boolean,(optional)) – Use Multi-View",
            "display_type(enum in['DEFAULT','LIST_VERTICAL','LIST_HORIZONTAL','THUMBNAIL'],(optional)) –Display TypeDEFAULTDefault – Automatically determine display type for files.LIST_VERTICALShort List – Display files as short list.LIST_HORIZONTALLong List – Display files as a detailed list.THUMBNAILThumbnails – Display files as thumbnails.",
            "DEFAULTDefault – Automatically determine display type for files.",
            "LIST_VERTICALShort List – Display files as short list.",
            "LIST_HORIZONTALLong List – Display files as a detailed list.",
            "THUMBNAILThumbnails – Display files as thumbnails.",
            "sort_method(enum in['DEFAULT','FILE_SORT_ALPHA','FILE_SORT_EXTENSION','FILE_SORT_TIME','FILE_SORT_SIZE'],(optional)) –File sorting modeDEFAULTDefault – Automatically determine sort method for files.FILE_SORT_ALPHAName – Sort the file list alphabetically.FILE_SORT_EXTENSIONExtension – Sort the file list by extension/type.FILE_SORT_TIMEModified Date – Sort files by modification time.FILE_SORT_SIZESize – Sort files by size.",
            "DEFAULTDefault – Automatically determine sort method for files.",
            "FILE_SORT_ALPHAName – Sort the file list alphabetically.",
            "FILE_SORT_EXTENSIONExtension – Sort the file list by extension/type.",
            "FILE_SORT_TIMEModified Date – Sort files by modification time.",
            "FILE_SORT_SIZESize – Sort files by size.",
            "name(string,(optional,never None)) – Name, Name of the data-block to use by the operator",
            "session_uid(int in[-inf,inf],(optional)) – Session UID, Session UID of the data-block to use by the operator"
        ]
    },
    {
        "function_id": "bpy.ops.node.add_group",
        "signature": "bpy.ops.node.add_group(name='',session_uid=0,show_datablock_in_node=True)#",
        "description": "Add an existing node group to the current node editor",
        "parameters": [
            "name=''",
            "session_uid=0",
            "show_datablock_in_node=True"
        ],
        "parameter_descriptions": [
            "name(string,(optional,never None)) – Name, Name of the data-block to use by the operator",
            "session_uid(int in[-inf,inf],(optional)) – Session UID, Session UID of the data-block to use by the operator",
            "show_datablock_in_node(boolean,(optional)) – Show the datablock selector in the node"
        ]
    },
    {
        "function_id": "bpy.ops.node.add_group_asset",
        "signature": "bpy.ops.node.add_group_asset(asset_library_type='LOCAL',asset_library_identifier='',relative_asset_identifier='')#",
        "description": "Add a node group asset to the active node tree",
        "parameters": [
            "asset_library_type='LOCAL'",
            "asset_library_identifier=''",
            "relative_asset_identifier=''"
        ],
        "parameter_descriptions": [
            "asset_library_type(enum inAsset Library Type Items, (optional)) – Asset Library Type",
            "asset_library_identifier(string,(optional,never None)) – Asset Library Identifier",
            "relative_asset_identifier(string,(optional,never None)) – Relative Asset Identifier"
        ]
    },
    {
        "function_id": "bpy.ops.node.add_mask",
        "signature": "bpy.ops.node.add_mask(name='',session_uid=0)#",
        "description": "Add a mask node to the current node editor",
        "parameters": [
            "name=''",
            "session_uid=0"
        ],
        "parameter_descriptions": [
            "name(string,(optional,never None)) – Name, Name of the data-block to use by the operator",
            "session_uid(int in[-inf,inf],(optional)) – Session UID, Session UID of the data-block to use by the operator"
        ]
    },
    {
        "function_id": "bpy.ops.node.add_material",
        "signature": "bpy.ops.node.add_material(name='',session_uid=0)#",
        "description": "Add a material node to the current node editor",
        "parameters": [
            "name=''",
            "session_uid=0"
        ],
        "parameter_descriptions": [
            "name(string,(optional,never None)) – Name, Name of the data-block to use by the operator",
            "session_uid(int in[-inf,inf],(optional)) – Session UID, Session UID of the data-block to use by the operator"
        ]
    },
    {
        "function_id": "bpy.ops.node.add_node",
        "signature": "bpy.ops.node.add_node(use_transform=False,settings=None,type='')#",
        "description": "Add a node to the active tree",
        "parameters": [
            "use_transform=False",
            "settings=None",
            "type=''"
        ],
        "parameter_descriptions": [
            "use_transform(boolean,(optional)) – Use Transform, Start transform operator after inserting the node",
            "settings(bpy_prop_collectionofNodeSetting, (optional)) – Settings, Settings to be applied on the newly created node",
            "type(string,(optional,never None)) – Node Type, Node type"
        ]
    },
    {
        "function_id": "bpy.ops.node.add_object",
        "signature": "bpy.ops.node.add_object(name='',session_uid=0)#",
        "description": "Add an object info node to the current node editor",
        "parameters": [
            "name=''",
            "session_uid=0"
        ],
        "parameter_descriptions": [
            "name(string,(optional,never None)) – Name, Name of the data-block to use by the operator",
            "session_uid(int in[-inf,inf],(optional)) – Session UID, Session UID of the data-block to use by the operator"
        ]
    },
    {
        "function_id": "bpy.ops.node.add_repeat_zone",
        "signature": "bpy.ops.node.add_repeat_zone(use_transform=False,settings=None,offset=(150.0,0.0))#",
        "description": "Add a repeat zone that allows executing nodes a dynamic number of times",
        "parameters": [
            "use_transform=False",
            "settings=None",
            "offset=(150.0,0.0)"
        ],
        "parameter_descriptions": [
            "use_transform(boolean,(optional)) – Use Transform, Start transform operator after inserting the node",
            "settings(bpy_prop_collectionofNodeSetting, (optional)) – Settings, Settings to be applied on the newly created node",
            "offset(float arrayof2 items in[-inf,inf],(optional)) – Offset, Offset of nodes from the cursor when added"
        ]
    },
    {
        "function_id": "bpy.ops.node.add_reroute",
        "signature": "bpy.ops.node.add_reroute(path=None,cursor=8)#",
        "description": "Add a reroute node",
        "parameters": [
            "path=None",
            "cursor=8"
        ],
        "parameter_descriptions": [
            "path(bpy_prop_collectionofOperatorMousePath, (optional)) – Path",
            "cursor(int in[0,inf],(optional)) – Cursor"
        ]
    },
    {
        "function_id": "bpy.ops.node.add_simulation_zone",
        "signature": "bpy.ops.node.add_simulation_zone(use_transform=False,settings=None,offset=(150.0,0.0))#",
        "description": "Add simulation zone input and output nodes to the active tree",
        "parameters": [
            "use_transform=False",
            "settings=None",
            "offset=(150.0,0.0)"
        ],
        "parameter_descriptions": [
            "use_transform(boolean,(optional)) – Use Transform, Start transform operator after inserting the node",
            "settings(bpy_prop_collectionofNodeSetting, (optional)) – Settings, Settings to be applied on the newly created node",
            "offset(float arrayof2 items in[-inf,inf],(optional)) – Offset, Offset of nodes from the cursor when added"
        ]
    },
    {
        "function_id": "bpy.ops.node.attach",
        "signature": "bpy.ops.node.attach()#",
        "description": "Attach active node to a frame",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.node.backimage_fit",
        "signature": "bpy.ops.node.backimage_fit()#",
        "description": "Fit the background image to the view",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.node.backimage_move",
        "signature": "bpy.ops.node.backimage_move()#",
        "description": "Move node backdrop",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.node.backimage_sample",
        "signature": "bpy.ops.node.backimage_sample()#",
        "description": "Use mouse to sample background image",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.node.backimage_zoom",
        "signature": "bpy.ops.node.backimage_zoom(factor=1.2)#",
        "description": "Zoom in/out the background image",
        "parameters": [
            "factor=1.2"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.node.bake_node_item_add",
        "signature": "bpy.ops.node.bake_node_item_add()#",
        "description": "Add bake item",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.node.bake_node_item_move",
        "signature": "bpy.ops.node.bake_node_item_move(direction='UP')#",
        "description": "Move active bake item",
        "parameters": [
            "direction='UP'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.node.bake_node_item_remove",
        "signature": "bpy.ops.node.bake_node_item_remove()#",
        "description": "Remove active bake item",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.node.capture_attribute_item_add",
        "signature": "bpy.ops.node.capture_attribute_item_add()#",
        "description": "Add capture attribute item",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.node.capture_attribute_item_move",
        "signature": "bpy.ops.node.capture_attribute_item_move(direction='UP')#",
        "description": "Move active capture attribute item",
        "parameters": [
            "direction='UP'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.node.capture_attribute_item_remove",
        "signature": "bpy.ops.node.capture_attribute_item_remove()#",
        "description": "Remove active capture attribute item",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.node.clear_viewer_border",
        "signature": "bpy.ops.node.clear_viewer_border()#",
        "description": "Clear the boundaries for viewer operations",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.node.clipboard_copy",
        "signature": "bpy.ops.node.clipboard_copy()#",
        "description": "Copy the selected nodes to the internal clipboard",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.node.clipboard_paste",
        "signature": "bpy.ops.node.clipboard_paste(offset=(0.0,0.0))#",
        "description": "Paste nodes from the internal clipboard to the active node tree",
        "parameters": [
            "offset=(0.0,0.0)"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.node.collapse_hide_unused_toggle",
        "signature": "bpy.ops.node.collapse_hide_unused_toggle()#",
        "description": "Toggle collapsed nodes and hide unused sockets",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.node.connect_to_output",
        "signature": "bpy.ops.node.connect_to_output(run_in_geometry_nodes=True)#",
        "description": "Connect active node to the active output node of the node tree",
        "parameters": [
            "run_in_geometry_nodes=True"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.node.cryptomatte_layer_add",
        "signature": "bpy.ops.node.cryptomatte_layer_add()#",
        "description": "Add a new input layer to a Cryptomatte node",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.node.cryptomatte_layer_remove",
        "signature": "bpy.ops.node.cryptomatte_layer_remove()#",
        "description": "Remove layer from a Cryptomatte node",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.node.deactivate_viewer",
        "signature": "bpy.ops.node.deactivate_viewer()#",
        "description": "Deactivate selected viewer node in geometry nodes",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.node.delete",
        "signature": "bpy.ops.node.delete()#",
        "description": "Remove selected nodes",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.node.delete_reconnect",
        "signature": "bpy.ops.node.delete_reconnect()#",
        "description": "Remove nodes and reconnect nodes as if deletion was muted",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.node.detach",
        "signature": "bpy.ops.node.detach()#",
        "description": "Detach selected nodes from parents",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.node.detach_translate_attach",
        "signature": "bpy.ops.node.detach_translate_attach(NODE_OT_detach=None,TRANSFORM_OT_translate=None,NODE_OT_attach=None)#",
        "description": "Detach nodes, move and attach to frame",
        "parameters": [
            "NODE_OT_detach=None",
            "TRANSFORM_OT_translate=None",
            "NODE_OT_attach=None"
        ],
        "parameter_descriptions": [
            "NODE_OT_detach(NODE_OT_detach, (optional)) – Detach Nodes, Detach selected nodes from parents",
            "TRANSFORM_OT_translate(TRANSFORM_OT_translate, (optional)) – Move, Move selected items",
            "NODE_OT_attach(NODE_OT_attach, (optional)) – Attach Nodes, Attach active node to a frame"
        ]
    },
    {
        "function_id": "bpy.ops.node.duplicate",
        "signature": "bpy.ops.node.duplicate(keep_inputs=False,linked=True)#",
        "description": "Duplicate selected nodes",
        "parameters": [
            "keep_inputs=False",
            "linked=True"
        ],
        "parameter_descriptions": [
            "keep_inputs(boolean,(optional)) – Keep Inputs, Keep the input links to duplicated nodes",
            "linked(boolean,(optional)) – Linked, Duplicate node but not node trees, linking to the original data"
        ]
    },
    {
        "function_id": "bpy.ops.node.duplicate_move",
        "signature": "bpy.ops.node.duplicate_move(NODE_OT_duplicate=None,NODE_OT_translate_attach=None)#",
        "description": "Duplicate selected nodes and move them",
        "parameters": [
            "NODE_OT_duplicate=None",
            "NODE_OT_translate_attach=None"
        ],
        "parameter_descriptions": [
            "NODE_OT_duplicate(NODE_OT_duplicate, (optional)) – Duplicate Nodes, Duplicate selected nodes",
            "NODE_OT_translate_attach(NODE_OT_translate_attach, (optional)) – Move and Attach, Move nodes and attach to frame"
        ]
    },
    {
        "function_id": "bpy.ops.node.duplicate_move_keep_inputs",
        "signature": "bpy.ops.node.duplicate_move_keep_inputs(NODE_OT_duplicate=None,NODE_OT_translate_attach=None)#",
        "description": "Duplicate selected nodes keeping input links and move them",
        "parameters": [
            "NODE_OT_duplicate=None",
            "NODE_OT_translate_attach=None"
        ],
        "parameter_descriptions": [
            "NODE_OT_duplicate(NODE_OT_duplicate, (optional)) – Duplicate Nodes, Duplicate selected nodes",
            "NODE_OT_translate_attach(NODE_OT_translate_attach, (optional)) – Move and Attach, Move nodes and attach to frame"
        ]
    },
    {
        "function_id": "bpy.ops.node.duplicate_move_linked",
        "signature": "bpy.ops.node.duplicate_move_linked(NODE_OT_duplicate=None,NODE_OT_translate_attach=None)#",
        "description": "Duplicate selected nodes, but not their node trees, and move them",
        "parameters": [
            "NODE_OT_duplicate=None",
            "NODE_OT_translate_attach=None"
        ],
        "parameter_descriptions": [
            "NODE_OT_duplicate(NODE_OT_duplicate, (optional)) – Duplicate Nodes, Duplicate selected nodes",
            "NODE_OT_translate_attach(NODE_OT_translate_attach, (optional)) – Move and Attach, Move nodes and attach to frame"
        ]
    },
    {
        "function_id": "bpy.ops.node.enum_definition_item_add",
        "signature": "bpy.ops.node.enum_definition_item_add()#",
        "description": "Add menu item",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.node.enum_definition_item_move",
        "signature": "bpy.ops.node.enum_definition_item_move(direction='UP')#",
        "description": "Move active menu item",
        "parameters": [
            "direction='UP'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.node.enum_definition_item_remove",
        "signature": "bpy.ops.node.enum_definition_item_remove()#",
        "description": "Remove active menu item",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.node.find_node",
        "signature": "bpy.ops.node.find_node()#",
        "description": "Search for a node by name and focus and select it",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.node.gltf_settings_node_operator",
        "signature": "bpy.ops.node.gltf_settings_node_operator()#",
        "description": "Add a node to the active tree for glTF export",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.node.group_edit",
        "signature": "bpy.ops.node.group_edit(exit=False)#",
        "description": "Edit node group",
        "parameters": [
            "exit=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.node.group_insert",
        "signature": "bpy.ops.node.group_insert()#",
        "description": "Insert selected nodes into a node group",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.node.group_make",
        "signature": "bpy.ops.node.group_make()#",
        "description": "Make group from selected nodes",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.node.group_separate",
        "signature": "bpy.ops.node.group_separate(type='COPY')#",
        "description": "Separate selected nodes from the node group",
        "parameters": [
            "type='COPY'"
        ],
        "parameter_descriptions": [
            "COPYCopy – Copy to parent node tree, keep group intact.",
            "MOVEMove – Move to parent node tree, remove from group."
        ]
    },
    {
        "function_id": "bpy.ops.node.group_ungroup",
        "signature": "bpy.ops.node.group_ungroup()#",
        "description": "Ungroup selected nodes",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.node.hide_socket_toggle",
        "signature": "bpy.ops.node.hide_socket_toggle()#",
        "description": "Toggle unused node socket display",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.node.hide_toggle",
        "signature": "bpy.ops.node.hide_toggle()#",
        "description": "Toggle hiding of selected nodes",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.node.index_switch_item_add",
        "signature": "bpy.ops.node.index_switch_item_add()#",
        "description": "Add bake item",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.node.index_switch_item_remove",
        "signature": "bpy.ops.node.index_switch_item_remove(index=0)#",
        "description": "Remove an item from the index switch",
        "parameters": [
            "index=0"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.node.insert_offset",
        "signature": "bpy.ops.node.insert_offset()#",
        "description": "Automatically offset nodes on insertion",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.node.interface_item_duplicate",
        "signature": "bpy.ops.node.interface_item_duplicate()#",
        "description": "Add a copy of the active item to the interface",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.node.interface_item_new",
        "signature": "bpy.ops.node.interface_item_new(item_type='INPUT')#",
        "description": "Add a new item to the interface",
        "parameters": [
            "item_type='INPUT'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.node.interface_item_remove",
        "signature": "bpy.ops.node.interface_item_remove()#",
        "description": "Remove active item from the interface",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.node.join",
        "signature": "bpy.ops.node.join()#",
        "description": "Attach selected nodes to a new common frame",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.node.link",
        "signature": "bpy.ops.node.link(detach=False,drag_start=(0.0,0.0),inside_padding=2.0,outside_padding=0.0,speed_ramp=1.0,max_speed=26.0,delay=0.5,zoom_influence=0.5)#",
        "description": "Use the mouse to create a link between two nodes",
        "parameters": [
            "detach=False",
            "drag_start=(0.0,0.0)",
            "inside_padding=2.0",
            "outside_padding=0.0",
            "speed_ramp=1.0",
            "max_speed=26.0",
            "delay=0.5",
            "zoom_influence=0.5"
        ],
        "parameter_descriptions": [
            "detach(boolean,(optional)) – Detach, Detach and redirect existing links",
            "drag_start(float arrayof2 items in[-6,6],(optional)) – Drag Start, The position of the mouse cursor at the start of the operation",
            "inside_padding(float in[0,100],(optional)) – Inside Padding, Inside distance in UI units from the edge of the region within which to start panning",
            "outside_padding(float in[0,100],(optional)) – Outside Padding, Outside distance in UI units from the edge of the region at which to stop panning",
            "speed_ramp(float in[0,100],(optional)) – Speed Ramp, Width of the zone in UI units where speed increases with distance from the edge",
            "max_speed(float in[0,10000],(optional)) – Max Speed, Maximum speed in UI units per second",
            "delay(float in[0,10],(optional)) – Delay, Delay in seconds before maximum speed is reached",
            "zoom_influence(float in[0,1],(optional)) – Zoom Influence, Influence of the zoom factor on scroll speed"
        ]
    },
    {
        "function_id": "bpy.ops.node.link_make",
        "signature": "bpy.ops.node.link_make(replace=False)#",
        "description": "Make a link between selected output and input sockets",
        "parameters": [
            "replace=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.node.link_viewer",
        "signature": "bpy.ops.node.link_viewer()#",
        "description": "Link to viewer node",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.node.links_cut",
        "signature": "bpy.ops.node.links_cut(path=None,cursor=12)#",
        "description": "Use the mouse to cut (remove) some links",
        "parameters": [
            "path=None",
            "cursor=12"
        ],
        "parameter_descriptions": [
            "path(bpy_prop_collectionofOperatorMousePath, (optional)) – Path",
            "cursor(int in[0,inf],(optional)) – Cursor"
        ]
    },
    {
        "function_id": "bpy.ops.node.links_detach",
        "signature": "bpy.ops.node.links_detach()#",
        "description": "Remove all links to selected nodes, and try to connect neighbor nodes together",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.node.links_mute",
        "signature": "bpy.ops.node.links_mute(path=None,cursor=35)#",
        "description": "Use the mouse to mute links",
        "parameters": [
            "path=None",
            "cursor=35"
        ],
        "parameter_descriptions": [
            "path(bpy_prop_collectionofOperatorMousePath, (optional)) – Path",
            "cursor(int in[0,inf],(optional)) – Cursor"
        ]
    },
    {
        "function_id": "bpy.ops.node.move_detach_links",
        "signature": "bpy.ops.node.move_detach_links(NODE_OT_links_detach=None,TRANSFORM_OT_translate=None)#",
        "description": "Move a node to detach links",
        "parameters": [
            "NODE_OT_links_detach=None",
            "TRANSFORM_OT_translate=None"
        ],
        "parameter_descriptions": [
            "NODE_OT_links_detach(NODE_OT_links_detach, (optional)) – Detach Links, Remove all links to selected nodes, and try to connect neighbor nodes together",
            "TRANSFORM_OT_translate(TRANSFORM_OT_translate, (optional)) – Move, Move selected items"
        ]
    },
    {
        "function_id": "bpy.ops.node.move_detach_links_release",
        "signature": "bpy.ops.node.move_detach_links_release(NODE_OT_links_detach=None,NODE_OT_translate_attach=None)#",
        "description": "Move a node to detach links",
        "parameters": [
            "NODE_OT_links_detach=None",
            "NODE_OT_translate_attach=None"
        ],
        "parameter_descriptions": [
            "NODE_OT_links_detach(NODE_OT_links_detach, (optional)) – Detach Links, Remove all links to selected nodes, and try to connect neighbor nodes together",
            "NODE_OT_translate_attach(NODE_OT_translate_attach, (optional)) – Move and Attach, Move nodes and attach to frame"
        ]
    },
    {
        "function_id": "bpy.ops.node.mute_toggle",
        "signature": "bpy.ops.node.mute_toggle()#",
        "description": "Toggle muting of selected nodes",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.node.new_geometry_node_group_assign",
        "signature": "bpy.ops.node.new_geometry_node_group_assign()#",
        "description": "Create a new geometry node group and assign it to the active modifier",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.node.new_geometry_node_group_tool",
        "signature": "bpy.ops.node.new_geometry_node_group_tool()#",
        "description": "Create a new geometry node group for a tool",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.node.new_geometry_nodes_modifier",
        "signature": "bpy.ops.node.new_geometry_nodes_modifier()#",
        "description": "Create a new modifier with a new geometry node group",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.node.new_node_tree",
        "signature": "bpy.ops.node.new_node_tree(type='',name='NodeTree')#",
        "description": "Create a new node tree",
        "parameters": [
            "type=''",
            "name='NodeTree'"
        ],
        "parameter_descriptions": [
            "type(enum in[],(optional)) – Tree Type",
            "name(string,(optional,never None)) – Name"
        ]
    },
    {
        "function_id": "bpy.ops.node.node_color_preset_add",
        "signature": "bpy.ops.node.node_color_preset_add(name='',remove_name=False,remove_active=False)#",
        "description": "Add or remove a Node Color Preset",
        "parameters": [
            "name=''",
            "remove_name=False",
            "remove_active=False"
        ],
        "parameter_descriptions": [
            "name(string,(optional,never None)) – Name, Name of the preset, used to make the path name",
            "remove_name(boolean,(optional)) – remove_name",
            "remove_active(boolean,(optional)) – remove_active"
        ]
    },
    {
        "function_id": "bpy.ops.node.node_copy_color",
        "signature": "bpy.ops.node.node_copy_color()#",
        "description": "Copy color to all selected nodes",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.node.options_toggle",
        "signature": "bpy.ops.node.options_toggle()#",
        "description": "Toggle option buttons display for selected nodes",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.node.output_file_add_socket",
        "signature": "bpy.ops.node.output_file_add_socket(file_path='Image')#",
        "description": "Add a new input to a file output node",
        "parameters": [
            "file_path='Image'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.node.output_file_move_active_socket",
        "signature": "bpy.ops.node.output_file_move_active_socket(direction='DOWN')#",
        "description": "Move the active input of a file output node up or down the list",
        "parameters": [
            "direction='DOWN'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.node.output_file_remove_active_socket",
        "signature": "bpy.ops.node.output_file_remove_active_socket()#",
        "description": "Remove the active input from a file output node",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.node.parent_set",
        "signature": "bpy.ops.node.parent_set()#",
        "description": "Attach selected nodes",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.node.preview_toggle",
        "signature": "bpy.ops.node.preview_toggle()#",
        "description": "Toggle preview display for selected nodes",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.node.read_viewlayers",
        "signature": "bpy.ops.node.read_viewlayers()#",
        "description": "Read all render layers of all used scenes",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.node.render_changed",
        "signature": "bpy.ops.node.render_changed()#",
        "description": "Render current scene, when input node’s layer has been changed",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.node.repeat_zone_item_add",
        "signature": "bpy.ops.node.repeat_zone_item_add()#",
        "description": "Add repeat zone item",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.node.repeat_zone_item_move",
        "signature": "bpy.ops.node.repeat_zone_item_move(direction='UP')#",
        "description": "Move active repeat zone item",
        "parameters": [
            "direction='UP'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.node.repeat_zone_item_remove",
        "signature": "bpy.ops.node.repeat_zone_item_remove()#",
        "description": "Remove active repeat zone item",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.node.resize",
        "signature": "bpy.ops.node.resize()#",
        "description": "Resize a node",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.node.select",
        "signature": "bpy.ops.node.select(extend=False,deselect=False,toggle=False,deselect_all=False,select_passthrough=False,location=(0,0),socket_select=False,clear_viewer=False)#",
        "description": "Select the node under the cursor",
        "parameters": [
            "extend=False",
            "deselect=False",
            "toggle=False",
            "deselect_all=False",
            "select_passthrough=False",
            "location=(0,0)",
            "socket_select=False",
            "clear_viewer=False"
        ],
        "parameter_descriptions": [
            "extend(boolean,(optional)) – Extend, Extend selection instead of deselecting everything first",
            "deselect(boolean,(optional)) – Deselect, Remove from selection",
            "toggle(boolean,(optional)) – Toggle Selection, Toggle the selection",
            "deselect_all(boolean,(optional)) – Deselect On Nothing, Deselect all when nothing under the cursor",
            "select_passthrough(boolean,(optional)) – Only Select Unselected, Ignore the select action when the element is already selected",
            "location(int arrayof2 items in[-inf,inf],(optional)) – Location, Mouse location",
            "socket_select(boolean,(optional)) – Socket Select",
            "clear_viewer(boolean,(optional)) – Clear Viewer, Deactivate geometry nodes viewer when clicking in empty space"
        ]
    },
    {
        "function_id": "bpy.ops.node.select_all",
        "signature": "bpy.ops.node.select_all(action='TOGGLE')#",
        "description": "(De)select all nodes",
        "parameters": [
            "action='TOGGLE'"
        ],
        "parameter_descriptions": [
            "TOGGLEToggle – Toggle selection for all elements.",
            "SELECTSelect – Select all elements.",
            "DESELECTDeselect – Deselect all elements.",
            "INVERTInvert – Invert selection of all elements."
        ]
    },
    {
        "function_id": "bpy.ops.node.select_box",
        "signature": "bpy.ops.node.select_box(tweak=False,xmin=0,xmax=0,ymin=0,ymax=0,wait_for_input=True,mode='SET')#",
        "description": "Use box selection to select nodes",
        "parameters": [
            "tweak=False",
            "xmin=0",
            "xmax=0",
            "ymin=0",
            "ymax=0",
            "wait_for_input=True",
            "mode='SET'"
        ],
        "parameter_descriptions": [
            "tweak(boolean,(optional)) – Tweak, Only activate when mouse is not over a node (useful for tweak gesture)",
            "xmin(int in[-inf,inf],(optional)) – X Min",
            "xmax(int in[-inf,inf],(optional)) – X Max",
            "ymin(int in[-inf,inf],(optional)) – Y Min",
            "ymax(int in[-inf,inf],(optional)) – Y Max",
            "wait_for_input(boolean,(optional)) – Wait for Input",
            "mode(enum in['SET','ADD','SUB'],(optional)) –ModeSETSet – Set a new selection.ADDExtend – Extend existing selection.SUBSubtract – Subtract existing selection.",
            "SETSet – Set a new selection.",
            "ADDExtend – Extend existing selection.",
            "SUBSubtract – Subtract existing selection."
        ]
    },
    {
        "function_id": "bpy.ops.node.select_circle",
        "signature": "bpy.ops.node.select_circle(x=0,y=0,radius=25,wait_for_input=True,mode='SET')#",
        "description": "Use circle selection to select nodes",
        "parameters": [
            "x=0",
            "y=0",
            "radius=25",
            "wait_for_input=True",
            "mode='SET'"
        ],
        "parameter_descriptions": [
            "x(int in[-inf,inf],(optional)) – X",
            "y(int in[-inf,inf],(optional)) – Y",
            "radius(int in[1,inf],(optional)) – Radius",
            "wait_for_input(boolean,(optional)) – Wait for Input",
            "mode(enum in['SET','ADD','SUB'],(optional)) –ModeSETSet – Set a new selection.ADDExtend – Extend existing selection.SUBSubtract – Subtract existing selection.",
            "SETSet – Set a new selection.",
            "ADDExtend – Extend existing selection.",
            "SUBSubtract – Subtract existing selection."
        ]
    },
    {
        "function_id": "bpy.ops.node.select_grouped",
        "signature": "bpy.ops.node.select_grouped(extend=False,type='TYPE')#",
        "description": "Select nodes with similar properties",
        "parameters": [
            "extend=False",
            "type='TYPE'"
        ],
        "parameter_descriptions": [
            "extend(boolean,(optional)) – Extend, Extend selection instead of deselecting everything first",
            "type(enum in['TYPE','COLOR','PREFIX','SUFFIX'],(optional)) – Type"
        ]
    },
    {
        "function_id": "bpy.ops.node.select_lasso",
        "signature": "bpy.ops.node.select_lasso(tweak=False,path=None,mode='SET')#",
        "description": "Select nodes using lasso selection",
        "parameters": [
            "tweak=False",
            "path=None",
            "mode='SET'"
        ],
        "parameter_descriptions": [
            "tweak(boolean,(optional)) – Tweak, Only activate when mouse is not over a node (useful for tweak gesture)",
            "path(bpy_prop_collectionofOperatorMousePath, (optional)) – Path",
            "mode(enum in['SET','ADD','SUB'],(optional)) –ModeSETSet – Set a new selection.ADDExtend – Extend existing selection.SUBSubtract – Subtract existing selection.",
            "SETSet – Set a new selection.",
            "ADDExtend – Extend existing selection.",
            "SUBSubtract – Subtract existing selection."
        ]
    },
    {
        "function_id": "bpy.ops.node.select_link_viewer",
        "signature": "bpy.ops.node.select_link_viewer(NODE_OT_select=None,NODE_OT_link_viewer=None)#",
        "description": "Select node and link it to a viewer node",
        "parameters": [
            "NODE_OT_select=None",
            "NODE_OT_link_viewer=None"
        ],
        "parameter_descriptions": [
            "NODE_OT_select(NODE_OT_select, (optional)) – Select, Select the node under the cursor",
            "NODE_OT_link_viewer(NODE_OT_link_viewer, (optional)) – Link to Viewer Node, Link to viewer node"
        ]
    },
    {
        "function_id": "bpy.ops.node.select_linked_from",
        "signature": "bpy.ops.node.select_linked_from()#",
        "description": "Select nodes linked from the selected ones",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.node.select_linked_to",
        "signature": "bpy.ops.node.select_linked_to()#",
        "description": "Select nodes linked to the selected ones",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.node.select_same_type_step",
        "signature": "bpy.ops.node.select_same_type_step(prev=False)#",
        "description": "Activate and view same node type, step by step",
        "parameters": [
            "prev=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.node.shader_script_update",
        "signature": "bpy.ops.node.shader_script_update()#",
        "description": "Update shader script node with new sockets and options from the script",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.node.simulation_zone_item_add",
        "signature": "bpy.ops.node.simulation_zone_item_add()#",
        "description": "Add simulation zone item",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.node.simulation_zone_item_move",
        "signature": "bpy.ops.node.simulation_zone_item_move(direction='UP')#",
        "description": "Move active simulation zone item",
        "parameters": [
            "direction='UP'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.node.simulation_zone_item_remove",
        "signature": "bpy.ops.node.simulation_zone_item_remove()#",
        "description": "Remove active simulation zone item",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.node.translate_attach",
        "signature": "bpy.ops.node.translate_attach(TRANSFORM_OT_translate=None,NODE_OT_attach=None)#",
        "description": "Move nodes and attach to frame",
        "parameters": [
            "TRANSFORM_OT_translate=None",
            "NODE_OT_attach=None"
        ],
        "parameter_descriptions": [
            "TRANSFORM_OT_translate(TRANSFORM_OT_translate, (optional)) – Move, Move selected items",
            "NODE_OT_attach(NODE_OT_attach, (optional)) – Attach Nodes, Attach active node to a frame"
        ]
    },
    {
        "function_id": "bpy.ops.node.translate_attach_remove_on_cancel",
        "signature": "bpy.ops.node.translate_attach_remove_on_cancel(TRANSFORM_OT_translate=None,NODE_OT_attach=None)#",
        "description": "Move nodes and attach to frame",
        "parameters": [
            "TRANSFORM_OT_translate=None",
            "NODE_OT_attach=None"
        ],
        "parameter_descriptions": [
            "TRANSFORM_OT_translate(TRANSFORM_OT_translate, (optional)) – Move, Move selected items",
            "NODE_OT_attach(NODE_OT_attach, (optional)) – Attach Nodes, Attach active node to a frame"
        ]
    },
    {
        "function_id": "bpy.ops.node.tree_path_parent",
        "signature": "bpy.ops.node.tree_path_parent()#",
        "description": "Go to parent node tree",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.node.view_all",
        "signature": "bpy.ops.node.view_all()#",
        "description": "Resize view so you can see all nodes",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.node.view_selected",
        "signature": "bpy.ops.node.view_selected()#",
        "description": "Resize view so you can see selected nodes",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.node.viewer_border",
        "signature": "bpy.ops.node.viewer_border(xmin=0,xmax=0,ymin=0,ymax=0,wait_for_input=True)#",
        "description": "Set the boundaries for viewer operations",
        "parameters": [
            "xmin=0",
            "xmax=0",
            "ymin=0",
            "ymax=0",
            "wait_for_input=True"
        ],
        "parameter_descriptions": [
            "xmin(int in[-inf,inf],(optional)) – X Min",
            "xmax(int in[-inf,inf],(optional)) – X Max",
            "ymin(int in[-inf,inf],(optional)) – Y Min",
            "ymax(int in[-inf,inf],(optional)) – Y Max",
            "wait_for_input(boolean,(optional)) – Wait for Input"
        ]
    },
    {
        "function_id": "bpy.ops.dpaint.bake",
        "signature": "bpy.ops.dpaint.bake()#",
        "description": "Bake dynamic paint image sequence surface",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.dpaint.output_toggle",
        "signature": "bpy.ops.dpaint.output_toggle(output='A')#",
        "description": "Add or remove Dynamic Paint output data layer",
        "parameters": [
            "output='A'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.dpaint.surface_slot_add",
        "signature": "bpy.ops.dpaint.surface_slot_add()#",
        "description": "Add a new Dynamic Paint surface slot",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.dpaint.surface_slot_remove",
        "signature": "bpy.ops.dpaint.surface_slot_remove()#",
        "description": "Remove the selected surface slot",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.dpaint.type_toggle",
        "signature": "bpy.ops.dpaint.type_toggle(type='CANVAS')#",
        "description": "Toggle whether given type is active or not",
        "parameters": [
            "type='CANVAS'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.screen.actionzone",
        "signature": "bpy.ops.screen.actionzone(modifier=0)#",
        "description": "Handle area action zones for mouse actions/gestures",
        "parameters": [
            "modifier=0"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.screen.animation_cancel",
        "signature": "bpy.ops.screen.animation_cancel(restore_frame=True)#",
        "description": "Cancel animation, returning to the original frame",
        "parameters": [
            "restore_frame=True"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.screen.animation_play",
        "signature": "bpy.ops.screen.animation_play(reverse=False,sync=False)#",
        "description": "Play animation",
        "parameters": [
            "reverse=False",
            "sync=False"
        ],
        "parameter_descriptions": [
            "reverse(boolean,(optional)) – Play in Reverse, Animation is played backwards",
            "sync(boolean,(optional)) – Sync, Drop frames to maintain framerate"
        ]
    },
    {
        "function_id": "bpy.ops.screen.animation_step",
        "signature": "bpy.ops.screen.animation_step()#",
        "description": "Step through animation by position",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.screen.area_close",
        "signature": "bpy.ops.screen.area_close()#",
        "description": "Close selected area",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.screen.area_dupli",
        "signature": "bpy.ops.screen.area_dupli()#",
        "description": "Duplicate selected area into new window",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.screen.area_join",
        "signature": "bpy.ops.screen.area_join(cursor=(0,0))#",
        "description": "Join selected areas into new window",
        "parameters": [
            "cursor=(0,0)"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.screen.area_move",
        "signature": "bpy.ops.screen.area_move(x=0,y=0,delta=0)#",
        "description": "Move selected area edges",
        "parameters": [
            "x=0",
            "y=0",
            "delta=0"
        ],
        "parameter_descriptions": [
            "x(int in[-inf,inf],(optional)) – X",
            "y(int in[-inf,inf],(optional)) – Y",
            "delta(int in[-inf,inf],(optional)) – Delta"
        ]
    },
    {
        "function_id": "bpy.ops.screen.area_options",
        "signature": "bpy.ops.screen.area_options()#",
        "description": "Operations for splitting and merging",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.screen.area_split",
        "signature": "bpy.ops.screen.area_split(direction='HORIZONTAL',factor=0.5,cursor=(0,0))#",
        "description": "Split selected area into new windows",
        "parameters": [
            "direction='HORIZONTAL'",
            "factor=0.5",
            "cursor=(0,0)"
        ],
        "parameter_descriptions": [
            "direction(enum in['HORIZONTAL','VERTICAL'],(optional)) – Direction",
            "factor(float in[0,1],(optional)) – Factor",
            "cursor(int arrayof2 items in[-inf,inf],(optional)) – Cursor"
        ]
    },
    {
        "function_id": "bpy.ops.screen.area_swap",
        "signature": "bpy.ops.screen.area_swap(cursor=(0,0))#",
        "description": "Swap selected areas screen positions",
        "parameters": [
            "cursor=(0,0)"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.screen.back_to_previous",
        "signature": "bpy.ops.screen.back_to_previous()#",
        "description": "Revert back to the original screen layout, before fullscreen area overlay",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.screen.delete",
        "signature": "bpy.ops.screen.delete()#",
        "description": "Delete active screen",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.screen.drivers_editor_show",
        "signature": "bpy.ops.screen.drivers_editor_show()#",
        "description": "Show drivers editor in a separate window",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.screen.frame_jump",
        "signature": "bpy.ops.screen.frame_jump(end=False)#",
        "description": "Jump to first/last frame in frame range",
        "parameters": [
            "end=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.screen.frame_offset",
        "signature": "bpy.ops.screen.frame_offset(delta=0)#",
        "description": "Move current frame forward/backward by a given number",
        "parameters": [
            "delta=0"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.screen.header_toggle_menus",
        "signature": "bpy.ops.screen.header_toggle_menus()#",
        "description": "Expand or collapse the header pulldown menus",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.screen.info_log_show",
        "signature": "bpy.ops.screen.info_log_show()#",
        "description": "Show info log in a separate window",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.screen.keyframe_jump",
        "signature": "bpy.ops.screen.keyframe_jump(next=True)#",
        "description": "Jump to previous/next keyframe",
        "parameters": [
            "next=True"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.screen.marker_jump",
        "signature": "bpy.ops.screen.marker_jump(next=True)#",
        "description": "Jump to previous/next marker",
        "parameters": [
            "next=True"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.screen.new",
        "signature": "bpy.ops.screen.new()#",
        "description": "Add a new screen",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.screen.redo_last",
        "signature": "bpy.ops.screen.redo_last()#",
        "description": "Display parameters for last action performed",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.screen.region_blend",
        "signature": "bpy.ops.screen.region_blend()#",
        "description": "Blend in and out overlapping region",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.screen.region_context_menu",
        "signature": "bpy.ops.screen.region_context_menu()#",
        "description": "Display region context menu",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.screen.region_flip",
        "signature": "bpy.ops.screen.region_flip()#",
        "description": "Toggle the region’s alignment (left/right or top/bottom)",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.screen.region_quadview",
        "signature": "bpy.ops.screen.region_quadview()#",
        "description": "Split selected area into camera, front, right, and top views",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.screen.region_scale",
        "signature": "bpy.ops.screen.region_scale()#",
        "description": "Scale selected area",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.screen.region_toggle",
        "signature": "bpy.ops.screen.region_toggle(region_type='WINDOW')#",
        "description": "Hide or unhide the region",
        "parameters": [
            "region_type='WINDOW'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.screen.repeat_history",
        "signature": "bpy.ops.screen.repeat_history(index=0)#",
        "description": "Display menu for previous actions performed",
        "parameters": [
            "index=0"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.screen.repeat_last",
        "signature": "bpy.ops.screen.repeat_last()#",
        "description": "Repeat last action",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.screen.screen_full_area",
        "signature": "bpy.ops.screen.screen_full_area(use_hide_panels=False)#",
        "description": "Toggle display selected area as fullscreen/maximized",
        "parameters": [
            "use_hide_panels=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.screen.screen_set",
        "signature": "bpy.ops.screen.screen_set(delta=1)#",
        "description": "Cycle through available screens",
        "parameters": [
            "delta=1"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.screen.screenshot",
        "signature": "bpy.ops.screen.screenshot(filepath='',hide_props_region=True,check_existing=True,filter_blender=False,filter_backup=False,filter_image=True,filter_movie=False,filter_python=False,filter_font=False,filter_sound=False,filter_text=False,filter_archive=False,filter_btx=False,filter_collada=False,filter_alembic=False,filter_usd=False,filter_obj=False,filter_volume=False,filter_folder=True,filter_blenlib=False,filemode=9,show_multiview=False,use_multiview=False,display_type='DEFAULT',sort_method='')#",
        "description": "Capture a picture of the whole Blender window",
        "parameters": [
            "filepath=''",
            "hide_props_region=True",
            "check_existing=True",
            "filter_blender=False",
            "filter_backup=False",
            "filter_image=True",
            "filter_movie=False",
            "filter_python=False",
            "filter_font=False",
            "filter_sound=False",
            "filter_text=False",
            "filter_archive=False",
            "filter_btx=False",
            "filter_collada=False",
            "filter_alembic=False",
            "filter_usd=False",
            "filter_obj=False",
            "filter_volume=False",
            "filter_folder=True",
            "filter_blenlib=False",
            "filemode=9",
            "show_multiview=False",
            "use_multiview=False",
            "display_type='DEFAULT'",
            "sort_method=''"
        ],
        "parameter_descriptions": [
            "filepath(string,(optional,never None)) – File Path, Path to file",
            "hide_props_region(boolean,(optional)) – Hide Operator Properties, Collapse the region displaying the operator settings",
            "check_existing(boolean,(optional)) – Check Existing, Check and warn on overwriting existing files",
            "filter_blender(boolean,(optional)) – Filter .blend files",
            "filter_backup(boolean,(optional)) – Filter .blend files",
            "filter_image(boolean,(optional)) – Filter image files",
            "filter_movie(boolean,(optional)) – Filter movie files",
            "filter_python(boolean,(optional)) – Filter Python files",
            "filter_font(boolean,(optional)) – Filter font files",
            "filter_sound(boolean,(optional)) – Filter sound files",
            "filter_text(boolean,(optional)) – Filter text files",
            "filter_archive(boolean,(optional)) – Filter archive files",
            "filter_btx(boolean,(optional)) – Filter btx files",
            "filter_collada(boolean,(optional)) – Filter COLLADA files",
            "filter_alembic(boolean,(optional)) – Filter Alembic files",
            "filter_usd(boolean,(optional)) – Filter USD files",
            "filter_obj(boolean,(optional)) – Filter OBJ files",
            "filter_volume(boolean,(optional)) – Filter OpenVDB volume files",
            "filter_folder(boolean,(optional)) – Filter folders",
            "filter_blenlib(boolean,(optional)) – Filter Blender IDs",
            "filemode(int in[1,9],(optional)) – File Browser Mode, The setting for the file browser mode to load a .blend file, a library or a special file",
            "show_multiview(boolean,(optional)) – Enable Multi-View",
            "use_multiview(boolean,(optional)) – Use Multi-View",
            "display_type(enum in['DEFAULT','LIST_VERTICAL','LIST_HORIZONTAL','THUMBNAIL'],(optional)) –Display TypeDEFAULTDefault – Automatically determine display type for files.LIST_VERTICALShort List – Display files as short list.LIST_HORIZONTALLong List – Display files as a detailed list.THUMBNAILThumbnails – Display files as thumbnails.",
            "DEFAULTDefault – Automatically determine display type for files.",
            "LIST_VERTICALShort List – Display files as short list.",
            "LIST_HORIZONTALLong List – Display files as a detailed list.",
            "THUMBNAILThumbnails – Display files as thumbnails.",
            "sort_method(enum in[],(optional)) – File sorting mode"
        ]
    },
    {
        "function_id": "bpy.ops.screen.screenshot_area",
        "signature": "bpy.ops.screen.screenshot_area(filepath='',hide_props_region=True,check_existing=True,filter_blender=False,filter_backup=False,filter_image=True,filter_movie=False,filter_python=False,filter_font=False,filter_sound=False,filter_text=False,filter_archive=False,filter_btx=False,filter_collada=False,filter_alembic=False,filter_usd=False,filter_obj=False,filter_volume=False,filter_folder=True,filter_blenlib=False,filemode=9,show_multiview=False,use_multiview=False,display_type='DEFAULT',sort_method='')#",
        "description": "Capture a picture of an editor",
        "parameters": [
            "filepath=''",
            "hide_props_region=True",
            "check_existing=True",
            "filter_blender=False",
            "filter_backup=False",
            "filter_image=True",
            "filter_movie=False",
            "filter_python=False",
            "filter_font=False",
            "filter_sound=False",
            "filter_text=False",
            "filter_archive=False",
            "filter_btx=False",
            "filter_collada=False",
            "filter_alembic=False",
            "filter_usd=False",
            "filter_obj=False",
            "filter_volume=False",
            "filter_folder=True",
            "filter_blenlib=False",
            "filemode=9",
            "show_multiview=False",
            "use_multiview=False",
            "display_type='DEFAULT'",
            "sort_method=''"
        ],
        "parameter_descriptions": [
            "filepath(string,(optional,never None)) – File Path, Path to file",
            "hide_props_region(boolean,(optional)) – Hide Operator Properties, Collapse the region displaying the operator settings",
            "check_existing(boolean,(optional)) – Check Existing, Check and warn on overwriting existing files",
            "filter_blender(boolean,(optional)) – Filter .blend files",
            "filter_backup(boolean,(optional)) – Filter .blend files",
            "filter_image(boolean,(optional)) – Filter image files",
            "filter_movie(boolean,(optional)) – Filter movie files",
            "filter_python(boolean,(optional)) – Filter Python files",
            "filter_font(boolean,(optional)) – Filter font files",
            "filter_sound(boolean,(optional)) – Filter sound files",
            "filter_text(boolean,(optional)) – Filter text files",
            "filter_archive(boolean,(optional)) – Filter archive files",
            "filter_btx(boolean,(optional)) – Filter btx files",
            "filter_collada(boolean,(optional)) – Filter COLLADA files",
            "filter_alembic(boolean,(optional)) – Filter Alembic files",
            "filter_usd(boolean,(optional)) – Filter USD files",
            "filter_obj(boolean,(optional)) – Filter OBJ files",
            "filter_volume(boolean,(optional)) – Filter OpenVDB volume files",
            "filter_folder(boolean,(optional)) – Filter folders",
            "filter_blenlib(boolean,(optional)) – Filter Blender IDs",
            "filemode(int in[1,9],(optional)) – File Browser Mode, The setting for the file browser mode to load a .blend file, a library or a special file",
            "show_multiview(boolean,(optional)) – Enable Multi-View",
            "use_multiview(boolean,(optional)) – Use Multi-View",
            "display_type(enum in['DEFAULT','LIST_VERTICAL','LIST_HORIZONTAL','THUMBNAIL'],(optional)) –Display TypeDEFAULTDefault – Automatically determine display type for files.LIST_VERTICALShort List – Display files as short list.LIST_HORIZONTALLong List – Display files as a detailed list.THUMBNAILThumbnails – Display files as thumbnails.",
            "DEFAULTDefault – Automatically determine display type for files.",
            "LIST_VERTICALShort List – Display files as short list.",
            "LIST_HORIZONTALLong List – Display files as a detailed list.",
            "THUMBNAILThumbnails – Display files as thumbnails.",
            "sort_method(enum in[],(optional)) – File sorting mode"
        ]
    },
    {
        "function_id": "bpy.ops.screen.space_context_cycle",
        "signature": "bpy.ops.screen.space_context_cycle(direction='NEXT')#",
        "description": "Cycle through the editor context by activating the next/previous one",
        "parameters": [
            "direction='NEXT'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.screen.space_type_set_or_cycle",
        "signature": "bpy.ops.screen.space_type_set_or_cycle(space_type='EMPTY')#",
        "description": "Set the space type or cycle subtype",
        "parameters": [
            "space_type='EMPTY'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.screen.spacedata_cleanup",
        "signature": "bpy.ops.screen.spacedata_cleanup()#",
        "description": "Remove unused settings for invisible editors",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.screen.userpref_show",
        "signature": "bpy.ops.screen.userpref_show(section='INTERFACE')#",
        "description": "Edit user preferences and system settings",
        "parameters": [
            "section='INTERFACE'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.screen.workspace_cycle",
        "signature": "bpy.ops.screen.workspace_cycle(direction='NEXT')#",
        "description": "Cycle through workspaces",
        "parameters": [
            "direction='NEXT'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.camera.preset_add",
        "signature": "bpy.ops.camera.preset_add(name='',remove_name=False,remove_active=False,use_focal_length=False)#",
        "description": "Add or remove a Camera Preset",
        "parameters": [
            "name=''",
            "remove_name=False",
            "remove_active=False",
            "use_focal_length=False"
        ],
        "parameter_descriptions": [
            "name(string,(optional,never None)) – Name, Name of the preset, used to make the path name",
            "remove_name(boolean,(optional)) – remove_name",
            "remove_active(boolean,(optional)) – remove_active",
            "use_focal_length(boolean,(optional)) – Include Focal Length, Include focal length into the preset"
        ]
    },
    {
        "function_id": "bpy.ops.camera.safe_areas_preset_add",
        "signature": "bpy.ops.camera.safe_areas_preset_add(name='',remove_name=False,remove_active=False)#",
        "description": "Add or remove a Safe Areas Preset",
        "parameters": [
            "name=''",
            "remove_name=False",
            "remove_active=False"
        ],
        "parameter_descriptions": [
            "name(string,(optional,never None)) – Name, Name of the preset, used to make the path name",
            "remove_name(boolean,(optional)) – remove_name",
            "remove_active(boolean,(optional)) – remove_active"
        ]
    },
    {
        "function_id": "bpy.ops.cloth.preset_add",
        "signature": "bpy.ops.cloth.preset_add(name='',remove_name=False,remove_active=False)#",
        "description": "Add or remove a Cloth Preset",
        "parameters": [
            "name=''",
            "remove_name=False",
            "remove_active=False"
        ],
        "parameter_descriptions": [
            "name(string,(optional,never None)) – Name, Name of the preset, used to make the path name",
            "remove_name(boolean,(optional)) – remove_name",
            "remove_active(boolean,(optional)) – remove_active"
        ]
    },
    {
        "function_id": "bpy.ops.export_scene.fbx",
        "signature": "bpy.ops.export_scene.fbx(filepath='',check_existing=True,filter_glob='*.fbx',use_selection=False,use_visible=False,use_active_collection=False,collection='',global_scale=1.0,apply_unit_scale=True,apply_scale_options='FBX_SCALE_NONE',use_space_transform=True,bake_space_transform=False,object_types={'ARMATURE','CAMERA','EMPTY','LIGHT','MESH','OTHER'},use_mesh_modifiers=True,use_mesh_modifiers_render=True,mesh_smooth_type='OFF',colors_type='SRGB',prioritize_active_color=False,use_subsurf=False,use_mesh_edges=False,use_tspace=False,use_triangles=False,use_custom_props=False,add_leaf_bones=True,primary_bone_axis='Y',secondary_bone_axis='X',use_armature_deform_only=False,armature_nodetype='NULL',bake_anim=True,bake_anim_use_all_bones=True,bake_anim_use_nla_strips=True,bake_anim_use_all_actions=True,bake_anim_force_startend_keying=True,bake_anim_step=1.0,bake_anim_simplify_factor=1.0,path_mode='AUTO',embed_textures=False,batch_mode='OFF',use_batch_own_dir=True,use_metadata=True,axis_forward='-Z',axis_up='Y')#",
        "description": "Write a FBX file",
        "parameters": [
            "filepath=''",
            "check_existing=True",
            "filter_glob='*.fbx'",
            "use_selection=False",
            "use_visible=False",
            "use_active_collection=False",
            "collection=''",
            "global_scale=1.0",
            "apply_unit_scale=True",
            "apply_scale_options='FBX_SCALE_NONE'",
            "use_space_transform=True",
            "bake_space_transform=False",
            "object_types={'ARMATURE','CAMERA','EMPTY','LIGHT','MESH','OTHER'}",
            "use_mesh_modifiers=True",
            "use_mesh_modifiers_render=True",
            "mesh_smooth_type='OFF'",
            "colors_type='SRGB'",
            "prioritize_active_color=False",
            "use_subsurf=False",
            "use_mesh_edges=False",
            "use_tspace=False",
            "use_triangles=False",
            "use_custom_props=False",
            "add_leaf_bones=True",
            "primary_bone_axis='Y'",
            "secondary_bone_axis='X'",
            "use_armature_deform_only=False",
            "armature_nodetype='NULL'",
            "bake_anim=True",
            "bake_anim_use_all_bones=True",
            "bake_anim_use_nla_strips=True",
            "bake_anim_use_all_actions=True",
            "bake_anim_force_startend_keying=True",
            "bake_anim_step=1.0",
            "bake_anim_simplify_factor=1.0",
            "path_mode='AUTO'",
            "embed_textures=False",
            "batch_mode='OFF'",
            "use_batch_own_dir=True",
            "use_metadata=True",
            "axis_forward='-Z'",
            "axis_up='Y'"
        ],
        "parameter_descriptions": [
            "filepath(string,(optional,never None)) – File Path, Filepath used for exporting the file",
            "check_existing(boolean,(optional)) – Check Existing, Check and warn on overwriting existing files",
            "filter_glob(string,(optional,never None)) – filter_glob",
            "use_selection(boolean,(optional)) – Selected Objects, Export selected and visible objects only",
            "use_visible(boolean,(optional)) – Visible Objects, Export visible objects only",
            "use_active_collection(boolean,(optional)) – Active Collection, Export only objects from the active collection (and its children)",
            "collection(string,(optional,never None)) – Source Collection, Export only objects from this collection (and its children)",
            "global_scale(float in[0.001,1000],(optional)) – Scale, Scale all data (Some importers do not support scaled armatures!)",
            "apply_unit_scale(boolean,(optional)) – Apply Unit, Take into account current Blender units settings (if unset, raw Blender Units values are used as-is)",
            "apply_scale_options(enum in['FBX_SCALE_NONE','FBX_SCALE_UNITS','FBX_SCALE_CUSTOM','FBX_SCALE_ALL'],(optional)) –Apply Scalings, How to apply custom and units scalings in generated FBX file (Blender uses FBX scale to detect units on import, but many other applications do not handle the same way)FBX_SCALE_NONEAll Local – Apply custom scaling and units scaling to each object transformation, FBX scale remains at 1.0.FBX_SCALE_UNITSFBX Units Scale – Apply custom scaling to each object transformation, and units scaling to FBX scale.FBX_SCALE_CUSTOMFBX Custom Scale – Apply custom scaling to FBX scale, and units scaling to each object transformation.FBX_SCALE_ALLFBX All – Apply custom scaling and units scaling to FBX scale.",
            "FBX_SCALE_NONEAll Local – Apply custom scaling and units scaling to each object transformation, FBX scale remains at 1.0.",
            "FBX_SCALE_UNITSFBX Units Scale – Apply custom scaling to each object transformation, and units scaling to FBX scale.",
            "FBX_SCALE_CUSTOMFBX Custom Scale – Apply custom scaling to FBX scale, and units scaling to each object transformation.",
            "FBX_SCALE_ALLFBX All – Apply custom scaling and units scaling to FBX scale.",
            "use_space_transform(boolean,(optional)) – Use Space Transform, Apply global space transform to the object rotations. When disabled only the axis space is written to the file and all object transforms are left as-is",
            "bake_space_transform(boolean,(optional)) – Apply Transform, Bake space transform into object data, avoids getting unwanted rotations to objects when target space is not aligned with Blender’s space (WARNING! experimental option, use at own risk, known to be broken with armatures/animations)",
            "object_types(enum set in {'EMPTY','CAMERA','LIGHT','ARMATURE','MESH','OTHER'},(optional)) –Object Types, Which kind of object to exportEMPTYEmpty.CAMERACamera.LIGHTLamp.ARMATUREArmature – WARNING: not supported in dupli/group instances.MESHMesh.OTHEROther – Other geometry types, like curve, metaball, etc. (converted to meshes).",
            "EMPTYEmpty.",
            "CAMERACamera.",
            "LIGHTLamp.",
            "ARMATUREArmature – WARNING: not supported in dupli/group instances.",
            "MESHMesh.",
            "OTHEROther – Other geometry types, like curve, metaball, etc. (converted to meshes).",
            "use_mesh_modifiers(boolean,(optional)) – Apply Modifiers, Apply modifiers to mesh objects (except Armature ones) - WARNING: prevents exporting shape keys",
            "use_mesh_modifiers_render(boolean,(optional)) – Use Modifiers Render Setting, Use render settings when applying modifiers to mesh objects (DISABLED in Blender 2.8)",
            "mesh_smooth_type(enum in['OFF','FACE','EDGE'],(optional)) –Smoothing, Export smoothing information (prefer ‘Normals Only’ option if your target importer understand split normals)OFFNormals Only – Export only normals instead of writing edge or face smoothing data.FACEFace – Write face smoothing.EDGEEdge – Write edge smoothing.",
            "OFFNormals Only – Export only normals instead of writing edge or face smoothing data.",
            "FACEFace – Write face smoothing.",
            "EDGEEdge – Write edge smoothing.",
            "colors_type(enum in['NONE','SRGB','LINEAR'],(optional)) –Vertex Colors, Export vertex color attributesNONENone – Do not export color attributes.SRGBsRGB – Export colors in sRGB color space.LINEARLinear – Export colors in linear color space.",
            "NONENone – Do not export color attributes.",
            "SRGBsRGB – Export colors in sRGB color space.",
            "LINEARLinear – Export colors in linear color space.",
            "prioritize_active_color(boolean,(optional)) – Prioritize Active Color, Make sure active color will be exported first. Could be important since some other software can discard other color attributes besides the first one",
            "use_subsurf(boolean,(optional)) – Export Subdivision Surface, Export the last Catmull-Rom subdivision modifier as FBX subdivision (does not apply the modifier even if ‘Apply Modifiers’ is enabled)",
            "use_mesh_edges(boolean,(optional)) – Loose Edges, Export loose edges (as two-vertices polygons)",
            "use_tspace(boolean,(optional)) – Tangent Space, Add binormal and tangent vectors, together with normal they form the tangent space (will only work correctly with tris/quads only meshes!)",
            "use_triangles(boolean,(optional)) – Triangulate Faces, Convert all faces to triangles",
            "use_custom_props(boolean,(optional)) – Custom Properties, Export custom properties",
            "add_leaf_bones(boolean,(optional)) – Add Leaf Bones, Append a final bone to the end of each chain to specify last bone length (use this when you intend to edit the armature from exported data)",
            "primary_bone_axis(enum in['X','Y','Z','-X','-Y','-Z'],(optional)) – Primary Bone Axis",
            "secondary_bone_axis(enum in['X','Y','Z','-X','-Y','-Z'],(optional)) – Secondary Bone Axis",
            "use_armature_deform_only(boolean,(optional)) – Only Deform Bones, Only write deforming bones (and non-deforming ones when they have deforming children)",
            "armature_nodetype(enum in['NULL','ROOT','LIMBNODE'],(optional)) –Armature FBXNode Type, FBX type of node (object) used to represent Blender’s armatures (use the Null type unless you experience issues with the other app, as other choices may not import back perfectly into Blender…)NULLNull – ‘Null’ FBX node, similar to Blender’s Empty (default).ROOTRoot – ‘Root’ FBX node, supposed to be the root of chains of bones….LIMBNODELimbNode – ‘LimbNode’ FBX node, a regular joint between two bones….",
            "NULLNull – ‘Null’ FBX node, similar to Blender’s Empty (default).",
            "ROOTRoot – ‘Root’ FBX node, supposed to be the root of chains of bones….",
            "LIMBNODELimbNode – ‘LimbNode’ FBX node, a regular joint between two bones….",
            "bake_anim(boolean,(optional)) – Baked Animation, Export baked keyframe animation",
            "bake_anim_use_all_bones(boolean,(optional)) – Key All Bones, Force exporting at least one key of animation for all bones (needed with some target applications, like UE4)",
            "bake_anim_use_nla_strips(boolean,(optional)) – NLA Strips, Export each non-muted NLA strip as a separated FBX’s AnimStack, if any, instead of global scene animation",
            "bake_anim_use_all_actions(boolean,(optional)) – All Actions, Export each action as a separated FBX’s AnimStack, instead of global scene animation (note that animated objects will get all actions compatible with them, others will get no animation at all)",
            "bake_anim_force_startend_keying(boolean,(optional)) – Force Start/End Keying, Always add a keyframe at start and end of actions for animated channels",
            "bake_anim_step(float in[0.01,100],(optional)) – Sampling Rate, How often to evaluate animated values (in frames)",
            "bake_anim_simplify_factor(float in[0,100],(optional)) – Simplify, How much to simplify baked values (0.0 to disable, the higher the more simplified)",
            "path_mode(enum in['AUTO','ABSOLUTE','RELATIVE','MATCH','STRIP','COPY'],(optional)) –Path Mode, Method used to reference pathsAUTOAuto – Use relative paths with subdirectories only.ABSOLUTEAbsolute – Always write absolute paths.RELATIVERelative – Always write relative paths (where possible).MATCHMatch – Match absolute/relative setting with input path.STRIPStrip Path – Filename only.COPYCopy – Copy the file to the destination path (or subdirectory).",
            "AUTOAuto – Use relative paths with subdirectories only.",
            "ABSOLUTEAbsolute – Always write absolute paths.",
            "RELATIVERelative – Always write relative paths (where possible).",
            "MATCHMatch – Match absolute/relative setting with input path.",
            "STRIPStrip Path – Filename only.",
            "COPYCopy – Copy the file to the destination path (or subdirectory).",
            "embed_textures(boolean,(optional)) – Embed Textures, Embed textures in FBX binary file (only for “Copy” path mode!)",
            "batch_mode(enum in['OFF','SCENE','COLLECTION','SCENE_COLLECTION','ACTIVE_SCENE_COLLECTION'],(optional)) –Batch ModeOFFOff – Active scene to file.SCENEScene – Each scene as a file.COLLECTIONCollection – Each collection (data-block ones) as a file, does not include content of children collections.SCENE_COLLECTIONScene Collections – Each collection (including master, non-data-block ones) of each scene as a file, including content from children collections.ACTIVE_SCENE_COLLECTIONActive Scene Collections – Each collection (including master, non-data-block one) of the active scene as a file, including content from children collections.",
            "OFFOff – Active scene to file.",
            "SCENEScene – Each scene as a file.",
            "COLLECTIONCollection – Each collection (data-block ones) as a file, does not include content of children collections.",
            "SCENE_COLLECTIONScene Collections – Each collection (including master, non-data-block ones) of each scene as a file, including content from children collections.",
            "ACTIVE_SCENE_COLLECTIONActive Scene Collections – Each collection (including master, non-data-block one) of the active scene as a file, including content from children collections.",
            "use_batch_own_dir(boolean,(optional)) – Batch Own Dir, Create a dir for each exported file",
            "use_metadata(boolean,(optional)) – Use Metadata",
            "axis_forward(enum in['X','Y','Z','-X','-Y','-Z'],(optional)) – Forward",
            "axis_up(enum in['X','Y','Z','-X','-Y','-Z'],(optional)) – Up"
        ]
    },
    {
        "function_id": "bpy.ops.export_scene.gltf",
        "signature": "bpy.ops.export_scene.gltf(filepath='',check_existing=True,export_import_convert_lighting_mode='SPEC',gltf_export_id='',export_use_gltfpack=False,export_gltfpack_tc=True,export_gltfpack_tq=8,export_gltfpack_si=1.0,export_gltfpack_sa=False,export_gltfpack_slb=False,export_gltfpack_vp=14,export_gltfpack_vt=12,export_gltfpack_vn=8,export_gltfpack_vc=8,export_gltfpack_vpi='Integer',export_gltfpack_noq=True,export_format='',ui_tab='GENERAL',export_copyright='',export_image_format='AUTO',export_image_add_webp=False,export_image_webp_fallback=False,export_texture_dir='',export_jpeg_quality=75,export_image_quality=75,export_keep_originals=False,export_texcoords=True,export_normals=True,export_gn_mesh=False,export_draco_mesh_compression_enable=False,export_draco_mesh_compression_level=6,export_draco_position_quantization=14,export_draco_normal_quantization=10,export_draco_texcoord_quantization=12,export_draco_color_quantization=10,export_draco_generic_quantization=12,export_tangents=False,export_materials='EXPORT',export_unused_images=False,export_unused_textures=False,export_vertex_color='MATERIAL',export_all_vertex_colors=True,export_active_vertex_color_when_no_material=True,export_attributes=False,use_mesh_edges=False,use_mesh_vertices=False,export_cameras=False,use_selection=False,use_visible=False,use_renderable=False,use_active_collection_with_nested=True,use_active_collection=False,use_active_scene=False,collection='',at_collection_center=False,export_extras=False,export_yup=True,export_apply=False,export_shared_accessors=False,export_animations=True,export_frame_range=False,export_frame_step=1,export_force_sampling=True,export_pointer_animation=False,export_animation_mode='ACTIONS',export_nla_strips_merged_animation_name='Animation',export_def_bones=False,export_hierarchy_flatten_bones=False,export_hierarchy_flatten_objs=False,export_armature_object_remove=False,export_leaf_bone=False,export_optimize_animation_size=True,export_optimize_animation_keep_anim_armature=True,export_optimize_animation_keep_anim_object=False,export_optimize_disable_viewport=False,export_negative_frame='SLIDE',export_anim_slide_to_zero=False,export_bake_animation=False,export_anim_single_armature=True,export_reset_pose_bones=True,export_current_frame=False,export_rest_position_armature=True,export_anim_scene_split_object=True,export_skins=True,export_influence_nb=4,export_all_influences=False,export_morph=True,export_morph_normal=True,export_morph_tangent=False,export_morph_animation=True,export_morph_reset_sk_data=True,export_lights=False,export_try_sparse_sk=True,export_try_omit_sparse_sk=False,export_gpu_instances=False,export_action_filter=False,export_convert_animation_pointer=False,export_nla_strips=True,export_original_specular=False,will_save_settings=False,export_hierarchy_full_collections=False,export_extra_animations=False,filter_glob='*.glb')#",
        "description": "Export scene as glTF 2.0 file",
        "parameters": [
            "filepath=''",
            "check_existing=True",
            "export_import_convert_lighting_mode='SPEC'",
            "gltf_export_id=''",
            "export_use_gltfpack=False",
            "export_gltfpack_tc=True",
            "export_gltfpack_tq=8",
            "export_gltfpack_si=1.0",
            "export_gltfpack_sa=False",
            "export_gltfpack_slb=False",
            "export_gltfpack_vp=14",
            "export_gltfpack_vt=12",
            "export_gltfpack_vn=8",
            "export_gltfpack_vc=8",
            "export_gltfpack_vpi='Integer'",
            "export_gltfpack_noq=True",
            "export_format=''",
            "ui_tab='GENERAL'",
            "export_copyright=''",
            "export_image_format='AUTO'",
            "export_image_add_webp=False",
            "export_image_webp_fallback=False",
            "export_texture_dir=''",
            "export_jpeg_quality=75",
            "export_image_quality=75",
            "export_keep_originals=False",
            "export_texcoords=True",
            "export_normals=True",
            "export_gn_mesh=False",
            "export_draco_mesh_compression_enable=False",
            "export_draco_mesh_compression_level=6",
            "export_draco_position_quantization=14",
            "export_draco_normal_quantization=10",
            "export_draco_texcoord_quantization=12",
            "export_draco_color_quantization=10",
            "export_draco_generic_quantization=12",
            "export_tangents=False",
            "export_materials='EXPORT'",
            "export_unused_images=False",
            "export_unused_textures=False",
            "export_vertex_color='MATERIAL'",
            "export_all_vertex_colors=True",
            "export_active_vertex_color_when_no_material=True",
            "export_attributes=False",
            "use_mesh_edges=False",
            "use_mesh_vertices=False",
            "export_cameras=False",
            "use_selection=False",
            "use_visible=False",
            "use_renderable=False",
            "use_active_collection_with_nested=True",
            "use_active_collection=False",
            "use_active_scene=False",
            "collection=''",
            "at_collection_center=False",
            "export_extras=False",
            "export_yup=True",
            "export_apply=False",
            "export_shared_accessors=False",
            "export_animations=True",
            "export_frame_range=False",
            "export_frame_step=1",
            "export_force_sampling=True",
            "export_pointer_animation=False",
            "export_animation_mode='ACTIONS'",
            "export_nla_strips_merged_animation_name='Animation'",
            "export_def_bones=False",
            "export_hierarchy_flatten_bones=False",
            "export_hierarchy_flatten_objs=False",
            "export_armature_object_remove=False",
            "export_leaf_bone=False",
            "export_optimize_animation_size=True",
            "export_optimize_animation_keep_anim_armature=True",
            "export_optimize_animation_keep_anim_object=False",
            "export_optimize_disable_viewport=False",
            "export_negative_frame='SLIDE'",
            "export_anim_slide_to_zero=False",
            "export_bake_animation=False",
            "export_anim_single_armature=True",
            "export_reset_pose_bones=True",
            "export_current_frame=False",
            "export_rest_position_armature=True",
            "export_anim_scene_split_object=True",
            "export_skins=True",
            "export_influence_nb=4",
            "export_all_influences=False",
            "export_morph=True",
            "export_morph_normal=True",
            "export_morph_tangent=False",
            "export_morph_animation=True",
            "export_morph_reset_sk_data=True",
            "export_lights=False",
            "export_try_sparse_sk=True",
            "export_try_omit_sparse_sk=False",
            "export_gpu_instances=False",
            "export_action_filter=False",
            "export_convert_animation_pointer=False",
            "export_nla_strips=True",
            "export_original_specular=False",
            "will_save_settings=False",
            "export_hierarchy_full_collections=False",
            "export_extra_animations=False",
            "filter_glob='*.glb'"
        ],
        "parameter_descriptions": [
            "filepath(string,(optional,never None)) – File Path, Filepath used for exporting the file",
            "check_existing(boolean,(optional)) – Check Existing, Check and warn on overwriting existing files",
            "export_import_convert_lighting_mode(enum in['SPEC','COMPAT','RAW'],(optional)) –Lighting Mode, Optional backwards compatibility for non-standard render engines. Applies to lightsSPECStandard – Physically-based glTF lighting units (cd, lx, nt).COMPATUnitless – Non-physical, unitless lighting. Useful when exposure controls are not available.RAWRaw (Deprecated) – Blender lighting strengths with no conversion.",
            "SPECStandard – Physically-based glTF lighting units (cd, lx, nt).",
            "COMPATUnitless – Non-physical, unitless lighting. Useful when exposure controls are not available.",
            "RAWRaw (Deprecated) – Blender lighting strengths with no conversion.",
            "gltf_export_id(string,(optional,never None)) – Identifier, Identifier of caller (in case of add-on calling this exporter). Can be useful in case of Extension added by other add-ons",
            "export_use_gltfpack(boolean,(optional)) – Use Gltfpack, Use gltfpack to simplify the mesh and/or compress its textures",
            "export_gltfpack_tc(boolean,(optional)) – KTX2 Compression, Convert all textures to KTX2 with BasisU supercompression",
            "export_gltfpack_tq(int in[1,10],(optional)) – Texture Encoding Quality, Texture encoding quality",
            "export_gltfpack_si(float in[0,1],(optional)) – Mesh Simplification Ratio, Simplify meshes targeting triangle count ratio",
            "export_gltfpack_sa(boolean,(optional)) – Aggressive Mesh Simplification, Aggressively simplify to the target ratio disregarding quality",
            "export_gltfpack_slb(boolean,(optional)) – Lock Mesh Border Vertices, Lock border vertices during simplification to avoid gaps on connected meshes",
            "export_gltfpack_vp(int in[1,16],(optional)) – Position Quantization, Use N-bit quantization for positions",
            "export_gltfpack_vt(int in[1,16],(optional)) – Texture Coordinate Quantization, Use N-bit quantization for texture coordinates",
            "export_gltfpack_vn(int in[1,16],(optional)) – Normal/Tangent Quantization, Use N-bit quantization for normals and tangents",
            "export_gltfpack_vc(int in[1,16],(optional)) – Vertex Color Quantization, Use N-bit quantization for colors",
            "export_gltfpack_vpi(enum in['Integer','Normalized','Floating-point'],(optional)) –Vertex Position Attributes, Type to use for vertex position attributesIntegerInteger – Use integer attributes for positions.NormalizedNormalized – Use normalized attributes for positions.Floating-pointFloating-point – Use floating-point attributes for positions.",
            "IntegerInteger – Use integer attributes for positions.",
            "NormalizedNormalized – Use normalized attributes for positions.",
            "Floating-pointFloating-point – Use floating-point attributes for positions.",
            "export_gltfpack_noq(boolean,(optional)) – Disable Quantization, Disable quantization; produces much larger glTF files with no extensions",
            "export_format(enum in[],(optional)) – Format, Output format. Binary is most efficient, but JSON may be easier to edit later",
            "ui_tab(enum in['GENERAL','MESHES','OBJECTS','ANIMATION'],(optional)) –ui_tab, Export setting categoriesGENERALGeneral – General settings.MESHESMeshes – Mesh settings.OBJECTSObjects – Object settings.ANIMATIONAnimation – Animation settings.",
            "GENERALGeneral – General settings.",
            "MESHESMeshes – Mesh settings.",
            "OBJECTSObjects – Object settings.",
            "ANIMATIONAnimation – Animation settings.",
            "export_copyright(string,(optional,never None)) – Copyright, Legal rights and conditions for the model",
            "export_image_format(enum in['AUTO','JPEG','WEBP','NONE'],(optional)) –Images, Output format for images. PNG is lossless and generally preferred, but JPEG might be preferable for web applications due to the smaller file size. Alternatively they can be omitted if they are not neededAUTOAutomatic – Save PNGs as PNGs, JPEGs as JPEGs, WebPs as WebPs. For other formats, use PNG.JPEGJPEG Format (.jpg) – Save images as JPEGs. (Images that need alpha are saved as PNGs though.) Be aware of a possible loss in quality.WEBPWebP Format – Save images as WebPs as main image (no fallback).NONENone – Don’t export images.",
            "AUTOAutomatic – Save PNGs as PNGs, JPEGs as JPEGs, WebPs as WebPs. For other formats, use PNG.",
            "JPEGJPEG Format (.jpg) – Save images as JPEGs. (Images that need alpha are saved as PNGs though.) Be aware of a possible loss in quality.",
            "WEBPWebP Format – Save images as WebPs as main image (no fallback).",
            "NONENone – Don’t export images.",
            "export_image_add_webp(boolean,(optional)) – Create WebP, Creates WebP textures for every texture. For already WebP textures, nothing happens",
            "export_image_webp_fallback(boolean,(optional)) – WebP fallback, For all WebP textures, create a PNG fallback texture",
            "export_texture_dir(string,(optional,never None)) – Textures, Folder to place texture files in. Relative to the .gltf file",
            "export_jpeg_quality(int in[0,100],(optional)) – JPEG quality, Quality of JPEG export",
            "export_image_quality(int in[0,100],(optional)) – Image quality, Quality of image export",
            "export_keep_originals(boolean,(optional)) – Keep original, Keep original textures files if possible. WARNING: if you use more than one texture, where pbr standard requires only one, only one texture will be used. This can lead to unexpected results",
            "export_texcoords(boolean,(optional)) – UVs, Export UVs (texture coordinates) with meshes",
            "export_normals(boolean,(optional)) – Normals, Export vertex normals with meshes",
            "export_gn_mesh(boolean,(optional)) – Geometry Nodes Instances (Experimental), Export Geometry nodes instance meshes",
            "export_draco_mesh_compression_enable(boolean,(optional)) – Draco mesh compression, Compress mesh using Draco",
            "export_draco_mesh_compression_level(int in[0,10],(optional)) – Compression level, Compression level (0 = most speed, 6 = most compression, higher values currently not supported)",
            "export_draco_position_quantization(int in[0,30],(optional)) – Position quantization bits, Quantization bits for position values (0 = no quantization)",
            "export_draco_normal_quantization(int in[0,30],(optional)) – Normal quantization bits, Quantization bits for normal values (0 = no quantization)",
            "export_draco_texcoord_quantization(int in[0,30],(optional)) – Texcoord quantization bits, Quantization bits for texture coordinate values (0 = no quantization)",
            "export_draco_color_quantization(int in[0,30],(optional)) – Color quantization bits, Quantization bits for color values (0 = no quantization)",
            "export_draco_generic_quantization(int in[0,30],(optional)) – Generic quantization bits, Quantization bits for generic values like weights or joints (0 = no quantization)",
            "export_tangents(boolean,(optional)) – Tangents, Export vertex tangents with meshes",
            "export_materials(enum in['EXPORT','PLACEHOLDER','NONE'],(optional)) –Materials, Export materialsEXPORTExport – Export all materials used by included objects.PLACEHOLDERPlaceholder – Do not export materials, but write multiple primitive groups per mesh, keeping material slot information.NONENo export – Do not export materials, and combine mesh primitive groups, losing material slot information.",
            "EXPORTExport – Export all materials used by included objects.",
            "PLACEHOLDERPlaceholder – Do not export materials, but write multiple primitive groups per mesh, keeping material slot information.",
            "NONENo export – Do not export materials, and combine mesh primitive groups, losing material slot information.",
            "export_unused_images(boolean,(optional)) – Unused images, Export images not assigned to any material",
            "export_unused_textures(boolean,(optional)) – Prepare Unused textures, Export image texture nodes not assigned to any material. This feature is not standard and needs an external extension to be included in the glTF file",
            "export_vertex_color(enum in['MATERIAL','ACTIVE','NONE'],(optional)) –Use Vertex Color, How to export vertex colorMATERIALMaterial – Export vertex color when used by material.ACTIVEActive – Export active vertex color.NONENone – Do not export vertex color.",
            "MATERIALMaterial – Export vertex color when used by material.",
            "ACTIVEActive – Export active vertex color.",
            "NONENone – Do not export vertex color.",
            "export_all_vertex_colors(boolean,(optional)) – Export all vertex colors, Export all vertex colors, even if not used by any material. If no Vertex Color is used in the mesh materials, a fake COLOR_0 will be created, in order to keep material unchanged",
            "export_active_vertex_color_when_no_material(boolean,(optional)) – Export active vertex color when no material, When there is no material on object, export active vertex color",
            "export_attributes(boolean,(optional)) – Attributes, Export Attributes (when starting with underscore)",
            "use_mesh_edges(boolean,(optional)) – Loose Edges, Export loose edges as lines, using the material from the first material slot",
            "use_mesh_vertices(boolean,(optional)) – Loose Points, Export loose points as glTF points, using the material from the first material slot",
            "export_cameras(boolean,(optional)) – Cameras, Export cameras",
            "use_selection(boolean,(optional)) – Selected Objects, Export selected objects only",
            "use_visible(boolean,(optional)) – Visible Objects, Export visible objects only",
            "use_renderable(boolean,(optional)) – Renderable Objects, Export renderable objects only",
            "use_active_collection_with_nested(boolean,(optional)) – Include Nested Collections, Include active collection and nested collections",
            "use_active_collection(boolean,(optional)) – Active Collection, Export objects in the active collection only",
            "use_active_scene(boolean,(optional)) – Active Scene, Export active scene only",
            "collection(string,(optional,never None)) – Source Collection, Export only objects from this collection (and its children)",
            "at_collection_center(boolean,(optional)) – Export at Collection Center, Export at Collection center of mass of root objects of the collection",
            "export_extras(boolean,(optional)) – Custom Properties, Export custom properties as glTF extras",
            "export_yup(boolean,(optional)) – +Y Up, Export using glTF convention, +Y up",
            "export_apply(boolean,(optional)) – Apply Modifiers, Apply modifiers (excluding Armatures) to mesh objects -WARNING: prevents exporting shape keys",
            "export_shared_accessors(boolean,(optional)) – Shared Accessors, Export Primitives using shared accessors for attributes",
            "export_animations(boolean,(optional)) – Animations, Exports active actions and NLA tracks as glTF animations",
            "export_frame_range(boolean,(optional)) – Limit to Playback Range, Clips animations to selected playback range",
            "export_frame_step(int in[1,120],(optional)) – Sampling Rate, How often to evaluate animated values (in frames)",
            "export_force_sampling(boolean,(optional)) – Always Sample Animations, Apply sampling to all animations",
            "export_pointer_animation(boolean,(optional)) – Export Animation Pointer (Experimental), Export material, Light & Camera animation as Animation Pointer. Available only for baked animation mode ‘NLA Tracks’ and ‘Scene’",
            "export_animation_mode(enum in['ACTIONS','ACTIVE_ACTIONS','BROADCAST','NLA_TRACKS','SCENE'],(optional)) –Animation mode, Export Animation modeACTIONSActions – Export actions (actives and on NLA tracks) as separate animations.ACTIVE_ACTIONSActive actions merged – All the currently assigned actions become one glTF animation.BROADCASTBroadcast actions – Broadcast all compatible actions to all objects. Animated objects will get all actions compatible with them, others will get no animation at all.NLA_TRACKSNLA Tracks – Export individual NLA Tracks as separate animation.SCENEScene – Export baked scene as a single animation.",
            "ACTIONSActions – Export actions (actives and on NLA tracks) as separate animations.",
            "ACTIVE_ACTIONSActive actions merged – All the currently assigned actions become one glTF animation.",
            "BROADCASTBroadcast actions – Broadcast all compatible actions to all objects. Animated objects will get all actions compatible with them, others will get no animation at all.",
            "NLA_TRACKSNLA Tracks – Export individual NLA Tracks as separate animation.",
            "SCENEScene – Export baked scene as a single animation.",
            "export_nla_strips_merged_animation_name(string,(optional,never None)) – Merged Animation Name, Name of single glTF animation to be exported",
            "export_def_bones(boolean,(optional)) – Export Deformation Bones Only, Export Deformation bones only",
            "export_hierarchy_flatten_bones(boolean,(optional)) – Flatten Bone Hierarchy, Flatten Bone Hierarchy. Useful in case of non decomposable transformation matrix",
            "export_hierarchy_flatten_objs(boolean,(optional)) – Flatten Object Hierarchy, Flatten Object Hierarchy. Useful in case of non decomposable transformation matrix",
            "export_armature_object_remove(boolean,(optional)) – Remove Armature Object, Remove Armature object if possible. If Armature has multiple root bones, object will not be removed",
            "export_leaf_bone(boolean,(optional)) – Add Leaf Bones, Append a final bone to the end of each chain to specify last bone length (use this when you intend to edit the armature from exported data)",
            "export_optimize_animation_size(boolean,(optional)) – Optimize Animation Size, Reduce exported file size by removing duplicate keyframes",
            "export_optimize_animation_keep_anim_armature(boolean,(optional)) – Force keeping channels for bones, If all keyframes are identical in a rig, force keeping the minimal animation. When off, all possible channels for the bones will be exported, even if empty (minimal animation, 2 keyframes)",
            "export_optimize_animation_keep_anim_object(boolean,(optional)) – Force keeping channel for objects, If all keyframes are identical for object transformations, force keeping the minimal animation",
            "export_optimize_disable_viewport(boolean,(optional)) – Disable viewport for other objects, When exporting animations, disable viewport for other objects, for performance",
            "export_negative_frame(enum in['SLIDE','CROP'],(optional)) –Negative Frames, Negative Frames are slid or croppedSLIDESlide – Slide animation to start at frame 0.CROPCrop – Keep only frames above frame 0.",
            "SLIDESlide – Slide animation to start at frame 0.",
            "CROPCrop – Keep only frames above frame 0.",
            "export_anim_slide_to_zero(boolean,(optional)) – Set all glTF Animation starting at 0, Set all glTF animation starting at 0.0s. Can be useful for looping animations",
            "export_bake_animation(boolean,(optional)) – Bake All Objects Animations, Force exporting animation on every object. Can be useful when using constraints or driver. Also useful when exporting only selection",
            "export_anim_single_armature(boolean,(optional)) – Export all Armature Actions, Export all actions, bound to a single armature. WARNING: Option does not support exports including multiple armatures",
            "export_reset_pose_bones(boolean,(optional)) – Reset pose bones between actions, Reset pose bones between each action exported. This is needed when some bones are not keyed on some animations",
            "export_current_frame(boolean,(optional)) – Use Current Frame as Object Rest Transformations, Export the scene in the current animation frame. When off, frame 0 is used as rest transformations for objects",
            "export_rest_position_armature(boolean,(optional)) – Use Rest Position Armature, Export armatures using rest position as joints’ rest pose. When off, current frame pose is used as rest pose",
            "export_anim_scene_split_object(boolean,(optional)) – Split Animation by Object, Export Scene as seen in Viewport, But split animation by Object",
            "export_skins(boolean,(optional)) – Skinning, Export skinning (armature) data",
            "export_influence_nb(int in[1,inf],(optional)) – Bone Influences, Choose how many Bone influences to export",
            "export_all_influences(boolean,(optional)) – Include All Bone Influences, Allow export of all joint vertex influences. Models may appear incorrectly in many viewers",
            "export_morph(boolean,(optional)) – Shape Keys, Export shape keys (morph targets)",
            "export_morph_normal(boolean,(optional)) – Shape Key Normals, Export vertex normals with shape keys (morph targets)",
            "export_morph_tangent(boolean,(optional)) – Shape Key Tangents, Export vertex tangents with shape keys (morph targets)",
            "export_morph_animation(boolean,(optional)) – Shape Key Animations, Export shape keys animations (morph targets)",
            "export_morph_reset_sk_data(boolean,(optional)) – Reset shape keys between actions, Reset shape keys between each action exported. This is needed when some SK channels are not keyed on some animations",
            "export_lights(boolean,(optional)) – Punctual Lights, Export directional, point, and spot lights. Uses “KHR_lights_punctual” glTF extension",
            "export_try_sparse_sk(boolean,(optional)) – Use Sparse Accessor if better, Try using Sparse Accessor if it saves space",
            "export_try_omit_sparse_sk(boolean,(optional)) – Omitting Sparse Accessor if data is empty, Omitting Sparse Accessor if data is empty",
            "export_gpu_instances(boolean,(optional)) – GPU Instances, Export using EXT_mesh_gpu_instancing. Limited to children of a given Empty. Multiple materials might be omitted",
            "export_action_filter(boolean,(optional)) – Filter Actions, Filter Actions to be exported",
            "export_convert_animation_pointer(boolean,(optional)) – Convert TRS/weights to Animation Pointer, Export TRS and weights as Animation Pointer. Using KHR_animation_pointer extension",
            "export_nla_strips(boolean,(optional)) – Group by NLA Track, When on, multiple actions become part of the same glTF animation if they’re pushed onto NLA tracks with the same name. When off, all the currently assigned actions become one glTF animation",
            "export_original_specular(boolean,(optional)) – Export original PBR Specular, Export original glTF PBR Specular, instead of Blender Principled Shader Specular",
            "will_save_settings(boolean,(optional)) – Remember Export Settings, Store glTF export settings in the Blender project",
            "export_hierarchy_full_collections(boolean,(optional)) – Full Collection Hierarchy, Export full hierarchy, including intermediate collections",
            "export_extra_animations(boolean,(optional)) – Prepare extra animations, Export additional animationsThis feature is not standard and needs an external extension to be included in the glTF file",
            "filter_glob(string,(optional,never None)) – filter_glob"
        ]
    },
    {
        "function_id": "bpy.utils.blend_paths",
        "signature": "bpy.utils.blend_paths(absolute=False,packed=False,local=False)#",
        "description": "Returns a list of paths to external files referenced by the loaded .blend file.",
        "parameters": [
            "absolute=False",
            "packed=False",
            "local=False"
        ],
        "parameter_descriptions": [
            "absolute(boolean) – When true the paths returned are made absolute.",
            "packed(boolean) – When true skip file paths for packed data.",
            "local(boolean) – When true skip linked library paths."
        ]
    },
    {
        "function_id": "bpy.utils.escape_identifier",
        "signature": "bpy.utils.escape_identifier(string)#",
        "description": "Simple string escaping function used for animation paths.",
        "parameters": [
            "string"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.utils.flip_name",
        "signature": "bpy.utils.flip_name(name,strip_digits=False)#",
        "description": "Flip a name between left/right sides, useful for\nmirroring bone names.",
        "parameters": [
            "name",
            "strip_digits=False"
        ],
        "parameter_descriptions": [
            "name(string) – Bone name to flip.",
            "strip_digits(bool) – Whether to remove.###suffix."
        ]
    },
    {
        "function_id": "bpy.utils.unescape_identifier",
        "signature": "bpy.utils.unescape_identifier(string)#",
        "description": "Simple string un-escape function used for animation paths.\nThis performs the reverse ofescape_identifier.",
        "parameters": [
            "string"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.utils.register_class",
        "signature": "bpy.utils.register_class(cls)#",
        "description": "Register a subclass of a Blender type class.",
        "parameters": [
            "cls"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.utils.resource_path",
        "signature": "bpy.utils.resource_path(type,major=bpy.app.version[0],minor=bpy.app.version[1])#",
        "description": "Return the base path for storing system files.",
        "parameters": [
            "type",
            "major=bpy.app.version[0]",
            "minor=bpy.app.version[1]"
        ],
        "parameter_descriptions": [
            "type(string) – string in [‘USER’, ‘LOCAL’, ‘SYSTEM’].",
            "major(int) – major version, defaults to current.",
            "minor(string) – minor version, defaults to current."
        ]
    },
    {
        "function_id": "bpy.utils.unregister_class",
        "signature": "bpy.utils.unregister_class(cls)#",
        "description": "Unload the Python class from blender.",
        "parameters": [
            "cls"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.utils.keyconfig_init",
        "signature": "bpy.utils.keyconfig_init()#",
        "parameters": []
    },
    {
        "function_id": "bpy.utils.keyconfig_set",
        "signature": "bpy.utils.keyconfig_set(filepath,*,report=None)#",
        "parameters": [
            "filepath",
            "*",
            "report=None"
        ]
    },
    {
        "function_id": "bpy.utils.load_scripts",
        "signature": "bpy.utils.load_scripts(*,reload_scripts=False,refresh_scripts=False,extensions=True)#",
        "description": "Load scripts and run each modules register function.",
        "parameters": [
            "*",
            "reload_scripts=False",
            "refresh_scripts=False",
            "extensions=True"
        ],
        "parameter_descriptions": [
            "reload_scripts(bool) – Causes all scripts to have their unregister method\ncalled before loading.",
            "refresh_scripts(bool) – only load scripts which are not already loaded\nas modules.",
            "extensions(bool) – Loads additional scripts (add-ons & app-templates)."
        ]
    },
    {
        "function_id": "bpy.utils.modules_from_path",
        "signature": "bpy.utils.modules_from_path(path,loaded_modules)#",
        "description": "Load all modules in a path and return them as a list.",
        "parameters": [
            "path",
            "loaded_modules"
        ],
        "parameter_descriptions": [
            "path(string) – this path is scanned for scripts and packages.",
            "loaded_modules(set) – already loaded module names, files matching these\nnames will be ignored."
        ]
    },
    {
        "function_id": "bpy.utils.preset_find",
        "signature": "bpy.utils.preset_find(name,preset_path,*,display_name=False,ext='.py')#",
        "parameters": [
            "name",
            "preset_path",
            "*",
            "display_name=False",
            "ext='.py'"
        ]
    },
    {
        "function_id": "bpy.utils.preset_paths",
        "signature": "bpy.utils.preset_paths(subdir)#",
        "description": "Returns a list of paths for a specific preset.",
        "parameters": [
            "subdir"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.utils.refresh_script_paths",
        "signature": "bpy.utils.refresh_script_paths()#",
        "description": "Run this after creating new script paths to update sys.path",
        "parameters": []
    },
    {
        "function_id": "bpy.utils.app_template_paths",
        "signature": "bpy.utils.app_template_paths(*,path=None)#",
        "description": "Returns valid application template paths.",
        "parameters": [
            "*",
            "path=None"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.utils.register_manual_map",
        "signature": "bpy.utils.register_manual_map(manual_hook)#",
        "parameters": [
            "manual_hook"
        ]
    },
    {
        "function_id": "bpy.utils.unregister_manual_map",
        "signature": "bpy.utils.unregister_manual_map(manual_hook)#",
        "parameters": [
            "manual_hook"
        ]
    },
    {
        "function_id": "bpy.utils.register_preset_path",
        "signature": "bpy.utils.register_preset_path(path)#",
        "description": "Register a preset search path.",
        "parameters": [
            "path"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.utils.unregister_preset_path",
        "signature": "bpy.utils.unregister_preset_path(path)#",
        "description": "Unregister a preset search path.",
        "parameters": [
            "path"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.utils.register_classes_factory",
        "signature": "bpy.utils.register_classes_factory(classes)#",
        "description": "Utility function to create register and unregister functions\nwhich simply registers and unregisters a sequence of classes.",
        "parameters": [
            "classes"
        ]
    },
    {
        "function_id": "bpy.utils.register_submodule_factory",
        "signature": "bpy.utils.register_submodule_factory(module_name,submodule_names)#",
        "description": "Utility function to create register and unregister functions\nwhich simply load submodules,\ncalling their register & unregister functions.",
        "parameters": [
            "module_name",
            "submodule_names"
        ],
        "parameter_descriptions": [
            "module_name(string) – The module name, typically__name__.",
            "submodule_names(listofstrings) – List of submodule names to load and unload."
        ]
    },
    {
        "function_id": "bpy.utils.register_tool",
        "signature": "bpy.utils.register_tool(tool_cls,*,after=None,separator=False,group=False)#",
        "description": "Register a tool in the toolbar.",
        "parameters": [
            "tool_cls",
            "*",
            "after=None",
            "separator=False",
            "group=False"
        ],
        "parameter_descriptions": [
            "tool_cls(bpy.types.WorkSpaceToolsubclass.) – A tool subclass.",
            "after(collectionofstringsorNone.) – Optional identifiers this tool will be added after.",
            "separator(bool) – When true, add a separator before this tool.",
            "group(bool) – When true, add a new nested group of tools."
        ]
    },
    {
        "function_id": "bpy.utils.make_rna_paths",
        "signature": "bpy.utils.make_rna_paths(struct_name,prop_name,enum_name)#",
        "description": "Create RNA “paths” from given names.",
        "parameters": [
            "struct_name",
            "prop_name",
            "enum_name"
        ],
        "parameter_descriptions": [
            "struct_name(string) – Name of a RNA struct (like e.g. “Scene”).",
            "prop_name(string) – Name of a RNA struct’s property.",
            "enum_name(string) – Name of a RNA enum identifier."
        ]
    },
    {
        "function_id": "bpy.utils.manual_map",
        "signature": "bpy.utils.manual_map()#",
        "parameters": []
    },
    {
        "function_id": "bpy.utils.manual_language_code",
        "signature": "bpy.utils.manual_language_code(default='en')#",
        "description": "The language code used for user manual URL component based on the current language user-preference,\nfalling back to thedefaultwhen unavailable.",
        "parameters": [
            "default='en'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.utils.script_path_user",
        "signature": "bpy.utils.script_path_user()#",
        "description": "returns the env var and falls back to home dir or None",
        "parameters": []
    },
    {
        "function_id": "bpy.utils.extension_path_user",
        "signature": "bpy.utils.extension_path_user(package,*,path='',create=False)#",
        "description": "Return a user writable directory associated with an extension.",
        "parameters": [
            "package",
            "*",
            "path=''",
            "create=False"
        ],
        "parameter_descriptions": [
            "package(string) – The__package__of the extension.",
            "path(string) – Optional subdirectory.",
            "create(boolean) – Treat the path as a directory and create it if its not existing."
        ]
    },
    {
        "function_id": "bpy.utils.script_paths",
        "signature": "bpy.utils.script_paths(*,subdir=None,user_pref=True,check_all=False,use_user=True,use_system_environment=True)#",
        "description": "Returns a list of valid script paths.",
        "parameters": [
            "*",
            "subdir=None",
            "user_pref=True",
            "check_all=False",
            "use_user=True",
            "use_system_environment=True"
        ],
        "parameter_descriptions": [
            "subdir(string) – Optional subdir.",
            "user_pref(bool) – Include the user preference script paths.",
            "check_all(bool) – Include local, user and system paths rather just the paths Blender uses.",
            "use_user(bool) – Include user paths",
            "use_system_environment(bool) – Include BLENDER_SYSTEM_SCRIPTS variable path"
        ]
    },
    {
        "function_id": "bpy.utils.smpte_from_frame",
        "signature": "bpy.utils.smpte_from_frame(frame,*,fps=None,fps_base=None)#",
        "description": "Returns an SMPTE formatted string from theframe:HH:MM:SS:FF.",
        "parameters": [
            "frame",
            "*",
            "fps=None",
            "fps_base=None"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.utils.smpte_from_seconds",
        "signature": "bpy.utils.smpte_from_seconds(time,*,fps=None,fps_base=None)#",
        "description": "Returns an SMPTE formatted string from thetime:HH:MM:SS:FF.",
        "parameters": [
            "time",
            "*",
            "fps=None",
            "fps_base=None"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.utils.unregister_tool",
        "signature": "bpy.utils.unregister_tool(tool_cls)#",
        "parameters": [
            "tool_cls"
        ]
    },
    {
        "function_id": "bpy.utils.user_resource",
        "signature": "bpy.utils.user_resource(resource_type,*,path='',create=False)#",
        "description": "Return a user resource path (normally from the users home directory).",
        "parameters": [
            "resource_type",
            "*",
            "path=''",
            "create=False"
        ],
        "parameter_descriptions": [
            "type(string) – Resource type in [‘DATAFILES’, ‘CONFIG’, ‘SCRIPTS’, ‘EXTENSIONS’].",
            "path(string) – Optional subdirectory.",
            "create(boolean) – Treat the path as a directory and create it if its not existing."
        ]
    },
    {
        "function_id": "bpy.utils.execfile",
        "signature": "bpy.utils.execfile(filepath,*,mod=None)#",
        "description": "Execute a file path as a Python script.",
        "parameters": [
            "filepath",
            "*",
            "mod=None"
        ],
        "parameter_descriptions": [
            "filepath(string) – Path of the script to execute.",
            "mod(ModuleorNone) – Optional cached module, the result of a previous execution."
        ]
    },
    {
        "function_id": "bpy_extras.node_utils.find_node_input",
        "signature": "bpy_extras.node_utils.find_node_input(node,name)#",
        "parameters": [
            "node",
            "name"
        ]
    },
    {
        "function_id": "bpy.ops.collection.create",
        "signature": "bpy.ops.collection.create(name='Collection')#",
        "description": "Create an object collection from selected objects",
        "parameters": [
            "name='Collection'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.collection.export_all",
        "signature": "bpy.ops.collection.export_all()#",
        "description": "Invoke all configured exporters on this collection",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.collection.exporter_add",
        "signature": "bpy.ops.collection.exporter_add(name='')#",
        "description": "Add Exporter",
        "parameters": [
            "name=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.collection.exporter_export",
        "signature": "bpy.ops.collection.exporter_export(index=0)#",
        "description": "Invoke the export operation",
        "parameters": [
            "index=0"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.collection.exporter_remove",
        "signature": "bpy.ops.collection.exporter_remove(index=0)#",
        "description": "Remove Exporter",
        "parameters": [
            "index=0"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.collection.objects_add_active",
        "signature": "bpy.ops.collection.objects_add_active(collection='')#",
        "description": "Add the object to an object collection that contains the active object",
        "parameters": [
            "collection=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.collection.objects_remove",
        "signature": "bpy.ops.collection.objects_remove(collection='')#",
        "description": "Remove selected objects from a collection",
        "parameters": [
            "collection=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.collection.objects_remove_active",
        "signature": "bpy.ops.collection.objects_remove_active(collection='')#",
        "description": "Remove the object from an object collection that contains the active object",
        "parameters": [
            "collection=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.collection.objects_remove_all",
        "signature": "bpy.ops.collection.objects_remove_all()#",
        "description": "Remove selected objects from all collections",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.render.cycles_integrator_preset_add",
        "signature": "bpy.ops.render.cycles_integrator_preset_add(name='',remove_name=False,remove_active=False)#",
        "description": "Add an Integrator Preset",
        "parameters": [
            "name=''",
            "remove_name=False",
            "remove_active=False"
        ],
        "parameter_descriptions": [
            "name(string,(optional,never None)) – Name, Name of the preset, used to make the path name",
            "remove_name(boolean,(optional)) – remove_name",
            "remove_active(boolean,(optional)) – remove_active"
        ]
    },
    {
        "function_id": "bpy.ops.render.cycles_performance_preset_add",
        "signature": "bpy.ops.render.cycles_performance_preset_add(name='',remove_name=False,remove_active=False)#",
        "description": "Add an Performance Preset",
        "parameters": [
            "name=''",
            "remove_name=False",
            "remove_active=False"
        ],
        "parameter_descriptions": [
            "name(string,(optional,never None)) – Name, Name of the preset, used to make the path name",
            "remove_name(boolean,(optional)) – remove_name",
            "remove_active(boolean,(optional)) – remove_active"
        ]
    },
    {
        "function_id": "bpy.ops.render.cycles_sampling_preset_add",
        "signature": "bpy.ops.render.cycles_sampling_preset_add(name='',remove_name=False,remove_active=False)#",
        "description": "Add a Sampling Preset",
        "parameters": [
            "name=''",
            "remove_name=False",
            "remove_active=False"
        ],
        "parameter_descriptions": [
            "name(string,(optional,never None)) – Name, Name of the preset, used to make the path name",
            "remove_name(boolean,(optional)) – remove_name",
            "remove_active(boolean,(optional)) – remove_active"
        ]
    },
    {
        "function_id": "bpy.ops.render.cycles_viewport_sampling_preset_add",
        "signature": "bpy.ops.render.cycles_viewport_sampling_preset_add(name='',remove_name=False,remove_active=False)#",
        "description": "Add a Viewport Sampling Preset",
        "parameters": [
            "name=''",
            "remove_name=False",
            "remove_active=False"
        ],
        "parameter_descriptions": [
            "name(string,(optional,never None)) – Name, Name of the preset, used to make the path name",
            "remove_name(boolean,(optional)) – remove_name",
            "remove_active(boolean,(optional)) – remove_active"
        ]
    },
    {
        "function_id": "bpy.ops.render.eevee_raytracing_preset_add",
        "signature": "bpy.ops.render.eevee_raytracing_preset_add(name='',remove_name=False,remove_active=False)#",
        "description": "Add or remove an EEVEE ray-tracing preset",
        "parameters": [
            "name=''",
            "remove_name=False",
            "remove_active=False"
        ],
        "parameter_descriptions": [
            "name(string,(optional,never None)) – Name, Name of the preset, used to make the path name",
            "remove_name(boolean,(optional)) – remove_name",
            "remove_active(boolean,(optional)) – remove_active"
        ]
    },
    {
        "function_id": "bpy.ops.render.opengl",
        "signature": "bpy.ops.render.opengl(animation=False,render_keyed_only=False,sequencer=False,write_still=False,view_context=True)#",
        "description": "Take a snapshot of the active viewport",
        "parameters": [
            "animation=False",
            "render_keyed_only=False",
            "sequencer=False",
            "write_still=False",
            "view_context=True"
        ],
        "parameter_descriptions": [
            "animation(boolean,(optional)) – Animation, Render files from the animation range of this scene",
            "render_keyed_only(boolean,(optional)) – Render Keyframes Only, Render only those frames where selected objects have a key in their animation data. Only used when rendering animation",
            "sequencer(boolean,(optional)) – Sequencer, Render using the sequencer’s OpenGL display",
            "write_still(boolean,(optional)) – Write Image, Save the rendered image to the output path (used only when animation is disabled)",
            "view_context(boolean,(optional)) – View Context, Use the current 3D view for rendering, else use scene settings"
        ]
    },
    {
        "function_id": "bpy.ops.render.play_rendered_anim",
        "signature": "bpy.ops.render.play_rendered_anim()#",
        "description": "Play back rendered frames/movies using an external player",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.render.preset_add",
        "signature": "bpy.ops.render.preset_add(name='',remove_name=False,remove_active=False)#",
        "description": "Add or remove a Render Preset",
        "parameters": [
            "name=''",
            "remove_name=False",
            "remove_active=False"
        ],
        "parameter_descriptions": [
            "name(string,(optional,never None)) – Name, Name of the preset, used to make the path name",
            "remove_name(boolean,(optional)) – remove_name",
            "remove_active(boolean,(optional)) – remove_active"
        ]
    },
    {
        "function_id": "bpy.ops.render.render",
        "signature": "bpy.ops.render.render(animation=False,write_still=False,use_viewport=False,layer='',scene='')#",
        "description": "Render active scene",
        "parameters": [
            "animation=False",
            "write_still=False",
            "use_viewport=False",
            "layer=''",
            "scene=''"
        ],
        "parameter_descriptions": [
            "animation(boolean,(optional)) – Animation, Render files from the animation range of this scene",
            "write_still(boolean,(optional)) – Write Image, Save the rendered image to the output path (used only when animation is disabled)",
            "use_viewport(boolean,(optional)) – Use 3D Viewport, When inside a 3D viewport, use layers and camera of the viewport",
            "layer(string,(optional,never None)) – Render Layer, Single render layer to re-render (used only when animation is disabled)",
            "scene(string,(optional,never None)) – Scene, Scene to render, current scene if not specified"
        ]
    },
    {
        "function_id": "bpy.ops.render.shutter_curve_preset",
        "signature": "bpy.ops.render.shutter_curve_preset(shape='SMOOTH')#",
        "description": "Set shutter curve",
        "parameters": [
            "shape='SMOOTH'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.render.view_cancel",
        "signature": "bpy.ops.render.view_cancel()#",
        "description": "Cancel show render view",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.render.view_show",
        "signature": "bpy.ops.render.view_show()#",
        "description": "Toggle show render view",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.view3d.bone_select_menu",
        "signature": "bpy.ops.view3d.bone_select_menu(name='',extend=False,deselect=False,toggle=False)#",
        "description": "Menu bone selection",
        "parameters": [
            "name=''",
            "extend=False",
            "deselect=False",
            "toggle=False"
        ],
        "parameter_descriptions": [
            "name(enum in[],(optional)) – Bone Name",
            "extend(boolean,(optional)) – Extend",
            "deselect(boolean,(optional)) – Deselect",
            "toggle(boolean,(optional)) – Toggle"
        ]
    },
    {
        "function_id": "bpy.ops.view3d.camera_background_image_add",
        "signature": "bpy.ops.view3d.camera_background_image_add(filepath='',relative_path=True,name='',session_uid=0)#",
        "description": "Add a new background image to the active camera",
        "parameters": [
            "filepath=''",
            "relative_path=True",
            "name=''",
            "session_uid=0"
        ],
        "parameter_descriptions": [
            "filepath(string,(optional,never None)) – Filepath, Path to image file",
            "relative_path(boolean,(optional)) – Relative Path, Select the file relative to the blend file",
            "name(string,(optional,never None)) – Name, Name of the data-block to use by the operator",
            "session_uid(int in[-inf,inf],(optional)) – Session UID, Session UID of the data-block to use by the operator"
        ]
    },
    {
        "function_id": "bpy.ops.view3d.camera_background_image_remove",
        "signature": "bpy.ops.view3d.camera_background_image_remove(index=0)#",
        "description": "Remove a background image from the camera",
        "parameters": [
            "index=0"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.view3d.camera_to_view",
        "signature": "bpy.ops.view3d.camera_to_view()#",
        "description": "Set camera view to active view",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.view3d.camera_to_view_selected",
        "signature": "bpy.ops.view3d.camera_to_view_selected()#",
        "description": "Move the camera so selected objects are framed",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.view3d.clear_render_border",
        "signature": "bpy.ops.view3d.clear_render_border()#",
        "description": "Clear the boundaries of the border render and disable border render",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.view3d.clip_border",
        "signature": "bpy.ops.view3d.clip_border(xmin=0,xmax=0,ymin=0,ymax=0,wait_for_input=True)#",
        "description": "Set the view clipping region",
        "parameters": [
            "xmin=0",
            "xmax=0",
            "ymin=0",
            "ymax=0",
            "wait_for_input=True"
        ],
        "parameter_descriptions": [
            "xmin(int in[-inf,inf],(optional)) – X Min",
            "xmax(int in[-inf,inf],(optional)) – X Max",
            "ymin(int in[-inf,inf],(optional)) – Y Min",
            "ymax(int in[-inf,inf],(optional)) – Y Max",
            "wait_for_input(boolean,(optional)) – Wait for Input"
        ]
    },
    {
        "function_id": "bpy.ops.view3d.copybuffer",
        "signature": "bpy.ops.view3d.copybuffer()#",
        "description": "Copy the selected objects to the internal clipboard",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.view3d.cursor3d",
        "signature": "bpy.ops.view3d.cursor3d(use_depth=True,orientation='VIEW')#",
        "description": "Set the location of the 3D cursor",
        "parameters": [
            "use_depth=True",
            "orientation='VIEW'"
        ],
        "parameter_descriptions": [
            "use_depth(boolean,(optional)) – Surface Project, Project onto the surface",
            "orientation(enum in['NONE','VIEW','XFORM','GEOM'],(optional)) –Orientation, Preset viewpoint to useNONENone – Leave orientation unchanged.VIEWView – Orient to the viewport.XFORMTransform – Orient to the current transform setting.GEOMGeometry – Match the surface normal.",
            "NONENone – Leave orientation unchanged.",
            "VIEWView – Orient to the viewport.",
            "XFORMTransform – Orient to the current transform setting.",
            "GEOMGeometry – Match the surface normal."
        ]
    },
    {
        "function_id": "bpy.ops.view3d.dolly",
        "signature": "bpy.ops.view3d.dolly(mx=0,my=0,delta=0,use_cursor_init=True)#",
        "description": "Dolly in/out in the view",
        "parameters": [
            "mx=0",
            "my=0",
            "delta=0",
            "use_cursor_init=True"
        ],
        "parameter_descriptions": [
            "mx(int in[0,inf],(optional)) – Region Position X",
            "my(int in[0,inf],(optional)) – Region Position Y",
            "delta(int in[-inf,inf],(optional)) – Delta",
            "use_cursor_init(boolean,(optional)) – Use Mouse Position, Allow the initial mouse position to be used"
        ]
    },
    {
        "function_id": "bpy.ops.view3d.drop_world",
        "signature": "bpy.ops.view3d.drop_world(name='',session_uid=0)#",
        "description": "Drop a world into the scene",
        "parameters": [
            "name=''",
            "session_uid=0"
        ],
        "parameter_descriptions": [
            "name(string,(optional,never None)) – Name, Name of the data-block to use by the operator",
            "session_uid(int in[-inf,inf],(optional)) – Session UID, Session UID of the data-block to use by the operator"
        ]
    },
    {
        "function_id": "bpy.ops.view3d.edit_mesh_extrude_individual_move",
        "signature": "bpy.ops.view3d.edit_mesh_extrude_individual_move()#",
        "description": "Extrude each individual face separately along local normals",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.view3d.edit_mesh_extrude_manifold_normal",
        "signature": "bpy.ops.view3d.edit_mesh_extrude_manifold_normal()#",
        "description": "Extrude manifold region along normals",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.view3d.edit_mesh_extrude_move_normal",
        "signature": "bpy.ops.view3d.edit_mesh_extrude_move_normal(dissolve_and_intersect=False)#",
        "description": "Extrude region together along the average normal",
        "parameters": [
            "dissolve_and_intersect=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.view3d.edit_mesh_extrude_move_shrink_fatten",
        "signature": "bpy.ops.view3d.edit_mesh_extrude_move_shrink_fatten()#",
        "description": "Extrude region together along local normals",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.view3d.fly",
        "signature": "bpy.ops.view3d.fly()#",
        "description": "Interactively fly around the scene",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.view3d.interactive_add",
        "signature": "bpy.ops.view3d.interactive_add(primitive_type='CUBE',plane_origin_base='EDGE',plane_origin_depth='EDGE',plane_aspect_base='FREE',plane_aspect_depth='FREE',wait_for_input=True)#",
        "description": "Interactively add an object",
        "parameters": [
            "primitive_type='CUBE'",
            "plane_origin_base='EDGE'",
            "plane_origin_depth='EDGE'",
            "plane_aspect_base='FREE'",
            "plane_aspect_depth='FREE'",
            "wait_for_input=True"
        ],
        "parameter_descriptions": [
            "primitive_type(enum in['CUBE','CYLINDER','CONE','SPHERE_UV','SPHERE_ICO'],(optional)) – Primitive",
            "plane_origin_base(enum in['EDGE','CENTER'],(optional)) –Origin, The initial position for placementEDGEEdge – Start placing the edge position.CENTERCenter – Start placing the center position.",
            "EDGEEdge – Start placing the edge position.",
            "CENTERCenter – Start placing the center position.",
            "plane_origin_depth(enum in['EDGE','CENTER'],(optional)) –Origin, The initial position for placementEDGEEdge – Start placing the edge position.CENTERCenter – Start placing the center position.",
            "EDGEEdge – Start placing the edge position.",
            "CENTERCenter – Start placing the center position.",
            "plane_aspect_base(enum in['FREE','FIXED'],(optional)) –Aspect, The initial aspect settingFREEFree – Use an unconstrained aspect.FIXEDFixed – Use a fixed 1:1 aspect.",
            "FREEFree – Use an unconstrained aspect.",
            "FIXEDFixed – Use a fixed 1:1 aspect.",
            "plane_aspect_depth(enum in['FREE','FIXED'],(optional)) –Aspect, The initial aspect settingFREEFree – Use an unconstrained aspect.FIXEDFixed – Use a fixed 1:1 aspect.",
            "FREEFree – Use an unconstrained aspect.",
            "FIXEDFixed – Use a fixed 1:1 aspect.",
            "wait_for_input(boolean,(optional)) – Wait for Input"
        ]
    },
    {
        "function_id": "bpy.ops.view3d.localview",
        "signature": "bpy.ops.view3d.localview(frame_selected=True)#",
        "description": "Toggle display of selected object(s) separately and centered in view",
        "parameters": [
            "frame_selected=True"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.view3d.localview_remove_from",
        "signature": "bpy.ops.view3d.localview_remove_from()#",
        "description": "Move selected objects out of local view",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.view3d.move",
        "signature": "bpy.ops.view3d.move(use_cursor_init=True)#",
        "description": "Move the view",
        "parameters": [
            "use_cursor_init=True"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.view3d.navigate",
        "signature": "bpy.ops.view3d.navigate()#",
        "description": "Interactively navigate around the scene (uses the mode (walk/fly) preference)",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.view3d.ndof_all",
        "signature": "bpy.ops.view3d.ndof_all()#",
        "description": "Pan and rotate the view with the 3D mouse",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.view3d.ndof_orbit",
        "signature": "bpy.ops.view3d.ndof_orbit()#",
        "description": "Orbit the view using the 3D mouse",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.view3d.ndof_orbit_zoom",
        "signature": "bpy.ops.view3d.ndof_orbit_zoom()#",
        "description": "Orbit and zoom the view using the 3D mouse",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.view3d.ndof_pan",
        "signature": "bpy.ops.view3d.ndof_pan()#",
        "description": "Pan the view with the 3D mouse",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.view3d.object_as_camera",
        "signature": "bpy.ops.view3d.object_as_camera()#",
        "description": "Set the active object as the active camera for this view or scene",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.view3d.object_mode_pie_or_toggle",
        "signature": "bpy.ops.view3d.object_mode_pie_or_toggle()#",
        "description": "Undocumented, considercontributing.",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.view3d.pastebuffer",
        "signature": "bpy.ops.view3d.pastebuffer(autoselect=True,active_collection=True)#",
        "description": "Paste objects from the internal clipboard",
        "parameters": [
            "autoselect=True",
            "active_collection=True"
        ],
        "parameter_descriptions": [
            "autoselect(boolean,(optional)) – Select, Select pasted objects",
            "active_collection(boolean,(optional)) – Active Collection, Put pasted objects in the active collection"
        ]
    },
    {
        "function_id": "bpy.ops.view3d.render_border",
        "signature": "bpy.ops.view3d.render_border(xmin=0,xmax=0,ymin=0,ymax=0,wait_for_input=True)#",
        "description": "Set the boundaries of the border render and enable border render",
        "parameters": [
            "xmin=0",
            "xmax=0",
            "ymin=0",
            "ymax=0",
            "wait_for_input=True"
        ],
        "parameter_descriptions": [
            "xmin(int in[-inf,inf],(optional)) – X Min",
            "xmax(int in[-inf,inf],(optional)) – X Max",
            "ymin(int in[-inf,inf],(optional)) – Y Min",
            "ymax(int in[-inf,inf],(optional)) – Y Max",
            "wait_for_input(boolean,(optional)) – Wait for Input"
        ]
    },
    {
        "function_id": "bpy.ops.view3d.rotate",
        "signature": "bpy.ops.view3d.rotate(use_cursor_init=True)#",
        "description": "Rotate the view",
        "parameters": [
            "use_cursor_init=True"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.view3d.ruler_add",
        "signature": "bpy.ops.view3d.ruler_add()#",
        "description": "Add ruler",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.view3d.ruler_remove",
        "signature": "bpy.ops.view3d.ruler_remove()#",
        "description": "Undocumented, considercontributing.",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.view3d.select",
        "signature": "bpy.ops.view3d.select(extend=False,deselect=False,toggle=False,deselect_all=False,select_passthrough=False,center=False,enumerate=False,object=False,location=(0,0))#",
        "description": "Select and activate item(s)",
        "parameters": [
            "extend=False",
            "deselect=False",
            "toggle=False",
            "deselect_all=False",
            "select_passthrough=False",
            "center=False",
            "enumerate=False",
            "object=False",
            "location=(0,0)"
        ],
        "parameter_descriptions": [
            "extend(boolean,(optional)) – Extend, Extend selection instead of deselecting everything first",
            "deselect(boolean,(optional)) – Deselect, Remove from selection",
            "toggle(boolean,(optional)) – Toggle Selection, Toggle the selection",
            "deselect_all(boolean,(optional)) – Deselect On Nothing, Deselect all when nothing under the cursor",
            "select_passthrough(boolean,(optional)) – Only Select Unselected, Ignore the select action when the element is already selected",
            "center(boolean,(optional)) – Center, Use the object center when selecting, in edit mode used to extend object selection",
            "enumerate(boolean,(optional)) – Enumerate, List objects under the mouse (object mode only)",
            "object(boolean,(optional)) – Object, Use object selection (edit mode only)",
            "location(int arrayof2 items in[-inf,inf],(optional)) – Location, Mouse location"
        ]
    },
    {
        "function_id": "bpy.ops.view3d.select_box",
        "signature": "bpy.ops.view3d.select_box(xmin=0,xmax=0,ymin=0,ymax=0,wait_for_input=True,mode='SET')#",
        "description": "Select items using box selection",
        "parameters": [
            "xmin=0",
            "xmax=0",
            "ymin=0",
            "ymax=0",
            "wait_for_input=True",
            "mode='SET'"
        ],
        "parameter_descriptions": [
            "xmin(int in[-inf,inf],(optional)) – X Min",
            "xmax(int in[-inf,inf],(optional)) – X Max",
            "ymin(int in[-inf,inf],(optional)) – Y Min",
            "ymax(int in[-inf,inf],(optional)) – Y Max",
            "wait_for_input(boolean,(optional)) – Wait for Input",
            "mode(enum in['SET','ADD','SUB','XOR','AND'],(optional)) –ModeSETSet – Set a new selection.ADDExtend – Extend existing selection.SUBSubtract – Subtract existing selection.XORDifference – Invert existing selection.ANDIntersect – Intersect existing selection.",
            "SETSet – Set a new selection.",
            "ADDExtend – Extend existing selection.",
            "SUBSubtract – Subtract existing selection.",
            "XORDifference – Invert existing selection.",
            "ANDIntersect – Intersect existing selection."
        ]
    },
    {
        "function_id": "bpy.ops.view3d.select_circle",
        "signature": "bpy.ops.view3d.select_circle(x=0,y=0,radius=25,wait_for_input=True,mode='SET')#",
        "description": "Select items using circle selection",
        "parameters": [
            "x=0",
            "y=0",
            "radius=25",
            "wait_for_input=True",
            "mode='SET'"
        ],
        "parameter_descriptions": [
            "x(int in[-inf,inf],(optional)) – X",
            "y(int in[-inf,inf],(optional)) – Y",
            "radius(int in[1,inf],(optional)) – Radius",
            "wait_for_input(boolean,(optional)) – Wait for Input",
            "mode(enum in['SET','ADD','SUB'],(optional)) –ModeSETSet – Set a new selection.ADDExtend – Extend existing selection.SUBSubtract – Subtract existing selection.",
            "SETSet – Set a new selection.",
            "ADDExtend – Extend existing selection.",
            "SUBSubtract – Subtract existing selection."
        ]
    },
    {
        "function_id": "bpy.ops.view3d.select_lasso",
        "signature": "bpy.ops.view3d.select_lasso(path=None,mode='SET')#",
        "description": "Select items using lasso selection",
        "parameters": [
            "path=None",
            "mode='SET'"
        ],
        "parameter_descriptions": [
            "path(bpy_prop_collectionofOperatorMousePath, (optional)) – Path",
            "mode(enum in['SET','ADD','SUB','XOR','AND'],(optional)) –ModeSETSet – Set a new selection.ADDExtend – Extend existing selection.SUBSubtract – Subtract existing selection.XORDifference – Invert existing selection.ANDIntersect – Intersect existing selection.",
            "SETSet – Set a new selection.",
            "ADDExtend – Extend existing selection.",
            "SUBSubtract – Subtract existing selection.",
            "XORDifference – Invert existing selection.",
            "ANDIntersect – Intersect existing selection."
        ]
    },
    {
        "function_id": "bpy.ops.view3d.select_menu",
        "signature": "bpy.ops.view3d.select_menu(name='',extend=False,deselect=False,toggle=False)#",
        "description": "Menu object selection",
        "parameters": [
            "name=''",
            "extend=False",
            "deselect=False",
            "toggle=False"
        ],
        "parameter_descriptions": [
            "name(enum in[],(optional)) – Object Name",
            "extend(boolean,(optional)) – Extend",
            "deselect(boolean,(optional)) – Deselect",
            "toggle(boolean,(optional)) – Toggle"
        ]
    },
    {
        "function_id": "bpy.ops.view3d.smoothview",
        "signature": "bpy.ops.view3d.smoothview()#",
        "description": "Undocumented, considercontributing.",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.view3d.snap_cursor_to_active",
        "signature": "bpy.ops.view3d.snap_cursor_to_active()#",
        "description": "Snap 3D cursor to the active item",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.view3d.snap_cursor_to_center",
        "signature": "bpy.ops.view3d.snap_cursor_to_center()#",
        "description": "Snap 3D cursor to the world origin",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.view3d.snap_cursor_to_grid",
        "signature": "bpy.ops.view3d.snap_cursor_to_grid()#",
        "description": "Snap 3D cursor to the nearest grid division",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.view3d.snap_cursor_to_selected",
        "signature": "bpy.ops.view3d.snap_cursor_to_selected()#",
        "description": "Snap 3D cursor to the middle of the selected item(s)",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.view3d.snap_selected_to_active",
        "signature": "bpy.ops.view3d.snap_selected_to_active()#",
        "description": "Snap selected item(s) to the active item",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.view3d.snap_selected_to_cursor",
        "signature": "bpy.ops.view3d.snap_selected_to_cursor(use_offset=True)#",
        "description": "Snap selected item(s) to the 3D cursor",
        "parameters": [
            "use_offset=True"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.view3d.snap_selected_to_grid",
        "signature": "bpy.ops.view3d.snap_selected_to_grid()#",
        "description": "Snap selected item(s) to their nearest grid division",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.view3d.toggle_matcap_flip",
        "signature": "bpy.ops.view3d.toggle_matcap_flip()#",
        "description": "Flip MatCap",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.view3d.toggle_shading",
        "signature": "bpy.ops.view3d.toggle_shading(type='WIREFRAME')#",
        "description": "Toggle shading type in 3D viewport",
        "parameters": [
            "type='WIREFRAME'"
        ],
        "parameter_descriptions": [
            "WIREFRAMEWireframe – Toggle wireframe shading.",
            "SOLIDSolid – Toggle solid shading.",
            "MATERIALMaterial Preview – Toggle material preview shading.",
            "RENDEREDRendered – Toggle rendered shading."
        ]
    },
    {
        "function_id": "bpy.ops.view3d.toggle_xray",
        "signature": "bpy.ops.view3d.toggle_xray()#",
        "description": "Transparent scene display. Allow selecting through items",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.view3d.transform_gizmo_set",
        "signature": "bpy.ops.view3d.transform_gizmo_set(extend=False,type={})#",
        "description": "Set the current transform gizmo",
        "parameters": [
            "extend=False",
            "type={}"
        ],
        "parameter_descriptions": [
            "extend(boolean,(optional)) – Extend",
            "type(enum set in {'TRANSLATE','ROTATE','SCALE'},(optional)) – Type"
        ]
    },
    {
        "function_id": "bpy.ops.view3d.view_all",
        "signature": "bpy.ops.view3d.view_all(use_all_regions=False,center=False)#",
        "description": "View all objects in scene",
        "parameters": [
            "use_all_regions=False",
            "center=False"
        ],
        "parameter_descriptions": [
            "use_all_regions(boolean,(optional)) – All Regions, View selected for all regions",
            "center(boolean,(optional)) – Center"
        ]
    },
    {
        "function_id": "bpy.ops.view3d.view_axis",
        "signature": "bpy.ops.view3d.view_axis(type='LEFT',align_active=False,relative=False)#",
        "description": "Use a preset viewpoint",
        "parameters": [
            "type='LEFT'",
            "align_active=False",
            "relative=False"
        ],
        "parameter_descriptions": [
            "type(enum in['LEFT','RIGHT','BOTTOM','TOP','FRONT','BACK'],(optional)) –View, Preset viewpoint to useLEFTLeft – View from the left.RIGHTRight – View from the right.BOTTOMBottom – View from the bottom.TOPTop – View from the top.FRONTFront – View from the front.BACKBack – View from the back.",
            "LEFTLeft – View from the left.",
            "RIGHTRight – View from the right.",
            "BOTTOMBottom – View from the bottom.",
            "TOPTop – View from the top.",
            "FRONTFront – View from the front.",
            "BACKBack – View from the back.",
            "align_active(boolean,(optional)) – Align Active, Align to the active object’s axis",
            "relative(boolean,(optional)) – Relative, Rotate relative to the current orientation"
        ]
    },
    {
        "function_id": "bpy.ops.view3d.view_camera",
        "signature": "bpy.ops.view3d.view_camera()#",
        "description": "Toggle the camera view",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.view3d.view_center_camera",
        "signature": "bpy.ops.view3d.view_center_camera()#",
        "description": "Center the camera view, resizing the view to fit its bounds",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.view3d.view_center_cursor",
        "signature": "bpy.ops.view3d.view_center_cursor()#",
        "description": "Center the view so that the cursor is in the middle of the view",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.view3d.view_center_lock",
        "signature": "bpy.ops.view3d.view_center_lock()#",
        "description": "Center the view lock offset",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.view3d.view_center_pick",
        "signature": "bpy.ops.view3d.view_center_pick()#",
        "description": "Center the view to the Z-depth position under the mouse cursor",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.view3d.view_lock_clear",
        "signature": "bpy.ops.view3d.view_lock_clear()#",
        "description": "Clear all view locking",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.view3d.view_lock_to_active",
        "signature": "bpy.ops.view3d.view_lock_to_active()#",
        "description": "Lock the view to the active object/bone",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.view3d.view_orbit",
        "signature": "bpy.ops.view3d.view_orbit(angle=0.0,type='ORBITLEFT')#",
        "description": "Orbit the view",
        "parameters": [
            "angle=0.0",
            "type='ORBITLEFT'"
        ],
        "parameter_descriptions": [
            "angle(float in[-inf,inf],(optional)) – Roll",
            "type(enum in['ORBITLEFT','ORBITRIGHT','ORBITUP','ORBITDOWN'],(optional)) –Orbit, Direction of View OrbitORBITLEFTOrbit Left – Orbit the view around to the left.ORBITRIGHTOrbit Right – Orbit the view around to the right.ORBITUPOrbit Up – Orbit the view up.ORBITDOWNOrbit Down – Orbit the view down.",
            "ORBITLEFTOrbit Left – Orbit the view around to the left.",
            "ORBITRIGHTOrbit Right – Orbit the view around to the right.",
            "ORBITUPOrbit Up – Orbit the view up.",
            "ORBITDOWNOrbit Down – Orbit the view down."
        ]
    },
    {
        "function_id": "bpy.ops.view3d.view_pan",
        "signature": "bpy.ops.view3d.view_pan(type='PANLEFT')#",
        "description": "Pan the view in a given direction",
        "parameters": [
            "type='PANLEFT'"
        ],
        "parameter_descriptions": [
            "PANLEFTPan Left – Pan the view to the left.",
            "PANRIGHTPan Right – Pan the view to the right.",
            "PANUPPan Up – Pan the view up.",
            "PANDOWNPan Down – Pan the view down."
        ]
    },
    {
        "function_id": "bpy.ops.view3d.view_persportho",
        "signature": "bpy.ops.view3d.view_persportho()#",
        "description": "Switch the current view from perspective/orthographic projection",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.view3d.view_roll",
        "signature": "bpy.ops.view3d.view_roll(angle=0.0,type='ANGLE')#",
        "description": "Roll the view",
        "parameters": [
            "angle=0.0",
            "type='ANGLE'"
        ],
        "parameter_descriptions": [
            "angle(float in[-inf,inf],(optional)) – Roll",
            "type(enum in['ANGLE','LEFT','RIGHT'],(optional)) –Roll Angle Source, How roll angle is calculatedANGLERoll Angle – Roll the view using an angle value.LEFTRoll Left – Roll the view around to the left.RIGHTRoll Right – Roll the view around to the right.",
            "ANGLERoll Angle – Roll the view using an angle value.",
            "LEFTRoll Left – Roll the view around to the left.",
            "RIGHTRoll Right – Roll the view around to the right."
        ]
    },
    {
        "function_id": "bpy.ops.view3d.view_selected",
        "signature": "bpy.ops.view3d.view_selected(use_all_regions=False)#",
        "description": "Move the view to the selection center",
        "parameters": [
            "use_all_regions=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.view3d.walk",
        "signature": "bpy.ops.view3d.walk()#",
        "description": "Interactively walk around the scene",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.view3d.zoom",
        "signature": "bpy.ops.view3d.zoom(mx=0,my=0,delta=0,use_cursor_init=True)#",
        "description": "Zoom in/out in the view",
        "parameters": [
            "mx=0",
            "my=0",
            "delta=0",
            "use_cursor_init=True"
        ],
        "parameter_descriptions": [
            "mx(int in[0,inf],(optional)) – Region Position X",
            "my(int in[0,inf],(optional)) – Region Position Y",
            "delta(int in[-inf,inf],(optional)) – Delta",
            "use_cursor_init(boolean,(optional)) – Use Mouse Position, Allow the initial mouse position to be used"
        ]
    },
    {
        "function_id": "bpy.ops.view3d.zoom_border",
        "signature": "bpy.ops.view3d.zoom_border(xmin=0,xmax=0,ymin=0,ymax=0,wait_for_input=True,zoom_out=False)#",
        "description": "Zoom in the view to the nearest object contained in the border",
        "parameters": [
            "xmin=0",
            "xmax=0",
            "ymin=0",
            "ymax=0",
            "wait_for_input=True",
            "zoom_out=False"
        ],
        "parameter_descriptions": [
            "xmin(int in[-inf,inf],(optional)) – X Min",
            "xmax(int in[-inf,inf],(optional)) – X Max",
            "ymin(int in[-inf,inf],(optional)) – Y Min",
            "ymax(int in[-inf,inf],(optional)) – Y Max",
            "wait_for_input(boolean,(optional)) – Wait for Input",
            "zoom_out(boolean,(optional)) – Zoom Out"
        ]
    },
    {
        "function_id": "bpy.ops.view3d.zoom_camera_1_to_1",
        "signature": "bpy.ops.view3d.zoom_camera_1_to_1()#",
        "description": "Match the camera to 1:1 to the render output",
        "parameters": []
    },
    {
        "function_id": "bpy_extras.image_utils.load_image",
        "signature": "bpy_extras.image_utils.load_image(imagepath,dirname='',place_holder=False,recursive=False,ncase_cmp=True,convert_callback=None,verbose=False,relpath=None,check_existing=False,force_reload=False)#",
        "description": "Return an image from the file path with options to search multiple paths\nand return a placeholder if its not found.",
        "parameters": [
            "imagepath",
            "dirname=''",
            "place_holder=False",
            "recursive=False",
            "ncase_cmp=True",
            "convert_callback=None",
            "verbose=False",
            "relpath=None",
            "check_existing=False",
            "force_reload=False"
        ],
        "parameter_descriptions": [
            "filepath(string) – The image filename\nIf a path precedes it, this will be searched as well.",
            "dirname(string) – is the directory where the image may be located - any file at\nthe end will be ignored.",
            "place_holder(bool) – if True a new place holder image will be created.\nthis is useful so later you can relink the image to its original data.",
            "recursive(bool) – If True, directories will be recursively searched.\nBe careful with this if you have files in your root directory because\nit may take a long time.",
            "ncase_cmp(bool) – on non windows systems, find the correct case for the file.",
            "convert_callback(function) – a function that takes an existing path and returns\na new one. Use this when loading image formats blender may not support,\nthe CONVERT_CALLBACK can take the path for a GIF (for example),\nconvert it to a PNG and return the PNG’s path.\nFor formats blender can read, simply return the path that is given.",
            "relpath(Noneorstring) – If not None, make the file relative to this path.",
            "check_existing(bool) – If true,\nreturns already loaded image datablock if possible\n(based on file path).",
            "force_reload(bool) – If true,\nforce reloading of image (only useful whencheck_existingis also enabled)."
        ]
    },
    {
        "function_id": "bpy.ops.import_anim.bvh",
        "signature": "bpy.ops.import_anim.bvh(filepath='',filter_glob='*.bvh',target='ARMATURE',global_scale=1.0,frame_start=1,use_fps_scale=False,update_scene_fps=False,update_scene_duration=False,use_cyclic=False,rotate_mode='NATIVE',axis_forward='-Z',axis_up='Y')#",
        "description": "Load a BVH motion capture file",
        "parameters": [
            "filepath=''",
            "filter_glob='*.bvh'",
            "target='ARMATURE'",
            "global_scale=1.0",
            "frame_start=1",
            "use_fps_scale=False",
            "update_scene_fps=False",
            "update_scene_duration=False",
            "use_cyclic=False",
            "rotate_mode='NATIVE'",
            "axis_forward='-Z'",
            "axis_up='Y'"
        ],
        "parameter_descriptions": [
            "filepath(string,(optional,never None)) – File Path, Filepath used for importing the file",
            "filter_glob(string,(optional,never None)) – filter_glob",
            "target(enum in['ARMATURE','OBJECT'],(optional)) – Target, Import target type",
            "global_scale(float in[0.0001,1e+06],(optional)) – Scale, Scale the BVH by this value",
            "frame_start(int in[-inf,inf],(optional)) – Start Frame, Starting frame for the animation",
            "use_fps_scale(boolean,(optional)) – Scale FPS, Scale the framerate from the BVH to the current scenes, otherwise each BVH frame maps directly to a Blender frame",
            "update_scene_fps(boolean,(optional)) – Update Scene FPS, Set the scene framerate to that of the BVH file (note that this nullifies the ‘Scale FPS’ option, as the scale will be 1:1)",
            "update_scene_duration(boolean,(optional)) – Update Scene Duration, Extend the scene’s duration to the BVH duration (never shortens the scene)",
            "use_cyclic(boolean,(optional)) – Loop, Loop the animation playback",
            "rotate_mode(enum in['QUATERNION','NATIVE','XYZ','XZY','YXZ','YZX','ZXY','ZYX'],(optional)) –Rotation, Rotation conversionQUATERNIONQuaternion – Convert rotations to quaternions.NATIVEEuler (Native) – Use the rotation order defined in the BVH file.XYZEuler (XYZ) – Convert rotations to euler XYZ.XZYEuler (XZY) – Convert rotations to euler XZY.YXZEuler (YXZ) – Convert rotations to euler YXZ.YZXEuler (YZX) – Convert rotations to euler YZX.ZXYEuler (ZXY) – Convert rotations to euler ZXY.ZYXEuler (ZYX) – Convert rotations to euler ZYX.",
            "QUATERNIONQuaternion – Convert rotations to quaternions.",
            "NATIVEEuler (Native) – Use the rotation order defined in the BVH file.",
            "XYZEuler (XYZ) – Convert rotations to euler XYZ.",
            "XZYEuler (XZY) – Convert rotations to euler XZY.",
            "YXZEuler (YXZ) – Convert rotations to euler YXZ.",
            "YZXEuler (YZX) – Convert rotations to euler YZX.",
            "ZXYEuler (ZXY) – Convert rotations to euler ZXY.",
            "ZYXEuler (ZYX) – Convert rotations to euler ZYX.",
            "axis_forward(enum in['X','Y','Z','-X','-Y','-Z'],(optional)) – Forward",
            "axis_up(enum in['X','Y','Z','-X','-Y','-Z'],(optional)) – Up"
        ]
    },
    {
        "function_id": "bpy.ops.action.bake_keys",
        "signature": "bpy.ops.action.bake_keys()#",
        "description": "Add keyframes on every frame between the selected keyframes",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.action.clean",
        "signature": "bpy.ops.action.clean(threshold=0.001,channels=False)#",
        "description": "Simplify F-Curves by removing closely spaced keyframes",
        "parameters": [
            "threshold=0.001",
            "channels=False"
        ],
        "parameter_descriptions": [
            "threshold(float in[0,inf],(optional)) – Threshold",
            "channels(boolean,(optional)) – Channels"
        ]
    },
    {
        "function_id": "bpy.ops.action.clickselect",
        "signature": "bpy.ops.action.clickselect(wait_to_deselect_others=False,mouse_x=0,mouse_y=0,extend=False,deselect_all=False,column=False,channel=False)#",
        "description": "Select keyframes by clicking on them",
        "parameters": [
            "wait_to_deselect_others=False",
            "mouse_x=0",
            "mouse_y=0",
            "extend=False",
            "deselect_all=False",
            "column=False",
            "channel=False"
        ],
        "parameter_descriptions": [
            "wait_to_deselect_others(boolean,(optional)) – Wait to Deselect Others",
            "mouse_x(int in[-inf,inf],(optional)) – Mouse X",
            "mouse_y(int in[-inf,inf],(optional)) – Mouse Y",
            "extend(boolean,(optional)) – Extend Select, Toggle keyframe selection instead of leaving newly selected keyframes only",
            "deselect_all(boolean,(optional)) – Deselect On Nothing, Deselect all when nothing under the cursor",
            "column(boolean,(optional)) – Column Select, Select all keyframes that occur on the same frame as the one under the mouse",
            "channel(boolean,(optional)) – Only Channel, Select all the keyframes in the channel under the mouse"
        ]
    },
    {
        "function_id": "bpy.ops.action.copy",
        "signature": "bpy.ops.action.copy()#",
        "description": "Copy selected keyframes to the internal clipboard",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.action.delete",
        "signature": "bpy.ops.action.delete(confirm=True)#",
        "description": "Remove all selected keyframes",
        "parameters": [
            "confirm=True"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.action.duplicate",
        "signature": "bpy.ops.action.duplicate()#",
        "description": "Make a copy of all selected keyframes",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.action.duplicate_move",
        "signature": "bpy.ops.action.duplicate_move(ACTION_OT_duplicate=None,TRANSFORM_OT_transform=None)#",
        "description": "Make a copy of all selected keyframes and move them",
        "parameters": [
            "ACTION_OT_duplicate=None",
            "TRANSFORM_OT_transform=None"
        ],
        "parameter_descriptions": [
            "ACTION_OT_duplicate(ACTION_OT_duplicate, (optional)) – Duplicate Keyframes, Make a copy of all selected keyframes",
            "TRANSFORM_OT_transform(TRANSFORM_OT_transform, (optional)) – Transform, Transform selected items by mode type"
        ]
    },
    {
        "function_id": "bpy.ops.action.easing_type",
        "signature": "bpy.ops.action.easing_type(type='AUTO')#",
        "description": "Set easing type for the F-Curve segments starting from the selected keyframes",
        "parameters": [
            "type='AUTO'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.action.extrapolation_type",
        "signature": "bpy.ops.action.extrapolation_type(type='CONSTANT')#",
        "description": "Set extrapolation mode for selected F-Curves",
        "parameters": [
            "type='CONSTANT'"
        ],
        "parameter_descriptions": [
            "CONSTANTConstant Extrapolation – Values on endpoint keyframes are held.",
            "LINEARLinear Extrapolation – Straight-line slope of end segments are extended past the endpoint keyframes.",
            "MAKE_CYCLICMake Cyclic (F-Modifier) – Add Cycles F-Modifier if one doesn’t exist already.",
            "CLEAR_CYCLICClear Cyclic (F-Modifier) – Remove Cycles F-Modifier if not needed anymore."
        ]
    },
    {
        "function_id": "bpy.ops.action.frame_jump",
        "signature": "bpy.ops.action.frame_jump()#",
        "description": "Set the current frame to the average frame value of selected keyframes",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.action.handle_type",
        "signature": "bpy.ops.action.handle_type(type='FREE')#",
        "description": "Set type of handle for selected keyframes",
        "parameters": [
            "type='FREE'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.action.interpolation_type",
        "signature": "bpy.ops.action.interpolation_type(type='CONSTANT')#",
        "description": "Set interpolation mode for the F-Curve segments starting from the selected keyframes",
        "parameters": [
            "type='CONSTANT'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.action.keyframe_insert",
        "signature": "bpy.ops.action.keyframe_insert(type='ALL')#",
        "description": "Insert keyframes for the specified channels",
        "parameters": [
            "type='ALL'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.action.keyframe_type",
        "signature": "bpy.ops.action.keyframe_type(type='KEYFRAME')#",
        "description": "Set type of keyframe for the selected keyframes",
        "parameters": [
            "type='KEYFRAME'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.action.layer_next",
        "signature": "bpy.ops.action.layer_next()#",
        "description": "Switch to editing action in animation layer above the current action in the NLA Stack",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.action.layer_prev",
        "signature": "bpy.ops.action.layer_prev()#",
        "description": "Switch to editing action in animation layer below the current action in the NLA Stack",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.action.markers_make_local",
        "signature": "bpy.ops.action.markers_make_local()#",
        "description": "Move selected scene markers to the active Action as local ‘pose’ markers",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.action.mirror",
        "signature": "bpy.ops.action.mirror(type='CFRA')#",
        "description": "Flip selected keyframes over the selected mirror line",
        "parameters": [
            "type='CFRA'"
        ],
        "parameter_descriptions": [
            "CFRABy Times Over Current Frame – Flip times of selected keyframes using the current frame as the mirror line.",
            "XAXISBy Values Over Zero Value – Flip values of selected keyframes (i.e. negative values become positive, and vice versa).",
            "MARKERBy Times Over First Selected Marker – Flip times of selected keyframes using the first selected marker as the reference point."
        ]
    },
    {
        "function_id": "bpy.ops.action.new",
        "signature": "bpy.ops.action.new()#",
        "description": "Create new action",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.action.paste",
        "signature": "bpy.ops.action.paste(offset='START',merge='MIX',flipped=False)#",
        "description": "Paste keyframes from the internal clipboard for the selected channels, starting on the current frame",
        "parameters": [
            "offset='START'",
            "merge='MIX'",
            "flipped=False"
        ],
        "parameter_descriptions": [
            "offset(enum inKeyframe Paste Offset Items, (optional)) – Offset, Paste time offset of keys",
            "merge(enum inKeyframe Paste Merge Items, (optional)) – Type, Method of merging pasted keys and existing",
            "flipped(boolean,(optional)) – Flipped, Paste keyframes from mirrored bones if they exist"
        ]
    },
    {
        "function_id": "bpy.ops.action.previewrange_set",
        "signature": "bpy.ops.action.previewrange_set()#",
        "description": "Set Preview Range based on extents of selected Keyframes",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.action.push_down",
        "signature": "bpy.ops.action.push_down()#",
        "description": "Push action down on to the NLA stack as a new strip",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.action.select_all",
        "signature": "bpy.ops.action.select_all(action='TOGGLE')#",
        "description": "Toggle selection of all keyframes",
        "parameters": [
            "action='TOGGLE'"
        ],
        "parameter_descriptions": [
            "TOGGLEToggle – Toggle selection for all elements.",
            "SELECTSelect – Select all elements.",
            "DESELECTDeselect – Deselect all elements.",
            "INVERTInvert – Invert selection of all elements."
        ]
    },
    {
        "function_id": "bpy.ops.action.select_box",
        "signature": "bpy.ops.action.select_box(axis_range=False,xmin=0,xmax=0,ymin=0,ymax=0,wait_for_input=True,mode='SET',tweak=False)#",
        "description": "Select all keyframes within the specified region",
        "parameters": [
            "axis_range=False",
            "xmin=0",
            "xmax=0",
            "ymin=0",
            "ymax=0",
            "wait_for_input=True",
            "mode='SET'",
            "tweak=False"
        ],
        "parameter_descriptions": [
            "axis_range(boolean,(optional)) – Axis Range",
            "xmin(int in[-inf,inf],(optional)) – X Min",
            "xmax(int in[-inf,inf],(optional)) – X Max",
            "ymin(int in[-inf,inf],(optional)) – Y Min",
            "ymax(int in[-inf,inf],(optional)) – Y Max",
            "wait_for_input(boolean,(optional)) – Wait for Input",
            "mode(enum in['SET','ADD','SUB'],(optional)) –ModeSETSet – Set a new selection.ADDExtend – Extend existing selection.SUBSubtract – Subtract existing selection.",
            "SETSet – Set a new selection.",
            "ADDExtend – Extend existing selection.",
            "SUBSubtract – Subtract existing selection.",
            "tweak(boolean,(optional)) – Tweak, Operator has been activated using a click-drag event"
        ]
    },
    {
        "function_id": "bpy.ops.action.select_circle",
        "signature": "bpy.ops.action.select_circle(x=0,y=0,radius=25,wait_for_input=True,mode='SET')#",
        "description": "Select keyframe points using circle selection",
        "parameters": [
            "x=0",
            "y=0",
            "radius=25",
            "wait_for_input=True",
            "mode='SET'"
        ],
        "parameter_descriptions": [
            "x(int in[-inf,inf],(optional)) – X",
            "y(int in[-inf,inf],(optional)) – Y",
            "radius(int in[1,inf],(optional)) – Radius",
            "wait_for_input(boolean,(optional)) – Wait for Input",
            "mode(enum in['SET','ADD','SUB'],(optional)) –ModeSETSet – Set a new selection.ADDExtend – Extend existing selection.SUBSubtract – Subtract existing selection.",
            "SETSet – Set a new selection.",
            "ADDExtend – Extend existing selection.",
            "SUBSubtract – Subtract existing selection."
        ]
    },
    {
        "function_id": "bpy.ops.action.select_column",
        "signature": "bpy.ops.action.select_column(mode='KEYS')#",
        "description": "Select all keyframes on the specified frame(s)",
        "parameters": [
            "mode='KEYS'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.action.select_lasso",
        "signature": "bpy.ops.action.select_lasso(path=None,mode='SET')#",
        "description": "Select keyframe points using lasso selection",
        "parameters": [
            "path=None",
            "mode='SET'"
        ],
        "parameter_descriptions": [
            "path(bpy_prop_collectionofOperatorMousePath, (optional)) – Path",
            "mode(enum in['SET','ADD','SUB'],(optional)) –ModeSETSet – Set a new selection.ADDExtend – Extend existing selection.SUBSubtract – Subtract existing selection.",
            "SETSet – Set a new selection.",
            "ADDExtend – Extend existing selection.",
            "SUBSubtract – Subtract existing selection."
        ]
    },
    {
        "function_id": "bpy.ops.action.select_leftright",
        "signature": "bpy.ops.action.select_leftright(mode='CHECK',extend=False)#",
        "description": "Select keyframes to the left or the right of the current frame",
        "parameters": [
            "mode='CHECK'",
            "extend=False"
        ],
        "parameter_descriptions": [
            "mode(enum in['CHECK','LEFT','RIGHT'],(optional)) – Mode",
            "extend(boolean,(optional)) – Extend Select"
        ]
    },
    {
        "function_id": "bpy.ops.action.select_less",
        "signature": "bpy.ops.action.select_less()#",
        "description": "Deselect keyframes on ends of selection islands",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.action.select_linked",
        "signature": "bpy.ops.action.select_linked()#",
        "description": "Select keyframes occurring in the same F-Curves as selected ones",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.action.select_more",
        "signature": "bpy.ops.action.select_more()#",
        "description": "Select keyframes beside already selected ones",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.action.snap",
        "signature": "bpy.ops.action.snap(type='CFRA')#",
        "description": "Snap selected keyframes to the times specified",
        "parameters": [
            "type='CFRA'"
        ],
        "parameter_descriptions": [
            "CFRASelection to Current Frame – Snap selected keyframes to the current frame.",
            "NEAREST_FRAMESelection to Nearest Frame – Snap selected keyframes to the nearest (whole) frame (use to fix accidental subframe offsets).",
            "NEAREST_SECONDSelection to Nearest Second – Snap selected keyframes to the nearest second.",
            "NEAREST_MARKERSelection to Nearest Marker – Snap selected keyframes to the nearest marker."
        ]
    },
    {
        "function_id": "bpy.ops.action.stash",
        "signature": "bpy.ops.action.stash(create_new=True)#",
        "description": "Store this action in the NLA stack as a non-contributing strip for later use",
        "parameters": [
            "create_new=True"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.action.stash_and_create",
        "signature": "bpy.ops.action.stash_and_create()#",
        "description": "Store this action in the NLA stack as a non-contributing strip for later use, and create a new action",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.action.unlink",
        "signature": "bpy.ops.action.unlink(force_delete=False)#",
        "description": "Unlink this action from the active action slot (and/or exit Tweak Mode)",
        "parameters": [
            "force_delete=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.action.view_all",
        "signature": "bpy.ops.action.view_all()#",
        "description": "Reset viewable area to show full keyframe range",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.action.view_frame",
        "signature": "bpy.ops.action.view_frame()#",
        "description": "Move the view to the current frame",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.action.view_selected",
        "signature": "bpy.ops.action.view_selected()#",
        "description": "Reset viewable area to show selected keyframes range",
        "parameters": []
    },
    {
        "function_id": "bpy_extras.anim_utils.bake_action",
        "signature": "bpy_extras.anim_utils.bake_action(obj,*,action,frames,bake_options:bpy_extras.anim_utils.BakeOptions)#",
        "description": "obj(bpy.types.Object) – Object to bake.",
        "parameters": [
            "obj",
            "*",
            "action",
            "frames",
            "bake_options:bpy_extras.anim_utils.BakeOptions"
        ],
        "parameter_descriptions": [
            "obj(bpy.types.Object) – Object to bake.",
            "action(bpy.types.Actionor None) – An action to bake the data into, or None for a new action\nto be created.",
            "frames(iterableofint) – Frames to bake."
        ]
    },
    {
        "function_id": "bpy_extras.anim_utils.bake_action_objects",
        "signature": "bpy_extras.anim_utils.bake_action_objects(object_action_pairs,*,frames,bake_options:bpy_extras.anim_utils.BakeOptions)#",
        "description": "A version ofbake_action_objects_iter()that takes frames and returns the output.",
        "parameters": [
            "object_action_pairs",
            "*",
            "frames",
            "bake_options:bpy_extras.anim_utils.BakeOptions"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy_extras.anim_utils.bake_action_iter",
        "signature": "bpy_extras.anim_utils.bake_action_iter(obj,*,action,bake_options:bpy_extras.anim_utils.BakeOptions)#",
        "description": "An coroutine that bakes action for a single object.",
        "parameters": [
            "obj",
            "*",
            "action",
            "bake_options:bpy_extras.anim_utils.BakeOptions"
        ],
        "parameter_descriptions": [
            "obj(bpy.types.Object) – Object to bake.",
            "action(bpy.types.Actionor None) – An action to bake the data into, or None for a new action\nto be created.",
            "bake_options– Boolean options of what to include into the action bake."
        ]
    },
    {
        "function_id": "bpy_extras.anim_utils.bake_action_objects_iter",
        "signature": "bpy_extras.anim_utils.bake_action_objects_iter(object_action_pairs,bake_options:bpy_extras.anim_utils.BakeOptions)#",
        "description": "An coroutine that bakes actions for multiple objects.",
        "parameters": [
            "object_action_pairs",
            "bake_options:bpy_extras.anim_utils.BakeOptions"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.lattice.flip",
        "signature": "bpy.ops.lattice.flip(axis='U')#",
        "description": "Mirror all control points without inverting the lattice deform",
        "parameters": [
            "axis='U'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.lattice.make_regular",
        "signature": "bpy.ops.lattice.make_regular()#",
        "description": "Set UVW control points a uniform distance apart",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.lattice.select_all",
        "signature": "bpy.ops.lattice.select_all(action='TOGGLE')#",
        "description": "Change selection of all UVW control points",
        "parameters": [
            "action='TOGGLE'"
        ],
        "parameter_descriptions": [
            "TOGGLEToggle – Toggle selection for all elements.",
            "SELECTSelect – Select all elements.",
            "DESELECTDeselect – Deselect all elements.",
            "INVERTInvert – Invert selection of all elements."
        ]
    },
    {
        "function_id": "bpy.ops.lattice.select_less",
        "signature": "bpy.ops.lattice.select_less()#",
        "description": "Deselect vertices at the boundary of each selection region",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.lattice.select_mirror",
        "signature": "bpy.ops.lattice.select_mirror(axis={'X'},extend=False)#",
        "description": "Select mirrored lattice points",
        "parameters": [
            "axis={'X'}",
            "extend=False"
        ],
        "parameter_descriptions": [
            "axis(enum set inAxis Flag Xyz Items, (optional)) – Axis",
            "extend(boolean,(optional)) – Extend, Extend the selection"
        ]
    },
    {
        "function_id": "bpy.ops.lattice.select_more",
        "signature": "bpy.ops.lattice.select_more()#",
        "description": "Select vertex directly linked to already selected ones",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.lattice.select_random",
        "signature": "bpy.ops.lattice.select_random(ratio=0.5,seed=0,action='SELECT')#",
        "description": "Randomly select UVW control points",
        "parameters": [
            "ratio=0.5",
            "seed=0",
            "action='SELECT'"
        ],
        "parameter_descriptions": [
            "ratio(float in[0,1],(optional)) – Ratio, Portion of items to select randomly",
            "seed(int in[0,inf],(optional)) – Random Seed, Seed for the random number generator",
            "action(enum in['SELECT','DESELECT'],(optional)) –Action, Selection action to executeSELECTSelect – Select all elements.DESELECTDeselect – Deselect all elements.",
            "SELECTSelect – Select all elements.",
            "DESELECTDeselect – Deselect all elements."
        ]
    },
    {
        "function_id": "bpy.ops.lattice.select_ungrouped",
        "signature": "bpy.ops.lattice.select_ungrouped(extend=False)#",
        "description": "Select vertices without a group",
        "parameters": [
            "extend=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.ptcache.add",
        "signature": "bpy.ops.ptcache.add()#",
        "description": "Add new cache",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.ptcache.bake",
        "signature": "bpy.ops.ptcache.bake(bake=False)#",
        "description": "Bake physics",
        "parameters": [
            "bake=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.ptcache.bake_all",
        "signature": "bpy.ops.ptcache.bake_all(bake=True)#",
        "description": "Bake all physics",
        "parameters": [
            "bake=True"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.ptcache.bake_from_cache",
        "signature": "bpy.ops.ptcache.bake_from_cache()#",
        "description": "Bake from cache",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.ptcache.free_bake",
        "signature": "bpy.ops.ptcache.free_bake()#",
        "description": "Delete physics bake",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.ptcache.free_bake_all",
        "signature": "bpy.ops.ptcache.free_bake_all()#",
        "description": "Delete all baked caches of all objects in the current scene",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.ptcache.remove",
        "signature": "bpy.ops.ptcache.remove()#",
        "description": "Delete current cache",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.import_curve.svg",
        "signature": "bpy.ops.import_curve.svg(filepath='',filter_glob='*.svg')#",
        "description": "Load a SVG file",
        "parameters": [
            "filepath=''",
            "filter_glob='*.svg'"
        ],
        "parameter_descriptions": [
            "filepath(string,(optional,never None)) – File Path, Filepath used for importing the file",
            "filter_glob(string,(optional,never None)) – filter_glob"
        ]
    },
    {
        "function_id": "bpy.ops.brush.add",
        "signature": "bpy.ops.brush.add()#",
        "description": "Add brush by mode type",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.brush.add_gpencil",
        "signature": "bpy.ops.brush.add_gpencil()#",
        "description": "Add brush for Grease Pencil",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.brush.curve_preset",
        "signature": "bpy.ops.brush.curve_preset(shape='SMOOTH')#",
        "description": "Set brush shape",
        "parameters": [
            "shape='SMOOTH'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.brush.reset",
        "signature": "bpy.ops.brush.reset()#",
        "description": "Return brush to defaults based on current tool",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.brush.scale_size",
        "signature": "bpy.ops.brush.scale_size(scalar=1.0)#",
        "description": "Change brush size by a scalar",
        "parameters": [
            "scalar=1.0"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.brush.sculpt_curves_falloff_preset",
        "signature": "bpy.ops.brush.sculpt_curves_falloff_preset(shape='SMOOTH')#",
        "description": "Set Curve Falloff Preset",
        "parameters": [
            "shape='SMOOTH'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.brush.stencil_control",
        "signature": "bpy.ops.brush.stencil_control(mode='TRANSLATION',texmode='PRIMARY')#",
        "description": "Control the stencil brush",
        "parameters": [
            "mode='TRANSLATION'",
            "texmode='PRIMARY'"
        ],
        "parameter_descriptions": [
            "mode(enum in['TRANSLATION','SCALE','ROTATION'],(optional)) – Tool",
            "texmode(enum in['PRIMARY','SECONDARY'],(optional)) – Tool"
        ]
    },
    {
        "function_id": "bpy.ops.brush.stencil_fit_image_aspect",
        "signature": "bpy.ops.brush.stencil_fit_image_aspect(use_repeat=True,use_scale=True,mask=False)#",
        "description": "When using an image texture, adjust the stencil size to fit the image aspect ratio",
        "parameters": [
            "use_repeat=True",
            "use_scale=True",
            "mask=False"
        ],
        "parameter_descriptions": [
            "use_repeat(boolean,(optional)) – Use Repeat, Use repeat mapping values",
            "use_scale(boolean,(optional)) – Use Scale, Use texture scale values",
            "mask(boolean,(optional)) – Modify Mask Stencil, Modify either the primary or mask stencil"
        ]
    },
    {
        "function_id": "bpy.ops.brush.stencil_reset_transform",
        "signature": "bpy.ops.brush.stencil_reset_transform(mask=False)#",
        "description": "Reset the stencil transformation to the default",
        "parameters": [
            "mask=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.curves.add_bezier",
        "signature": "bpy.ops.curves.add_bezier(radius=1.0,enter_editmode=False,align='WORLD',location=(0.0,0.0,0.0),rotation=(0.0,0.0,0.0),scale=(0.0,0.0,0.0))#",
        "description": "Add new bezier curve",
        "parameters": [
            "radius=1.0",
            "enter_editmode=False",
            "align='WORLD'",
            "location=(0.0,0.0,0.0)",
            "rotation=(0.0,0.0,0.0)",
            "scale=(0.0,0.0,0.0)"
        ],
        "parameter_descriptions": [
            "radius(float in[0,inf],(optional)) – Radius",
            "enter_editmode(boolean,(optional)) – Enter Edit Mode, Enter edit mode when adding this object",
            "align(enum in['WORLD','VIEW','CURSOR'],(optional)) –Align, The alignment of the new objectWORLDWorld – Align the new object to the world.VIEWView – Align the new object to the view.CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "WORLDWorld – Align the new object to the world.",
            "VIEWView – Align the new object to the view.",
            "CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "location(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Location, Location for the newly added object",
            "rotation(mathutils.Eulerrotation of 3 items in [-inf, inf], (optional)) – Rotation, Rotation for the newly added object",
            "scale(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Scale, Scale for the newly added object"
        ]
    },
    {
        "function_id": "bpy.ops.curves.add_circle",
        "signature": "bpy.ops.curves.add_circle(radius=1.0,enter_editmode=False,align='WORLD',location=(0.0,0.0,0.0),rotation=(0.0,0.0,0.0),scale=(0.0,0.0,0.0))#",
        "description": "Add new circle curve",
        "parameters": [
            "radius=1.0",
            "enter_editmode=False",
            "align='WORLD'",
            "location=(0.0,0.0,0.0)",
            "rotation=(0.0,0.0,0.0)",
            "scale=(0.0,0.0,0.0)"
        ],
        "parameter_descriptions": [
            "radius(float in[0,inf],(optional)) – Radius",
            "enter_editmode(boolean,(optional)) – Enter Edit Mode, Enter edit mode when adding this object",
            "align(enum in['WORLD','VIEW','CURSOR'],(optional)) –Align, The alignment of the new objectWORLDWorld – Align the new object to the world.VIEWView – Align the new object to the view.CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "WORLDWorld – Align the new object to the world.",
            "VIEWView – Align the new object to the view.",
            "CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "location(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Location, Location for the newly added object",
            "rotation(mathutils.Eulerrotation of 3 items in [-inf, inf], (optional)) – Rotation, Rotation for the newly added object",
            "scale(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Scale, Scale for the newly added object"
        ]
    },
    {
        "function_id": "bpy.ops.curves.attribute_set",
        "signature": "bpy.ops.curves.attribute_set(value_float=0.0,value_float_vector_2d=(0.0,0.0),value_float_vector_3d=(0.0,0.0,0.0),value_int=0,value_int_vector_2d=(0,0),value_color=(1.0,1.0,1.0,1.0),value_bool=False)#",
        "description": "Set values of the active attribute for selected elements",
        "parameters": [
            "value_float=0.0",
            "value_float_vector_2d=(0.0,0.0)",
            "value_float_vector_3d=(0.0,0.0,0.0)",
            "value_int=0",
            "value_int_vector_2d=(0,0)",
            "value_color=(1.0,1.0,1.0,1.0)",
            "value_bool=False"
        ],
        "parameter_descriptions": [
            "value_float(float in[-inf,inf],(optional)) – Value",
            "value_float_vector_2d(float arrayof2 items in[-inf,inf],(optional)) – Value",
            "value_float_vector_3d(float arrayof3 items in[-inf,inf],(optional)) – Value",
            "value_int(int in[-inf,inf],(optional)) – Value",
            "value_int_vector_2d(int arrayof2 items in[-inf,inf],(optional)) – Value",
            "value_color(float arrayof4 items in[-inf,inf],(optional)) – Value",
            "value_bool(boolean,(optional)) – Value"
        ]
    },
    {
        "function_id": "bpy.ops.curves.convert_from_particle_system",
        "signature": "bpy.ops.curves.convert_from_particle_system()#",
        "description": "Add a new curves object based on the current state of the particle system",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.curves.convert_to_particle_system",
        "signature": "bpy.ops.curves.convert_to_particle_system()#",
        "description": "Add a new or update an existing hair particle system on the surface object",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.curves.curve_type_set",
        "signature": "bpy.ops.curves.curve_type_set(type='POLY',use_handles=False)#",
        "description": "Set type of selected curves",
        "parameters": [
            "type='POLY'",
            "use_handles=False"
        ],
        "parameter_descriptions": [
            "type(enum inCurves Type Items, (optional)) – Type, Curve type",
            "use_handles(boolean,(optional)) – Handles, Take handle information into account in the conversion"
        ]
    },
    {
        "function_id": "bpy.ops.curves.cyclic_toggle",
        "signature": "bpy.ops.curves.cyclic_toggle()#",
        "description": "Make active curve closed/opened loop",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.curves.delete",
        "signature": "bpy.ops.curves.delete()#",
        "description": "Remove selected control points or curves",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.curves.draw",
        "signature": "bpy.ops.curves.draw(error_threshold=0.0,fit_method='REFIT',corner_angle=1.22173,use_cyclic=True,stroke=None,wait_for_input=True,is_curve_2d=False,bezier_as_nurbs=False)#",
        "description": "Draw a freehand curve",
        "parameters": [
            "error_threshold=0.0",
            "fit_method='REFIT'",
            "corner_angle=1.22173",
            "use_cyclic=True",
            "stroke=None",
            "wait_for_input=True",
            "is_curve_2d=False",
            "bezier_as_nurbs=False"
        ],
        "parameter_descriptions": [
            "error_threshold(float in[0,10],(optional)) – Error, Error distance threshold (in object units)",
            "fit_method(enum inCurve Fit Method Items, (optional)) – Fit Method",
            "corner_angle(float in[0,3.14159],(optional)) – Corner Angle",
            "use_cyclic(boolean,(optional)) – Cyclic",
            "stroke(bpy_prop_collectionofOperatorStrokeElement, (optional)) – Stroke",
            "wait_for_input(boolean,(optional)) – Wait for Input",
            "is_curve_2d(boolean,(optional)) – Curve 2D",
            "bezier_as_nurbs(boolean,(optional)) – As NURBS"
        ]
    },
    {
        "function_id": "bpy.ops.curves.duplicate",
        "signature": "bpy.ops.curves.duplicate()#",
        "description": "Copy selected points or curves",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.curves.duplicate_move",
        "signature": "bpy.ops.curves.duplicate_move(CURVES_OT_duplicate=None,TRANSFORM_OT_translate=None)#",
        "description": "Make copies of selected elements and move them",
        "parameters": [
            "CURVES_OT_duplicate=None",
            "TRANSFORM_OT_translate=None"
        ],
        "parameter_descriptions": [
            "CURVES_OT_duplicate(CURVES_OT_duplicate, (optional)) – Duplicate, Copy selected points or curves",
            "TRANSFORM_OT_translate(TRANSFORM_OT_translate, (optional)) – Move, Move selected items"
        ]
    },
    {
        "function_id": "bpy.ops.curves.extrude",
        "signature": "bpy.ops.curves.extrude()#",
        "description": "Extrude selected control point(s)",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.curves.extrude_move",
        "signature": "bpy.ops.curves.extrude_move(CURVES_OT_extrude=None,TRANSFORM_OT_translate=None)#",
        "description": "Extrude curve and move result",
        "parameters": [
            "CURVES_OT_extrude=None",
            "TRANSFORM_OT_translate=None"
        ],
        "parameter_descriptions": [
            "CURVES_OT_extrude(CURVES_OT_extrude, (optional)) – Extrude, Extrude selected control point(s)",
            "TRANSFORM_OT_translate(TRANSFORM_OT_translate, (optional)) – Move, Move selected items"
        ]
    },
    {
        "function_id": "bpy.ops.curves.handle_type_set",
        "signature": "bpy.ops.curves.handle_type_set(type='AUTO')#",
        "description": "Set the handle type for bezier curves",
        "parameters": [
            "type='AUTO'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.curves.sculptmode_toggle",
        "signature": "bpy.ops.curves.sculptmode_toggle()#",
        "description": "Enter/Exit sculpt mode for curves",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.curves.select_all",
        "signature": "bpy.ops.curves.select_all(action='TOGGLE')#",
        "description": "(De)select all control points",
        "parameters": [
            "action='TOGGLE'"
        ],
        "parameter_descriptions": [
            "TOGGLEToggle – Toggle selection for all elements.",
            "SELECTSelect – Select all elements.",
            "DESELECTDeselect – Deselect all elements.",
            "INVERTInvert – Invert selection of all elements."
        ]
    },
    {
        "function_id": "bpy.ops.curves.select_ends",
        "signature": "bpy.ops.curves.select_ends(amount_start=0,amount_end=1)#",
        "description": "Select end points of curves",
        "parameters": [
            "amount_start=0",
            "amount_end=1"
        ],
        "parameter_descriptions": [
            "amount_start(int in[0,inf],(optional)) – Amount Front, Number of points to select from the front",
            "amount_end(int in[0,inf],(optional)) – Amount Back, Number of points to select from the back"
        ]
    },
    {
        "function_id": "bpy.ops.curves.select_less",
        "signature": "bpy.ops.curves.select_less()#",
        "description": "Shrink the selection by one point",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.curves.select_linked",
        "signature": "bpy.ops.curves.select_linked()#",
        "description": "Select all points in curves with any point selection",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.curves.select_more",
        "signature": "bpy.ops.curves.select_more()#",
        "description": "Grow the selection by one point",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.curves.select_random",
        "signature": "bpy.ops.curves.select_random(seed=0,probability=0.5)#",
        "description": "Randomizes existing selection or create new random selection",
        "parameters": [
            "seed=0",
            "probability=0.5"
        ],
        "parameter_descriptions": [
            "seed(int in[-inf,inf],(optional)) – Seed, Source of randomness",
            "probability(float in[0,1],(optional)) – Probability, Chance of every point or curve being included in the selection"
        ]
    },
    {
        "function_id": "bpy.ops.curves.set_selection_domain",
        "signature": "bpy.ops.curves.set_selection_domain(domain='POINT')#",
        "description": "Change the mode used for selection masking in curves sculpt mode",
        "parameters": [
            "domain='POINT'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.curves.snap_curves_to_surface",
        "signature": "bpy.ops.curves.snap_curves_to_surface(attach_mode='NEAREST')#",
        "description": "Move curves so that the first point is exactly on the surface mesh",
        "parameters": [
            "attach_mode='NEAREST'"
        ],
        "parameter_descriptions": [
            "NEARESTNearest – Find the closest point on the surface for the root point of every curve and move the root there.",
            "DEFORMDeform – Re-attach curves to a deformed surface using the existing attachment information. This only works when the topology of the surface mesh has not changed."
        ]
    },
    {
        "function_id": "bpy.ops.curves.subdivide",
        "signature": "bpy.ops.curves.subdivide(number_cuts=1)#",
        "description": "Subdivide selected curve segments",
        "parameters": [
            "number_cuts=1"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.curves.surface_set",
        "signature": "bpy.ops.curves.surface_set()#",
        "description": "Use the active object as surface for selected curves objects and set it as the parent",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.curves.switch_direction",
        "signature": "bpy.ops.curves.switch_direction()#",
        "description": "Reverse the direction of the selected curves",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.curves.tilt_clear",
        "signature": "bpy.ops.curves.tilt_clear()#",
        "description": "Clear the tilt of selected control points",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.paint.add_simple_uvs",
        "signature": "bpy.ops.paint.add_simple_uvs()#",
        "description": "Add cube map UVs on mesh",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.paint.add_texture_paint_slot",
        "signature": "bpy.ops.paint.add_texture_paint_slot(type='BASE_COLOR',slot_type='IMAGE',name='Untitled',color=(0.0,0.0,0.0,1.0),width=1024,height=1024,alpha=True,generated_type='BLANK',float=False,domain='POINT',data_type='FLOAT_COLOR')#",
        "description": "Add a paint slot",
        "parameters": [
            "type='BASE_COLOR'",
            "slot_type='IMAGE'",
            "name='Untitled'",
            "color=(0.0,0.0,0.0,1.0)",
            "width=1024",
            "height=1024",
            "alpha=True",
            "generated_type='BLANK'",
            "float=False",
            "domain='POINT'",
            "data_type='FLOAT_COLOR'"
        ],
        "parameter_descriptions": [
            "type(enum in['BASE_COLOR','SPECULAR','ROUGHNESS','METALLIC','NORMAL','BUMP','DISPLACEMENT'],(optional)) – Material Layer Type, Material layer type of new paint slot",
            "slot_type(enum in['IMAGE','COLOR_ATTRIBUTE'],(optional)) – Slot Type, Type of new paint slot",
            "name(string,(optional,never None)) – Name, Name for new paint slot source",
            "color(float arrayof4 items in[0,inf],(optional)) – Color, Default fill color",
            "width(int in[1,inf],(optional)) – Width, Image width",
            "height(int in[1,inf],(optional)) – Height, Image height",
            "alpha(boolean,(optional)) – Alpha, Create an image with an alpha channel",
            "generated_type(enum inImage Generated Type Items, (optional)) – Generated Type, Fill the image with a grid for UV map testing",
            "float(boolean,(optional)) – 32-bit Float, Create image with 32-bit floating-point bit depth",
            "domain(enum inColor Attribute Domain Items, (optional)) – Domain, Type of element that attribute is stored on",
            "data_type(enum inColor Attribute Type Items, (optional)) – Data Type, Type of data stored in attribute"
        ]
    },
    {
        "function_id": "bpy.ops.paint.brush_colors_flip",
        "signature": "bpy.ops.paint.brush_colors_flip()#",
        "description": "Swap primary and secondary brush colors",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.paint.brush_select",
        "signature": "bpy.ops.paint.brush_select(sculpt_tool='DRAW',vertex_tool='DRAW',weight_tool='DRAW',image_tool='DRAW',gpencil_tool='DRAW',gpencil_vertex_tool='DRAW',gpencil_sculpt_tool='SMOOTH',gpencil_weight_tool='WEIGHT',curves_sculpt_tool='COMB',toggle=False,create_missing=False)#",
        "description": "Select a paint mode’s brush by tool type",
        "parameters": [
            "sculpt_tool='DRAW'",
            "vertex_tool='DRAW'",
            "weight_tool='DRAW'",
            "image_tool='DRAW'",
            "gpencil_tool='DRAW'",
            "gpencil_vertex_tool='DRAW'",
            "gpencil_sculpt_tool='SMOOTH'",
            "gpencil_weight_tool='WEIGHT'",
            "curves_sculpt_tool='COMB'",
            "toggle=False",
            "create_missing=False"
        ],
        "parameter_descriptions": [
            "sculpt_tool(enum inBrush Sculpt Tool Items, (optional)) – sculpt_tool",
            "vertex_tool(enum inBrush Vertex Tool Items, (optional)) – vertex_tool",
            "weight_tool(enum inBrush Weight Tool Items, (optional)) – weight_tool",
            "image_tool(enum inBrush Image Tool Items, (optional)) – image_tool",
            "gpencil_tool(enum inBrush Gpencil Types Items, (optional)) – gpencil_tool",
            "gpencil_vertex_tool(enum inBrush Gpencil Vertex Types Items, (optional)) – gpencil_vertex_tool",
            "gpencil_sculpt_tool(enum inBrush Gpencil Sculpt Types Items, (optional)) – gpencil_sculpt_tool",
            "gpencil_weight_tool(enum inBrush Gpencil Weight Types Items, (optional)) – gpencil_weight_tool",
            "curves_sculpt_tool(enum inBrush Curves Sculpt Tool Items, (optional)) – curves_sculpt_tool",
            "toggle(boolean,(optional)) – Toggle, Toggle between two brushes rather than cycling",
            "create_missing(boolean,(optional)) – Create Missing, If the requested brush type does not exist, create a new brush"
        ]
    },
    {
        "function_id": "bpy.ops.paint.face_select_all",
        "signature": "bpy.ops.paint.face_select_all(action='TOGGLE')#",
        "description": "Change selection for all faces",
        "parameters": [
            "action='TOGGLE'"
        ],
        "parameter_descriptions": [
            "TOGGLEToggle – Toggle selection for all elements.",
            "SELECTSelect – Select all elements.",
            "DESELECTDeselect – Deselect all elements.",
            "INVERTInvert – Invert selection of all elements."
        ]
    },
    {
        "function_id": "bpy.ops.paint.face_select_hide",
        "signature": "bpy.ops.paint.face_select_hide(unselected=False)#",
        "description": "Hide selected faces",
        "parameters": [
            "unselected=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.paint.face_select_less",
        "signature": "bpy.ops.paint.face_select_less(face_step=True)#",
        "description": "Deselect Faces connected to existing selection",
        "parameters": [
            "face_step=True"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.paint.face_select_linked",
        "signature": "bpy.ops.paint.face_select_linked()#",
        "description": "Select linked faces",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.paint.face_select_linked_pick",
        "signature": "bpy.ops.paint.face_select_linked_pick(deselect=False)#",
        "description": "Select linked faces under the cursor",
        "parameters": [
            "deselect=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.paint.face_select_loop",
        "signature": "bpy.ops.paint.face_select_loop(select=True,extend=False)#",
        "description": "Select face loop under the cursor",
        "parameters": [
            "select=True",
            "extend=False"
        ],
        "parameter_descriptions": [
            "select(boolean,(optional)) – Select, If false, faces will be deselected",
            "extend(boolean,(optional)) – Extend, Extend the selection"
        ]
    },
    {
        "function_id": "bpy.ops.paint.face_select_more",
        "signature": "bpy.ops.paint.face_select_more(face_step=True)#",
        "description": "Select Faces connected to existing selection",
        "parameters": [
            "face_step=True"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.paint.face_vert_reveal",
        "signature": "bpy.ops.paint.face_vert_reveal(select=True)#",
        "description": "Reveal hidden faces and vertices",
        "parameters": [
            "select=True"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.paint.grab_clone",
        "signature": "bpy.ops.paint.grab_clone(delta=(0.0,0.0))#",
        "description": "Move the clone source image",
        "parameters": [
            "delta=(0.0,0.0)"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.paint.hide_show",
        "signature": "bpy.ops.paint.hide_show(xmin=0,xmax=0,ymin=0,ymax=0,wait_for_input=True,action='HIDE',area='Inside',use_front_faces_only=False)#",
        "description": "Hide/show some vertices",
        "parameters": [
            "xmin=0",
            "xmax=0",
            "ymin=0",
            "ymax=0",
            "wait_for_input=True",
            "action='HIDE'",
            "area='Inside'",
            "use_front_faces_only=False"
        ],
        "parameter_descriptions": [
            "xmin(int in[-inf,inf],(optional)) – X Min",
            "xmax(int in[-inf,inf],(optional)) – X Max",
            "ymin(int in[-inf,inf],(optional)) – Y Min",
            "ymax(int in[-inf,inf],(optional)) – Y Max",
            "wait_for_input(boolean,(optional)) – Wait for Input",
            "action(enum in['HIDE','SHOW'],(optional)) –Visibility Action, Whether to hide or show verticesHIDEHide – Hide vertices.SHOWShow – Show vertices.",
            "HIDEHide – Hide vertices.",
            "SHOWShow – Show vertices.",
            "area(enum in['OUTSIDE','Inside'],(optional)) –Visibility Area, Which vertices to hide or showOUTSIDEOutside – Hide or show vertices outside the selection.InsideInside – Hide or show vertices inside the selection.",
            "OUTSIDEOutside – Hide or show vertices outside the selection.",
            "InsideInside – Hide or show vertices inside the selection.",
            "use_front_faces_only(boolean,(optional)) – Front Faces Only, Affect only faces facing towards the view"
        ]
    },
    {
        "function_id": "bpy.ops.paint.hide_show_all",
        "signature": "bpy.ops.paint.hide_show_all(action='HIDE')#",
        "description": "Hide/show all vertices",
        "parameters": [
            "action='HIDE'"
        ],
        "parameter_descriptions": [
            "HIDEHide – Hide vertices.",
            "SHOWShow – Show vertices."
        ]
    },
    {
        "function_id": "bpy.ops.paint.hide_show_lasso_gesture",
        "signature": "bpy.ops.paint.hide_show_lasso_gesture(path=None,action='HIDE',area='Inside',use_front_faces_only=False)#",
        "description": "Hide/show some vertices",
        "parameters": [
            "path=None",
            "action='HIDE'",
            "area='Inside'",
            "use_front_faces_only=False"
        ],
        "parameter_descriptions": [
            "path(bpy_prop_collectionofOperatorMousePath, (optional)) – Path",
            "action(enum in['HIDE','SHOW'],(optional)) –Visibility Action, Whether to hide or show verticesHIDEHide – Hide vertices.SHOWShow – Show vertices.",
            "HIDEHide – Hide vertices.",
            "SHOWShow – Show vertices.",
            "area(enum in['OUTSIDE','Inside'],(optional)) –Visibility Area, Which vertices to hide or showOUTSIDEOutside – Hide or show vertices outside the selection.InsideInside – Hide or show vertices inside the selection.",
            "OUTSIDEOutside – Hide or show vertices outside the selection.",
            "InsideInside – Hide or show vertices inside the selection.",
            "use_front_faces_only(boolean,(optional)) – Front Faces Only, Affect only faces facing towards the view"
        ]
    },
    {
        "function_id": "bpy.ops.paint.hide_show_line_gesture",
        "signature": "bpy.ops.paint.hide_show_line_gesture(xstart=0,xend=0,ystart=0,yend=0,flip=False,cursor=5,action='HIDE',area='Inside',use_front_faces_only=False,use_limit_to_segment=False)#",
        "description": "Hide/show some vertices",
        "parameters": [
            "xstart=0",
            "xend=0",
            "ystart=0",
            "yend=0",
            "flip=False",
            "cursor=5",
            "action='HIDE'",
            "area='Inside'",
            "use_front_faces_only=False",
            "use_limit_to_segment=False"
        ],
        "parameter_descriptions": [
            "xstart(int in[-inf,inf],(optional)) – X Start",
            "xend(int in[-inf,inf],(optional)) – X End",
            "ystart(int in[-inf,inf],(optional)) – Y Start",
            "yend(int in[-inf,inf],(optional)) – Y End",
            "flip(boolean,(optional)) – Flip",
            "cursor(int in[0,inf],(optional)) – Cursor, Mouse cursor style to use during the modal operator",
            "action(enum in['HIDE','SHOW'],(optional)) –Visibility Action, Whether to hide or show verticesHIDEHide – Hide vertices.SHOWShow – Show vertices.",
            "HIDEHide – Hide vertices.",
            "SHOWShow – Show vertices.",
            "area(enum in['OUTSIDE','Inside'],(optional)) –Visibility Area, Which vertices to hide or showOUTSIDEOutside – Hide or show vertices outside the selection.InsideInside – Hide or show vertices inside the selection.",
            "OUTSIDEOutside – Hide or show vertices outside the selection.",
            "InsideInside – Hide or show vertices inside the selection.",
            "use_front_faces_only(boolean,(optional)) – Front Faces Only, Affect only faces facing towards the view",
            "use_limit_to_segment(boolean,(optional)) – Limit to Segment, Apply the gesture action only to the area that is contained within the segment without extending its effect to the entire line"
        ]
    },
    {
        "function_id": "bpy.ops.paint.hide_show_masked",
        "signature": "bpy.ops.paint.hide_show_masked(action='HIDE')#",
        "description": "Hide/show all masked vertices above a threshold",
        "parameters": [
            "action='HIDE'"
        ],
        "parameter_descriptions": [
            "HIDEHide – Hide vertices.",
            "SHOWShow – Show vertices."
        ]
    },
    {
        "function_id": "bpy.ops.paint.hide_show_polyline_gesture",
        "signature": "bpy.ops.paint.hide_show_polyline_gesture(path=None,action='HIDE',area='Inside',use_front_faces_only=False)#",
        "description": "Hide/show some vertices",
        "parameters": [
            "path=None",
            "action='HIDE'",
            "area='Inside'",
            "use_front_faces_only=False"
        ],
        "parameter_descriptions": [
            "path(bpy_prop_collectionofOperatorMousePath, (optional)) – Path",
            "action(enum in['HIDE','SHOW'],(optional)) –Visibility Action, Whether to hide or show verticesHIDEHide – Hide vertices.SHOWShow – Show vertices.",
            "HIDEHide – Hide vertices.",
            "SHOWShow – Show vertices.",
            "area(enum in['OUTSIDE','Inside'],(optional)) –Visibility Area, Which vertices to hide or showOUTSIDEOutside – Hide or show vertices outside the selection.InsideInside – Hide or show vertices inside the selection.",
            "OUTSIDEOutside – Hide or show vertices outside the selection.",
            "InsideInside – Hide or show vertices inside the selection.",
            "use_front_faces_only(boolean,(optional)) – Front Faces Only, Affect only faces facing towards the view"
        ]
    },
    {
        "function_id": "bpy.ops.paint.image_from_view",
        "signature": "bpy.ops.paint.image_from_view(filepath='')#",
        "description": "Make an image from biggest 3D view for reprojection",
        "parameters": [
            "filepath=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.paint.image_paint",
        "signature": "bpy.ops.paint.image_paint(stroke=None,mode='NORMAL')#",
        "description": "Paint a stroke into the image",
        "parameters": [
            "stroke=None",
            "mode='NORMAL'"
        ],
        "parameter_descriptions": [
            "stroke(bpy_prop_collectionofOperatorStrokeElement, (optional)) – Stroke",
            "mode(enum in['NORMAL','INVERT','SMOOTH'],(optional)) –Stroke Mode, Action taken when a paint stroke is madeNORMALRegular – Apply brush normally.INVERTInvert – Invert action of brush for duration of stroke.SMOOTHSmooth – Switch brush to smooth mode for duration of stroke.",
            "NORMALRegular – Apply brush normally.",
            "INVERTInvert – Invert action of brush for duration of stroke.",
            "SMOOTHSmooth – Switch brush to smooth mode for duration of stroke."
        ]
    },
    {
        "function_id": "bpy.ops.paint.mask_box_gesture",
        "signature": "bpy.ops.paint.mask_box_gesture(xmin=0,xmax=0,ymin=0,ymax=0,wait_for_input=True,use_front_faces_only=False,mode='VALUE',value=1.0)#",
        "description": "Mask within a rectangle defined by the cursor",
        "parameters": [
            "xmin=0",
            "xmax=0",
            "ymin=0",
            "ymax=0",
            "wait_for_input=True",
            "use_front_faces_only=False",
            "mode='VALUE'",
            "value=1.0"
        ],
        "parameter_descriptions": [
            "xmin(int in[-inf,inf],(optional)) – X Min",
            "xmax(int in[-inf,inf],(optional)) – X Max",
            "ymin(int in[-inf,inf],(optional)) – Y Min",
            "ymax(int in[-inf,inf],(optional)) – Y Max",
            "wait_for_input(boolean,(optional)) – Wait for Input",
            "use_front_faces_only(boolean,(optional)) – Front Faces Only, Affect only faces facing towards the view",
            "mode(enum in['VALUE','VALUE_INVERSE','INVERT'],(optional)) –ModeVALUEValue – Set mask to the level specified by the ‘value’ property.VALUE_INVERSEValue Inverted – Set mask to the level specified by the inverted ‘value’ property.INVERTInvert – Invert the mask.",
            "VALUEValue – Set mask to the level specified by the ‘value’ property.",
            "VALUE_INVERSEValue Inverted – Set mask to the level specified by the inverted ‘value’ property.",
            "INVERTInvert – Invert the mask.",
            "value(float in[0,1],(optional)) – Value, Mask level to use when mode is ‘Value’; zero means no masking and one is fully masked"
        ]
    },
    {
        "function_id": "bpy.ops.paint.mask_flood_fill",
        "signature": "bpy.ops.paint.mask_flood_fill(mode='VALUE',value=0.0)#",
        "description": "Fill the whole mask with a given value, or invert its values",
        "parameters": [
            "mode='VALUE'",
            "value=0.0"
        ],
        "parameter_descriptions": [
            "mode(enum in['VALUE','VALUE_INVERSE','INVERT'],(optional)) –ModeVALUEValue – Set mask to the level specified by the ‘value’ property.VALUE_INVERSEValue Inverted – Set mask to the level specified by the inverted ‘value’ property.INVERTInvert – Invert the mask.",
            "VALUEValue – Set mask to the level specified by the ‘value’ property.",
            "VALUE_INVERSEValue Inverted – Set mask to the level specified by the inverted ‘value’ property.",
            "INVERTInvert – Invert the mask.",
            "value(float in[0,1],(optional)) – Value, Mask level to use when mode is ‘Value’; zero means no masking and one is fully masked"
        ]
    },
    {
        "function_id": "bpy.ops.paint.mask_lasso_gesture",
        "signature": "bpy.ops.paint.mask_lasso_gesture(path=None,use_front_faces_only=False,mode='VALUE',value=1.0)#",
        "description": "Mask within a shape defined by the cursor",
        "parameters": [
            "path=None",
            "use_front_faces_only=False",
            "mode='VALUE'",
            "value=1.0"
        ],
        "parameter_descriptions": [
            "path(bpy_prop_collectionofOperatorMousePath, (optional)) – Path",
            "use_front_faces_only(boolean,(optional)) – Front Faces Only, Affect only faces facing towards the view",
            "mode(enum in['VALUE','VALUE_INVERSE','INVERT'],(optional)) –ModeVALUEValue – Set mask to the level specified by the ‘value’ property.VALUE_INVERSEValue Inverted – Set mask to the level specified by the inverted ‘value’ property.INVERTInvert – Invert the mask.",
            "VALUEValue – Set mask to the level specified by the ‘value’ property.",
            "VALUE_INVERSEValue Inverted – Set mask to the level specified by the inverted ‘value’ property.",
            "INVERTInvert – Invert the mask.",
            "value(float in[0,1],(optional)) – Value, Mask level to use when mode is ‘Value’; zero means no masking and one is fully masked"
        ]
    },
    {
        "function_id": "bpy.ops.paint.mask_line_gesture",
        "signature": "bpy.ops.paint.mask_line_gesture(xstart=0,xend=0,ystart=0,yend=0,flip=False,cursor=5,use_front_faces_only=False,use_limit_to_segment=False,mode='VALUE',value=1.0)#",
        "description": "Mask to one side of a line defined by the cursor",
        "parameters": [
            "xstart=0",
            "xend=0",
            "ystart=0",
            "yend=0",
            "flip=False",
            "cursor=5",
            "use_front_faces_only=False",
            "use_limit_to_segment=False",
            "mode='VALUE'",
            "value=1.0"
        ],
        "parameter_descriptions": [
            "xstart(int in[-inf,inf],(optional)) – X Start",
            "xend(int in[-inf,inf],(optional)) – X End",
            "ystart(int in[-inf,inf],(optional)) – Y Start",
            "yend(int in[-inf,inf],(optional)) – Y End",
            "flip(boolean,(optional)) – Flip",
            "cursor(int in[0,inf],(optional)) – Cursor, Mouse cursor style to use during the modal operator",
            "use_front_faces_only(boolean,(optional)) – Front Faces Only, Affect only faces facing towards the view",
            "use_limit_to_segment(boolean,(optional)) – Limit to Segment, Apply the gesture action only to the area that is contained within the segment without extending its effect to the entire line",
            "mode(enum in['VALUE','VALUE_INVERSE','INVERT'],(optional)) –ModeVALUEValue – Set mask to the level specified by the ‘value’ property.VALUE_INVERSEValue Inverted – Set mask to the level specified by the inverted ‘value’ property.INVERTInvert – Invert the mask.",
            "VALUEValue – Set mask to the level specified by the ‘value’ property.",
            "VALUE_INVERSEValue Inverted – Set mask to the level specified by the inverted ‘value’ property.",
            "INVERTInvert – Invert the mask.",
            "value(float in[0,1],(optional)) – Value, Mask level to use when mode is ‘Value’; zero means no masking and one is fully masked"
        ]
    },
    {
        "function_id": "bpy.ops.paint.mask_polyline_gesture",
        "signature": "bpy.ops.paint.mask_polyline_gesture(path=None,use_front_faces_only=False,mode='VALUE',value=1.0)#",
        "description": "Mask within a shape defined by the cursor",
        "parameters": [
            "path=None",
            "use_front_faces_only=False",
            "mode='VALUE'",
            "value=1.0"
        ],
        "parameter_descriptions": [
            "path(bpy_prop_collectionofOperatorMousePath, (optional)) – Path",
            "use_front_faces_only(boolean,(optional)) – Front Faces Only, Affect only faces facing towards the view",
            "mode(enum in['VALUE','VALUE_INVERSE','INVERT'],(optional)) –ModeVALUEValue – Set mask to the level specified by the ‘value’ property.VALUE_INVERSEValue Inverted – Set mask to the level specified by the inverted ‘value’ property.INVERTInvert – Invert the mask.",
            "VALUEValue – Set mask to the level specified by the ‘value’ property.",
            "VALUE_INVERSEValue Inverted – Set mask to the level specified by the inverted ‘value’ property.",
            "INVERTInvert – Invert the mask.",
            "value(float in[0,1],(optional)) – Value, Mask level to use when mode is ‘Value’; zero means no masking and one is fully masked"
        ]
    },
    {
        "function_id": "bpy.ops.paint.project_image",
        "signature": "bpy.ops.paint.project_image(image='')#",
        "description": "Project an edited render from the active camera back onto the object",
        "parameters": [
            "image=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.paint.sample_color",
        "signature": "bpy.ops.paint.sample_color(location=(0,0),merged=False,palette=False)#",
        "description": "Use the mouse to sample a color in the image",
        "parameters": [
            "location=(0,0)",
            "merged=False",
            "palette=False"
        ],
        "parameter_descriptions": [
            "location(int arrayof2 items in[0,inf],(optional)) – Location",
            "merged(boolean,(optional)) – Sample Merged, Sample the output display color",
            "palette(boolean,(optional)) – Add to Palette"
        ]
    },
    {
        "function_id": "bpy.ops.paint.texture_paint_toggle",
        "signature": "bpy.ops.paint.texture_paint_toggle()#",
        "description": "Toggle texture paint mode in 3D view",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.paint.vert_select_all",
        "signature": "bpy.ops.paint.vert_select_all(action='TOGGLE')#",
        "description": "Change selection for all vertices",
        "parameters": [
            "action='TOGGLE'"
        ],
        "parameter_descriptions": [
            "TOGGLEToggle – Toggle selection for all elements.",
            "SELECTSelect – Select all elements.",
            "DESELECTDeselect – Deselect all elements.",
            "INVERTInvert – Invert selection of all elements."
        ]
    },
    {
        "function_id": "bpy.ops.paint.vert_select_hide",
        "signature": "bpy.ops.paint.vert_select_hide(unselected=False)#",
        "description": "Hide selected vertices",
        "parameters": [
            "unselected=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.paint.vert_select_less",
        "signature": "bpy.ops.paint.vert_select_less(face_step=True)#",
        "description": "Deselect Vertices connected to existing selection",
        "parameters": [
            "face_step=True"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.paint.vert_select_linked",
        "signature": "bpy.ops.paint.vert_select_linked()#",
        "description": "Select linked vertices",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.paint.vert_select_linked_pick",
        "signature": "bpy.ops.paint.vert_select_linked_pick(select=True)#",
        "description": "Select linked vertices under the cursor",
        "parameters": [
            "select=True"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.paint.vert_select_more",
        "signature": "bpy.ops.paint.vert_select_more(face_step=True)#",
        "description": "Select Vertices connected to existing selection",
        "parameters": [
            "face_step=True"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.paint.vert_select_ungrouped",
        "signature": "bpy.ops.paint.vert_select_ungrouped(extend=False)#",
        "description": "Select vertices without a group",
        "parameters": [
            "extend=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.paint.vertex_color_brightness_contrast",
        "signature": "bpy.ops.paint.vertex_color_brightness_contrast(brightness=0.0,contrast=0.0)#",
        "description": "Adjust vertex color brightness/contrast",
        "parameters": [
            "brightness=0.0",
            "contrast=0.0"
        ],
        "parameter_descriptions": [
            "brightness(float in[-100,100],(optional)) – Brightness",
            "contrast(float in[-100,100],(optional)) – Contrast"
        ]
    },
    {
        "function_id": "bpy.ops.paint.vertex_color_dirt",
        "signature": "bpy.ops.paint.vertex_color_dirt(blur_strength=1.0,blur_iterations=1,clean_angle=3.14159,dirt_angle=0.0,dirt_only=False,normalize=True)#",
        "description": "Generate a dirt map gradient based on cavity",
        "parameters": [
            "blur_strength=1.0",
            "blur_iterations=1",
            "clean_angle=3.14159",
            "dirt_angle=0.0",
            "dirt_only=False",
            "normalize=True"
        ],
        "parameter_descriptions": [
            "blur_strength(float in[0.01,1],(optional)) – Blur Strength, Blur strength per iteration",
            "blur_iterations(int in[0,40],(optional)) – Blur Iterations, Number of times to blur the colors (higher blurs more)",
            "clean_angle(float in[0,3.14159],(optional)) – Highlight Angle, Less than 90 limits the angle used in the tonal range",
            "dirt_angle(float in[0,3.14159],(optional)) – Dirt Angle, Less than 90 limits the angle used in the tonal range",
            "dirt_only(boolean,(optional)) – Dirt Only, Don’t calculate cleans for convex areas",
            "normalize(boolean,(optional)) – Normalize, Normalize the colors, increasing the contrast"
        ]
    },
    {
        "function_id": "bpy.ops.paint.vertex_color_from_weight",
        "signature": "bpy.ops.paint.vertex_color_from_weight()#",
        "description": "Convert active weight into gray scale vertex colors",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.paint.vertex_color_hsv",
        "signature": "bpy.ops.paint.vertex_color_hsv(h=0.5,s=1.0,v=1.0)#",
        "description": "Adjust vertex color Hue/Saturation/Value",
        "parameters": [
            "h=0.5",
            "s=1.0",
            "v=1.0"
        ],
        "parameter_descriptions": [
            "h(float in[0,1],(optional)) – Hue",
            "s(float in[0,2],(optional)) – Saturation",
            "v(float in[0,2],(optional)) – Value"
        ]
    },
    {
        "function_id": "bpy.ops.paint.vertex_color_invert",
        "signature": "bpy.ops.paint.vertex_color_invert()#",
        "description": "Invert RGB values",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.paint.vertex_color_levels",
        "signature": "bpy.ops.paint.vertex_color_levels(offset=0.0,gain=1.0)#",
        "description": "Adjust levels of vertex colors",
        "parameters": [
            "offset=0.0",
            "gain=1.0"
        ],
        "parameter_descriptions": [
            "offset(float in[-1,1],(optional)) – Offset, Value to add to colors",
            "gain(float in[0,inf],(optional)) – Gain, Value to multiply colors by"
        ]
    },
    {
        "function_id": "bpy.ops.paint.vertex_color_set",
        "signature": "bpy.ops.paint.vertex_color_set(use_alpha=True)#",
        "description": "Fill the active vertex color layer with the current paint color",
        "parameters": [
            "use_alpha=True"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.paint.vertex_color_smooth",
        "signature": "bpy.ops.paint.vertex_color_smooth()#",
        "description": "Smooth colors across vertices",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.paint.vertex_paint",
        "signature": "bpy.ops.paint.vertex_paint(stroke=None,mode='NORMAL')#",
        "description": "Paint a stroke in the active color attribute layer",
        "parameters": [
            "stroke=None",
            "mode='NORMAL'"
        ],
        "parameter_descriptions": [
            "stroke(bpy_prop_collectionofOperatorStrokeElement, (optional)) – Stroke",
            "mode(enum in['NORMAL','INVERT','SMOOTH'],(optional)) –Stroke Mode, Action taken when a paint stroke is madeNORMALRegular – Apply brush normally.INVERTInvert – Invert action of brush for duration of stroke.SMOOTHSmooth – Switch brush to smooth mode for duration of stroke.",
            "NORMALRegular – Apply brush normally.",
            "INVERTInvert – Invert action of brush for duration of stroke.",
            "SMOOTHSmooth – Switch brush to smooth mode for duration of stroke."
        ]
    },
    {
        "function_id": "bpy.ops.paint.vertex_paint_toggle",
        "signature": "bpy.ops.paint.vertex_paint_toggle()#",
        "description": "Toggle the vertex paint mode in 3D view",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.paint.visibility_filter",
        "signature": "bpy.ops.paint.visibility_filter(action='GROW',iterations=1,auto_iteration_count=True)#",
        "description": "Edit the visibility of the current mesh",
        "parameters": [
            "action='GROW'",
            "iterations=1",
            "auto_iteration_count=True"
        ],
        "parameter_descriptions": [
            "action(enum in['GROW','SHRINK'],(optional)) –ActionGROWGrow Visibility – Grow the visibility by one face based on mesh topology.SHRINKShrink Visibility – Shrink the visibility by one face based on mesh topology.",
            "GROWGrow Visibility – Grow the visibility by one face based on mesh topology.",
            "SHRINKShrink Visibility – Shrink the visibility by one face based on mesh topology.",
            "iterations(int in[1,100],(optional)) – Iterations, Number of times that the filter is going to be applied",
            "auto_iteration_count(boolean,(optional)) – Auto Iteration Count, Use an automatic number of iterations based on the number of vertices of the sculpt"
        ]
    },
    {
        "function_id": "bpy.ops.paint.visibility_invert",
        "signature": "bpy.ops.paint.visibility_invert()#",
        "description": "Invert the visibility of all vertices",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.paint.weight_from_bones",
        "signature": "bpy.ops.paint.weight_from_bones(type='AUTOMATIC')#",
        "description": "Set the weights of the groups matching the attached armature’s selected bones, using the distance between the vertices and the bones",
        "parameters": [
            "type='AUTOMATIC'"
        ],
        "parameter_descriptions": [
            "AUTOMATICAutomatic – Automatic weights from bones.",
            "ENVELOPESFrom Envelopes – Weights from envelopes with user defined radius."
        ]
    },
    {
        "function_id": "bpy.ops.paint.weight_gradient",
        "signature": "bpy.ops.paint.weight_gradient(type='LINEAR',xstart=0,xend=0,ystart=0,yend=0,flip=False,cursor=5)#",
        "description": "Draw a line to apply a weight gradient to selected vertices",
        "parameters": [
            "type='LINEAR'",
            "xstart=0",
            "xend=0",
            "ystart=0",
            "yend=0",
            "flip=False",
            "cursor=5"
        ],
        "parameter_descriptions": [
            "type(enum in['LINEAR','RADIAL'],(optional)) – Type",
            "xstart(int in[-inf,inf],(optional)) – X Start",
            "xend(int in[-inf,inf],(optional)) – X End",
            "ystart(int in[-inf,inf],(optional)) – Y Start",
            "yend(int in[-inf,inf],(optional)) – Y End",
            "flip(boolean,(optional)) – Flip",
            "cursor(int in[0,inf],(optional)) – Cursor, Mouse cursor style to use during the modal operator"
        ]
    },
    {
        "function_id": "bpy.ops.paint.weight_paint",
        "signature": "bpy.ops.paint.weight_paint(stroke=None,mode='NORMAL')#",
        "description": "Paint a stroke in the current vertex group’s weights",
        "parameters": [
            "stroke=None",
            "mode='NORMAL'"
        ],
        "parameter_descriptions": [
            "stroke(bpy_prop_collectionofOperatorStrokeElement, (optional)) – Stroke",
            "mode(enum in['NORMAL','INVERT','SMOOTH'],(optional)) –Stroke Mode, Action taken when a paint stroke is madeNORMALRegular – Apply brush normally.INVERTInvert – Invert action of brush for duration of stroke.SMOOTHSmooth – Switch brush to smooth mode for duration of stroke.",
            "NORMALRegular – Apply brush normally.",
            "INVERTInvert – Invert action of brush for duration of stroke.",
            "SMOOTHSmooth – Switch brush to smooth mode for duration of stroke."
        ]
    },
    {
        "function_id": "bpy.ops.paint.weight_paint_toggle",
        "signature": "bpy.ops.paint.weight_paint_toggle()#",
        "description": "Toggle weight paint mode in 3D view",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.paint.weight_sample",
        "signature": "bpy.ops.paint.weight_sample()#",
        "description": "Use the mouse to sample a weight in the 3D view",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.paint.weight_sample_group",
        "signature": "bpy.ops.paint.weight_sample_group()#",
        "description": "Select one of the vertex groups available under current mouse position",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.paint.weight_set",
        "signature": "bpy.ops.paint.weight_set()#",
        "description": "Fill the active vertex group with the current paint weight",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.curve.cyclic_toggle",
        "signature": "bpy.ops.curve.cyclic_toggle(direction='CYCLIC_U')#",
        "description": "Make active spline closed/opened loop",
        "parameters": [
            "direction='CYCLIC_U'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.curve.de_select_first",
        "signature": "bpy.ops.curve.de_select_first()#",
        "description": "(De)select first of visible part of each NURBS",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.curve.de_select_last",
        "signature": "bpy.ops.curve.de_select_last()#",
        "description": "(De)select last of visible part of each NURBS",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.curve.decimate",
        "signature": "bpy.ops.curve.decimate(ratio=1.0)#",
        "description": "Simplify selected curves",
        "parameters": [
            "ratio=1.0"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.curve.delete",
        "signature": "bpy.ops.curve.delete(type='VERT')#",
        "description": "Delete selected control points or segments",
        "parameters": [
            "type='VERT'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.curve.dissolve_verts",
        "signature": "bpy.ops.curve.dissolve_verts()#",
        "description": "Delete selected control points, correcting surrounding handles",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.curve.draw",
        "signature": "bpy.ops.curve.draw(error_threshold=0.0,fit_method='REFIT',corner_angle=1.22173,use_cyclic=True,stroke=None,wait_for_input=True)#",
        "description": "Draw a freehand spline",
        "parameters": [
            "error_threshold=0.0",
            "fit_method='REFIT'",
            "corner_angle=1.22173",
            "use_cyclic=True",
            "stroke=None",
            "wait_for_input=True"
        ],
        "parameter_descriptions": [
            "error_threshold(float in[0,10],(optional)) – Error, Error distance threshold (in object units)",
            "fit_method(enum inCurve Fit Method Items, (optional)) – Fit Method",
            "corner_angle(float in[0,3.14159],(optional)) – Corner Angle",
            "use_cyclic(boolean,(optional)) – Cyclic",
            "stroke(bpy_prop_collectionofOperatorStrokeElement, (optional)) – Stroke",
            "wait_for_input(boolean,(optional)) – Wait for Input"
        ]
    },
    {
        "function_id": "bpy.ops.curve.duplicate",
        "signature": "bpy.ops.curve.duplicate()#",
        "description": "Duplicate selected control points",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.curve.duplicate_move",
        "signature": "bpy.ops.curve.duplicate_move(CURVE_OT_duplicate=None,TRANSFORM_OT_translate=None)#",
        "description": "Duplicate curve and move",
        "parameters": [
            "CURVE_OT_duplicate=None",
            "TRANSFORM_OT_translate=None"
        ],
        "parameter_descriptions": [
            "CURVE_OT_duplicate(CURVE_OT_duplicate, (optional)) – Duplicate Curve, Duplicate selected control points",
            "TRANSFORM_OT_translate(TRANSFORM_OT_translate, (optional)) – Move, Move selected items"
        ]
    },
    {
        "function_id": "bpy.ops.curve.extrude",
        "signature": "bpy.ops.curve.extrude(mode='TRANSLATION')#",
        "description": "Extrude selected control point(s)",
        "parameters": [
            "mode='TRANSLATION'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.curve.extrude_move",
        "signature": "bpy.ops.curve.extrude_move(CURVE_OT_extrude=None,TRANSFORM_OT_translate=None)#",
        "description": "Extrude curve and move result",
        "parameters": [
            "CURVE_OT_extrude=None",
            "TRANSFORM_OT_translate=None"
        ],
        "parameter_descriptions": [
            "CURVE_OT_extrude(CURVE_OT_extrude, (optional)) – Extrude, Extrude selected control point(s)",
            "TRANSFORM_OT_translate(TRANSFORM_OT_translate, (optional)) – Move, Move selected items"
        ]
    },
    {
        "function_id": "bpy.ops.curve.handle_type_set",
        "signature": "bpy.ops.curve.handle_type_set(type='AUTOMATIC')#",
        "description": "Set type of handles for selected control points",
        "parameters": [
            "type='AUTOMATIC'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.curve.hide",
        "signature": "bpy.ops.curve.hide(unselected=False)#",
        "description": "Hide (un)selected control points",
        "parameters": [
            "unselected=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.curve.make_segment",
        "signature": "bpy.ops.curve.make_segment()#",
        "description": "Join two curves by their selected ends",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.curve.match_texture_space",
        "signature": "bpy.ops.curve.match_texture_space()#",
        "description": "Match texture space to object’s bounding box",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.curve.normals_make_consistent",
        "signature": "bpy.ops.curve.normals_make_consistent(calc_length=False)#",
        "description": "Recalculate the direction of selected handles",
        "parameters": [
            "calc_length=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.curve.pen",
        "signature": "bpy.ops.curve.pen(extend=False,deselect=False,toggle=False,deselect_all=False,select_passthrough=False,extrude_point=False,extrude_handle='VECTOR',delete_point=False,insert_point=False,move_segment=False,select_point=False,move_point=False,close_spline=True,close_spline_method='OFF',toggle_vector=False,cycle_handle_type=False)#",
        "description": "Construct and edit splines",
        "parameters": [
            "extend=False",
            "deselect=False",
            "toggle=False",
            "deselect_all=False",
            "select_passthrough=False",
            "extrude_point=False",
            "extrude_handle='VECTOR'",
            "delete_point=False",
            "insert_point=False",
            "move_segment=False",
            "select_point=False",
            "move_point=False",
            "close_spline=True",
            "close_spline_method='OFF'",
            "toggle_vector=False",
            "cycle_handle_type=False"
        ],
        "parameter_descriptions": [
            "extend(boolean,(optional)) – Extend, Extend selection instead of deselecting everything first",
            "deselect(boolean,(optional)) – Deselect, Remove from selection",
            "toggle(boolean,(optional)) – Toggle Selection, Toggle the selection",
            "deselect_all(boolean,(optional)) – Deselect On Nothing, Deselect all when nothing under the cursor",
            "select_passthrough(boolean,(optional)) – Only Select Unselected, Ignore the select action when the element is already selected",
            "extrude_point(boolean,(optional)) – Extrude Point, Add a point connected to the last selected point",
            "extrude_handle(enum in['AUTO','VECTOR'],(optional)) – Extrude Handle Type, Type of the extruded handle",
            "delete_point(boolean,(optional)) – Delete Point, Delete an existing point",
            "insert_point(boolean,(optional)) – Insert Point, Insert Point into a curve segment",
            "move_segment(boolean,(optional)) – Move Segment, Delete an existing point",
            "select_point(boolean,(optional)) – Select Point, Select a point or its handles",
            "move_point(boolean,(optional)) – Move Point, Move a point or its handles",
            "close_spline(boolean,(optional)) – Close Spline, Make a spline cyclic by clicking endpoints",
            "close_spline_method(enum in['OFF','ON_PRESS','ON_CLICK'],(optional)) –Close Spline Method, The condition for close spline to activateOFFNone.ON_PRESSOn Press – Move handles after closing the spline.ON_CLICKOn Click – Spline closes on release if not dragged.",
            "OFFNone.",
            "ON_PRESSOn Press – Move handles after closing the spline.",
            "ON_CLICKOn Click – Spline closes on release if not dragged.",
            "toggle_vector(boolean,(optional)) – Toggle Vector, Toggle between Vector and Auto handles",
            "cycle_handle_type(boolean,(optional)) – Cycle Handle Type, Cycle between all four handle types"
        ]
    },
    {
        "function_id": "bpy.ops.curve.primitive_bezier_circle_add",
        "signature": "bpy.ops.curve.primitive_bezier_circle_add(radius=1.0,enter_editmode=False,align='WORLD',location=(0.0,0.0,0.0),rotation=(0.0,0.0,0.0),scale=(0.0,0.0,0.0))#",
        "description": "Construct a Bézier Circle",
        "parameters": [
            "radius=1.0",
            "enter_editmode=False",
            "align='WORLD'",
            "location=(0.0,0.0,0.0)",
            "rotation=(0.0,0.0,0.0)",
            "scale=(0.0,0.0,0.0)"
        ],
        "parameter_descriptions": [
            "radius(float in[0,inf],(optional)) – Radius",
            "enter_editmode(boolean,(optional)) – Enter Edit Mode, Enter edit mode when adding this object",
            "align(enum in['WORLD','VIEW','CURSOR'],(optional)) –Align, The alignment of the new objectWORLDWorld – Align the new object to the world.VIEWView – Align the new object to the view.CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "WORLDWorld – Align the new object to the world.",
            "VIEWView – Align the new object to the view.",
            "CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "location(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Location, Location for the newly added object",
            "rotation(mathutils.Eulerrotation of 3 items in [-inf, inf], (optional)) – Rotation, Rotation for the newly added object",
            "scale(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Scale, Scale for the newly added object"
        ]
    },
    {
        "function_id": "bpy.ops.curve.primitive_bezier_curve_add",
        "signature": "bpy.ops.curve.primitive_bezier_curve_add(radius=1.0,enter_editmode=False,align='WORLD',location=(0.0,0.0,0.0),rotation=(0.0,0.0,0.0),scale=(0.0,0.0,0.0))#",
        "description": "Construct a Bézier Curve",
        "parameters": [
            "radius=1.0",
            "enter_editmode=False",
            "align='WORLD'",
            "location=(0.0,0.0,0.0)",
            "rotation=(0.0,0.0,0.0)",
            "scale=(0.0,0.0,0.0)"
        ],
        "parameter_descriptions": [
            "radius(float in[0,inf],(optional)) – Radius",
            "enter_editmode(boolean,(optional)) – Enter Edit Mode, Enter edit mode when adding this object",
            "align(enum in['WORLD','VIEW','CURSOR'],(optional)) –Align, The alignment of the new objectWORLDWorld – Align the new object to the world.VIEWView – Align the new object to the view.CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "WORLDWorld – Align the new object to the world.",
            "VIEWView – Align the new object to the view.",
            "CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "location(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Location, Location for the newly added object",
            "rotation(mathutils.Eulerrotation of 3 items in [-inf, inf], (optional)) – Rotation, Rotation for the newly added object",
            "scale(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Scale, Scale for the newly added object"
        ]
    },
    {
        "function_id": "bpy.ops.curve.primitive_nurbs_circle_add",
        "signature": "bpy.ops.curve.primitive_nurbs_circle_add(radius=1.0,enter_editmode=False,align='WORLD',location=(0.0,0.0,0.0),rotation=(0.0,0.0,0.0),scale=(0.0,0.0,0.0))#",
        "description": "Construct a Nurbs Circle",
        "parameters": [
            "radius=1.0",
            "enter_editmode=False",
            "align='WORLD'",
            "location=(0.0,0.0,0.0)",
            "rotation=(0.0,0.0,0.0)",
            "scale=(0.0,0.0,0.0)"
        ],
        "parameter_descriptions": [
            "radius(float in[0,inf],(optional)) – Radius",
            "enter_editmode(boolean,(optional)) – Enter Edit Mode, Enter edit mode when adding this object",
            "align(enum in['WORLD','VIEW','CURSOR'],(optional)) –Align, The alignment of the new objectWORLDWorld – Align the new object to the world.VIEWView – Align the new object to the view.CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "WORLDWorld – Align the new object to the world.",
            "VIEWView – Align the new object to the view.",
            "CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "location(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Location, Location for the newly added object",
            "rotation(mathutils.Eulerrotation of 3 items in [-inf, inf], (optional)) – Rotation, Rotation for the newly added object",
            "scale(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Scale, Scale for the newly added object"
        ]
    },
    {
        "function_id": "bpy.ops.curve.primitive_nurbs_curve_add",
        "signature": "bpy.ops.curve.primitive_nurbs_curve_add(radius=1.0,enter_editmode=False,align='WORLD',location=(0.0,0.0,0.0),rotation=(0.0,0.0,0.0),scale=(0.0,0.0,0.0))#",
        "description": "Construct a Nurbs Curve",
        "parameters": [
            "radius=1.0",
            "enter_editmode=False",
            "align='WORLD'",
            "location=(0.0,0.0,0.0)",
            "rotation=(0.0,0.0,0.0)",
            "scale=(0.0,0.0,0.0)"
        ],
        "parameter_descriptions": [
            "radius(float in[0,inf],(optional)) – Radius",
            "enter_editmode(boolean,(optional)) – Enter Edit Mode, Enter edit mode when adding this object",
            "align(enum in['WORLD','VIEW','CURSOR'],(optional)) –Align, The alignment of the new objectWORLDWorld – Align the new object to the world.VIEWView – Align the new object to the view.CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "WORLDWorld – Align the new object to the world.",
            "VIEWView – Align the new object to the view.",
            "CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "location(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Location, Location for the newly added object",
            "rotation(mathutils.Eulerrotation of 3 items in [-inf, inf], (optional)) – Rotation, Rotation for the newly added object",
            "scale(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Scale, Scale for the newly added object"
        ]
    },
    {
        "function_id": "bpy.ops.curve.primitive_nurbs_path_add",
        "signature": "bpy.ops.curve.primitive_nurbs_path_add(radius=1.0,enter_editmode=False,align='WORLD',location=(0.0,0.0,0.0),rotation=(0.0,0.0,0.0),scale=(0.0,0.0,0.0))#",
        "description": "Construct a Path",
        "parameters": [
            "radius=1.0",
            "enter_editmode=False",
            "align='WORLD'",
            "location=(0.0,0.0,0.0)",
            "rotation=(0.0,0.0,0.0)",
            "scale=(0.0,0.0,0.0)"
        ],
        "parameter_descriptions": [
            "radius(float in[0,inf],(optional)) – Radius",
            "enter_editmode(boolean,(optional)) – Enter Edit Mode, Enter edit mode when adding this object",
            "align(enum in['WORLD','VIEW','CURSOR'],(optional)) –Align, The alignment of the new objectWORLDWorld – Align the new object to the world.VIEWView – Align the new object to the view.CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "WORLDWorld – Align the new object to the world.",
            "VIEWView – Align the new object to the view.",
            "CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "location(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Location, Location for the newly added object",
            "rotation(mathutils.Eulerrotation of 3 items in [-inf, inf], (optional)) – Rotation, Rotation for the newly added object",
            "scale(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Scale, Scale for the newly added object"
        ]
    },
    {
        "function_id": "bpy.ops.curve.radius_set",
        "signature": "bpy.ops.curve.radius_set(radius=1.0)#",
        "description": "Set per-point radius which is used for bevel tapering",
        "parameters": [
            "radius=1.0"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.curve.reveal",
        "signature": "bpy.ops.curve.reveal(select=True)#",
        "description": "Reveal hidden control points",
        "parameters": [
            "select=True"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.curve.select_all",
        "signature": "bpy.ops.curve.select_all(action='TOGGLE')#",
        "description": "(De)select all control points",
        "parameters": [
            "action='TOGGLE'"
        ],
        "parameter_descriptions": [
            "TOGGLEToggle – Toggle selection for all elements.",
            "SELECTSelect – Select all elements.",
            "DESELECTDeselect – Deselect all elements.",
            "INVERTInvert – Invert selection of all elements."
        ]
    },
    {
        "function_id": "bpy.ops.curve.select_less",
        "signature": "bpy.ops.curve.select_less()#",
        "description": "Deselect control points at the boundary of each selection region",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.curve.select_linked",
        "signature": "bpy.ops.curve.select_linked()#",
        "description": "Select all control points linked to the current selection",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.curve.select_linked_pick",
        "signature": "bpy.ops.curve.select_linked_pick(deselect=False)#",
        "description": "Select all control points linked to already selected ones",
        "parameters": [
            "deselect=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.curve.select_more",
        "signature": "bpy.ops.curve.select_more()#",
        "description": "Select control points at the boundary of each selection region",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.curve.select_next",
        "signature": "bpy.ops.curve.select_next()#",
        "description": "Select control points following already selected ones along the curves",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.curve.select_nth",
        "signature": "bpy.ops.curve.select_nth(skip=1,nth=1,offset=0)#",
        "description": "Deselect every Nth point starting from the active one",
        "parameters": [
            "skip=1",
            "nth=1",
            "offset=0"
        ],
        "parameter_descriptions": [
            "skip(int in[1,inf],(optional)) – Deselected, Number of deselected elements in the repetitive sequence",
            "nth(int in[1,inf],(optional)) – Selected, Number of selected elements in the repetitive sequence",
            "offset(int in[-inf,inf],(optional)) – Offset, Offset from the starting point"
        ]
    },
    {
        "function_id": "bpy.ops.curve.select_previous",
        "signature": "bpy.ops.curve.select_previous()#",
        "description": "Select control points preceding already selected ones along the curves",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.curve.select_random",
        "signature": "bpy.ops.curve.select_random(ratio=0.5,seed=0,action='SELECT')#",
        "description": "Randomly select some control points",
        "parameters": [
            "ratio=0.5",
            "seed=0",
            "action='SELECT'"
        ],
        "parameter_descriptions": [
            "ratio(float in[0,1],(optional)) – Ratio, Portion of items to select randomly",
            "seed(int in[0,inf],(optional)) – Random Seed, Seed for the random number generator",
            "action(enum in['SELECT','DESELECT'],(optional)) –Action, Selection action to executeSELECTSelect – Select all elements.DESELECTDeselect – Deselect all elements.",
            "SELECTSelect – Select all elements.",
            "DESELECTDeselect – Deselect all elements."
        ]
    },
    {
        "function_id": "bpy.ops.curve.select_row",
        "signature": "bpy.ops.curve.select_row()#",
        "description": "Select a row of control points including active one",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.curve.select_similar",
        "signature": "bpy.ops.curve.select_similar(type='WEIGHT',compare='EQUAL',threshold=0.1)#",
        "description": "Select similar curve points by property type",
        "parameters": [
            "type='WEIGHT'",
            "compare='EQUAL'",
            "threshold=0.1"
        ],
        "parameter_descriptions": [
            "type(enum in['TYPE','RADIUS','WEIGHT','DIRECTION'],(optional)) – Type",
            "compare(enum in['EQUAL','GREATER','LESS'],(optional)) – Compare",
            "threshold(float in[0,inf],(optional)) – Threshold"
        ]
    },
    {
        "function_id": "bpy.ops.curve.separate",
        "signature": "bpy.ops.curve.separate()#",
        "description": "Separate selected points from connected unselected points into a new object",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.curve.shade_flat",
        "signature": "bpy.ops.curve.shade_flat()#",
        "description": "Set shading to flat",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.curve.shade_smooth",
        "signature": "bpy.ops.curve.shade_smooth()#",
        "description": "Set shading to smooth",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.curve.shortest_path_pick",
        "signature": "bpy.ops.curve.shortest_path_pick()#",
        "description": "Select shortest path between two selections",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.curve.smooth",
        "signature": "bpy.ops.curve.smooth()#",
        "description": "Flatten angles of selected points",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.curve.smooth_radius",
        "signature": "bpy.ops.curve.smooth_radius()#",
        "description": "Interpolate radii of selected points",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.curve.smooth_tilt",
        "signature": "bpy.ops.curve.smooth_tilt()#",
        "description": "Interpolate tilt of selected points",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.curve.smooth_weight",
        "signature": "bpy.ops.curve.smooth_weight()#",
        "description": "Interpolate weight of selected points",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.curve.spin",
        "signature": "bpy.ops.curve.spin(center=(0.0,0.0,0.0),axis=(0.0,0.0,0.0))#",
        "description": "Extrude selected boundary row around pivot point and current view axis",
        "parameters": [
            "center=(0.0,0.0,0.0)",
            "axis=(0.0,0.0,0.0)"
        ],
        "parameter_descriptions": [
            "center(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Center, Center in global view space",
            "axis(mathutils.Vectorof 3 items in [-1, 1], (optional)) – Axis, Axis in global view space"
        ]
    },
    {
        "function_id": "bpy.ops.curve.spline_type_set",
        "signature": "bpy.ops.curve.spline_type_set(type='POLY',use_handles=False)#",
        "description": "Set type of active spline",
        "parameters": [
            "type='POLY'",
            "use_handles=False"
        ],
        "parameter_descriptions": [
            "type(enum in['POLY','BEZIER','NURBS'],(optional)) – Type, Spline type",
            "use_handles(boolean,(optional)) – Handles, Use handles when converting Bézier curves into polygons"
        ]
    },
    {
        "function_id": "bpy.ops.curve.spline_weight_set",
        "signature": "bpy.ops.curve.spline_weight_set(weight=1.0)#",
        "description": "Set softbody goal weight for selected points",
        "parameters": [
            "weight=1.0"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.curve.split",
        "signature": "bpy.ops.curve.split()#",
        "description": "Split off selected points from connected unselected points",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.curve.subdivide",
        "signature": "bpy.ops.curve.subdivide(number_cuts=1)#",
        "description": "Subdivide selected segments",
        "parameters": [
            "number_cuts=1"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.curve.switch_direction",
        "signature": "bpy.ops.curve.switch_direction()#",
        "description": "Switch direction of selected splines",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.curve.tilt_clear",
        "signature": "bpy.ops.curve.tilt_clear()#",
        "description": "Clear the tilt of selected control points",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.curve.vertex_add",
        "signature": "bpy.ops.curve.vertex_add(location=(0.0,0.0,0.0))#",
        "description": "Add a new control point (linked to only selected end-curve one, if any)",
        "parameters": [
            "location=(0.0,0.0,0.0)"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.gpencil.active_frame_delete",
        "signature": "bpy.ops.gpencil.active_frame_delete()#",
        "description": "Delete the active frame for the active Grease Pencil Layer",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.gpencil.active_frames_delete_all",
        "signature": "bpy.ops.gpencil.active_frames_delete_all()#",
        "description": "Delete the active frame(s) of all editable Grease Pencil layers",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.gpencil.annotate",
        "signature": "bpy.ops.gpencil.annotate(mode='DRAW',arrowstyle_start='NONE',arrowstyle_end='NONE',use_stabilizer=False,stabilizer_factor=0.75,stabilizer_radius=35,stroke=None,wait_for_input=True)#",
        "description": "Make annotations on the active data",
        "parameters": [
            "mode='DRAW'",
            "arrowstyle_start='NONE'",
            "arrowstyle_end='NONE'",
            "use_stabilizer=False",
            "stabilizer_factor=0.75",
            "stabilizer_radius=35",
            "stroke=None",
            "wait_for_input=True"
        ],
        "parameter_descriptions": [
            "mode(enum in['DRAW','DRAW_STRAIGHT','DRAW_POLY','ERASER'],(optional)) –Mode, Way to interpret mouse movementsDRAWDraw Freehand – Draw freehand stroke(s).DRAW_STRAIGHTDraw Straight Lines – Draw straight line segment(s).DRAW_POLYDraw Poly Line – Click to place endpoints of straight line segments (connected).ERASEREraser – Erase Annotation strokes.",
            "DRAWDraw Freehand – Draw freehand stroke(s).",
            "DRAW_STRAIGHTDraw Straight Lines – Draw straight line segment(s).",
            "DRAW_POLYDraw Poly Line – Click to place endpoints of straight line segments (connected).",
            "ERASEREraser – Erase Annotation strokes.",
            "arrowstyle_start(enum in['NONE','ARROW','ARROW_OPEN','ARROW_OPEN_INVERTED','DIAMOND'],(optional)) –Start Arrow Style, Stroke start styleNONENone – Don’t use any arrow/style in corner.ARROWArrow – Use closed arrow style.ARROW_OPENOpen Arrow – Use open arrow style.ARROW_OPEN_INVERTEDSegment – Use perpendicular segment style.DIAMONDSquare – Use square style.",
            "NONENone – Don’t use any arrow/style in corner.",
            "ARROWArrow – Use closed arrow style.",
            "ARROW_OPENOpen Arrow – Use open arrow style.",
            "ARROW_OPEN_INVERTEDSegment – Use perpendicular segment style.",
            "DIAMONDSquare – Use square style.",
            "arrowstyle_end(enum in['NONE','ARROW','ARROW_OPEN','ARROW_OPEN_INVERTED','DIAMOND'],(optional)) –End Arrow Style, Stroke end styleNONENone – Don’t use any arrow/style in corner.ARROWArrow – Use closed arrow style.ARROW_OPENOpen Arrow – Use open arrow style.ARROW_OPEN_INVERTEDSegment – Use perpendicular segment style.DIAMONDSquare – Use square style.",
            "NONENone – Don’t use any arrow/style in corner.",
            "ARROWArrow – Use closed arrow style.",
            "ARROW_OPENOpen Arrow – Use open arrow style.",
            "ARROW_OPEN_INVERTEDSegment – Use perpendicular segment style.",
            "DIAMONDSquare – Use square style.",
            "use_stabilizer(boolean,(optional)) – Stabilize Stroke, Helper to draw smooth and clean lines. Press Shift for an invert effect (even if this option is not active)",
            "stabilizer_factor(float in[0,1],(optional)) – Stabilizer Stroke Factor, Higher values gives a smoother stroke",
            "stabilizer_radius(int in[0,200],(optional)) – Stabilizer Stroke Radius, Minimum distance from last point before stroke continues",
            "stroke(bpy_prop_collectionofOperatorStrokeElement, (optional)) – Stroke",
            "wait_for_input(boolean,(optional)) – Wait for Input, Wait for first click instead of painting immediately"
        ]
    },
    {
        "function_id": "bpy.ops.gpencil.annotation_active_frame_delete",
        "signature": "bpy.ops.gpencil.annotation_active_frame_delete()#",
        "description": "Delete the active frame for the active Annotation Layer",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.gpencil.annotation_add",
        "signature": "bpy.ops.gpencil.annotation_add()#",
        "description": "Add new Annotation data-block",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.gpencil.bake_grease_pencil_animation",
        "signature": "bpy.ops.gpencil.bake_grease_pencil_animation(frame_start=1,frame_end=250,step=1,only_selected=False,frame_target=1,project_type='KEEP')#",
        "description": "Bake grease pencil object transform to grease pencil keyframes",
        "parameters": [
            "frame_start=1",
            "frame_end=250",
            "step=1",
            "only_selected=False",
            "frame_target=1",
            "project_type='KEEP'"
        ],
        "parameter_descriptions": [
            "frame_start(int in[1,100000],(optional)) – Start Frame, The start frame",
            "frame_end(int in[1,100000],(optional)) – End Frame, The end frame of animation",
            "step(int in[1,100],(optional)) – Step, Step between generated frames",
            "only_selected(boolean,(optional)) – Only Selected Keyframes, Convert only selected keyframes",
            "frame_target(int in[1,100000],(optional)) – Target Frame, Destination frame",
            "project_type(enum in['KEEP','FRONT','SIDE','TOP','VIEW','CURSOR'],(optional)) –Projection TypeKEEPNo Reproject.FRONTFront – Reproject the strokes using the X-Z plane.SIDESide – Reproject the strokes using the Y-Z plane.TOPTop – Reproject the strokes using the X-Y plane.VIEWView – Reproject the strokes to end up on the same plane, as if drawn from the current viewpoint using ‘Cursor’ Stroke Placement.CURSORCursor – Reproject the strokes using the orientation of 3D cursor.",
            "KEEPNo Reproject.",
            "FRONTFront – Reproject the strokes using the X-Z plane.",
            "SIDESide – Reproject the strokes using the Y-Z plane.",
            "TOPTop – Reproject the strokes using the X-Y plane.",
            "VIEWView – Reproject the strokes to end up on the same plane, as if drawn from the current viewpoint using ‘Cursor’ Stroke Placement.",
            "CURSORCursor – Reproject the strokes using the orientation of 3D cursor."
        ]
    },
    {
        "function_id": "bpy.ops.gpencil.bake_mesh_animation",
        "signature": "bpy.ops.gpencil.bake_mesh_animation(target='NEW',frame_start=1,frame_end=250,step=1,thickness=1,angle=1.22173,offset=0.001,seams=False,faces=True,only_selected=False,frame_target=1,project_type='VIEW')#",
        "description": "Bake mesh animation to grease pencil strokes",
        "parameters": [
            "target='NEW'",
            "frame_start=1",
            "frame_end=250",
            "step=1",
            "thickness=1",
            "angle=1.22173",
            "offset=0.001",
            "seams=False",
            "faces=True",
            "only_selected=False",
            "frame_target=1",
            "project_type='VIEW'"
        ],
        "parameter_descriptions": [
            "target(enum in['NEW','SELECTED'],(optional)) – Target Object, Target grease pencil",
            "frame_start(int in[1,100000],(optional)) – Start Frame, The start frame",
            "frame_end(int in[1,100000],(optional)) – End Frame, The end frame of animation",
            "step(int in[1,100],(optional)) – Step, Step between generated frames",
            "thickness(int in[1,100],(optional)) – Thickness",
            "angle(float in[0,3.14159],(optional)) – Threshold Angle, Threshold to determine ends of the strokes",
            "offset(float in[0,100],(optional)) – Stroke Offset, Offset strokes from fill",
            "seams(boolean,(optional)) – Only Seam Edges, Convert only seam edges",
            "faces(boolean,(optional)) – Export Faces, Export faces as filled strokes",
            "only_selected(boolean,(optional)) – Only Selected Keyframes, Convert only selected keyframes",
            "frame_target(int in[1,100000],(optional)) – Target Frame, Destination frame",
            "project_type(enum in['KEEP','FRONT','SIDE','TOP','VIEW','CURSOR'],(optional)) –Projection TypeKEEPNo Reproject.FRONTFront – Reproject the strokes using the X-Z plane.SIDESide – Reproject the strokes using the Y-Z plane.TOPTop – Reproject the strokes using the X-Y plane.VIEWView – Reproject the strokes to end up on the same plane, as if drawn from the current viewpoint using ‘Cursor’ Stroke Placement.CURSORCursor – Reproject the strokes using the orientation of 3D cursor.",
            "KEEPNo Reproject.",
            "FRONTFront – Reproject the strokes using the X-Z plane.",
            "SIDESide – Reproject the strokes using the Y-Z plane.",
            "TOPTop – Reproject the strokes using the X-Y plane.",
            "VIEWView – Reproject the strokes to end up on the same plane, as if drawn from the current viewpoint using ‘Cursor’ Stroke Placement.",
            "CURSORCursor – Reproject the strokes using the orientation of 3D cursor."
        ]
    },
    {
        "function_id": "bpy.ops.gpencil.blank_frame_add",
        "signature": "bpy.ops.gpencil.blank_frame_add(all_layers=False)#",
        "description": "Insert a blank frame on the current frame (all subsequently existing frames, if any, are shifted right by one frame)",
        "parameters": [
            "all_layers=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.gpencil.brush_reset",
        "signature": "bpy.ops.gpencil.brush_reset()#",
        "description": "Reset brush to default parameters",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.gpencil.brush_reset_all",
        "signature": "bpy.ops.gpencil.brush_reset_all()#",
        "description": "Delete all mode brushes and recreate a default set",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.gpencil.convert",
        "signature": "bpy.ops.gpencil.convert(type='PATH',bevel_depth=0.0,bevel_resolution=0,use_normalize_weights=True,radius_multiplier=1.0,use_link_strokes=False,timing_mode='FULL',frame_range=100,start_frame=1,use_realtime=False,end_frame=250,gap_duration=0.0,gap_randomness=0.0,seed=0,use_timing_data=False)#",
        "description": "Convert the active Grease Pencil layer to a new Curve Object",
        "parameters": [
            "type='PATH'",
            "bevel_depth=0.0",
            "bevel_resolution=0",
            "use_normalize_weights=True",
            "radius_multiplier=1.0",
            "use_link_strokes=False",
            "timing_mode='FULL'",
            "frame_range=100",
            "start_frame=1",
            "use_realtime=False",
            "end_frame=250",
            "gap_duration=0.0",
            "gap_randomness=0.0",
            "seed=0",
            "use_timing_data=False"
        ],
        "parameter_descriptions": [
            "type(enum in['PATH','CURVE','POLY'],(optional)) –Type, Which type of curve to convert toPATHPath – Animation path.CURVEBézier Curve – Smooth Bézier curve.POLYPolygon Curve – Bézier curve with straight-line segments (vector handles).",
            "PATHPath – Animation path.",
            "CURVEBézier Curve – Smooth Bézier curve.",
            "POLYPolygon Curve – Bézier curve with straight-line segments (vector handles).",
            "bevel_depth(float in[0,1000],(optional)) – Bevel Depth",
            "bevel_resolution(int in[0,32],(optional)) – Bevel Resolution, Bevel resolution when depth is non-zero",
            "use_normalize_weights(boolean,(optional)) – Normalize Weight, Normalize weight (set from stroke width)",
            "radius_multiplier(float in[0,1000],(optional)) – Radius Factor, Multiplier for the points’ radii (set from stroke width)",
            "use_link_strokes(boolean,(optional)) – Link Strokes, Whether to link strokes with zero-radius sections of curves",
            "timing_mode(enum in['NONE','LINEAR','FULL','CUSTOMGAP'],(optional)) –Timing Mode, How to use timing data stored in strokesNONENo Timing – Ignore timing.LINEARLinear – Simple linear timing.FULLOriginal – Use the original timing, gaps included.CUSTOMGAPCustom Gaps – Use the original timing, but with custom gap lengths (in frames).",
            "NONENo Timing – Ignore timing.",
            "LINEARLinear – Simple linear timing.",
            "FULLOriginal – Use the original timing, gaps included.",
            "CUSTOMGAPCustom Gaps – Use the original timing, but with custom gap lengths (in frames).",
            "frame_range(int in[1,10000],(optional)) – Frame Range, The duration of evaluation of the path control curve",
            "start_frame(int in[1,100000],(optional)) – Start Frame, The start frame of the path control curve",
            "use_realtime(boolean,(optional)) – Realtime, Whether the path control curve reproduces the drawing in realtime, starting from Start Frame",
            "end_frame(int in[1,100000],(optional)) – End Frame, The end frame of the path control curve (if Realtime is not set)",
            "gap_duration(float in[0,10000],(optional)) – Gap Duration, Custom Gap mode: (Average) length of gaps, in frames (Note: Realtime value, will be scaled if Realtime is not set)",
            "gap_randomness(float in[0,10000],(optional)) – Gap Randomness, Custom Gap mode: Number of frames that gap lengths can vary",
            "seed(int in[0,1000],(optional)) – Random Seed, Custom Gap mode: Random generator seed",
            "use_timing_data(boolean,(optional)) – Has Valid Timing, Whether the converted Grease Pencil layer has valid timing data (internal use)"
        ]
    },
    {
        "function_id": "bpy.ops.gpencil.convert_old_files",
        "signature": "bpy.ops.gpencil.convert_old_files(annotation=False)#",
        "description": "Convert 2.7x grease pencil files to 2.80",
        "parameters": [
            "annotation=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.gpencil.copy",
        "signature": "bpy.ops.gpencil.copy()#",
        "description": "Copy selected Grease Pencil points and strokes",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.gpencil.data_unlink",
        "signature": "bpy.ops.gpencil.data_unlink()#",
        "description": "Unlink active Annotation data-block",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.gpencil.delete",
        "signature": "bpy.ops.gpencil.delete(type='POINTS')#",
        "description": "Delete selected Grease Pencil strokes, vertices, or frames",
        "parameters": [
            "type='POINTS'"
        ],
        "parameter_descriptions": [
            "POINTSPoints – Delete selected points and split strokes into segments.",
            "STROKESStrokes – Delete selected strokes.",
            "FRAMEFrame – Delete active frame."
        ]
    },
    {
        "function_id": "bpy.ops.gpencil.dissolve",
        "signature": "bpy.ops.gpencil.dissolve(type='POINTS')#",
        "description": "Delete selected points without splitting strokes",
        "parameters": [
            "type='POINTS'"
        ],
        "parameter_descriptions": [
            "POINTSDissolve – Dissolve selected points.",
            "BETWEENDissolve Between – Dissolve points between selected points.",
            "UNSELECTDissolve Unselect – Dissolve all unselected points."
        ]
    },
    {
        "function_id": "bpy.ops.gpencil.draw",
        "signature": "bpy.ops.gpencil.draw(mode='DRAW',stroke=None,wait_for_input=True,disable_straight=False,disable_fill=False,disable_stabilizer=False,guide_last_angle=0.0)#",
        "description": "Draw a new stroke in the active Grease Pencil object",
        "parameters": [
            "mode='DRAW'",
            "stroke=None",
            "wait_for_input=True",
            "disable_straight=False",
            "disable_fill=False",
            "disable_stabilizer=False",
            "guide_last_angle=0.0"
        ],
        "parameter_descriptions": [
            "mode(enum in['DRAW','DRAW_STRAIGHT','ERASER'],(optional)) –Mode, Way to interpret mouse movementsDRAWDraw Freehand – Draw freehand stroke(s).DRAW_STRAIGHTDraw Straight Lines – Draw straight line segment(s).ERASEREraser – Erase Grease Pencil strokes.",
            "DRAWDraw Freehand – Draw freehand stroke(s).",
            "DRAW_STRAIGHTDraw Straight Lines – Draw straight line segment(s).",
            "ERASEREraser – Erase Grease Pencil strokes.",
            "stroke(bpy_prop_collectionofOperatorStrokeElement, (optional)) – Stroke",
            "wait_for_input(boolean,(optional)) – Wait for Input, Wait for first click instead of painting immediately",
            "disable_straight(boolean,(optional)) – No Straight lines, Disable key for straight lines",
            "disable_fill(boolean,(optional)) – No Fill Areas, Disable fill to use stroke as fill boundary",
            "disable_stabilizer(boolean,(optional)) – No Stabilizer",
            "guide_last_angle(float in[-10000,10000],(optional)) – Angle, Speed guide angle"
        ]
    },
    {
        "function_id": "bpy.ops.gpencil.duplicate",
        "signature": "bpy.ops.gpencil.duplicate()#",
        "description": "Duplicate the selected Grease Pencil strokes",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.gpencil.duplicate_move",
        "signature": "bpy.ops.gpencil.duplicate_move(GPENCIL_OT_duplicate=None,TRANSFORM_OT_translate=None)#",
        "description": "Make copies of the selected Grease Pencil strokes and move them",
        "parameters": [
            "GPENCIL_OT_duplicate=None",
            "TRANSFORM_OT_translate=None"
        ],
        "parameter_descriptions": [
            "GPENCIL_OT_duplicate(GPENCIL_OT_duplicate, (optional)) – Duplicate Strokes, Duplicate the selected Grease Pencil strokes",
            "TRANSFORM_OT_translate(TRANSFORM_OT_translate, (optional)) – Move, Move selected items"
        ]
    },
    {
        "function_id": "bpy.ops.gpencil.editmode_toggle",
        "signature": "bpy.ops.gpencil.editmode_toggle(back=False)#",
        "description": "Enter/Exit edit mode for Grease Pencil strokes",
        "parameters": [
            "back=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.gpencil.extract_palette_vertex",
        "signature": "bpy.ops.gpencil.extract_palette_vertex(selected=False,threshold=1)#",
        "description": "Extract all colors used in Grease Pencil Vertex and create a Palette",
        "parameters": [
            "selected=False",
            "threshold=1"
        ],
        "parameter_descriptions": [
            "selected(boolean,(optional)) – Only Selected, Convert only selected strokes",
            "threshold(int in[1,4],(optional)) – Threshold"
        ]
    },
    {
        "function_id": "bpy.ops.gpencil.extrude",
        "signature": "bpy.ops.gpencil.extrude()#",
        "description": "Extrude the selected Grease Pencil points",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.gpencil.extrude_move",
        "signature": "bpy.ops.gpencil.extrude_move(GPENCIL_OT_extrude=None,TRANSFORM_OT_translate=None)#",
        "description": "Extrude selected points and move them",
        "parameters": [
            "GPENCIL_OT_extrude=None",
            "TRANSFORM_OT_translate=None"
        ],
        "parameter_descriptions": [
            "GPENCIL_OT_extrude(GPENCIL_OT_extrude, (optional)) – Extrude Stroke Points, Extrude the selected Grease Pencil points",
            "TRANSFORM_OT_translate(TRANSFORM_OT_translate, (optional)) – Move, Move selected items"
        ]
    },
    {
        "function_id": "bpy.ops.gpencil.fill",
        "signature": "bpy.ops.gpencil.fill(on_back=False)#",
        "description": "Fill with color the shape formed by strokes",
        "parameters": [
            "on_back=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.gpencil.frame_clean_duplicate",
        "signature": "bpy.ops.gpencil.frame_clean_duplicate(type='ALL')#",
        "description": "Remove duplicate keyframes",
        "parameters": [
            "type='ALL'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.gpencil.frame_clean_fill",
        "signature": "bpy.ops.gpencil.frame_clean_fill(mode='ACTIVE')#",
        "description": "Remove ‘no fill’ boundary strokes",
        "parameters": [
            "mode='ACTIVE'"
        ],
        "parameter_descriptions": [
            "ACTIVEActive Frame Only – Clean active frame only.",
            "ALLAll Frames – Clean all frames in all layers."
        ]
    },
    {
        "function_id": "bpy.ops.gpencil.frame_clean_loose",
        "signature": "bpy.ops.gpencil.frame_clean_loose(limit=1)#",
        "description": "Remove loose points",
        "parameters": [
            "limit=1"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.gpencil.frame_duplicate",
        "signature": "bpy.ops.gpencil.frame_duplicate(mode='ACTIVE')#",
        "description": "Make a copy of the active Grease Pencil Frame",
        "parameters": [
            "mode='ACTIVE'"
        ],
        "parameter_descriptions": [
            "ACTIVEActive – Duplicate frame in active layer only.",
            "ALLAll – Duplicate active frames in all layers."
        ]
    },
    {
        "function_id": "bpy.ops.gpencil.generate_weights",
        "signature": "bpy.ops.gpencil.generate_weights(mode='NAME',armature='DEFAULT',ratio=0.1,decay=0.8)#",
        "description": "Generate automatic weights for armatures (requires armature modifier)",
        "parameters": [
            "mode='NAME'",
            "armature='DEFAULT'",
            "ratio=0.1",
            "decay=0.8"
        ],
        "parameter_descriptions": [
            "mode(enum in['NAME','AUTO'],(optional)) – Mode",
            "armature(enum in['DEFAULT'],(optional)) – Armature, Armature to use",
            "ratio(float in[0,2],(optional)) – Ratio, Ratio between bone length and influence radius",
            "decay(float in[0,1],(optional)) – Decay, Factor to reduce influence depending of distance to bone axis"
        ]
    },
    {
        "function_id": "bpy.ops.gpencil.guide_rotate",
        "signature": "bpy.ops.gpencil.guide_rotate(increment=True,angle=0.0)#",
        "description": "Rotate guide angle",
        "parameters": [
            "increment=True",
            "angle=0.0"
        ],
        "parameter_descriptions": [
            "increment(boolean,(optional)) – Increment, Increment angle",
            "angle(float in[-10000,10000],(optional)) – Angle, Guide angle"
        ]
    },
    {
        "function_id": "bpy.ops.gpencil.hide",
        "signature": "bpy.ops.gpencil.hide(unselected=False)#",
        "description": "Hide selected/unselected Grease Pencil layers",
        "parameters": [
            "unselected=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.gpencil.image_to_grease_pencil",
        "signature": "bpy.ops.gpencil.image_to_grease_pencil(size=0.005,mask=False)#",
        "description": "Generate a Grease Pencil Object using Image as source",
        "parameters": [
            "size=0.005",
            "mask=False"
        ],
        "parameter_descriptions": [
            "size(float in[0.0001,10],(optional)) – Point Size, Size used for grease pencil points",
            "mask(boolean,(optional)) – Generate Mask, Create an inverted image for masking using alpha channel"
        ]
    },
    {
        "function_id": "bpy.ops.gpencil.interpolate",
        "signature": "bpy.ops.gpencil.interpolate(shift=0.0,layers='ACTIVE',interpolate_selected_only=False,exclude_breakdowns=False,flip='AUTO',smooth_steps=1,smooth_factor=0.0,release_confirm=False)#",
        "description": "Interpolate grease pencil strokes between frames",
        "parameters": [
            "shift=0.0",
            "layers='ACTIVE'",
            "interpolate_selected_only=False",
            "exclude_breakdowns=False",
            "flip='AUTO'",
            "smooth_steps=1",
            "smooth_factor=0.0",
            "release_confirm=False"
        ],
        "parameter_descriptions": [
            "shift(float in[-1,1],(optional)) – Shift, Bias factor for which frame has more influence on the interpolated strokes",
            "layers(enum in['ACTIVE','ALL'],(optional)) – Layer, Layers included in the interpolation",
            "interpolate_selected_only(boolean,(optional)) – Only Selected, Interpolate only selected strokes",
            "exclude_breakdowns(boolean,(optional)) – Exclude Breakdowns, Exclude existing Breakdowns keyframes as interpolation extremes",
            "flip(enum in['NOFLIP','FLIP','AUTO'],(optional)) – Flip Mode, Invert destination stroke to match start and end with source stroke",
            "smooth_steps(int in[1,3],(optional)) – Iterations, Number of times to smooth newly created strokes",
            "smooth_factor(float in[0,2],(optional)) – Smooth, Amount of smoothing to apply to interpolated strokes, to reduce jitter/noise",
            "release_confirm(boolean,(optional)) – Confirm on Release"
        ]
    },
    {
        "function_id": "bpy.ops.gpencil.interpolate_reverse",
        "signature": "bpy.ops.gpencil.interpolate_reverse()#",
        "description": "Remove breakdown frames generated by interpolating between two Grease Pencil frames",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.gpencil.interpolate_sequence",
        "signature": "bpy.ops.gpencil.interpolate_sequence(step=1,layers='ACTIVE',interpolate_selected_only=False,exclude_breakdowns=False,flip='AUTO',smooth_steps=1,smooth_factor=0.0,type='LINEAR',easing='AUTO',back=1.702,amplitude=0.15,period=0.15)#",
        "description": "Generate ‘in-betweens’ to smoothly interpolate between Grease Pencil frames",
        "parameters": [
            "step=1",
            "layers='ACTIVE'",
            "interpolate_selected_only=False",
            "exclude_breakdowns=False",
            "flip='AUTO'",
            "smooth_steps=1",
            "smooth_factor=0.0",
            "type='LINEAR'",
            "easing='AUTO'",
            "back=1.702",
            "amplitude=0.15",
            "period=0.15"
        ],
        "parameter_descriptions": [
            "step(int in[1,1048574],(optional)) – Step, Number of frames between generated interpolated frames",
            "layers(enum in['ACTIVE','ALL'],(optional)) – Layer, Layers included in the interpolation",
            "interpolate_selected_only(boolean,(optional)) – Only Selected, Interpolate only selected strokes",
            "exclude_breakdowns(boolean,(optional)) – Exclude Breakdowns, Exclude existing Breakdowns keyframes as interpolation extremes",
            "flip(enum in['NOFLIP','FLIP','AUTO'],(optional)) – Flip Mode, Invert destination stroke to match start and end with source stroke",
            "smooth_steps(int in[1,3],(optional)) – Iterations, Number of times to smooth newly created strokes",
            "smooth_factor(float in[0,2],(optional)) – Smooth, Amount of smoothing to apply to interpolated strokes, to reduce jitter/noise",
            "type(enum in['LINEAR','CUSTOM','SINE','QUAD','CUBIC','QUART','QUINT','EXPO','CIRC','BACK','BOUNCE','ELASTIC'],(optional)) –Type, Interpolation method to use the next time ‘Interpolate Sequence’ is runLINEARLinear – Straight-line interpolation between A and B (i.e. no ease in/out).CUSTOMCustom – Custom interpolation defined using a curve map.SINESinusoidal – Sinusoidal easing (weakest, almost linear but with a slight curvature).QUADQuadratic – Quadratic easing.CUBICCubic – Cubic easing.QUARTQuartic – Quartic easing.QUINTQuintic – Quintic easing.EXPOExponential – Exponential easing (dramatic).CIRCCircular – Circular easing (strongest and most dynamic).BACKBack – Cubic easing with overshoot and settle.BOUNCEBounce – Exponentially decaying parabolic bounce, like when objects collide.ELASTICElastic – Exponentially decaying sine wave, like an elastic band.",
            "LINEARLinear – Straight-line interpolation between A and B (i.e. no ease in/out).",
            "CUSTOMCustom – Custom interpolation defined using a curve map.",
            "SINESinusoidal – Sinusoidal easing (weakest, almost linear but with a slight curvature).",
            "QUADQuadratic – Quadratic easing.",
            "CUBICCubic – Cubic easing.",
            "QUARTQuartic – Quartic easing.",
            "QUINTQuintic – Quintic easing.",
            "EXPOExponential – Exponential easing (dramatic).",
            "CIRCCircular – Circular easing (strongest and most dynamic).",
            "BACKBack – Cubic easing with overshoot and settle.",
            "BOUNCEBounce – Exponentially decaying parabolic bounce, like when objects collide.",
            "ELASTICElastic – Exponentially decaying sine wave, like an elastic band.",
            "easing(enum in['AUTO','EASE_IN','EASE_OUT','EASE_IN_OUT'],(optional)) –Easing, Which ends of the segment between the preceding and following grease pencil frames easing interpolation is applied toAUTOAutomatic Easing – Easing type is chosen automatically based on what the type of interpolation used (e.g. ‘Ease In’ for transitional types, and ‘Ease Out’ for dynamic effects).EASE_INEase In – Only on the end closest to the next keyframe.EASE_OUTEase Out – Only on the end closest to the first keyframe.EASE_IN_OUTEase In and Out – Segment between both keyframes.",
            "AUTOAutomatic Easing – Easing type is chosen automatically based on what the type of interpolation used (e.g. ‘Ease In’ for transitional types, and ‘Ease Out’ for dynamic effects).",
            "EASE_INEase In – Only on the end closest to the next keyframe.",
            "EASE_OUTEase Out – Only on the end closest to the first keyframe.",
            "EASE_IN_OUTEase In and Out – Segment between both keyframes.",
            "back(float in[0,inf],(optional)) – Back, Amount of overshoot for ‘back’ easing",
            "amplitude(float in[0,inf],(optional)) – Amplitude, Amount to boost elastic bounces for ‘elastic’ easing",
            "period(float in[-inf,inf],(optional)) – Period, Time between bounces for elastic easing"
        ]
    },
    {
        "function_id": "bpy.ops.gpencil.layer_active",
        "signature": "bpy.ops.gpencil.layer_active(layer=0)#",
        "description": "Active Grease Pencil layer",
        "parameters": [
            "layer=0"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.gpencil.layer_add",
        "signature": "bpy.ops.gpencil.layer_add(layer=0,new_layer_name='')#",
        "description": "Add new layer or note for the active data-block",
        "parameters": [
            "layer=0",
            "new_layer_name=''"
        ],
        "parameter_descriptions": [
            "layer(int in[-1,inf],(optional)) – Grease Pencil Layer",
            "new_layer_name(string,(optional,never None)) – Name, Name of the newly added layer"
        ]
    },
    {
        "function_id": "bpy.ops.gpencil.layer_annotation_add",
        "signature": "bpy.ops.gpencil.layer_annotation_add()#",
        "description": "Add new Annotation layer or note for the active data-block",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.gpencil.layer_annotation_move",
        "signature": "bpy.ops.gpencil.layer_annotation_move(type='UP')#",
        "description": "Move the active Annotation layer up/down in the list",
        "parameters": [
            "type='UP'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.gpencil.layer_annotation_remove",
        "signature": "bpy.ops.gpencil.layer_annotation_remove()#",
        "description": "Remove active Annotation layer",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.gpencil.layer_change",
        "signature": "bpy.ops.gpencil.layer_change(layer='DEFAULT')#",
        "description": "Change active Grease Pencil layer",
        "parameters": [
            "layer='DEFAULT'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.gpencil.layer_duplicate",
        "signature": "bpy.ops.gpencil.layer_duplicate(mode='ALL')#",
        "description": "Make a copy of the active Grease Pencil layer",
        "parameters": [
            "mode='ALL'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.gpencil.layer_duplicate_object",
        "signature": "bpy.ops.gpencil.layer_duplicate_object(mode='ALL',only_active=True)#",
        "description": "Make a copy of the active Grease Pencil layer to selected object",
        "parameters": [
            "mode='ALL'",
            "only_active=True"
        ],
        "parameter_descriptions": [
            "mode(enum in['ALL','ACTIVE'],(optional)) – Mode",
            "only_active(boolean,(optional)) – Only Active, Copy only active Layer, uncheck to append all layers"
        ]
    },
    {
        "function_id": "bpy.ops.gpencil.layer_isolate",
        "signature": "bpy.ops.gpencil.layer_isolate(affect_visibility=False)#",
        "description": "Toggle whether the active layer is the only one that can be edited and/or visible",
        "parameters": [
            "affect_visibility=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.gpencil.layer_mask_add",
        "signature": "bpy.ops.gpencil.layer_mask_add(name='')#",
        "description": "Add new layer as masking",
        "parameters": [
            "name=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.gpencil.layer_mask_move",
        "signature": "bpy.ops.gpencil.layer_mask_move(type='UP')#",
        "description": "Move the active Grease Pencil mask layer up/down in the list",
        "parameters": [
            "type='UP'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.gpencil.layer_mask_remove",
        "signature": "bpy.ops.gpencil.layer_mask_remove()#",
        "description": "Remove Layer Mask",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.gpencil.layer_merge",
        "signature": "bpy.ops.gpencil.layer_merge(mode='ACTIVE')#",
        "description": "Combine Layers",
        "parameters": [
            "mode='ACTIVE'"
        ],
        "parameter_descriptions": [
            "ACTIVEActive – Combine active layer into the layer below.",
            "ALLAll – Combine all layers into the active layer."
        ]
    },
    {
        "function_id": "bpy.ops.gpencil.layer_move",
        "signature": "bpy.ops.gpencil.layer_move(type='UP')#",
        "description": "Move the active Grease Pencil layer up/down in the list",
        "parameters": [
            "type='UP'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.gpencil.layer_remove",
        "signature": "bpy.ops.gpencil.layer_remove()#",
        "description": "Remove active Grease Pencil layer",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.gpencil.lock_all",
        "signature": "bpy.ops.gpencil.lock_all()#",
        "description": "Lock all Grease Pencil layers to prevent them from being accidentally modified",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.gpencil.lock_layer",
        "signature": "bpy.ops.gpencil.lock_layer()#",
        "description": "Lock and hide any color not used in any layer",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.gpencil.material_hide",
        "signature": "bpy.ops.gpencil.material_hide(unselected=False)#",
        "description": "Hide selected/unselected Grease Pencil materials",
        "parameters": [
            "unselected=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.gpencil.material_isolate",
        "signature": "bpy.ops.gpencil.material_isolate(affect_visibility=False)#",
        "description": "Toggle whether the active material is the only one that is editable and/or visible",
        "parameters": [
            "affect_visibility=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.gpencil.material_lock_all",
        "signature": "bpy.ops.gpencil.material_lock_all()#",
        "description": "Lock all Grease Pencil materials to prevent them from being accidentally modified",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.gpencil.material_lock_unused",
        "signature": "bpy.ops.gpencil.material_lock_unused()#",
        "description": "Lock any material not used in any selected stroke",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.gpencil.material_reveal",
        "signature": "bpy.ops.gpencil.material_reveal()#",
        "description": "Unhide all hidden Grease Pencil materials",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.gpencil.material_select",
        "signature": "bpy.ops.gpencil.material_select(deselect=False)#",
        "description": "Select/Deselect all Grease Pencil strokes using current material",
        "parameters": [
            "deselect=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.gpencil.material_set",
        "signature": "bpy.ops.gpencil.material_set(slot='DEFAULT')#",
        "description": "Set active material",
        "parameters": [
            "slot='DEFAULT'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.gpencil.material_to_vertex_color",
        "signature": "bpy.ops.gpencil.material_to_vertex_color(remove=True,palette=True,selected=False,threshold=3)#",
        "description": "Replace materials in strokes with Vertex Color",
        "parameters": [
            "remove=True",
            "palette=True",
            "selected=False",
            "threshold=3"
        ],
        "parameter_descriptions": [
            "remove(boolean,(optional)) – Remove Unused Materials, Remove any unused material after the conversion",
            "palette(boolean,(optional)) – Create Palette, Create a new palette with colors",
            "selected(boolean,(optional)) – Only Selected, Convert only selected strokes",
            "threshold(int in[1,4],(optional)) – Threshold"
        ]
    },
    {
        "function_id": "bpy.ops.gpencil.material_unlock_all",
        "signature": "bpy.ops.gpencil.material_unlock_all()#",
        "description": "Unlock all Grease Pencil materials so that they can be edited",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.gpencil.materials_copy_to_object",
        "signature": "bpy.ops.gpencil.materials_copy_to_object(only_active=True)#",
        "description": "Append Materials of the active Grease Pencil to other object",
        "parameters": [
            "only_active=True"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.gpencil.move_to_layer",
        "signature": "bpy.ops.gpencil.move_to_layer(layer=0,new_layer_name='')#",
        "description": "Move selected strokes to another layer",
        "parameters": [
            "layer=0",
            "new_layer_name=''"
        ],
        "parameter_descriptions": [
            "layer(int in[-1,inf],(optional)) – Grease Pencil Layer",
            "new_layer_name(string,(optional,never None)) – Name, Name of the newly added layer"
        ]
    },
    {
        "function_id": "bpy.ops.gpencil.paintmode_toggle",
        "signature": "bpy.ops.gpencil.paintmode_toggle(back=False)#",
        "description": "Enter/Exit paint mode for Grease Pencil strokes",
        "parameters": [
            "back=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.gpencil.paste",
        "signature": "bpy.ops.gpencil.paste(type='ACTIVE',paste_back=False)#",
        "description": "Paste previously copied strokes to active layer or to original layer",
        "parameters": [
            "type='ACTIVE'",
            "paste_back=False"
        ],
        "parameter_descriptions": [
            "type(enum in['ACTIVE','LAYER'],(optional)) – Type",
            "paste_back(boolean,(optional)) – Paste on Back, Add pasted strokes behind all strokes"
        ]
    },
    {
        "function_id": "bpy.ops.gpencil.primitive_box",
        "signature": "bpy.ops.gpencil.primitive_box(subdivision=3,edges=1,type='BOX',wait_for_input=True)#",
        "description": "Create predefined grease pencil stroke box shapes",
        "parameters": [
            "subdivision=3",
            "edges=1",
            "type='BOX'",
            "wait_for_input=True"
        ],
        "parameter_descriptions": [
            "subdivision(int in[0,128],(optional)) – Subdivisions, Number of subdivisions per segment",
            "edges(int in[1,128],(optional)) – Edges, Number of points per segment",
            "type(enum in['BOX','LINE','POLYLINE','CIRCLE','ARC','CURVE'],(optional)) – Type, Type of shape",
            "wait_for_input(boolean,(optional)) – Wait for Input"
        ]
    },
    {
        "function_id": "bpy.ops.gpencil.primitive_circle",
        "signature": "bpy.ops.gpencil.primitive_circle(subdivision=94,edges=1,type='CIRCLE',wait_for_input=True)#",
        "description": "Create predefined grease pencil stroke circle shapes",
        "parameters": [
            "subdivision=94",
            "edges=1",
            "type='CIRCLE'",
            "wait_for_input=True"
        ],
        "parameter_descriptions": [
            "subdivision(int in[0,128],(optional)) – Subdivisions, Number of subdivisions per segment",
            "edges(int in[1,128],(optional)) – Edges, Number of points per segment",
            "type(enum in['BOX','LINE','POLYLINE','CIRCLE','ARC','CURVE'],(optional)) – Type, Type of shape",
            "wait_for_input(boolean,(optional)) – Wait for Input"
        ]
    },
    {
        "function_id": "bpy.ops.gpencil.primitive_curve",
        "signature": "bpy.ops.gpencil.primitive_curve(subdivision=62,edges=1,type='CURVE',wait_for_input=True)#",
        "description": "Create predefined grease pencil stroke curve shapes",
        "parameters": [
            "subdivision=62",
            "edges=1",
            "type='CURVE'",
            "wait_for_input=True"
        ],
        "parameter_descriptions": [
            "subdivision(int in[0,128],(optional)) – Subdivisions, Number of subdivisions per segment",
            "edges(int in[1,128],(optional)) – Edges, Number of points per segment",
            "type(enum in['BOX','LINE','POLYLINE','CIRCLE','ARC','CURVE'],(optional)) – Type, Type of shape",
            "wait_for_input(boolean,(optional)) – Wait for Input"
        ]
    },
    {
        "function_id": "bpy.ops.gpencil.primitive_line",
        "signature": "bpy.ops.gpencil.primitive_line(subdivision=6,edges=1,type='LINE',wait_for_input=True)#",
        "description": "Create predefined grease pencil stroke lines",
        "parameters": [
            "subdivision=6",
            "edges=1",
            "type='LINE'",
            "wait_for_input=True"
        ],
        "parameter_descriptions": [
            "subdivision(int in[0,128],(optional)) – Subdivisions, Number of subdivisions per segment",
            "edges(int in[1,128],(optional)) – Edges, Number of points per segment",
            "type(enum in['BOX','LINE','POLYLINE','CIRCLE','ARC','CURVE'],(optional)) – Type, Type of shape",
            "wait_for_input(boolean,(optional)) – Wait for Input"
        ]
    },
    {
        "function_id": "bpy.ops.gpencil.primitive_polyline",
        "signature": "bpy.ops.gpencil.primitive_polyline(subdivision=6,edges=1,type='POLYLINE',wait_for_input=True)#",
        "description": "Create predefined grease pencil stroke polylines",
        "parameters": [
            "subdivision=6",
            "edges=1",
            "type='POLYLINE'",
            "wait_for_input=True"
        ],
        "parameter_descriptions": [
            "subdivision(int in[0,128],(optional)) – Subdivisions, Number of subdivisions per segment",
            "edges(int in[1,128],(optional)) – Edges, Number of points per segment",
            "type(enum in['BOX','LINE','POLYLINE','CIRCLE','ARC','CURVE'],(optional)) – Type, Type of shape",
            "wait_for_input(boolean,(optional)) – Wait for Input"
        ]
    },
    {
        "function_id": "bpy.ops.gpencil.recalc_geometry",
        "signature": "bpy.ops.gpencil.recalc_geometry()#",
        "description": "Update all internal geometry data",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.gpencil.reproject",
        "signature": "bpy.ops.gpencil.reproject(type='VIEW',keep_original=False,offset=0.0)#",
        "description": "Reproject the selected strokes from the current viewpoint as if they had been newly drawn (e.g. to fix problems from accidental 3D cursor movement or accidental viewport changes, or for matching deforming geometry)",
        "parameters": [
            "type='VIEW'",
            "keep_original=False",
            "offset=0.0"
        ],
        "parameter_descriptions": [
            "type(enum in['FRONT','SIDE','TOP','VIEW','SURFACE','CURSOR'],(optional)) –Projection TypeFRONTFront – Reproject the strokes using the X-Z plane.SIDESide – Reproject the strokes using the Y-Z plane.TOPTop – Reproject the strokes using the X-Y plane.VIEWView – Reproject the strokes to end up on the same plane, as if drawn from the current viewpoint using ‘Cursor’ Stroke Placement.SURFACESurface – Reproject the strokes on to the scene geometry, as if drawn using ‘Surface’ placement.CURSORCursor – Reproject the strokes using the orientation of 3D cursor.",
            "FRONTFront – Reproject the strokes using the X-Z plane.",
            "SIDESide – Reproject the strokes using the Y-Z plane.",
            "TOPTop – Reproject the strokes using the X-Y plane.",
            "VIEWView – Reproject the strokes to end up on the same plane, as if drawn from the current viewpoint using ‘Cursor’ Stroke Placement.",
            "SURFACESurface – Reproject the strokes on to the scene geometry, as if drawn using ‘Surface’ placement.",
            "CURSORCursor – Reproject the strokes using the orientation of 3D cursor.",
            "keep_original(boolean,(optional)) – Keep Original, Keep original strokes and create a copy before reprojecting",
            "offset(float in[0,10],(optional)) – Surface Offset"
        ]
    },
    {
        "function_id": "bpy.ops.gpencil.reset_transform_fill",
        "signature": "bpy.ops.gpencil.reset_transform_fill(mode='ALL')#",
        "description": "Reset any UV transformation and back to default values",
        "parameters": [
            "mode='ALL'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.gpencil.reveal",
        "signature": "bpy.ops.gpencil.reveal(select=True)#",
        "description": "Show all Grease Pencil layers",
        "parameters": [
            "select=True"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.gpencil.sculpt_paint",
        "signature": "bpy.ops.gpencil.sculpt_paint(stroke=None,wait_for_input=True)#",
        "description": "Apply tweaks to strokes by painting over the strokes",
        "parameters": [
            "stroke=None",
            "wait_for_input=True"
        ],
        "parameter_descriptions": [
            "stroke(bpy_prop_collectionofOperatorStrokeElement, (optional)) – Stroke",
            "wait_for_input(boolean,(optional)) – Wait for Input, Enter a mini ‘sculpt-mode’ if enabled, otherwise, exit after drawing a single stroke"
        ]
    },
    {
        "function_id": "bpy.ops.gpencil.sculptmode_toggle",
        "signature": "bpy.ops.gpencil.sculptmode_toggle(back=False)#",
        "description": "Enter/Exit sculpt mode for Grease Pencil strokes",
        "parameters": [
            "back=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.gpencil.segment_add",
        "signature": "bpy.ops.gpencil.segment_add(modifier='')#",
        "description": "Add a segment to the dash modifier",
        "parameters": [
            "modifier=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.gpencil.segment_move",
        "signature": "bpy.ops.gpencil.segment_move(modifier='',type='UP')#",
        "description": "Move the active dash segment up or down",
        "parameters": [
            "modifier=''",
            "type='UP'"
        ],
        "parameter_descriptions": [
            "modifier(string,(optional,never None)) – Modifier, Name of the modifier to edit",
            "type(enum in['UP','DOWN'],(optional)) – Type"
        ]
    },
    {
        "function_id": "bpy.ops.gpencil.segment_remove",
        "signature": "bpy.ops.gpencil.segment_remove(modifier='',index=0)#",
        "description": "Remove the active segment from the dash modifier",
        "parameters": [
            "modifier=''",
            "index=0"
        ],
        "parameter_descriptions": [
            "modifier(string,(optional,never None)) – Modifier, Name of the modifier to edit",
            "index(int in[0,inf],(optional)) – Index, Index of the segment to remove"
        ]
    },
    {
        "function_id": "bpy.ops.gpencil.select",
        "signature": "bpy.ops.gpencil.select(extend=False,deselect=False,toggle=False,deselect_all=False,select_passthrough=False,entire_strokes=False,location=(0,0),use_shift_extend=False)#",
        "description": "Select Grease Pencil strokes and/or stroke points",
        "parameters": [
            "extend=False",
            "deselect=False",
            "toggle=False",
            "deselect_all=False",
            "select_passthrough=False",
            "entire_strokes=False",
            "location=(0,0)",
            "use_shift_extend=False"
        ],
        "parameter_descriptions": [
            "extend(boolean,(optional)) – Extend, Extend selection instead of deselecting everything first",
            "deselect(boolean,(optional)) – Deselect, Remove from selection",
            "toggle(boolean,(optional)) – Toggle Selection, Toggle the selection",
            "deselect_all(boolean,(optional)) – Deselect On Nothing, Deselect all when nothing under the cursor",
            "select_passthrough(boolean,(optional)) – Only Select Unselected, Ignore the select action when the element is already selected",
            "entire_strokes(boolean,(optional)) – Entire Strokes, Select entire strokes instead of just the nearest stroke vertex",
            "location(int arrayof2 items in[-inf,inf],(optional)) – Location, Mouse location",
            "use_shift_extend(boolean,(optional)) – Extend"
        ]
    },
    {
        "function_id": "bpy.ops.gpencil.select_all",
        "signature": "bpy.ops.gpencil.select_all(action='TOGGLE')#",
        "description": "Change selection of all Grease Pencil strokes currently visible",
        "parameters": [
            "action='TOGGLE'"
        ],
        "parameter_descriptions": [
            "TOGGLEToggle – Toggle selection for all elements.",
            "SELECTSelect – Select all elements.",
            "DESELECTDeselect – Deselect all elements.",
            "INVERTInvert – Invert selection of all elements."
        ]
    },
    {
        "function_id": "bpy.ops.gpencil.select_alternate",
        "signature": "bpy.ops.gpencil.select_alternate(unselect_ends=False)#",
        "description": "Select alternative points in same strokes as already selected points",
        "parameters": [
            "unselect_ends=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.gpencil.select_box",
        "signature": "bpy.ops.gpencil.select_box(xmin=0,xmax=0,ymin=0,ymax=0,wait_for_input=True,mode='SET')#",
        "description": "Select Grease Pencil strokes within a rectangular region",
        "parameters": [
            "xmin=0",
            "xmax=0",
            "ymin=0",
            "ymax=0",
            "wait_for_input=True",
            "mode='SET'"
        ],
        "parameter_descriptions": [
            "xmin(int in[-inf,inf],(optional)) – X Min",
            "xmax(int in[-inf,inf],(optional)) – X Max",
            "ymin(int in[-inf,inf],(optional)) – Y Min",
            "ymax(int in[-inf,inf],(optional)) – Y Max",
            "wait_for_input(boolean,(optional)) – Wait for Input",
            "mode(enum in['SET','ADD','SUB','XOR','AND'],(optional)) –ModeSETSet – Set a new selection.ADDExtend – Extend existing selection.SUBSubtract – Subtract existing selection.XORDifference – Invert existing selection.ANDIntersect – Intersect existing selection.",
            "SETSet – Set a new selection.",
            "ADDExtend – Extend existing selection.",
            "SUBSubtract – Subtract existing selection.",
            "XORDifference – Invert existing selection.",
            "ANDIntersect – Intersect existing selection."
        ]
    },
    {
        "function_id": "bpy.ops.gpencil.select_circle",
        "signature": "bpy.ops.gpencil.select_circle(x=0,y=0,radius=25,wait_for_input=True,mode='SET')#",
        "description": "Select Grease Pencil strokes using brush selection",
        "parameters": [
            "x=0",
            "y=0",
            "radius=25",
            "wait_for_input=True",
            "mode='SET'"
        ],
        "parameter_descriptions": [
            "x(int in[-inf,inf],(optional)) – X",
            "y(int in[-inf,inf],(optional)) – Y",
            "radius(int in[1,inf],(optional)) – Radius",
            "wait_for_input(boolean,(optional)) – Wait for Input",
            "mode(enum in['SET','ADD','SUB'],(optional)) –ModeSETSet – Set a new selection.ADDExtend – Extend existing selection.SUBSubtract – Subtract existing selection.",
            "SETSet – Set a new selection.",
            "ADDExtend – Extend existing selection.",
            "SUBSubtract – Subtract existing selection."
        ]
    },
    {
        "function_id": "bpy.ops.gpencil.select_first",
        "signature": "bpy.ops.gpencil.select_first(only_selected_strokes=False,extend=False)#",
        "description": "Select first point in Grease Pencil strokes",
        "parameters": [
            "only_selected_strokes=False",
            "extend=False"
        ],
        "parameter_descriptions": [
            "only_selected_strokes(boolean,(optional)) – Selected Strokes Only, Only select the first point of strokes that already have points selected",
            "extend(boolean,(optional)) – Extend, Extend selection instead of deselecting all other selected points"
        ]
    },
    {
        "function_id": "bpy.ops.gpencil.select_grouped",
        "signature": "bpy.ops.gpencil.select_grouped(type='LAYER')#",
        "description": "Select all strokes with similar characteristics",
        "parameters": [
            "type='LAYER'"
        ],
        "parameter_descriptions": [
            "LAYERLayer – Shared layers.",
            "MATERIALMaterial – Shared materials."
        ]
    },
    {
        "function_id": "bpy.ops.gpencil.select_lasso",
        "signature": "bpy.ops.gpencil.select_lasso(mode='SET',path=None)#",
        "description": "Select Grease Pencil strokes using lasso selection",
        "parameters": [
            "mode='SET'",
            "path=None"
        ],
        "parameter_descriptions": [
            "mode(enum in['SET','ADD','SUB','XOR','AND'],(optional)) –ModeSETSet – Set a new selection.ADDExtend – Extend existing selection.SUBSubtract – Subtract existing selection.XORDifference – Invert existing selection.ANDIntersect – Intersect existing selection.",
            "SETSet – Set a new selection.",
            "ADDExtend – Extend existing selection.",
            "SUBSubtract – Subtract existing selection.",
            "XORDifference – Invert existing selection.",
            "ANDIntersect – Intersect existing selection.",
            "path(bpy_prop_collectionofOperatorMousePath, (optional)) – Path"
        ]
    },
    {
        "function_id": "bpy.ops.gpencil.select_last",
        "signature": "bpy.ops.gpencil.select_last(only_selected_strokes=False,extend=False)#",
        "description": "Select last point in Grease Pencil strokes",
        "parameters": [
            "only_selected_strokes=False",
            "extend=False"
        ],
        "parameter_descriptions": [
            "only_selected_strokes(boolean,(optional)) – Selected Strokes Only, Only select the last point of strokes that already have points selected",
            "extend(boolean,(optional)) – Extend, Extend selection instead of deselecting all other selected points"
        ]
    },
    {
        "function_id": "bpy.ops.gpencil.select_less",
        "signature": "bpy.ops.gpencil.select_less()#",
        "description": "Shrink sets of selected Grease Pencil points",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.gpencil.select_linked",
        "signature": "bpy.ops.gpencil.select_linked()#",
        "description": "Select all points in same strokes as already selected points",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.gpencil.select_more",
        "signature": "bpy.ops.gpencil.select_more()#",
        "description": "Grow sets of selected Grease Pencil points",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.gpencil.select_random",
        "signature": "bpy.ops.gpencil.select_random(ratio=0.5,seed=0,action='SELECT',unselect_ends=False)#",
        "description": "Select random points for non selected strokes",
        "parameters": [
            "ratio=0.5",
            "seed=0",
            "action='SELECT'",
            "unselect_ends=False"
        ],
        "parameter_descriptions": [
            "ratio(float in[0,1],(optional)) – Ratio, Portion of items to select randomly",
            "seed(int in[0,inf],(optional)) – Random Seed, Seed for the random number generator",
            "action(enum in['SELECT','DESELECT'],(optional)) –Action, Selection action to executeSELECTSelect – Select all elements.DESELECTDeselect – Deselect all elements.",
            "SELECTSelect – Select all elements.",
            "DESELECTDeselect – Deselect all elements.",
            "unselect_ends(boolean,(optional)) – Unselect Ends, Do not select the first and last point of the stroke"
        ]
    },
    {
        "function_id": "bpy.ops.gpencil.select_vertex_color",
        "signature": "bpy.ops.gpencil.select_vertex_color(threshold=0)#",
        "description": "Select all points with similar vertex color of current selected",
        "parameters": [
            "threshold=0"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.gpencil.selection_opacity_toggle",
        "signature": "bpy.ops.gpencil.selection_opacity_toggle()#",
        "description": "Hide/Unhide selected points for Grease Pencil strokes setting alpha factor",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.gpencil.selectmode_toggle",
        "signature": "bpy.ops.gpencil.selectmode_toggle(mode=0)#",
        "description": "Set selection mode for Grease Pencil strokes",
        "parameters": [
            "mode=0"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.gpencil.set_active_material",
        "signature": "bpy.ops.gpencil.set_active_material()#",
        "description": "Set the selected stroke material as the active material",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.gpencil.snap_cursor_to_selected",
        "signature": "bpy.ops.gpencil.snap_cursor_to_selected()#",
        "description": "Snap cursor to center of selected points",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.gpencil.snap_to_cursor",
        "signature": "bpy.ops.gpencil.snap_to_cursor(use_offset=True)#",
        "description": "Snap selected points/strokes to the cursor",
        "parameters": [
            "use_offset=True"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.gpencil.snap_to_grid",
        "signature": "bpy.ops.gpencil.snap_to_grid()#",
        "description": "Snap selected points to the nearest grid points",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.gpencil.stroke_apply_thickness",
        "signature": "bpy.ops.gpencil.stroke_apply_thickness()#",
        "description": "Apply the thickness change of the layer to its strokes",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.gpencil.stroke_arrange",
        "signature": "bpy.ops.gpencil.stroke_arrange(direction='UP')#",
        "description": "Arrange selected strokes up/down in the display order of the active layer",
        "parameters": [
            "direction='UP'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.gpencil.stroke_caps_set",
        "signature": "bpy.ops.gpencil.stroke_caps_set(type='TOGGLE')#",
        "description": "Change stroke caps mode (rounded or flat)",
        "parameters": [
            "type='TOGGLE'"
        ],
        "parameter_descriptions": [
            "TOGGLEBoth.",
            "STARTStart.",
            "ENDEnd.",
            "DEFAULTDefault – Set as default rounded."
        ]
    },
    {
        "function_id": "bpy.ops.gpencil.stroke_change_color",
        "signature": "bpy.ops.gpencil.stroke_change_color(material='')#",
        "description": "Move selected strokes to active material",
        "parameters": [
            "material=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.gpencil.stroke_cutter",
        "signature": "bpy.ops.gpencil.stroke_cutter(path=None,flat_caps=False)#",
        "description": "Select section and cut",
        "parameters": [
            "path=None",
            "flat_caps=False"
        ],
        "parameter_descriptions": [
            "path(bpy_prop_collectionofOperatorMousePath, (optional)) – Path",
            "flat_caps(boolean,(optional)) – Flat Caps"
        ]
    },
    {
        "function_id": "bpy.ops.gpencil.stroke_cyclical_set",
        "signature": "bpy.ops.gpencil.stroke_cyclical_set(type='TOGGLE',geometry=False)#",
        "description": "Close or open the selected stroke adding a segment from last to first point",
        "parameters": [
            "type='TOGGLE'",
            "geometry=False"
        ],
        "parameter_descriptions": [
            "type(enum in['CLOSE','OPEN','TOGGLE'],(optional)) – Type",
            "geometry(boolean,(optional)) – Create Geometry, Create new geometry for closing stroke"
        ]
    },
    {
        "function_id": "bpy.ops.gpencil.stroke_editcurve_set_handle_type",
        "signature": "bpy.ops.gpencil.stroke_editcurve_set_handle_type(type='AUTOMATIC')#",
        "description": "Set the type of an edit curve handle",
        "parameters": [
            "type='AUTOMATIC'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.gpencil.stroke_enter_editcurve_mode",
        "signature": "bpy.ops.gpencil.stroke_enter_editcurve_mode(error_threshold=0.1)#",
        "description": "Called to transform a stroke into a curve",
        "parameters": [
            "error_threshold=0.1"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.gpencil.stroke_flip",
        "signature": "bpy.ops.gpencil.stroke_flip()#",
        "description": "Change direction of the points of the selected strokes",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.gpencil.stroke_join",
        "signature": "bpy.ops.gpencil.stroke_join(type='JOIN',leave_gaps=False)#",
        "description": "Join selected strokes (optionally as new stroke)",
        "parameters": [
            "type='JOIN'",
            "leave_gaps=False"
        ],
        "parameter_descriptions": [
            "type(enum in['JOIN','JOINCOPY'],(optional)) – Type",
            "leave_gaps(boolean,(optional)) – Leave Gaps, Leave gaps between joined strokes instead of linking them"
        ]
    },
    {
        "function_id": "bpy.ops.gpencil.stroke_merge",
        "signature": "bpy.ops.gpencil.stroke_merge(mode='STROKE',back=False,additive=False,cyclic=False,clear_point=False,clear_stroke=False)#",
        "description": "Create a new stroke with the selected stroke points",
        "parameters": [
            "mode='STROKE'",
            "back=False",
            "additive=False",
            "cyclic=False",
            "clear_point=False",
            "clear_stroke=False"
        ],
        "parameter_descriptions": [
            "mode(enum in['STROKE','POINT'],(optional)) – Mode",
            "back(boolean,(optional)) – Draw on Back, Draw new stroke below all previous strokes",
            "additive(boolean,(optional)) – Additive Drawing, Add to previous drawing",
            "cyclic(boolean,(optional)) – Cyclic, Close new stroke",
            "clear_point(boolean,(optional)) – Dissolve Points, Dissolve old selected points",
            "clear_stroke(boolean,(optional)) – Delete Strokes, Delete old selected strokes"
        ]
    },
    {
        "function_id": "bpy.ops.gpencil.stroke_merge_by_distance",
        "signature": "bpy.ops.gpencil.stroke_merge_by_distance(threshold=0.001,use_unselected=False)#",
        "description": "Merge points by distance",
        "parameters": [
            "threshold=0.001",
            "use_unselected=False"
        ],
        "parameter_descriptions": [
            "threshold(float in[0,100],(optional)) – Threshold",
            "use_unselected(boolean,(optional)) – Unselected, Use whole stroke, not only selected points"
        ]
    },
    {
        "function_id": "bpy.ops.gpencil.stroke_merge_material",
        "signature": "bpy.ops.gpencil.stroke_merge_material(hue_threshold=0.001,sat_threshold=0.001,val_threshold=0.001)#",
        "description": "Replace materials in strokes merging similar",
        "parameters": [
            "hue_threshold=0.001",
            "sat_threshold=0.001",
            "val_threshold=0.001"
        ],
        "parameter_descriptions": [
            "hue_threshold(float in[0,1],(optional)) – Hue Threshold",
            "sat_threshold(float in[0,1],(optional)) – Saturation Threshold",
            "val_threshold(float in[0,1],(optional)) – Value Threshold"
        ]
    },
    {
        "function_id": "bpy.ops.gpencil.stroke_normalize",
        "signature": "bpy.ops.gpencil.stroke_normalize(mode='THICKNESS',factor=1.0,value=10)#",
        "description": "Normalize stroke attributes",
        "parameters": [
            "mode='THICKNESS'",
            "factor=1.0",
            "value=10"
        ],
        "parameter_descriptions": [
            "mode(enum in['THICKNESS','OPACITY'],(optional)) –Mode, Attribute to be normalizedTHICKNESSThickness – Normalizes the stroke thickness by making all points use the same thickness value.OPACITYOpacity – Normalizes the stroke opacity by making all points use the same opacity value.",
            "THICKNESSThickness – Normalizes the stroke thickness by making all points use the same thickness value.",
            "OPACITYOpacity – Normalizes the stroke opacity by making all points use the same opacity value.",
            "factor(float in[0,1],(optional)) – Factor",
            "value(int in[0,1000],(optional)) – Value, Value"
        ]
    },
    {
        "function_id": "bpy.ops.gpencil.stroke_outline",
        "signature": "bpy.ops.gpencil.stroke_outline(view_mode='VIEW',material_mode='ACTIVE',thickness=1,keep=True,subdivisions=3,length=0.0)#",
        "description": "Convert stroke to perimeter",
        "parameters": [
            "view_mode='VIEW'",
            "material_mode='ACTIVE'",
            "thickness=1",
            "keep=True",
            "subdivisions=3",
            "length=0.0"
        ],
        "parameter_descriptions": [
            "view_mode(enum in['VIEW','FRONT','SIDE','TOP','CAMERA'],(optional)) – View",
            "material_mode(enum in['ACTIVE','KEEP','NEW'],(optional)) –Material ModeACTIVEActive Material.KEEPKeep Material – Keep current stroke material.NEWNew Material.",
            "ACTIVEActive Material.",
            "KEEPKeep Material – Keep current stroke material.",
            "NEWNew Material.",
            "thickness(int in[1,1000],(optional)) – Thickness, Thickness of the stroke perimeter",
            "keep(boolean,(optional)) – Keep Shape, Try to keep global shape when the stroke thickness change",
            "subdivisions(int in[0,10],(optional)) – Subdivisions",
            "length(float in[0,100],(optional)) – Sample Length"
        ]
    },
    {
        "function_id": "bpy.ops.gpencil.stroke_reset_vertex_color",
        "signature": "bpy.ops.gpencil.stroke_reset_vertex_color(mode='BOTH')#",
        "description": "Reset vertex color for all or selected strokes",
        "parameters": [
            "mode='BOTH'"
        ],
        "parameter_descriptions": [
            "STROKEStroke – Reset Vertex Color to Stroke only.",
            "FILLFill – Reset Vertex Color to Fill only.",
            "BOTHStroke & Fill – Reset Vertex Color to Stroke and Fill."
        ]
    },
    {
        "function_id": "bpy.ops.gpencil.stroke_sample",
        "signature": "bpy.ops.gpencil.stroke_sample(length=0.1,sharp_threshold=0.1)#",
        "description": "Sample stroke points to predefined segment length",
        "parameters": [
            "length=0.1",
            "sharp_threshold=0.1"
        ],
        "parameter_descriptions": [
            "length(float in[0,100],(optional)) – Length",
            "sharp_threshold(float in[0,3.14159],(optional)) – Sharp Threshold"
        ]
    },
    {
        "function_id": "bpy.ops.gpencil.stroke_separate",
        "signature": "bpy.ops.gpencil.stroke_separate(mode='POINT')#",
        "description": "Separate the selected strokes or layer in a new grease pencil object",
        "parameters": [
            "mode='POINT'"
        ],
        "parameter_descriptions": [
            "POINTSelected Points – Separate the selected points.",
            "STROKESelected Strokes – Separate the selected strokes.",
            "LAYERActive Layer – Separate the strokes of the current layer."
        ]
    },
    {
        "function_id": "bpy.ops.gpencil.stroke_simplify",
        "signature": "bpy.ops.gpencil.stroke_simplify(factor=0.0)#",
        "description": "Simplify selected strokes, reducing number of points",
        "parameters": [
            "factor=0.0"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.gpencil.stroke_simplify_fixed",
        "signature": "bpy.ops.gpencil.stroke_simplify_fixed(step=1)#",
        "description": "Simplify selected strokes, reducing number of points using fixed algorithm",
        "parameters": [
            "step=1"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.gpencil.stroke_smooth",
        "signature": "bpy.ops.gpencil.stroke_smooth(repeat=2,factor=1.0,only_selected=True,smooth_position=True,smooth_thickness=True,smooth_strength=False,smooth_uv=False)#",
        "description": "Smooth selected strokes",
        "parameters": [
            "repeat=2",
            "factor=1.0",
            "only_selected=True",
            "smooth_position=True",
            "smooth_thickness=True",
            "smooth_strength=False",
            "smooth_uv=False"
        ],
        "parameter_descriptions": [
            "repeat(int in[1,1000],(optional)) – Repeat",
            "factor(float in[0,2],(optional)) – Factor",
            "only_selected(boolean,(optional)) – Selected Points, Smooth only selected points in the stroke",
            "smooth_position(boolean,(optional)) – Position",
            "smooth_thickness(boolean,(optional)) – Thickness",
            "smooth_strength(boolean,(optional)) – Strength",
            "smooth_uv(boolean,(optional)) – UV"
        ]
    },
    {
        "function_id": "bpy.ops.gpencil.stroke_split",
        "signature": "bpy.ops.gpencil.stroke_split()#",
        "description": "Split selected points as new stroke on same frame",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.gpencil.stroke_start_set",
        "signature": "bpy.ops.gpencil.stroke_start_set()#",
        "description": "Set start point for cyclic strokes",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.gpencil.stroke_subdivide",
        "signature": "bpy.ops.gpencil.stroke_subdivide(number_cuts=1,factor=0.0,repeat=1,only_selected=True,smooth_position=True,smooth_thickness=True,smooth_strength=False,smooth_uv=False)#",
        "description": "Subdivide between continuous selected points of the stroke adding a point half way between them",
        "parameters": [
            "number_cuts=1",
            "factor=0.0",
            "repeat=1",
            "only_selected=True",
            "smooth_position=True",
            "smooth_thickness=True",
            "smooth_strength=False",
            "smooth_uv=False"
        ],
        "parameter_descriptions": [
            "number_cuts(int in[1,10],(optional)) – Number of Cuts",
            "factor(float in[0,2],(optional)) – Smooth",
            "repeat(int in[1,10],(optional)) – Repeat",
            "only_selected(boolean,(optional)) – Selected Points, Smooth only selected points in the stroke",
            "smooth_position(boolean,(optional)) – Position",
            "smooth_thickness(boolean,(optional)) – Thickness",
            "smooth_strength(boolean,(optional)) – Strength",
            "smooth_uv(boolean,(optional)) – UV"
        ]
    },
    {
        "function_id": "bpy.ops.gpencil.stroke_trim",
        "signature": "bpy.ops.gpencil.stroke_trim()#",
        "description": "Trim selected stroke to first loop or intersection",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.gpencil.time_segment_add",
        "signature": "bpy.ops.gpencil.time_segment_add(modifier='')#",
        "description": "Add a segment to the time modifier",
        "parameters": [
            "modifier=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.gpencil.time_segment_move",
        "signature": "bpy.ops.gpencil.time_segment_move(modifier='',type='UP')#",
        "description": "Move the active time segment up or down",
        "parameters": [
            "modifier=''",
            "type='UP'"
        ],
        "parameter_descriptions": [
            "modifier(string,(optional,never None)) – Modifier, Name of the modifier to edit",
            "type(enum in['UP','DOWN'],(optional)) – Type"
        ]
    },
    {
        "function_id": "bpy.ops.gpencil.time_segment_remove",
        "signature": "bpy.ops.gpencil.time_segment_remove(modifier='',index=0)#",
        "description": "Remove the active segment from the time modifier",
        "parameters": [
            "modifier=''",
            "index=0"
        ],
        "parameter_descriptions": [
            "modifier(string,(optional,never None)) – Modifier, Name of the modifier to edit",
            "index(int in[0,inf],(optional)) – Index, Index of the segment to remove"
        ]
    },
    {
        "function_id": "bpy.ops.gpencil.tint_flip",
        "signature": "bpy.ops.gpencil.tint_flip()#",
        "description": "Switch tint colors",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.gpencil.trace_image",
        "signature": "bpy.ops.gpencil.trace_image(target='NEW',thickness=10,resolution=5,scale=1.0,sample=0.0,threshold=0.5,turnpolicy='MINORITY',mode='SINGLE',use_current_frame=True,frame_number=0)#",
        "description": "Extract Grease Pencil strokes from image",
        "parameters": [
            "target='NEW'",
            "thickness=10",
            "resolution=5",
            "scale=1.0",
            "sample=0.0",
            "threshold=0.5",
            "turnpolicy='MINORITY'",
            "mode='SINGLE'",
            "use_current_frame=True",
            "frame_number=0"
        ],
        "parameter_descriptions": [
            "target(enum in['NEW','SELECTED'],(optional)) – Target Object, Target grease pencil",
            "thickness(int in[1,1000],(optional)) – Thickness",
            "resolution(int in[1,20],(optional)) – Resolution, Resolution of the generated curves",
            "scale(float in[0.001,100],(optional)) – Scale, Scale of the final stroke",
            "sample(float in[0,100],(optional)) – Sample, Distance to sample points, zero to disable",
            "threshold(float in[0,1],(optional)) – Color Threshold, Determine the lightness threshold above which strokes are generated",
            "turnpolicy(enum in['BLACK','WHITE','LEFT','RIGHT','MINORITY','MAJORITY','RANDOM'],(optional)) –Turn Policy, Determines how to resolve ambiguities during decomposition of bitmaps into pathsBLACKBlack – Prefers to connect black (foreground) components.WHITEWhite – Prefers to connect white (background) components.LEFTLeft – Always take a left turn.RIGHTRight – Always take a right turn.MINORITYMinority – Prefers to connect the color (black or white) that occurs least frequently in the local neighborhood of the current position.MAJORITYMajority – Prefers to connect the color (black or white) that occurs most frequently in the local neighborhood of the current position.RANDOMRandom – Choose pseudo-randomly.",
            "BLACKBlack – Prefers to connect black (foreground) components.",
            "WHITEWhite – Prefers to connect white (background) components.",
            "LEFTLeft – Always take a left turn.",
            "RIGHTRight – Always take a right turn.",
            "MINORITYMinority – Prefers to connect the color (black or white) that occurs least frequently in the local neighborhood of the current position.",
            "MAJORITYMajority – Prefers to connect the color (black or white) that occurs most frequently in the local neighborhood of the current position.",
            "RANDOMRandom – Choose pseudo-randomly.",
            "mode(enum in['SINGLE','SEQUENCE'],(optional)) –Mode, Determines if trace simple image or full sequenceSINGLESingle – Trace the current frame of the image.SEQUENCESequence – Trace full sequence.",
            "SINGLESingle – Trace the current frame of the image.",
            "SEQUENCESequence – Trace full sequence.",
            "use_current_frame(boolean,(optional)) – Start At Current Frame, Trace Image starting in current image frame",
            "frame_number(int in[0,9999],(optional)) – Trace Frame, Used to trace only one frame of the image sequence, set to zero to trace all"
        ]
    },
    {
        "function_id": "bpy.ops.gpencil.transform_fill",
        "signature": "bpy.ops.gpencil.transform_fill(mode='ROTATE',location=(0.0,0.0),rotation=0.0,scale=0.0,release_confirm=False)#",
        "description": "Transform grease pencil stroke fill",
        "parameters": [
            "mode='ROTATE'",
            "location=(0.0,0.0)",
            "rotation=0.0",
            "scale=0.0",
            "release_confirm=False"
        ],
        "parameter_descriptions": [
            "mode(enum in['TRANSLATE','ROTATE','SCALE'],(optional)) – Mode",
            "location(mathutils.Vectorof 2 items in [-inf, inf], (optional)) – Location",
            "rotation(float in[-6.28319,6.28319],(optional)) – Rotation",
            "scale(float in[0.001,100],(optional)) – Scale",
            "release_confirm(boolean,(optional)) – Confirm on Release"
        ]
    },
    {
        "function_id": "bpy.ops.gpencil.unlock_all",
        "signature": "bpy.ops.gpencil.unlock_all()#",
        "description": "Unlock all Grease Pencil layers so that they can be edited",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.gpencil.vertex_color_brightness_contrast",
        "signature": "bpy.ops.gpencil.vertex_color_brightness_contrast(mode='BOTH',brightness=0.0,contrast=0.0)#",
        "description": "Adjust vertex color brightness/contrast",
        "parameters": [
            "mode='BOTH'",
            "brightness=0.0",
            "contrast=0.0"
        ],
        "parameter_descriptions": [
            "mode(enum in['STROKE','FILL','BOTH'],(optional)) – Mode",
            "brightness(float in[-100,100],(optional)) – Brightness",
            "contrast(float in[-100,100],(optional)) – Contrast"
        ]
    },
    {
        "function_id": "bpy.ops.gpencil.vertex_color_hsv",
        "signature": "bpy.ops.gpencil.vertex_color_hsv(mode='BOTH',h=0.5,s=1.0,v=1.0)#",
        "description": "Adjust vertex color HSV values",
        "parameters": [
            "mode='BOTH'",
            "h=0.5",
            "s=1.0",
            "v=1.0"
        ],
        "parameter_descriptions": [
            "mode(enum in['STROKE','FILL','BOTH'],(optional)) – Mode",
            "h(float in[0,1],(optional)) – Hue",
            "s(float in[0,2],(optional)) – Saturation",
            "v(float in[0,2],(optional)) – Value"
        ]
    },
    {
        "function_id": "bpy.ops.gpencil.vertex_color_invert",
        "signature": "bpy.ops.gpencil.vertex_color_invert(mode='BOTH')#",
        "description": "Invert RGB values",
        "parameters": [
            "mode='BOTH'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.gpencil.vertex_color_levels",
        "signature": "bpy.ops.gpencil.vertex_color_levels(mode='BOTH',offset=0.0,gain=1.0)#",
        "description": "Adjust levels of vertex colors",
        "parameters": [
            "mode='BOTH'",
            "offset=0.0",
            "gain=1.0"
        ],
        "parameter_descriptions": [
            "mode(enum in['STROKE','FILL','BOTH'],(optional)) – Mode",
            "offset(float in[-1,1],(optional)) – Offset, Value to add to colors",
            "gain(float in[0,inf],(optional)) – Gain, Value to multiply colors by"
        ]
    },
    {
        "function_id": "bpy.ops.gpencil.vertex_color_set",
        "signature": "bpy.ops.gpencil.vertex_color_set(mode='BOTH',factor=1.0)#",
        "description": "Set active color to all selected vertex",
        "parameters": [
            "mode='BOTH'",
            "factor=1.0"
        ],
        "parameter_descriptions": [
            "mode(enum in['STROKE','FILL','BOTH'],(optional)) – Mode",
            "factor(float in[0.001,1],(optional)) – Factor, Mix Factor"
        ]
    },
    {
        "function_id": "bpy.ops.gpencil.vertex_group_assign",
        "signature": "bpy.ops.gpencil.vertex_group_assign()#",
        "description": "Assign the selected vertices to the active vertex group",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.gpencil.vertex_group_deselect",
        "signature": "bpy.ops.gpencil.vertex_group_deselect()#",
        "description": "Deselect all selected vertices assigned to the active vertex group",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.gpencil.vertex_group_invert",
        "signature": "bpy.ops.gpencil.vertex_group_invert()#",
        "description": "Invert weights to the active vertex group",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.gpencil.vertex_group_normalize",
        "signature": "bpy.ops.gpencil.vertex_group_normalize()#",
        "description": "Normalize weights to the active vertex group",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.gpencil.vertex_group_normalize_all",
        "signature": "bpy.ops.gpencil.vertex_group_normalize_all(lock_active=True)#",
        "description": "Normalize all weights of all vertex groups, so that for each vertex, the sum of all weights is 1.0",
        "parameters": [
            "lock_active=True"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.gpencil.vertex_group_remove_from",
        "signature": "bpy.ops.gpencil.vertex_group_remove_from()#",
        "description": "Remove the selected vertices from active or all vertex group(s)",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.gpencil.vertex_group_select",
        "signature": "bpy.ops.gpencil.vertex_group_select()#",
        "description": "Select all the vertices assigned to the active vertex group",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.gpencil.vertex_group_smooth",
        "signature": "bpy.ops.gpencil.vertex_group_smooth(factor=0.5,repeat=1)#",
        "description": "Smooth weights to the active vertex group",
        "parameters": [
            "factor=0.5",
            "repeat=1"
        ],
        "parameter_descriptions": [
            "factor(float in[0,1],(optional)) – Factor",
            "repeat(int in[1,10000],(optional)) – Iterations"
        ]
    },
    {
        "function_id": "bpy.ops.gpencil.vertex_paint",
        "signature": "bpy.ops.gpencil.vertex_paint(stroke=None,wait_for_input=True)#",
        "description": "Paint stroke points with a color",
        "parameters": [
            "stroke=None",
            "wait_for_input=True"
        ],
        "parameter_descriptions": [
            "stroke(bpy_prop_collectionofOperatorStrokeElement, (optional)) – Stroke",
            "wait_for_input(boolean,(optional)) – Wait for Input"
        ]
    },
    {
        "function_id": "bpy.ops.gpencil.vertexmode_toggle",
        "signature": "bpy.ops.gpencil.vertexmode_toggle(back=False)#",
        "description": "Enter/Exit vertex paint mode for Grease Pencil strokes",
        "parameters": [
            "back=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.gpencil.weight_paint",
        "signature": "bpy.ops.gpencil.weight_paint(stroke=None,wait_for_input=True)#",
        "description": "Draw weight on stroke points",
        "parameters": [
            "stroke=None",
            "wait_for_input=True"
        ],
        "parameter_descriptions": [
            "stroke(bpy_prop_collectionofOperatorStrokeElement, (optional)) – Stroke",
            "wait_for_input(boolean,(optional)) – Wait for Input"
        ]
    },
    {
        "function_id": "bpy.ops.gpencil.weight_sample",
        "signature": "bpy.ops.gpencil.weight_sample()#",
        "description": "Use the mouse to sample a weight in the 3D view",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.gpencil.weight_toggle_direction",
        "signature": "bpy.ops.gpencil.weight_toggle_direction()#",
        "description": "Toggle Add/Subtract for the weight paint draw tool",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.gpencil.weightmode_toggle",
        "signature": "bpy.ops.gpencil.weightmode_toggle(back=False)#",
        "description": "Enter/Exit weight paint mode for Grease Pencil strokes",
        "parameters": [
            "back=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.preferences.addon_disable",
        "signature": "bpy.ops.preferences.addon_disable(module='')#",
        "description": "Turn off this extension",
        "parameters": [
            "module=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.preferences.addon_enable",
        "signature": "bpy.ops.preferences.addon_enable(module='')#",
        "description": "Turn on this extension",
        "parameters": [
            "module=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.preferences.addon_expand",
        "signature": "bpy.ops.preferences.addon_expand(module='')#",
        "description": "Display information and preferences for this add-on",
        "parameters": [
            "module=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.preferences.addon_install",
        "signature": "bpy.ops.preferences.addon_install(overwrite=True,enable_on_install=False,target='',filepath='',filter_folder=True,filter_python=True,filter_glob='*.py;*.zip')#",
        "description": "Install an add-on",
        "parameters": [
            "overwrite=True",
            "enable_on_install=False",
            "target=''",
            "filepath=''",
            "filter_folder=True",
            "filter_python=True",
            "filter_glob='*.py;*.zip'"
        ],
        "parameter_descriptions": [
            "overwrite(boolean,(optional)) – Overwrite, Remove existing add-ons with the same ID",
            "enable_on_install(boolean,(optional)) – Enable on Install, Enable after installing",
            "target(enum in[],(optional)) – Target Path",
            "filepath(string,(optional,never None)) – filepath",
            "filter_folder(boolean,(optional)) – Filter folders",
            "filter_python(boolean,(optional)) – Filter Python",
            "filter_glob(string,(optional,never None)) – filter_glob"
        ]
    },
    {
        "function_id": "bpy.ops.preferences.addon_refresh",
        "signature": "bpy.ops.preferences.addon_refresh()#",
        "description": "Scan add-on directories for new modules",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.preferences.addon_remove",
        "signature": "bpy.ops.preferences.addon_remove(module='')#",
        "description": "Delete the add-on from the file system",
        "parameters": [
            "module=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.preferences.addon_show",
        "signature": "bpy.ops.preferences.addon_show(module='')#",
        "description": "Show add-on preferences",
        "parameters": [
            "module=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.preferences.app_template_install",
        "signature": "bpy.ops.preferences.app_template_install(overwrite=True,filepath='',filter_folder=True,filter_glob='*.zip')#",
        "description": "Install an application template",
        "parameters": [
            "overwrite=True",
            "filepath=''",
            "filter_folder=True",
            "filter_glob='*.zip'"
        ],
        "parameter_descriptions": [
            "overwrite(boolean,(optional)) – Overwrite, Remove existing template with the same ID",
            "filepath(string,(optional,never None)) – filepath",
            "filter_folder(boolean,(optional)) – Filter folders",
            "filter_glob(string,(optional,never None)) – filter_glob"
        ]
    },
    {
        "function_id": "bpy.ops.preferences.asset_library_add",
        "signature": "bpy.ops.preferences.asset_library_add(directory='',hide_props_region=True,check_existing=False,filter_blender=False,filter_backup=False,filter_image=False,filter_movie=False,filter_python=False,filter_font=False,filter_sound=False,filter_text=False,filter_archive=False,filter_btx=False,filter_collada=False,filter_alembic=False,filter_usd=False,filter_obj=False,filter_volume=False,filter_folder=True,filter_blenlib=False,filemode=9,display_type='DEFAULT',sort_method='')#",
        "description": "Add a directory to be used by the Asset Browser as source of assets",
        "parameters": [
            "directory=''",
            "hide_props_region=True",
            "check_existing=False",
            "filter_blender=False",
            "filter_backup=False",
            "filter_image=False",
            "filter_movie=False",
            "filter_python=False",
            "filter_font=False",
            "filter_sound=False",
            "filter_text=False",
            "filter_archive=False",
            "filter_btx=False",
            "filter_collada=False",
            "filter_alembic=False",
            "filter_usd=False",
            "filter_obj=False",
            "filter_volume=False",
            "filter_folder=True",
            "filter_blenlib=False",
            "filemode=9",
            "display_type='DEFAULT'",
            "sort_method=''"
        ],
        "parameter_descriptions": [
            "directory(string,(optional,never None)) – Directory, Directory of the file",
            "hide_props_region(boolean,(optional)) – Hide Operator Properties, Collapse the region displaying the operator settings",
            "check_existing(boolean,(optional)) – Check Existing, Check and warn on overwriting existing files",
            "filter_blender(boolean,(optional)) – Filter .blend files",
            "filter_backup(boolean,(optional)) – Filter .blend files",
            "filter_image(boolean,(optional)) – Filter image files",
            "filter_movie(boolean,(optional)) – Filter movie files",
            "filter_python(boolean,(optional)) – Filter Python files",
            "filter_font(boolean,(optional)) – Filter font files",
            "filter_sound(boolean,(optional)) – Filter sound files",
            "filter_text(boolean,(optional)) – Filter text files",
            "filter_archive(boolean,(optional)) – Filter archive files",
            "filter_btx(boolean,(optional)) – Filter btx files",
            "filter_collada(boolean,(optional)) – Filter COLLADA files",
            "filter_alembic(boolean,(optional)) – Filter Alembic files",
            "filter_usd(boolean,(optional)) – Filter USD files",
            "filter_obj(boolean,(optional)) – Filter OBJ files",
            "filter_volume(boolean,(optional)) – Filter OpenVDB volume files",
            "filter_folder(boolean,(optional)) – Filter folders",
            "filter_blenlib(boolean,(optional)) – Filter Blender IDs",
            "filemode(int in[1,9],(optional)) – File Browser Mode, The setting for the file browser mode to load a .blend file, a library or a special file",
            "display_type(enum in['DEFAULT','LIST_VERTICAL','LIST_HORIZONTAL','THUMBNAIL'],(optional)) –Display TypeDEFAULTDefault – Automatically determine display type for files.LIST_VERTICALShort List – Display files as short list.LIST_HORIZONTALLong List – Display files as a detailed list.THUMBNAILThumbnails – Display files as thumbnails.",
            "DEFAULTDefault – Automatically determine display type for files.",
            "LIST_VERTICALShort List – Display files as short list.",
            "LIST_HORIZONTALLong List – Display files as a detailed list.",
            "THUMBNAILThumbnails – Display files as thumbnails.",
            "sort_method(enum in[],(optional)) – File sorting mode"
        ]
    },
    {
        "function_id": "bpy.ops.preferences.asset_library_remove",
        "signature": "bpy.ops.preferences.asset_library_remove(index=0)#",
        "description": "Remove a path to a .blend file, so the Asset Browser will not attempt to show it anymore",
        "parameters": [
            "index=0"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.preferences.associate_blend",
        "signature": "bpy.ops.preferences.associate_blend()#",
        "description": "Use this installation for .blend files and to display thumbnails",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.preferences.autoexec_path_add",
        "signature": "bpy.ops.preferences.autoexec_path_add()#",
        "description": "Add path to exclude from auto-execution",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.preferences.autoexec_path_remove",
        "signature": "bpy.ops.preferences.autoexec_path_remove(index=0)#",
        "description": "Remove path to exclude from auto-execution",
        "parameters": [
            "index=0"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.preferences.copy_prev",
        "signature": "bpy.ops.preferences.copy_prev()#",
        "description": "Copy settings from previous version",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.preferences.extension_repo_add",
        "signature": "bpy.ops.preferences.extension_repo_add(name='',remote_url='',use_access_token=False,access_token='',use_sync_on_startup=False,use_custom_directory=False,custom_directory='',type='REMOTE')#",
        "description": "Add a new repository used to store extensions",
        "parameters": [
            "name=''",
            "remote_url=''",
            "use_access_token=False",
            "access_token=''",
            "use_sync_on_startup=False",
            "use_custom_directory=False",
            "custom_directory=''",
            "type='REMOTE'"
        ],
        "parameter_descriptions": [
            "name(string,(optional,never None)) – Name, Unique repository name",
            "remote_url(string,(optional,never None)) – URL, Remote URL to the extension repository, the file-system may be referenced using the file URI scheme: “file://”",
            "use_access_token(boolean,(optional)) – Requires Access Token, Repository requires an access token",
            "access_token(string,(optional,never None)) – Secret, Personal access token, may be required by some repositories",
            "use_sync_on_startup(boolean,(optional)) – Check for Updates on Startup, Allow Blender to check for updates upon launch",
            "use_custom_directory(boolean,(optional)) – Custom Directory, Manually set the path for extensions to be stored. When disabled a user’s extensions directory is created",
            "custom_directory(string,(optional,never None)) – Custom Directory, The local directory containing extensions",
            "type(enum in['REMOTE','LOCAL'],(optional)) –Type, The kind of repository to addREMOTEAdd Remote Repository – Add a repository referencing an remote repository with support for listing and updating extensions.LOCALAdd Local Repository – Add a repository managed manually without referencing an external repository.",
            "REMOTEAdd Remote Repository – Add a repository referencing an remote repository with support for listing and updating extensions.",
            "LOCALAdd Local Repository – Add a repository managed manually without referencing an external repository."
        ]
    },
    {
        "function_id": "bpy.ops.preferences.extension_repo_remove",
        "signature": "bpy.ops.preferences.extension_repo_remove(index=0,remove_files=False)#",
        "description": "Remove an extension repository",
        "parameters": [
            "index=0",
            "remove_files=False"
        ],
        "parameter_descriptions": [
            "index(int in[0,inf],(optional)) – Index",
            "remove_files(boolean,(optional)) – Remove Files, Remove extension files when removing the repository"
        ]
    },
    {
        "function_id": "bpy.ops.preferences.extension_url_drop",
        "signature": "bpy.ops.preferences.extension_url_drop(url='')#",
        "description": "Handle dropping an extension URL",
        "parameters": [
            "url=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.preferences.keyconfig_activate",
        "signature": "bpy.ops.preferences.keyconfig_activate(filepath='')#",
        "description": "Undocumented, considercontributing.",
        "parameters": [
            "filepath=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.preferences.keyconfig_export",
        "signature": "bpy.ops.preferences.keyconfig_export(all=False,filepath='',filter_folder=True,filter_text=True,filter_python=True)#",
        "description": "Export key configuration to a Python script",
        "parameters": [
            "all=False",
            "filepath=''",
            "filter_folder=True",
            "filter_text=True",
            "filter_python=True"
        ],
        "parameter_descriptions": [
            "all(boolean,(optional)) – All Keymaps, Write all keymaps (not just user modified)",
            "filepath(string,(optional,never None)) – filepath",
            "filter_folder(boolean,(optional)) – Filter folders",
            "filter_text(boolean,(optional)) – Filter text",
            "filter_python(boolean,(optional)) – Filter Python"
        ]
    },
    {
        "function_id": "bpy.ops.preferences.keyconfig_import",
        "signature": "bpy.ops.preferences.keyconfig_import(filepath='keymap.py',filter_folder=True,filter_text=True,filter_python=True,keep_original=True)#",
        "description": "Import key configuration from a Python script",
        "parameters": [
            "filepath='keymap.py'",
            "filter_folder=True",
            "filter_text=True",
            "filter_python=True",
            "keep_original=True"
        ],
        "parameter_descriptions": [
            "filepath(string,(optional,never None)) – filepath",
            "filter_folder(boolean,(optional)) – Filter folders",
            "filter_text(boolean,(optional)) – Filter text",
            "filter_python(boolean,(optional)) – Filter Python",
            "keep_original(boolean,(optional)) – Keep Original, Keep original file after copying to configuration folder"
        ]
    },
    {
        "function_id": "bpy.ops.preferences.keyconfig_remove",
        "signature": "bpy.ops.preferences.keyconfig_remove()#",
        "description": "Remove key config",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.preferences.keyconfig_test",
        "signature": "bpy.ops.preferences.keyconfig_test()#",
        "description": "Test key configuration for conflicts",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.preferences.keyitem_add",
        "signature": "bpy.ops.preferences.keyitem_add()#",
        "description": "Add key map item",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.preferences.keyitem_remove",
        "signature": "bpy.ops.preferences.keyitem_remove(item_id=0)#",
        "description": "Remove key map item",
        "parameters": [
            "item_id=0"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.preferences.keyitem_restore",
        "signature": "bpy.ops.preferences.keyitem_restore(item_id=0)#",
        "description": "Restore key map item",
        "parameters": [
            "item_id=0"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.preferences.keymap_restore",
        "signature": "bpy.ops.preferences.keymap_restore(all=False)#",
        "description": "Restore key map(s)",
        "parameters": [
            "all=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.preferences.reset_default_theme",
        "signature": "bpy.ops.preferences.reset_default_theme()#",
        "description": "Reset to the default theme colors",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.preferences.script_directory_add",
        "signature": "bpy.ops.preferences.script_directory_add(directory='',filter_folder=True)#",
        "description": "Undocumented, considercontributing.",
        "parameters": [
            "directory=''",
            "filter_folder=True"
        ],
        "parameter_descriptions": [
            "directory(string,(optional,never None)) – directory",
            "filter_folder(boolean,(optional)) – Filter Folders"
        ]
    },
    {
        "function_id": "bpy.ops.preferences.script_directory_remove",
        "signature": "bpy.ops.preferences.script_directory_remove(index=0)#",
        "description": "Undocumented, considercontributing.",
        "parameters": [
            "index=0"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.preferences.studiolight_copy_settings",
        "signature": "bpy.ops.preferences.studiolight_copy_settings(index=0)#",
        "description": "Copy Studio Light settings to the Studio Light editor",
        "parameters": [
            "index=0"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.preferences.studiolight_install",
        "signature": "bpy.ops.preferences.studiolight_install(files=None,directory='',filter_folder=True,filter_glob='*.png;*.jpg;*.hdr;*.exr',type='MATCAP')#",
        "description": "Install a user defined light",
        "parameters": [
            "files=None",
            "directory=''",
            "filter_folder=True",
            "filter_glob='*.png;*.jpg;*.hdr;*.exr'",
            "type='MATCAP'"
        ],
        "parameter_descriptions": [
            "files(bpy_prop_collectionofOperatorFileListElement, (optional)) – File Path",
            "directory(string,(optional,never None)) – directory",
            "filter_folder(boolean,(optional)) – Filter Folders",
            "filter_glob(string,(optional,never None)) – filter_glob",
            "type(enum in['MATCAP','WORLD','STUDIO'],(optional)) –TypeMATCAPMatCap – Install custom MatCaps.WORLDWorld – Install custom HDRIs.STUDIOStudio – Install custom Studio Lights.",
            "MATCAPMatCap – Install custom MatCaps.",
            "WORLDWorld – Install custom HDRIs.",
            "STUDIOStudio – Install custom Studio Lights."
        ]
    },
    {
        "function_id": "bpy.ops.preferences.studiolight_new",
        "signature": "bpy.ops.preferences.studiolight_new(filename='StudioLight')#",
        "description": "Save custom studio light from the studio light editor settings",
        "parameters": [
            "filename='StudioLight'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.preferences.studiolight_uninstall",
        "signature": "bpy.ops.preferences.studiolight_uninstall(index=0)#",
        "description": "Delete Studio Light",
        "parameters": [
            "index=0"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.preferences.theme_install",
        "signature": "bpy.ops.preferences.theme_install(overwrite=True,filepath='',filter_folder=True,filter_glob='*.xml')#",
        "description": "Load and apply a Blender XML theme file",
        "parameters": [
            "overwrite=True",
            "filepath=''",
            "filter_folder=True",
            "filter_glob='*.xml'"
        ],
        "parameter_descriptions": [
            "overwrite(boolean,(optional)) – Overwrite, Remove existing theme file if exists",
            "filepath(string,(optional,never None)) – filepath",
            "filter_folder(boolean,(optional)) – Filter folders",
            "filter_glob(string,(optional,never None)) – filter_glob"
        ]
    },
    {
        "function_id": "bpy.ops.preferences.unassociate_blend",
        "signature": "bpy.ops.preferences.unassociate_blend()#",
        "description": "Remove this installation’s associations with .blend files",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.uv.align",
        "signature": "bpy.ops.uv.align(axis='ALIGN_AUTO')#",
        "description": "Aligns selected UV vertices on a line",
        "parameters": [
            "axis='ALIGN_AUTO'"
        ],
        "parameter_descriptions": [
            "ALIGN_SStraighten – Align UV vertices along the line defined by the endpoints.",
            "ALIGN_TStraighten X – Align UV vertices, moving them horizontally to the line defined by the endpoints.",
            "ALIGN_UStraighten Y – Align UV vertices, moving them vertically to the line defined by the endpoints.",
            "ALIGN_AUTOAlign Auto – Automatically choose the direction on which there is most alignment already.",
            "ALIGN_XAlign Vertically – Align UV vertices on a vertical line.",
            "ALIGN_YAlign Horizontally – Align UV vertices on a horizontal line."
        ]
    },
    {
        "function_id": "bpy.ops.uv.align_rotation",
        "signature": "bpy.ops.uv.align_rotation(method='AUTO',axis='X',correct_aspect=False)#",
        "description": "Align the UV island’s rotation",
        "parameters": [
            "method='AUTO'",
            "axis='X'",
            "correct_aspect=False"
        ],
        "parameter_descriptions": [
            "method(enum in['AUTO','EDGE','GEOMETRY'],(optional)) –Method, Method to calculate rotation angleAUTOAuto – Align from all edges.EDGEEdge – Only selected edges.GEOMETRYGeometry – Align to Geometry axis.",
            "AUTOAuto – Align from all edges.",
            "EDGEEdge – Only selected edges.",
            "GEOMETRYGeometry – Align to Geometry axis.",
            "axis(enum in['X','Y','Z'],(optional)) –Axis, Axis to align toXX – X axis.YY – Y axis.ZZ – Z axis.",
            "XX – X axis.",
            "YY – Y axis.",
            "ZZ – Z axis.",
            "correct_aspect(boolean,(optional)) – Correct Aspect, Take image aspect ratio into account"
        ]
    },
    {
        "function_id": "bpy.ops.uv.average_islands_scale",
        "signature": "bpy.ops.uv.average_islands_scale(scale_uv=False,shear=False)#",
        "description": "Average the size of separate UV islands, based on their area in 3D space",
        "parameters": [
            "scale_uv=False",
            "shear=False"
        ],
        "parameter_descriptions": [
            "scale_uv(boolean,(optional)) – Non-Uniform, Scale U and V independently",
            "shear(boolean,(optional)) – Shear, Reduce shear within islands"
        ]
    },
    {
        "function_id": "bpy.ops.uv.copy",
        "signature": "bpy.ops.uv.copy()#",
        "description": "Copy selected UV vertices",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.uv.cube_project",
        "signature": "bpy.ops.uv.cube_project(cube_size=1.0,correct_aspect=True,clip_to_bounds=False,scale_to_bounds=False)#",
        "description": "Project the UV vertices of the mesh over the six faces of a cube",
        "parameters": [
            "cube_size=1.0",
            "correct_aspect=True",
            "clip_to_bounds=False",
            "scale_to_bounds=False"
        ],
        "parameter_descriptions": [
            "cube_size(float in[0,inf],(optional)) – Cube Size, Size of the cube to project on",
            "correct_aspect(boolean,(optional)) – Correct Aspect, Map UVs taking image aspect ratio into account",
            "clip_to_bounds(boolean,(optional)) – Clip to Bounds, Clip UV coordinates to bounds after unwrapping",
            "scale_to_bounds(boolean,(optional)) – Scale to Bounds, Scale UV coordinates to bounds after unwrapping"
        ]
    },
    {
        "function_id": "bpy.ops.uv.cursor_set",
        "signature": "bpy.ops.uv.cursor_set(location=(0.0,0.0))#",
        "description": "Set 2D cursor location",
        "parameters": [
            "location=(0.0,0.0)"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.uv.cylinder_project",
        "signature": "bpy.ops.uv.cylinder_project(direction='VIEW_ON_EQUATOR',align='POLAR_ZX',pole='PINCH',seam=False,radius=1.0,correct_aspect=True,clip_to_bounds=False,scale_to_bounds=False)#",
        "description": "Project the UV vertices of the mesh over the curved wall of a cylinder",
        "parameters": [
            "direction='VIEW_ON_EQUATOR'",
            "align='POLAR_ZX'",
            "pole='PINCH'",
            "seam=False",
            "radius=1.0",
            "correct_aspect=True",
            "clip_to_bounds=False",
            "scale_to_bounds=False"
        ],
        "parameter_descriptions": [
            "direction(enum in['VIEW_ON_EQUATOR','VIEW_ON_POLES','ALIGN_TO_OBJECT'],(optional)) –Direction, Direction of the sphere or cylinderVIEW_ON_EQUATORView on Equator – 3D view is on the equator.VIEW_ON_POLESView on Poles – 3D view is on the poles.ALIGN_TO_OBJECTAlign to Object – Align according to object transform.",
            "VIEW_ON_EQUATORView on Equator – 3D view is on the equator.",
            "VIEW_ON_POLESView on Poles – 3D view is on the poles.",
            "ALIGN_TO_OBJECTAlign to Object – Align according to object transform.",
            "align(enum in['POLAR_ZX','POLAR_ZY'],(optional)) –Align, How to determine rotation around the polePOLAR_ZXPolar ZX – Polar 0 is X.POLAR_ZYPolar ZY – Polar 0 is Y.",
            "POLAR_ZXPolar ZX – Polar 0 is X.",
            "POLAR_ZYPolar ZY – Polar 0 is Y.",
            "pole(enum in['PINCH','FAN'],(optional)) –Pole, How to handle faces at the polesPINCHPinch – UVs are pinched at the poles.FANFan – UVs are fanned at the poles.",
            "PINCHPinch – UVs are pinched at the poles.",
            "FANFan – UVs are fanned at the poles.",
            "seam(boolean,(optional)) – Preserve Seams, Separate projections by islands isolated by seams",
            "radius(float in[0,inf],(optional)) – Radius, Radius of the sphere or cylinder",
            "correct_aspect(boolean,(optional)) – Correct Aspect, Map UVs taking image aspect ratio into account",
            "clip_to_bounds(boolean,(optional)) – Clip to Bounds, Clip UV coordinates to bounds after unwrapping",
            "scale_to_bounds(boolean,(optional)) – Scale to Bounds, Scale UV coordinates to bounds after unwrapping"
        ]
    },
    {
        "function_id": "bpy.ops.uv.export_layout",
        "signature": "bpy.ops.uv.export_layout(filepath='',export_all=False,export_tiles='NONE',modified=False,mode='PNG',size=(1024,1024),opacity=0.25,check_existing=True)#",
        "description": "Export UV layout to file",
        "parameters": [
            "filepath=''",
            "export_all=False",
            "export_tiles='NONE'",
            "modified=False",
            "mode='PNG'",
            "size=(1024,1024)",
            "opacity=0.25",
            "check_existing=True"
        ],
        "parameter_descriptions": [
            "filepath(string,(optional,never None)) – filepath",
            "export_all(boolean,(optional)) – All UVs, Export all UVs in this mesh (not just visible ones)",
            "export_tiles(enum in['NONE','UDIM','UV'],(optional)) –Export Tiles, Choose whether to export only the [0, 1] range, or all UV tilesNONENone – Export only UVs in the [0, 1] range.UDIMUDIM – Export tiles in the UDIM numbering scheme: 1001 + u_tile + 10*v_tile.UVUVTILE – Export tiles in the UVTILE numbering scheme: u(u_tile + 1)_v(v_tile + 1).",
            "NONENone – Export only UVs in the [0, 1] range.",
            "UDIMUDIM – Export tiles in the UDIM numbering scheme: 1001 + u_tile + 10*v_tile.",
            "UVUVTILE – Export tiles in the UVTILE numbering scheme: u(u_tile + 1)_v(v_tile + 1).",
            "modified(boolean,(optional)) – Modified, Exports UVs from the modified mesh",
            "mode(enum in['SVG','EPS','PNG'],(optional)) –Format, File format to export the UV layout toSVGScalable Vector Graphic (.svg) – Export the UV layout to a vector SVG file.EPSEncapsulated PostScript (.eps) – Export the UV layout to a vector EPS file.PNGPNG Image (.png) – Export the UV layout to a bitmap image.",
            "SVGScalable Vector Graphic (.svg) – Export the UV layout to a vector SVG file.",
            "EPSEncapsulated PostScript (.eps) – Export the UV layout to a vector EPS file.",
            "PNGPNG Image (.png) – Export the UV layout to a bitmap image.",
            "size(int arrayof2 items in[8,32768],(optional)) – Size, Dimensions of the exported file",
            "opacity(float in[0,1],(optional)) – Fill Opacity, Set amount of opacity for exported UV layout",
            "check_existing(boolean,(optional)) – check_existing"
        ]
    },
    {
        "function_id": "bpy.ops.uv.follow_active_quads",
        "signature": "bpy.ops.uv.follow_active_quads(mode='LENGTH_AVERAGE')#",
        "description": "Follow UVs from active quads along continuous face loops",
        "parameters": [
            "mode='LENGTH_AVERAGE'"
        ],
        "parameter_descriptions": [
            "EVENEven – Space all UVs evenly.",
            "LENGTHLength – Average space UVs edge length of each loop.",
            "LENGTH_AVERAGELength Average – Average space UVs edge length of each loop."
        ]
    },
    {
        "function_id": "bpy.ops.uv.hide",
        "signature": "bpy.ops.uv.hide(unselected=False)#",
        "description": "Hide (un)selected UV vertices",
        "parameters": [
            "unselected=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.uv.lightmap_pack",
        "signature": "bpy.ops.uv.lightmap_pack(PREF_CONTEXT='SEL_FACES',PREF_PACK_IN_ONE=True,PREF_NEW_UVLAYER=False,PREF_BOX_DIV=12,PREF_MARGIN_DIV=0.1)#",
        "description": "Pack each face’s UVs into the UV bounds",
        "parameters": [
            "PREF_CONTEXT='SEL_FACES'",
            "PREF_PACK_IN_ONE=True",
            "PREF_NEW_UVLAYER=False",
            "PREF_BOX_DIV=12",
            "PREF_MARGIN_DIV=0.1"
        ],
        "parameter_descriptions": [
            "PREF_CONTEXT(enum in['SEL_FACES','ALL_FACES'],(optional)) –SelectionSEL_FACESSelected Faces – Space all UVs evenly.ALL_FACESAll Faces – Average space UVs edge length of each loop.",
            "SEL_FACESSelected Faces – Space all UVs evenly.",
            "ALL_FACESAll Faces – Average space UVs edge length of each loop.",
            "PREF_PACK_IN_ONE(boolean,(optional)) – Share Texture Space, Objects share texture space, map all objects into a single UV map",
            "PREF_NEW_UVLAYER(boolean,(optional)) – New UV Map, Create a new UV map for every mesh packed",
            "PREF_BOX_DIV(int in[1,48],(optional)) – Pack Quality, Quality of the packing. Higher values will be slower but waste less space",
            "PREF_MARGIN_DIV(float in[0.001,1],(optional)) – Margin, Size of the margin as a division of the UV"
        ]
    },
    {
        "function_id": "bpy.ops.uv.mark_seam",
        "signature": "bpy.ops.uv.mark_seam(clear=False)#",
        "description": "Mark selected UV edges as seams",
        "parameters": [
            "clear=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.uv.minimize_stretch",
        "signature": "bpy.ops.uv.minimize_stretch(fill_holes=True,blend=0.0,iterations=0)#",
        "description": "Reduce UV stretching by relaxing angles",
        "parameters": [
            "fill_holes=True",
            "blend=0.0",
            "iterations=0"
        ],
        "parameter_descriptions": [
            "fill_holes(boolean,(optional)) – Fill Holes, Virtually fill holes in mesh before unwrapping, to better avoid overlaps and preserve symmetry",
            "blend(float in[0,1],(optional)) – Blend, Blend factor between stretch minimized and original",
            "iterations(int in[0,inf],(optional)) – Iterations, Number of iterations to run, 0 is unlimited when run interactively"
        ]
    },
    {
        "function_id": "bpy.ops.uv.pack_islands",
        "signature": "bpy.ops.uv.pack_islands(udim_source='CLOSEST_UDIM',rotate=True,rotate_method='ANY',scale=True,merge_overlap=False,margin_method='SCALED',margin=0.001,pin=False,pin_method='LOCKED',shape_method='CONCAVE')#",
        "description": "Transform all islands so that they fill up the UV/UDIM space as much as possible",
        "parameters": [
            "udim_source='CLOSEST_UDIM'",
            "rotate=True",
            "rotate_method='ANY'",
            "scale=True",
            "merge_overlap=False",
            "margin_method='SCALED'",
            "margin=0.001",
            "pin=False",
            "pin_method='LOCKED'",
            "shape_method='CONCAVE'"
        ],
        "parameter_descriptions": [
            "udim_source(enum in['CLOSEST_UDIM','ACTIVE_UDIM','ORIGINAL_AABB'],(optional)) –Pack toCLOSEST_UDIMClosest UDIM – Pack islands to closest UDIM.ACTIVE_UDIMActive UDIM – Pack islands to active UDIM image tile or UDIM grid tile where 2D cursor is located.ORIGINAL_AABBOriginal bounding box – Pack to starting bounding box of islands.",
            "CLOSEST_UDIMClosest UDIM – Pack islands to closest UDIM.",
            "ACTIVE_UDIMActive UDIM – Pack islands to active UDIM image tile or UDIM grid tile where 2D cursor is located.",
            "ORIGINAL_AABBOriginal bounding box – Pack to starting bounding box of islands.",
            "rotate(boolean,(optional)) – Rotate, Rotate islands to improve layout",
            "rotate_method(enum in['ANY','CARDINAL','AXIS_ALIGNED','AXIS_ALIGNED_X','AXIS_ALIGNED_Y'],(optional)) –Rotation MethodANYAny – Any angle is allowed for rotation.CARDINALCardinal – Only 90 degree rotations are allowed.AXIS_ALIGNEDAxis-aligned – Rotated to a minimal rectangle, either vertical or horizontal.AXIS_ALIGNED_XAxis-aligned (Horizontal) – Rotate islands to be aligned horizontally.AXIS_ALIGNED_YAxis-aligned (Vertical) – Rotate islands to be aligned vertically.",
            "ANYAny – Any angle is allowed for rotation.",
            "CARDINALCardinal – Only 90 degree rotations are allowed.",
            "AXIS_ALIGNEDAxis-aligned – Rotated to a minimal rectangle, either vertical or horizontal.",
            "AXIS_ALIGNED_XAxis-aligned (Horizontal) – Rotate islands to be aligned horizontally.",
            "AXIS_ALIGNED_YAxis-aligned (Vertical) – Rotate islands to be aligned vertically.",
            "scale(boolean,(optional)) – Scale, Scale islands to fill unit square",
            "merge_overlap(boolean,(optional)) – Merge Overlapping, Overlapping islands stick together",
            "margin_method(enum in['SCALED','ADD','FRACTION'],(optional)) –Margin MethodSCALEDScaled – Use scale of existing UVs to multiply margin.ADDAdd – Just add the margin, ignoring any UV scale.FRACTIONFraction – Specify a precise fraction of final UV output.",
            "SCALEDScaled – Use scale of existing UVs to multiply margin.",
            "ADDAdd – Just add the margin, ignoring any UV scale.",
            "FRACTIONFraction – Specify a precise fraction of final UV output.",
            "margin(float in[0,1],(optional)) – Margin, Space between islands",
            "pin(boolean,(optional)) – Lock Pinned Islands, Constrain islands containing any pinned UV’s",
            "pin_method(enum in['SCALE','ROTATION','ROTATION_SCALE','LOCKED'],(optional)) –Pin MethodSCALEScale – Pinned islands won’t rescale.ROTATIONRotation – Pinned islands won’t rotate.ROTATION_SCALERotation and Scale – Pinned islands will translate only.LOCKEDAll – Pinned islands are locked in place.",
            "SCALEScale – Pinned islands won’t rescale.",
            "ROTATIONRotation – Pinned islands won’t rotate.",
            "ROTATION_SCALERotation and Scale – Pinned islands will translate only.",
            "LOCKEDAll – Pinned islands are locked in place.",
            "shape_method(enum in['CONCAVE','CONVEX','AABB'],(optional)) –Shape MethodCONCAVEExact Shape (Concave) – Uses exact geometry.CONVEXBoundary Shape (Convex) – Uses convex hull.AABBBounding Box – Uses bounding boxes.",
            "CONCAVEExact Shape (Concave) – Uses exact geometry.",
            "CONVEXBoundary Shape (Convex) – Uses convex hull.",
            "AABBBounding Box – Uses bounding boxes."
        ]
    },
    {
        "function_id": "bpy.ops.uv.paste",
        "signature": "bpy.ops.uv.paste()#",
        "description": "Paste selected UV vertices",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.uv.pin",
        "signature": "bpy.ops.uv.pin(clear=False,invert=False)#",
        "description": "Set/clear selected UV vertices as anchored between multiple unwrap operations",
        "parameters": [
            "clear=False",
            "invert=False"
        ],
        "parameter_descriptions": [
            "clear(boolean,(optional)) – Clear, Clear pinning for the selection instead of setting it",
            "invert(boolean,(optional)) – Invert, Invert pinning for the selection instead of setting it"
        ]
    },
    {
        "function_id": "bpy.ops.uv.project_from_view",
        "signature": "bpy.ops.uv.project_from_view(orthographic=False,camera_bounds=True,correct_aspect=True,clip_to_bounds=False,scale_to_bounds=False)#",
        "description": "Project the UV vertices of the mesh as seen in current 3D view",
        "parameters": [
            "orthographic=False",
            "camera_bounds=True",
            "correct_aspect=True",
            "clip_to_bounds=False",
            "scale_to_bounds=False"
        ],
        "parameter_descriptions": [
            "orthographic(boolean,(optional)) – Orthographic, Use orthographic projection",
            "camera_bounds(boolean,(optional)) – Camera Bounds, Map UVs to the camera region taking resolution and aspect into account",
            "correct_aspect(boolean,(optional)) – Correct Aspect, Map UVs taking image aspect ratio into account",
            "clip_to_bounds(boolean,(optional)) – Clip to Bounds, Clip UV coordinates to bounds after unwrapping",
            "scale_to_bounds(boolean,(optional)) – Scale to Bounds, Scale UV coordinates to bounds after unwrapping"
        ]
    },
    {
        "function_id": "bpy.ops.uv.randomize_uv_transform",
        "signature": "bpy.ops.uv.randomize_uv_transform(random_seed=0,use_loc=True,loc=(0.0,0.0),use_rot=True,rot=0.0,use_scale=True,scale_even=False,scale=(1.0,1.0))#",
        "description": "Randomize the UV island’s location, rotation, and scale",
        "parameters": [
            "random_seed=0",
            "use_loc=True",
            "loc=(0.0,0.0)",
            "use_rot=True",
            "rot=0.0",
            "use_scale=True",
            "scale_even=False",
            "scale=(1.0,1.0)"
        ],
        "parameter_descriptions": [
            "random_seed(int in[0,10000],(optional)) – Random Seed, Seed value for the random generator",
            "use_loc(boolean,(optional)) – Randomize Location, Randomize the location values",
            "loc(mathutils.Vectorof 2 items in [-100, 100], (optional)) – Location, Maximum distance the objects can spread over each axis",
            "use_rot(boolean,(optional)) – Randomize Rotation, Randomize the rotation value",
            "rot(float in[-6.28319,6.28319],(optional)) – Rotation, Maximum rotation",
            "use_scale(boolean,(optional)) – Randomize Scale, Randomize the scale values",
            "scale_even(boolean,(optional)) – Scale Even, Use the same scale value for both axes",
            "scale(float arrayof2 items in[-100,100],(optional)) – Scale, Maximum scale randomization over each axis"
        ]
    },
    {
        "function_id": "bpy.ops.uv.remove_doubles",
        "signature": "bpy.ops.uv.remove_doubles(threshold=0.02,use_unselected=False)#",
        "description": "Selected UV vertices that are within a radius of each other are welded together",
        "parameters": [
            "threshold=0.02",
            "use_unselected=False"
        ],
        "parameter_descriptions": [
            "threshold(float in[0,10],(optional)) – Merge Distance, Maximum distance between welded vertices",
            "use_unselected(boolean,(optional)) – Unselected, Merge selected to other unselected vertices"
        ]
    },
    {
        "function_id": "bpy.ops.uv.reset",
        "signature": "bpy.ops.uv.reset()#",
        "description": "Reset UV projection",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.uv.reveal",
        "signature": "bpy.ops.uv.reveal(select=True)#",
        "description": "Reveal all hidden UV vertices",
        "parameters": [
            "select=True"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.uv.rip",
        "signature": "bpy.ops.uv.rip(mirror=False,release_confirm=False,use_accurate=False,location=(0.0,0.0))#",
        "description": "Rip selected vertices or a selected region",
        "parameters": [
            "mirror=False",
            "release_confirm=False",
            "use_accurate=False",
            "location=(0.0,0.0)"
        ],
        "parameter_descriptions": [
            "mirror(boolean,(optional)) – Mirror Editing",
            "release_confirm(boolean,(optional)) – Confirm on Release, Always confirm operation when releasing button",
            "use_accurate(boolean,(optional)) – Accurate, Use accurate transformation",
            "location(mathutils.Vectorof 2 items in [-inf, inf], (optional)) – Location, Mouse location in normalized coordinates, 0.0 to 1.0 is within the image bounds"
        ]
    },
    {
        "function_id": "bpy.ops.uv.rip_move",
        "signature": "bpy.ops.uv.rip_move(UV_OT_rip=None,TRANSFORM_OT_translate=None)#",
        "description": "Unstitch UVs and move the result",
        "parameters": [
            "UV_OT_rip=None",
            "TRANSFORM_OT_translate=None"
        ],
        "parameter_descriptions": [
            "UV_OT_rip(UV_OT_rip, (optional)) – UV Rip, Rip selected vertices or a selected region",
            "TRANSFORM_OT_translate(TRANSFORM_OT_translate, (optional)) – Move, Move selected items"
        ]
    },
    {
        "function_id": "bpy.ops.uv.seams_from_islands",
        "signature": "bpy.ops.uv.seams_from_islands(mark_seams=True,mark_sharp=False)#",
        "description": "Set mesh seams according to island setup in the UV editor",
        "parameters": [
            "mark_seams=True",
            "mark_sharp=False"
        ],
        "parameter_descriptions": [
            "mark_seams(boolean,(optional)) – Mark Seams, Mark boundary edges as seams",
            "mark_sharp(boolean,(optional)) – Mark Sharp, Mark boundary edges as sharp"
        ]
    },
    {
        "function_id": "bpy.ops.uv.select",
        "signature": "bpy.ops.uv.select(extend=False,deselect=False,toggle=False,deselect_all=False,select_passthrough=False,location=(0.0,0.0))#",
        "description": "Select UV vertices",
        "parameters": [
            "extend=False",
            "deselect=False",
            "toggle=False",
            "deselect_all=False",
            "select_passthrough=False",
            "location=(0.0,0.0)"
        ],
        "parameter_descriptions": [
            "extend(boolean,(optional)) – Extend, Extend selection instead of deselecting everything first",
            "deselect(boolean,(optional)) – Deselect, Remove from selection",
            "toggle(boolean,(optional)) – Toggle Selection, Toggle the selection",
            "deselect_all(boolean,(optional)) – Deselect On Nothing, Deselect all when nothing under the cursor",
            "select_passthrough(boolean,(optional)) – Only Select Unselected, Ignore the select action when the element is already selected",
            "location(mathutils.Vectorof 2 items in [-inf, inf], (optional)) – Location, Mouse location in normalized coordinates, 0.0 to 1.0 is within the image bounds"
        ]
    },
    {
        "function_id": "bpy.ops.uv.select_all",
        "signature": "bpy.ops.uv.select_all(action='TOGGLE')#",
        "description": "Change selection of all UV vertices",
        "parameters": [
            "action='TOGGLE'"
        ],
        "parameter_descriptions": [
            "TOGGLEToggle – Toggle selection for all elements.",
            "SELECTSelect – Select all elements.",
            "DESELECTDeselect – Deselect all elements.",
            "INVERTInvert – Invert selection of all elements."
        ]
    },
    {
        "function_id": "bpy.ops.uv.select_box",
        "signature": "bpy.ops.uv.select_box(pinned=False,xmin=0,xmax=0,ymin=0,ymax=0,wait_for_input=True,mode='SET')#",
        "description": "Select UV vertices using box selection",
        "parameters": [
            "pinned=False",
            "xmin=0",
            "xmax=0",
            "ymin=0",
            "ymax=0",
            "wait_for_input=True",
            "mode='SET'"
        ],
        "parameter_descriptions": [
            "pinned(boolean,(optional)) – Pinned, Border select pinned UVs only",
            "xmin(int in[-inf,inf],(optional)) – X Min",
            "xmax(int in[-inf,inf],(optional)) – X Max",
            "ymin(int in[-inf,inf],(optional)) – Y Min",
            "ymax(int in[-inf,inf],(optional)) – Y Max",
            "wait_for_input(boolean,(optional)) – Wait for Input",
            "mode(enum in['SET','ADD','SUB'],(optional)) –ModeSETSet – Set a new selection.ADDExtend – Extend existing selection.SUBSubtract – Subtract existing selection.",
            "SETSet – Set a new selection.",
            "ADDExtend – Extend existing selection.",
            "SUBSubtract – Subtract existing selection."
        ]
    },
    {
        "function_id": "bpy.ops.uv.select_circle",
        "signature": "bpy.ops.uv.select_circle(x=0,y=0,radius=25,wait_for_input=True,mode='SET')#",
        "description": "Select UV vertices using circle selection",
        "parameters": [
            "x=0",
            "y=0",
            "radius=25",
            "wait_for_input=True",
            "mode='SET'"
        ],
        "parameter_descriptions": [
            "x(int in[-inf,inf],(optional)) – X",
            "y(int in[-inf,inf],(optional)) – Y",
            "radius(int in[1,inf],(optional)) – Radius",
            "wait_for_input(boolean,(optional)) – Wait for Input",
            "mode(enum in['SET','ADD','SUB'],(optional)) –ModeSETSet – Set a new selection.ADDExtend – Extend existing selection.SUBSubtract – Subtract existing selection.",
            "SETSet – Set a new selection.",
            "ADDExtend – Extend existing selection.",
            "SUBSubtract – Subtract existing selection."
        ]
    },
    {
        "function_id": "bpy.ops.uv.select_edge_ring",
        "signature": "bpy.ops.uv.select_edge_ring(extend=False,location=(0.0,0.0))#",
        "description": "Select an edge ring of connected UV vertices",
        "parameters": [
            "extend=False",
            "location=(0.0,0.0)"
        ],
        "parameter_descriptions": [
            "extend(boolean,(optional)) – Extend, Extend selection rather than clearing the existing selection",
            "location(mathutils.Vectorof 2 items in [-inf, inf], (optional)) – Location, Mouse location in normalized coordinates, 0.0 to 1.0 is within the image bounds"
        ]
    },
    {
        "function_id": "bpy.ops.uv.select_lasso",
        "signature": "bpy.ops.uv.select_lasso(path=None,mode='SET')#",
        "description": "Select UVs using lasso selection",
        "parameters": [
            "path=None",
            "mode='SET'"
        ],
        "parameter_descriptions": [
            "path(bpy_prop_collectionofOperatorMousePath, (optional)) – Path",
            "mode(enum in['SET','ADD','SUB'],(optional)) –ModeSETSet – Set a new selection.ADDExtend – Extend existing selection.SUBSubtract – Subtract existing selection.",
            "SETSet – Set a new selection.",
            "ADDExtend – Extend existing selection.",
            "SUBSubtract – Subtract existing selection."
        ]
    },
    {
        "function_id": "bpy.ops.uv.select_less",
        "signature": "bpy.ops.uv.select_less()#",
        "description": "Deselect UV vertices at the boundary of each selection region",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.uv.select_linked",
        "signature": "bpy.ops.uv.select_linked()#",
        "description": "Select all UV vertices linked to the active UV map",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.uv.select_linked_pick",
        "signature": "bpy.ops.uv.select_linked_pick(extend=False,deselect=False,location=(0.0,0.0))#",
        "description": "Select all UV vertices linked under the mouse",
        "parameters": [
            "extend=False",
            "deselect=False",
            "location=(0.0,0.0)"
        ],
        "parameter_descriptions": [
            "extend(boolean,(optional)) – Extend, Extend selection rather than clearing the existing selection",
            "deselect(boolean,(optional)) – Deselect, Deselect linked UV vertices rather than selecting them",
            "location(mathutils.Vectorof 2 items in [-inf, inf], (optional)) – Location, Mouse location in normalized coordinates, 0.0 to 1.0 is within the image bounds"
        ]
    },
    {
        "function_id": "bpy.ops.uv.select_loop",
        "signature": "bpy.ops.uv.select_loop(extend=False,location=(0.0,0.0))#",
        "description": "Select a loop of connected UV vertices",
        "parameters": [
            "extend=False",
            "location=(0.0,0.0)"
        ],
        "parameter_descriptions": [
            "extend(boolean,(optional)) – Extend, Extend selection rather than clearing the existing selection",
            "location(mathutils.Vectorof 2 items in [-inf, inf], (optional)) – Location, Mouse location in normalized coordinates, 0.0 to 1.0 is within the image bounds"
        ]
    },
    {
        "function_id": "bpy.ops.uv.select_mode",
        "signature": "bpy.ops.uv.select_mode(type='VERTEX')#",
        "description": "Change UV selection mode",
        "parameters": [
            "type='VERTEX'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.uv.select_more",
        "signature": "bpy.ops.uv.select_more()#",
        "description": "Select more UV vertices connected to initial selection",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.uv.select_overlap",
        "signature": "bpy.ops.uv.select_overlap(extend=False)#",
        "description": "Select all UV faces which overlap each other",
        "parameters": [
            "extend=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.uv.select_pinned",
        "signature": "bpy.ops.uv.select_pinned()#",
        "description": "Select all pinned UV vertices",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.uv.select_similar",
        "signature": "bpy.ops.uv.select_similar(type='PIN',compare='EQUAL',threshold=0.0)#",
        "description": "Select similar UVs by property types",
        "parameters": [
            "type='PIN'",
            "compare='EQUAL'",
            "threshold=0.0"
        ],
        "parameter_descriptions": [
            "type(enum in['PIN','LENGTH','LENGTH_3D','AREA','AREA_3D','MATERIAL','OBJECT','SIDES','WINDING','FACE'],(optional)) – Type",
            "compare(enum in['EQUAL','GREATER','LESS'],(optional)) – Compare",
            "threshold(float in[0,1],(optional)) – Threshold"
        ]
    },
    {
        "function_id": "bpy.ops.uv.select_split",
        "signature": "bpy.ops.uv.select_split()#",
        "description": "Select only entirely selected faces",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.uv.shortest_path_pick",
        "signature": "bpy.ops.uv.shortest_path_pick(use_face_step=False,use_topology_distance=False,use_fill=False,skip=0,nth=1,offset=0,object_index=-1,index=-1)#",
        "description": "Select shortest path between two selections",
        "parameters": [
            "use_face_step=False",
            "use_topology_distance=False",
            "use_fill=False",
            "skip=0",
            "nth=1",
            "offset=0",
            "object_index=-1",
            "index=-1"
        ],
        "parameter_descriptions": [
            "use_face_step(boolean,(optional)) – Face Stepping, Traverse connected faces (includes diagonals and edge-rings)",
            "use_topology_distance(boolean,(optional)) – Topology Distance, Find the minimum number of steps, ignoring spatial distance",
            "use_fill(boolean,(optional)) – Fill Region, Select all paths between the source/destination elements",
            "skip(int in[0,inf],(optional)) – Deselected, Number of deselected elements in the repetitive sequence",
            "nth(int in[1,inf],(optional)) – Selected, Number of selected elements in the repetitive sequence",
            "offset(int in[-inf,inf],(optional)) – Offset, Offset from the starting point"
        ]
    },
    {
        "function_id": "bpy.ops.uv.shortest_path_select",
        "signature": "bpy.ops.uv.shortest_path_select(use_face_step=False,use_topology_distance=False,use_fill=False,skip=0,nth=1,offset=0)#",
        "description": "Selected shortest path between two vertices/edges/faces",
        "parameters": [
            "use_face_step=False",
            "use_topology_distance=False",
            "use_fill=False",
            "skip=0",
            "nth=1",
            "offset=0"
        ],
        "parameter_descriptions": [
            "use_face_step(boolean,(optional)) – Face Stepping, Traverse connected faces (includes diagonals and edge-rings)",
            "use_topology_distance(boolean,(optional)) – Topology Distance, Find the minimum number of steps, ignoring spatial distance",
            "use_fill(boolean,(optional)) – Fill Region, Select all paths between the source/destination elements",
            "skip(int in[0,inf],(optional)) – Deselected, Number of deselected elements in the repetitive sequence",
            "nth(int in[1,inf],(optional)) – Selected, Number of selected elements in the repetitive sequence",
            "offset(int in[-inf,inf],(optional)) – Offset, Offset from the starting point"
        ]
    },
    {
        "function_id": "bpy.ops.uv.smart_project",
        "signature": "bpy.ops.uv.smart_project(angle_limit=1.15192,margin_method='SCALED',rotate_method='AXIS_ALIGNED_Y',island_margin=0.0,area_weight=0.0,correct_aspect=True,scale_to_bounds=False)#",
        "description": "Projection unwraps the selected faces of mesh objects",
        "parameters": [
            "angle_limit=1.15192",
            "margin_method='SCALED'",
            "rotate_method='AXIS_ALIGNED_Y'",
            "island_margin=0.0",
            "area_weight=0.0",
            "correct_aspect=True",
            "scale_to_bounds=False"
        ],
        "parameter_descriptions": [
            "angle_limit(float in[0,1.5708],(optional)) – Angle Limit, Lower for more projection groups, higher for less distortion",
            "margin_method(enum in['SCALED','ADD','FRACTION'],(optional)) –Margin MethodSCALEDScaled – Use scale of existing UVs to multiply margin.ADDAdd – Just add the margin, ignoring any UV scale.FRACTIONFraction – Specify a precise fraction of final UV output.",
            "SCALEDScaled – Use scale of existing UVs to multiply margin.",
            "ADDAdd – Just add the margin, ignoring any UV scale.",
            "FRACTIONFraction – Specify a precise fraction of final UV output.",
            "rotate_method(enum in['AXIS_ALIGNED','AXIS_ALIGNED_X','AXIS_ALIGNED_Y'],(optional)) –Rotation MethodAXIS_ALIGNEDAxis-aligned – Rotated to a minimal rectangle, either vertical or horizontal.AXIS_ALIGNED_XAxis-aligned (Horizontal) – Rotate islands to be aligned horizontally.AXIS_ALIGNED_YAxis-aligned (Vertical) – Rotate islands to be aligned vertically.",
            "AXIS_ALIGNEDAxis-aligned – Rotated to a minimal rectangle, either vertical or horizontal.",
            "AXIS_ALIGNED_XAxis-aligned (Horizontal) – Rotate islands to be aligned horizontally.",
            "AXIS_ALIGNED_YAxis-aligned (Vertical) – Rotate islands to be aligned vertically.",
            "island_margin(float in[0,1],(optional)) – Island Margin, Margin to reduce bleed from adjacent islands",
            "area_weight(float in[0,1],(optional)) – Area Weight, Weight projection’s vector by faces with larger areas",
            "correct_aspect(boolean,(optional)) – Correct Aspect, Map UVs taking image aspect ratio into account",
            "scale_to_bounds(boolean,(optional)) – Scale to Bounds, Scale UV coordinates to bounds after unwrapping"
        ]
    },
    {
        "function_id": "bpy.ops.uv.snap_cursor",
        "signature": "bpy.ops.uv.snap_cursor(target='PIXELS')#",
        "description": "Snap cursor to target type",
        "parameters": [
            "target='PIXELS'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.uv.snap_selected",
        "signature": "bpy.ops.uv.snap_selected(target='PIXELS')#",
        "description": "Snap selected UV vertices to target type",
        "parameters": [
            "target='PIXELS'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.uv.sphere_project",
        "signature": "bpy.ops.uv.sphere_project(direction='VIEW_ON_EQUATOR',align='POLAR_ZX',pole='PINCH',seam=False,correct_aspect=True,clip_to_bounds=False,scale_to_bounds=False)#",
        "description": "Project the UV vertices of the mesh over the curved surface of a sphere",
        "parameters": [
            "direction='VIEW_ON_EQUATOR'",
            "align='POLAR_ZX'",
            "pole='PINCH'",
            "seam=False",
            "correct_aspect=True",
            "clip_to_bounds=False",
            "scale_to_bounds=False"
        ],
        "parameter_descriptions": [
            "direction(enum in['VIEW_ON_EQUATOR','VIEW_ON_POLES','ALIGN_TO_OBJECT'],(optional)) –Direction, Direction of the sphere or cylinderVIEW_ON_EQUATORView on Equator – 3D view is on the equator.VIEW_ON_POLESView on Poles – 3D view is on the poles.ALIGN_TO_OBJECTAlign to Object – Align according to object transform.",
            "VIEW_ON_EQUATORView on Equator – 3D view is on the equator.",
            "VIEW_ON_POLESView on Poles – 3D view is on the poles.",
            "ALIGN_TO_OBJECTAlign to Object – Align according to object transform.",
            "align(enum in['POLAR_ZX','POLAR_ZY'],(optional)) –Align, How to determine rotation around the polePOLAR_ZXPolar ZX – Polar 0 is X.POLAR_ZYPolar ZY – Polar 0 is Y.",
            "POLAR_ZXPolar ZX – Polar 0 is X.",
            "POLAR_ZYPolar ZY – Polar 0 is Y.",
            "pole(enum in['PINCH','FAN'],(optional)) –Pole, How to handle faces at the polesPINCHPinch – UVs are pinched at the poles.FANFan – UVs are fanned at the poles.",
            "PINCHPinch – UVs are pinched at the poles.",
            "FANFan – UVs are fanned at the poles.",
            "seam(boolean,(optional)) – Preserve Seams, Separate projections by islands isolated by seams",
            "correct_aspect(boolean,(optional)) – Correct Aspect, Map UVs taking image aspect ratio into account",
            "clip_to_bounds(boolean,(optional)) – Clip to Bounds, Clip UV coordinates to bounds after unwrapping",
            "scale_to_bounds(boolean,(optional)) – Scale to Bounds, Scale UV coordinates to bounds after unwrapping"
        ]
    },
    {
        "function_id": "bpy.ops.uv.stitch",
        "signature": "bpy.ops.uv.stitch(use_limit=False,snap_islands=True,limit=0.01,static_island=0,active_object_index=0,midpoint_snap=False,clear_seams=True,mode='VERTEX',stored_mode='VERTEX',selection=None,objects_selection_count=(0,0,0,0,0,0))#",
        "description": "Stitch selected UV vertices by proximity",
        "parameters": [
            "use_limit=False",
            "snap_islands=True",
            "limit=0.01",
            "static_island=0",
            "active_object_index=0",
            "midpoint_snap=False",
            "clear_seams=True",
            "mode='VERTEX'",
            "stored_mode='VERTEX'",
            "selection=None",
            "objects_selection_count=(0,0,0,0,0,0)"
        ],
        "parameter_descriptions": [
            "use_limit(boolean,(optional)) – Use Limit, Stitch UVs within a specified limit distance",
            "snap_islands(boolean,(optional)) – Snap Islands, Snap islands together (on edge stitch mode, rotates the islands too)",
            "limit(float in[0,inf],(optional)) – Limit, Limit distance in normalized coordinates",
            "static_island(int in[0,inf],(optional)) – Static Island, Island that stays in place when stitching islands",
            "active_object_index(int in[0,inf],(optional)) – Active Object, Index of the active object",
            "midpoint_snap(boolean,(optional)) – Snap at Midpoint, UVs are stitched at midpoint instead of at static island",
            "clear_seams(boolean,(optional)) – Clear Seams, Clear seams of stitched edges",
            "mode(enum in['VERTEX','EDGE'],(optional)) – Operation Mode, Use vertex or edge stitching",
            "stored_mode(enum in['VERTEX','EDGE'],(optional)) – Stored Operation Mode, Use vertex or edge stitching",
            "selection(bpy_prop_collectionofSelectedUvElement, (optional)) – Selection",
            "objects_selection_count(int arrayof6 items in[0,inf],(optional)) – Objects Selection Count"
        ]
    },
    {
        "function_id": "bpy.ops.uv.unwrap",
        "signature": "bpy.ops.uv.unwrap(method='ANGLE_BASED',fill_holes=True,correct_aspect=True,use_subsurf_data=False,margin_method='SCALED',margin=0.001)#",
        "description": "Unwrap the mesh of the object being edited",
        "parameters": [
            "method='ANGLE_BASED'",
            "fill_holes=True",
            "correct_aspect=True",
            "use_subsurf_data=False",
            "margin_method='SCALED'",
            "margin=0.001"
        ],
        "parameter_descriptions": [
            "method(enum in['ANGLE_BASED','CONFORMAL'],(optional)) – Method, Unwrapping method (Angle Based usually gives better results than Conformal, while being somewhat slower)",
            "fill_holes(boolean,(optional)) – Fill Holes, Virtually fill holes in mesh before unwrapping, to better avoid overlaps and preserve symmetry",
            "correct_aspect(boolean,(optional)) – Correct Aspect, Map UVs taking image aspect ratio into account",
            "use_subsurf_data(boolean,(optional)) – Use Subdivision Surface, Map UVs taking vertex position after Subdivision Surface modifier has been applied",
            "margin_method(enum in['SCALED','ADD','FRACTION'],(optional)) –Margin MethodSCALEDScaled – Use scale of existing UVs to multiply margin.ADDAdd – Just add the margin, ignoring any UV scale.FRACTIONFraction – Specify a precise fraction of final UV output.",
            "SCALEDScaled – Use scale of existing UVs to multiply margin.",
            "ADDAdd – Just add the margin, ignoring any UV scale.",
            "FRACTIONFraction – Specify a precise fraction of final UV output.",
            "margin(float in[0,1],(optional)) – Margin, Space between islands"
        ]
    },
    {
        "function_id": "bpy.ops.uv.weld",
        "signature": "bpy.ops.uv.weld()#",
        "description": "Weld selected UV vertices together",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.console.autocomplete",
        "signature": "bpy.ops.console.autocomplete()#",
        "description": "Evaluate the namespace up until the cursor and give a list of options or complete the name if there is only one",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.console.banner",
        "signature": "bpy.ops.console.banner()#",
        "description": "Print a message when the terminal initializes",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.console.clear",
        "signature": "bpy.ops.console.clear(scrollback=True,history=False)#",
        "description": "Clear text by type",
        "parameters": [
            "scrollback=True",
            "history=False"
        ],
        "parameter_descriptions": [
            "scrollback(boolean,(optional)) – Scrollback, Clear the scrollback history",
            "history(boolean,(optional)) – History, Clear the command history"
        ]
    },
    {
        "function_id": "bpy.ops.console.clear_line",
        "signature": "bpy.ops.console.clear_line()#",
        "description": "Clear the line and store in history",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.console.copy",
        "signature": "bpy.ops.console.copy(delete=False)#",
        "description": "Copy selected text to clipboard",
        "parameters": [
            "delete=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.console.copy_as_script",
        "signature": "bpy.ops.console.copy_as_script()#",
        "description": "Copy the console contents for use in a script",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.console.delete",
        "signature": "bpy.ops.console.delete(type='NEXT_CHARACTER')#",
        "description": "Delete text by cursor position",
        "parameters": [
            "type='NEXT_CHARACTER'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.console.execute",
        "signature": "bpy.ops.console.execute(interactive=False)#",
        "description": "Execute the current console line as a Python expression",
        "parameters": [
            "interactive=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.console.history_append",
        "signature": "bpy.ops.console.history_append(text='',current_character=0,remove_duplicates=False)#",
        "description": "Append history at cursor position",
        "parameters": [
            "text=''",
            "current_character=0",
            "remove_duplicates=False"
        ],
        "parameter_descriptions": [
            "text(string,(optional,never None)) – Text, Text to insert at the cursor position",
            "current_character(int in[0,inf],(optional)) – Cursor, The index of the cursor",
            "remove_duplicates(boolean,(optional)) – Remove Duplicates, Remove duplicate items in the history"
        ]
    },
    {
        "function_id": "bpy.ops.console.history_cycle",
        "signature": "bpy.ops.console.history_cycle(reverse=False)#",
        "description": "Cycle through history",
        "parameters": [
            "reverse=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.console.indent",
        "signature": "bpy.ops.console.indent()#",
        "description": "Add 4 spaces at line beginning",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.console.indent_or_autocomplete",
        "signature": "bpy.ops.console.indent_or_autocomplete()#",
        "description": "Indent selected text or autocomplete",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.console.insert",
        "signature": "bpy.ops.console.insert(text='')#",
        "description": "Insert text at cursor position",
        "parameters": [
            "text=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.console.language",
        "signature": "bpy.ops.console.language(language='')#",
        "description": "Set the current language for this console",
        "parameters": [
            "language=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.console.move",
        "signature": "bpy.ops.console.move(type='LINE_BEGIN',select=False)#",
        "description": "Move cursor position",
        "parameters": [
            "type='LINE_BEGIN'",
            "select=False"
        ],
        "parameter_descriptions": [
            "type(enum in['LINE_BEGIN','LINE_END','PREVIOUS_CHARACTER','NEXT_CHARACTER','PREVIOUS_WORD','NEXT_WORD'],(optional)) – Type, Where to move cursor to",
            "select(boolean,(optional)) – Select, Whether to select while moving"
        ]
    },
    {
        "function_id": "bpy.ops.console.paste",
        "signature": "bpy.ops.console.paste(selection=False)#",
        "description": "Paste text from clipboard",
        "parameters": [
            "selection=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.console.scrollback_append",
        "signature": "bpy.ops.console.scrollback_append(text='',type='OUTPUT')#",
        "description": "Append scrollback text by type",
        "parameters": [
            "text=''",
            "type='OUTPUT'"
        ],
        "parameter_descriptions": [
            "text(string,(optional,never None)) – Text, Text to insert at the cursor position",
            "type(enum in['OUTPUT','INPUT','INFO','ERROR'],(optional)) – Type, Console output type"
        ]
    },
    {
        "function_id": "bpy.ops.console.select_all",
        "signature": "bpy.ops.console.select_all()#",
        "description": "Select all the text",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.console.select_set",
        "signature": "bpy.ops.console.select_set()#",
        "description": "Set the console selection",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.console.select_word",
        "signature": "bpy.ops.console.select_word()#",
        "description": "Select word at cursor position",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.console.unindent",
        "signature": "bpy.ops.console.unindent()#",
        "description": "Delete 4 spaces from line beginning",
        "parameters": []
    },
    {
        "function_id": "bmesh.ops.smooth_vert",
        "signature": "bmesh.ops.smooth_vert(bm,verts=[],factor=0,mirror_clip_x=False,mirror_clip_y=False,mirror_clip_z=False,clip_dist=0,use_axis_x=False,use_axis_y=False,use_axis_z=False)#",
        "description": "Vertex Smooth.",
        "parameters": [
            "bm",
            "verts=[]",
            "factor=0",
            "mirror_clip_x=False",
            "mirror_clip_y=False",
            "mirror_clip_z=False",
            "clip_dist=0",
            "use_axis_x=False",
            "use_axis_y=False",
            "use_axis_z=False"
        ],
        "parameter_descriptions": [
            "bm(bmesh.types.BMesh) – The bmesh to operate on.",
            "verts(list of (bmesh.types.BMVert)) – input vertices",
            "factor(float) – smoothing factor",
            "mirror_clip_x(bool) – set vertices close to the x axis before the operation to 0",
            "mirror_clip_y(bool) – set vertices close to the y axis before the operation to 0",
            "mirror_clip_z(bool) – set vertices close to the z axis before the operation to 0",
            "clip_dist(float) – clipping threshold for the above three slots",
            "use_axis_x(bool) – smooth vertices along X axis",
            "use_axis_y(bool) – smooth vertices along Y axis",
            "use_axis_z(bool) – smooth vertices along Z axis"
        ]
    },
    {
        "function_id": "bmesh.ops.smooth_laplacian_vert",
        "signature": "bmesh.ops.smooth_laplacian_vert(bm,verts=[],lambda_factor=0,lambda_border=0,use_x=False,use_y=False,use_z=False,preserve_volume=False)#",
        "description": "Vertex Smooth Laplacian.",
        "parameters": [
            "bm",
            "verts=[]",
            "lambda_factor=0",
            "lambda_border=0",
            "use_x=False",
            "use_y=False",
            "use_z=False",
            "preserve_volume=False"
        ],
        "parameter_descriptions": [
            "bm(bmesh.types.BMesh) – The bmesh to operate on.",
            "verts(list of (bmesh.types.BMVert)) – input vertices",
            "lambda_factor(float) – lambda param",
            "lambda_border(float) – lambda param in border",
            "use_x(bool) – Smooth object along X axis",
            "use_y(bool) – Smooth object along Y axis",
            "use_z(bool) – Smooth object along Z axis",
            "preserve_volume(bool) – Apply volume preservation after smooth"
        ]
    },
    {
        "function_id": "bmesh.ops.recalc_face_normals",
        "signature": "bmesh.ops.recalc_face_normals(bm,faces=[])#",
        "description": "Right-Hand Faces.",
        "parameters": [
            "bm",
            "faces=[]"
        ],
        "parameter_descriptions": [
            "bm(bmesh.types.BMesh) – The bmesh to operate on.",
            "faces(list of (bmesh.types.BMFace)) – input faces"
        ]
    },
    {
        "function_id": "bmesh.ops.planar_faces",
        "signature": "bmesh.ops.planar_faces(bm,faces=[],iterations=0,factor=0)#",
        "description": "Planar Faces.",
        "parameters": [
            "bm",
            "faces=[]",
            "iterations=0",
            "factor=0"
        ],
        "parameter_descriptions": [
            "bm(bmesh.types.BMesh) – The bmesh to operate on.",
            "faces(list of (bmesh.types.BMFace)) – input geometry.",
            "iterations(int) – Number of times to flatten faces (for when connected faces are used)",
            "factor(float) – Influence for making planar each iteration",
            "geom: output slot, computed boundary geometry.typelist of (bmesh.types.BMVert,bmesh.types.BMEdge,bmesh.types.BMFace)"
        ]
    },
    {
        "function_id": "bmesh.ops.region_extend",
        "signature": "bmesh.ops.region_extend(bm,geom=[],use_contract=False,use_faces=False,use_face_step=False)#",
        "description": "Region Extend.",
        "parameters": [
            "bm",
            "geom=[]",
            "use_contract=False",
            "use_faces=False",
            "use_face_step=False"
        ],
        "parameter_descriptions": [
            "bm(bmesh.types.BMesh) – The bmesh to operate on.",
            "geom(list of (bmesh.types.BMVert,bmesh.types.BMEdge,bmesh.types.BMFace)) – input geometry",
            "use_contract(bool) – find boundary inside the regions, not outside.",
            "use_faces(bool) – extend from faces instead of edges",
            "use_face_step(bool) – step over connected faces",
            "geom: output slot, computed boundary geometry.typelist of (bmesh.types.BMVert,bmesh.types.BMEdge,bmesh.types.BMFace)"
        ]
    },
    {
        "function_id": "bmesh.ops.rotate_edges",
        "signature": "bmesh.ops.rotate_edges(bm,edges=[],use_ccw=False)#",
        "description": "Edge Rotate.",
        "parameters": [
            "bm",
            "edges=[]",
            "use_ccw=False"
        ],
        "parameter_descriptions": [
            "bm(bmesh.types.BMesh) – The bmesh to operate on.",
            "edges(list of (bmesh.types.BMEdge)) – input edges",
            "use_ccw(bool) – rotate edge counter-clockwise if true, otherwise clockwise",
            "edges: newly spun edgestypelist of (bmesh.types.BMEdge)"
        ]
    },
    {
        "function_id": "bmesh.ops.reverse_faces",
        "signature": "bmesh.ops.reverse_faces(bm,faces=[],flip_multires=False)#",
        "description": "Reverse Faces.",
        "parameters": [
            "bm",
            "faces=[]",
            "flip_multires=False"
        ],
        "parameter_descriptions": [
            "bm(bmesh.types.BMesh) – The bmesh to operate on.",
            "faces(list of (bmesh.types.BMFace)) – input faces",
            "flip_multires(bool) – maintain multi-res offset"
        ]
    },
    {
        "function_id": "bmesh.ops.flip_quad_tessellation",
        "signature": "bmesh.ops.flip_quad_tessellation(bm,faces=[])#",
        "description": "Flip Quad Tessellation",
        "parameters": [
            "bm",
            "faces=[]"
        ],
        "parameter_descriptions": [
            "bm(bmesh.types.BMesh) – The bmesh to operate on.",
            "faces(list of (bmesh.types.BMFace)) – Undocumented."
        ]
    },
    {
        "function_id": "bmesh.ops.bisect_edges",
        "signature": "bmesh.ops.bisect_edges(bm,edges=[],cuts=0,edge_percents={})#",
        "description": "Edge Bisect.",
        "parameters": [
            "bm",
            "edges=[]",
            "cuts=0",
            "edge_percents={}"
        ],
        "parameter_descriptions": [
            "bm(bmesh.types.BMesh) – The bmesh to operate on.",
            "edges(list of (bmesh.types.BMEdge)) – input edges",
            "cuts(int) – number of cuts",
            "edge_percents(dict mapping vert/edge/face types to float) – Undocumented.",
            "geom_split: newly created vertices and edgestypelist of (bmesh.types.BMVert,bmesh.types.BMEdge,bmesh.types.BMFace)"
        ]
    },
    {
        "function_id": "bmesh.ops.mirror",
        "signature": "bmesh.ops.mirror(bm,geom=[],matrix=mathutils.Matrix.Identity(4),merge_dist=0,axis='X',mirror_u=False,mirror_v=False,mirror_udim=False,use_shapekey=False)#",
        "description": "Mirror.",
        "parameters": [
            "bm",
            "geom=[]",
            "matrix=mathutils.Matrix.Identity(4)",
            "merge_dist=0",
            "axis='X'",
            "mirror_u=False",
            "mirror_v=False",
            "mirror_udim=False",
            "use_shapekey=False"
        ],
        "parameter_descriptions": [
            "bm(bmesh.types.BMesh) – The bmesh to operate on.",
            "geom(list of (bmesh.types.BMVert,bmesh.types.BMEdge,bmesh.types.BMFace)) – input geometry",
            "matrix(mathutils.Matrix) – matrix defining the mirror transformation",
            "merge_dist(float) – maximum distance for merging. does no merging if 0.",
            "axis(enum in['X','Y','Z'],default 'X') – the axis to use.",
            "mirror_u(bool) – mirror UVs across the u axis",
            "mirror_v(bool) – mirror UVs across the v axis",
            "mirror_udim(bool) – mirror UVs in each tile",
            "use_shapekey(bool) – Transform shape keys too.",
            "geom: output geometry, mirroredtypelist of (bmesh.types.BMVert,bmesh.types.BMEdge,bmesh.types.BMFace)"
        ]
    },
    {
        "function_id": "bmesh.ops.find_doubles",
        "signature": "bmesh.ops.find_doubles(bm,verts=[],keep_verts=[],dist=0)#",
        "description": "Find Doubles.",
        "parameters": [
            "bm",
            "verts=[]",
            "keep_verts=[]",
            "dist=0"
        ],
        "parameter_descriptions": [
            "bm(bmesh.types.BMesh) – The bmesh to operate on.",
            "verts(list of (bmesh.types.BMVert)) – input vertices",
            "keep_verts(list of (bmesh.types.BMVert)) – list of verts to keep",
            "dist(float) – maximum distance",
            "targetmap:typedict mapping vert/edge/face types tobmesh.types.BMVert/bmesh.types.BMEdge/bmesh.types.BMFace"
        ]
    },
    {
        "function_id": "bmesh.ops.remove_doubles",
        "signature": "bmesh.ops.remove_doubles(bm,verts=[],dist=0)#",
        "description": "Remove Doubles.",
        "parameters": [
            "bm",
            "verts=[]",
            "dist=0"
        ],
        "parameter_descriptions": [
            "bm(bmesh.types.BMesh) – The bmesh to operate on.",
            "verts(list of (bmesh.types.BMVert)) – input verts",
            "dist(float) – minimum distance"
        ]
    },
    {
        "function_id": "bmesh.ops.collapse",
        "signature": "bmesh.ops.collapse(bm,edges=[],uvs=False)#",
        "description": "Collapse Connected.",
        "parameters": [
            "bm",
            "edges=[]",
            "uvs=False"
        ],
        "parameter_descriptions": [
            "bm(bmesh.types.BMesh) – The bmesh to operate on.",
            "edges(list of (bmesh.types.BMEdge)) – input edges",
            "uvs(bool) – also collapse UVs and such"
        ]
    },
    {
        "function_id": "bmesh.ops.pointmerge_facedata",
        "signature": "bmesh.ops.pointmerge_facedata(bm,verts=[],vert_snap)#",
        "description": "Face-Data Point Merge.",
        "parameters": [
            "bm",
            "verts=[]",
            "vert_snap"
        ],
        "parameter_descriptions": [
            "bm(bmesh.types.BMesh) – The bmesh to operate on.",
            "verts(list of (bmesh.types.BMVert)) – input vertices",
            "vert_snap(bmesh.types.BMVert) – snap vertex"
        ]
    },
    {
        "function_id": "bmesh.ops.average_vert_facedata",
        "signature": "bmesh.ops.average_vert_facedata(bm,verts=[])#",
        "description": "Average Vertices Face-vert Data.",
        "parameters": [
            "bm",
            "verts=[]"
        ],
        "parameter_descriptions": [
            "bm(bmesh.types.BMesh) – The bmesh to operate on.",
            "verts(list of (bmesh.types.BMVert)) – input vertices"
        ]
    },
    {
        "function_id": "bmesh.ops.pointmerge",
        "signature": "bmesh.ops.pointmerge(bm,verts=[],merge_co=mathutils.Vector())#",
        "description": "Point Merge.",
        "parameters": [
            "bm",
            "verts=[]",
            "merge_co=mathutils.Vector()"
        ],
        "parameter_descriptions": [
            "bm(bmesh.types.BMesh) – The bmesh to operate on.",
            "verts(list of (bmesh.types.BMVert)) – input vertices (all verts will be merged into the first).",
            "merge_co(mathutils.Vectoror any sequence of 3 floats) – Position to merge at."
        ]
    },
    {
        "function_id": "bmesh.ops.collapse_uvs",
        "signature": "bmesh.ops.collapse_uvs(bm,edges=[])#",
        "description": "Collapse Connected UVs.",
        "parameters": [
            "bm",
            "edges=[]"
        ],
        "parameter_descriptions": [
            "bm(bmesh.types.BMesh) – The bmesh to operate on.",
            "edges(list of (bmesh.types.BMEdge)) – input edges"
        ]
    },
    {
        "function_id": "bmesh.ops.weld_verts",
        "signature": "bmesh.ops.weld_verts(bm,targetmap={})#",
        "description": "Weld Verts.",
        "parameters": [
            "bm",
            "targetmap={}"
        ],
        "parameter_descriptions": [
            "bm(bmesh.types.BMesh) – The bmesh to operate on.",
            "targetmap(dict mapping vert/edge/face types tobmesh.types.BMVert/bmesh.types.BMEdge/bmesh.types.BMFace) – maps welded vertices to verts they should weld to"
        ]
    },
    {
        "function_id": "bmesh.ops.create_vert",
        "signature": "bmesh.ops.create_vert(bm,co=mathutils.Vector())#",
        "description": "Make Vertex.",
        "parameters": [
            "bm",
            "co=mathutils.Vector()"
        ],
        "parameter_descriptions": [
            "bm(bmesh.types.BMesh) – The bmesh to operate on.",
            "co(mathutils.Vectoror any sequence of 3 floats) – the coordinate of the new vert",
            "vert: the new verttypelist of (bmesh.types.BMVert)"
        ]
    },
    {
        "function_id": "bmesh.ops.join_triangles",
        "signature": "bmesh.ops.join_triangles(bm,faces=[],cmp_seam=False,cmp_sharp=False,cmp_uvs=False,cmp_vcols=False,cmp_materials=False,angle_face_threshold=0,angle_shape_threshold=0)#",
        "description": "Join Triangles.",
        "parameters": [
            "bm",
            "faces=[]",
            "cmp_seam=False",
            "cmp_sharp=False",
            "cmp_uvs=False",
            "cmp_vcols=False",
            "cmp_materials=False",
            "angle_face_threshold=0",
            "angle_shape_threshold=0"
        ],
        "parameter_descriptions": [
            "bm(bmesh.types.BMesh) – The bmesh to operate on.",
            "faces(list of (bmesh.types.BMFace)) – input geometry.",
            "cmp_seam(bool) – Compare seam",
            "cmp_sharp(bool) – Compare sharp",
            "cmp_uvs(bool) – Compare UVs",
            "cmp_vcols(bool) – compare VCols",
            "cmp_materials(bool) – compare materials",
            "angle_face_threshold(float) – Undocumented.",
            "angle_shape_threshold(float) – Undocumented.",
            "faces: joined facestypelist of (bmesh.types.BMFace)"
        ]
    },
    {
        "function_id": "bmesh.ops.contextual_create",
        "signature": "bmesh.ops.contextual_create(bm,geom=[],mat_nr=0,use_smooth=False)#",
        "description": "Contextual Create.",
        "parameters": [
            "bm",
            "geom=[]",
            "mat_nr=0",
            "use_smooth=False"
        ],
        "parameter_descriptions": [
            "bm(bmesh.types.BMesh) – The bmesh to operate on.",
            "geom(list of (bmesh.types.BMVert,bmesh.types.BMEdge,bmesh.types.BMFace)) – input geometry.",
            "mat_nr(int) – material to use",
            "use_smooth(bool) – smooth to use",
            "faces: newly-made face(s)typelist of (bmesh.types.BMFace)",
            "edges: newly-made edge(s)typelist of (bmesh.types.BMEdge)"
        ]
    },
    {
        "function_id": "bmesh.ops.bridge_loops",
        "signature": "bmesh.ops.bridge_loops(bm,edges=[],use_pairs=False,use_cyclic=False,use_merge=False,merge_factor=0,twist_offset=0)#",
        "description": "Bridge edge loops with faces.",
        "parameters": [
            "bm",
            "edges=[]",
            "use_pairs=False",
            "use_cyclic=False",
            "use_merge=False",
            "merge_factor=0",
            "twist_offset=0"
        ],
        "parameter_descriptions": [
            "bm(bmesh.types.BMesh) – The bmesh to operate on.",
            "edges(list of (bmesh.types.BMEdge)) – input edges",
            "use_pairs(bool) – Undocumented.",
            "use_cyclic(bool) – Undocumented.",
            "use_merge(bool) – merge rather than creating faces",
            "merge_factor(float) – merge factor",
            "twist_offset(int) – twist offset for closed loops",
            "faces: new facestypelist of (bmesh.types.BMFace)",
            "edges: new edgestypelist of (bmesh.types.BMEdge)"
        ]
    },
    {
        "function_id": "bmesh.ops.grid_fill",
        "signature": "bmesh.ops.grid_fill(bm,edges=[],mat_nr=0,use_smooth=False,use_interp_simple=False)#",
        "description": "Grid Fill.",
        "parameters": [
            "bm",
            "edges=[]",
            "mat_nr=0",
            "use_smooth=False",
            "use_interp_simple=False"
        ],
        "parameter_descriptions": [
            "bm(bmesh.types.BMesh) – The bmesh to operate on.",
            "edges(list of (bmesh.types.BMEdge)) – input edges",
            "mat_nr(int) – material to use",
            "use_smooth(bool) – smooth state to use",
            "use_interp_simple(bool) – use simple interpolation",
            "faces: new facestypelist of (bmesh.types.BMFace)"
        ]
    },
    {
        "function_id": "bmesh.ops.holes_fill",
        "signature": "bmesh.ops.holes_fill(bm,edges=[],sides=0)#",
        "description": "Fill Holes.",
        "parameters": [
            "bm",
            "edges=[]",
            "sides=0"
        ],
        "parameter_descriptions": [
            "bm(bmesh.types.BMesh) – The bmesh to operate on.",
            "edges(list of (bmesh.types.BMEdge)) – input edges",
            "sides(int) – number of face sides to fill",
            "faces: new facestypelist of (bmesh.types.BMFace)"
        ]
    },
    {
        "function_id": "bmesh.ops.face_attribute_fill",
        "signature": "bmesh.ops.face_attribute_fill(bm,faces=[],use_normals=False,use_data=False)#",
        "description": "Face Attribute Fill.",
        "parameters": [
            "bm",
            "faces=[]",
            "use_normals=False",
            "use_data=False"
        ],
        "parameter_descriptions": [
            "bm(bmesh.types.BMesh) – The bmesh to operate on.",
            "faces(list of (bmesh.types.BMFace)) – input faces",
            "use_normals(bool) – copy face winding",
            "use_data(bool) – copy face data",
            "faces_fail: faces that could not be handledtypelist of (bmesh.types.BMFace)"
        ]
    },
    {
        "function_id": "bmesh.ops.edgeloop_fill",
        "signature": "bmesh.ops.edgeloop_fill(bm,edges=[],mat_nr=0,use_smooth=False)#",
        "description": "Edge Loop Fill.",
        "parameters": [
            "bm",
            "edges=[]",
            "mat_nr=0",
            "use_smooth=False"
        ],
        "parameter_descriptions": [
            "bm(bmesh.types.BMesh) – The bmesh to operate on.",
            "edges(list of (bmesh.types.BMEdge)) – input edges",
            "mat_nr(int) – material to use",
            "use_smooth(bool) – smooth state to use",
            "faces: new facestypelist of (bmesh.types.BMFace)"
        ]
    },
    {
        "function_id": "bmesh.ops.edgenet_fill",
        "signature": "bmesh.ops.edgenet_fill(bm,edges=[],mat_nr=0,use_smooth=False,sides=0)#",
        "description": "Edge Net Fill.",
        "parameters": [
            "bm",
            "edges=[]",
            "mat_nr=0",
            "use_smooth=False",
            "sides=0"
        ],
        "parameter_descriptions": [
            "bm(bmesh.types.BMesh) – The bmesh to operate on.",
            "edges(list of (bmesh.types.BMEdge)) – input edges",
            "mat_nr(int) – material to use",
            "use_smooth(bool) – smooth state to use",
            "sides(int) – number of sides",
            "faces: new facestypelist of (bmesh.types.BMFace)"
        ]
    },
    {
        "function_id": "bmesh.ops.edgenet_prepare",
        "signature": "bmesh.ops.edgenet_prepare(bm,edges=[])#",
        "description": "Edge-net Prepare.",
        "parameters": [
            "bm",
            "edges=[]"
        ],
        "parameter_descriptions": [
            "bm(bmesh.types.BMesh) – The bmesh to operate on.",
            "edges(list of (bmesh.types.BMEdge)) – input edges",
            "edges: new edgestypelist of (bmesh.types.BMEdge)"
        ]
    },
    {
        "function_id": "bmesh.ops.rotate",
        "signature": "bmesh.ops.rotate(bm,cent=mathutils.Vector(),matrix=mathutils.Matrix.Identity(4),verts=[],space=mathutils.Matrix.Identity(4),use_shapekey=False)#",
        "description": "Rotate.",
        "parameters": [
            "bm",
            "cent=mathutils.Vector()",
            "matrix=mathutils.Matrix.Identity(4)",
            "verts=[]",
            "space=mathutils.Matrix.Identity(4)",
            "use_shapekey=False"
        ],
        "parameter_descriptions": [
            "bm(bmesh.types.BMesh) – The bmesh to operate on.",
            "cent(mathutils.Vectoror any sequence of 3 floats) – center of rotation",
            "matrix(mathutils.Matrix) – matrix defining rotation",
            "verts(list of (bmesh.types.BMVert)) – input vertices",
            "space(mathutils.Matrix) – matrix to define the space (typically object matrix)",
            "use_shapekey(bool) – Transform shape keys too."
        ]
    },
    {
        "function_id": "bmesh.ops.translate",
        "signature": "bmesh.ops.translate(bm,vec=mathutils.Vector(),space=mathutils.Matrix.Identity(4),verts=[],use_shapekey=False)#",
        "description": "Translate.",
        "parameters": [
            "bm",
            "vec=mathutils.Vector()",
            "space=mathutils.Matrix.Identity(4)",
            "verts=[]",
            "use_shapekey=False"
        ],
        "parameter_descriptions": [
            "bm(bmesh.types.BMesh) – The bmesh to operate on.",
            "vec(mathutils.Vectoror any sequence of 3 floats) – translation offset",
            "space(mathutils.Matrix) – matrix to define the space (typically object matrix)",
            "verts(list of (bmesh.types.BMVert)) – input vertices",
            "use_shapekey(bool) – Transform shape keys too."
        ]
    },
    {
        "function_id": "bmesh.ops.scale",
        "signature": "bmesh.ops.scale(bm,vec=mathutils.Vector(),space=mathutils.Matrix.Identity(4),verts=[],use_shapekey=False)#",
        "description": "Scale.",
        "parameters": [
            "bm",
            "vec=mathutils.Vector()",
            "space=mathutils.Matrix.Identity(4)",
            "verts=[]",
            "use_shapekey=False"
        ],
        "parameter_descriptions": [
            "bm(bmesh.types.BMesh) – The bmesh to operate on.",
            "vec(mathutils.Vectoror any sequence of 3 floats) – scale factor",
            "space(mathutils.Matrix) – matrix to define the space (typically object matrix)",
            "verts(list of (bmesh.types.BMVert)) – input vertices",
            "use_shapekey(bool) – Transform shape keys too."
        ]
    },
    {
        "function_id": "bmesh.ops.transform",
        "signature": "bmesh.ops.transform(bm,matrix=mathutils.Matrix.Identity(4),space=mathutils.Matrix.Identity(4),verts=[],use_shapekey=False)#",
        "description": "Transform.",
        "parameters": [
            "bm",
            "matrix=mathutils.Matrix.Identity(4)",
            "space=mathutils.Matrix.Identity(4)",
            "verts=[]",
            "use_shapekey=False"
        ],
        "parameter_descriptions": [
            "bm(bmesh.types.BMesh) – The bmesh to operate on.",
            "matrix(mathutils.Matrix) – transform matrix",
            "space(mathutils.Matrix) – matrix to define the space (typically object matrix)",
            "verts(list of (bmesh.types.BMVert)) – input vertices",
            "use_shapekey(bool) – Transform shape keys too."
        ]
    },
    {
        "function_id": "bmesh.ops.object_load_bmesh",
        "signature": "bmesh.ops.object_load_bmesh(bm,scene,object)#",
        "description": "Object Load BMesh.",
        "parameters": [
            "bm",
            "scene",
            "object"
        ],
        "parameter_descriptions": [
            "bm(bmesh.types.BMesh) – The bmesh to operate on.",
            "scene(bpy.types.Scene) – pointer to an scene structure",
            "object(bpy.types.Object) – pointer to an object structure"
        ]
    },
    {
        "function_id": "bmesh.ops.bmesh_to_mesh",
        "signature": "bmesh.ops.bmesh_to_mesh(bm,mesh,object)#",
        "description": "BMesh to Mesh.",
        "parameters": [
            "bm",
            "mesh",
            "object"
        ],
        "parameter_descriptions": [
            "bm(bmesh.types.BMesh) – The bmesh to operate on.",
            "mesh(bpy.types.Mesh) – pointer to a mesh structure to fill in",
            "object(bpy.types.Object) – pointer to an object structure"
        ]
    },
    {
        "function_id": "bmesh.ops.mesh_to_bmesh",
        "signature": "bmesh.ops.mesh_to_bmesh(bm,mesh,object,use_shapekey=False)#",
        "description": "Mesh to BMesh.",
        "parameters": [
            "bm",
            "mesh",
            "object",
            "use_shapekey=False"
        ],
        "parameter_descriptions": [
            "bm(bmesh.types.BMesh) – The bmesh to operate on.",
            "mesh(bpy.types.Mesh) – pointer to a Mesh structure",
            "object(bpy.types.Object) – pointer to an Object structure",
            "use_shapekey(bool) – load active shapekey coordinates into verts"
        ]
    },
    {
        "function_id": "bmesh.ops.extrude_discrete_faces",
        "signature": "bmesh.ops.extrude_discrete_faces(bm,faces=[],use_normal_flip=False,use_select_history=False)#",
        "description": "Individual Face Extrude.",
        "parameters": [
            "bm",
            "faces=[]",
            "use_normal_flip=False",
            "use_select_history=False"
        ],
        "parameter_descriptions": [
            "bm(bmesh.types.BMesh) – The bmesh to operate on.",
            "faces(list of (bmesh.types.BMFace)) – input faces",
            "use_normal_flip(bool) – Create faces with reversed direction.",
            "use_select_history(bool) – pass to duplicate",
            "faces: output facestypelist of (bmesh.types.BMFace)"
        ]
    },
    {
        "function_id": "bmesh.ops.extrude_edge_only",
        "signature": "bmesh.ops.extrude_edge_only(bm,edges=[],use_normal_flip=False,use_select_history=False)#",
        "description": "Extrude Only Edges.",
        "parameters": [
            "bm",
            "edges=[]",
            "use_normal_flip=False",
            "use_select_history=False"
        ],
        "parameter_descriptions": [
            "bm(bmesh.types.BMesh) – The bmesh to operate on.",
            "edges(list of (bmesh.types.BMEdge)) – input vertices",
            "use_normal_flip(bool) – Create faces with reversed direction.",
            "use_select_history(bool) – pass to duplicate",
            "geom: output geometrytypelist of (bmesh.types.BMVert,bmesh.types.BMEdge,bmesh.types.BMFace)"
        ]
    },
    {
        "function_id": "bmesh.ops.extrude_vert_indiv",
        "signature": "bmesh.ops.extrude_vert_indiv(bm,verts=[],use_select_history=False)#",
        "description": "Individual Vertex Extrude.",
        "parameters": [
            "bm",
            "verts=[]",
            "use_select_history=False"
        ],
        "parameter_descriptions": [
            "bm(bmesh.types.BMesh) – The bmesh to operate on.",
            "verts(list of (bmesh.types.BMVert)) – input vertices",
            "use_select_history(bool) – pass to duplicate",
            "edges: output wire edgestypelist of (bmesh.types.BMEdge)",
            "verts: output verticestypelist of (bmesh.types.BMVert)"
        ]
    },
    {
        "function_id": "bmesh.ops.connect_verts",
        "signature": "bmesh.ops.connect_verts(bm,verts=[],faces_exclude=[],check_degenerate=False)#",
        "description": "Connect Verts.",
        "parameters": [
            "bm",
            "verts=[]",
            "faces_exclude=[]",
            "check_degenerate=False"
        ],
        "parameter_descriptions": [
            "bm(bmesh.types.BMesh) – The bmesh to operate on.",
            "verts(list of (bmesh.types.BMVert)) – input vertices",
            "faces_exclude(list of (bmesh.types.BMFace)) – input faces to explicitly exclude from connecting",
            "check_degenerate(bool) – prevent splits with overlaps & intersections",
            "edges:typelist of (bmesh.types.BMEdge)"
        ]
    },
    {
        "function_id": "bmesh.ops.connect_verts_concave",
        "signature": "bmesh.ops.connect_verts_concave(bm,faces=[])#",
        "description": "Connect Verts to form Convex Faces.",
        "parameters": [
            "bm",
            "faces=[]"
        ],
        "parameter_descriptions": [
            "bm(bmesh.types.BMesh) – The bmesh to operate on.",
            "faces(list of (bmesh.types.BMFace)) – input faces",
            "edges:typelist of (bmesh.types.BMEdge)",
            "faces:typelist of (bmesh.types.BMFace)"
        ]
    },
    {
        "function_id": "bmesh.ops.connect_verts_nonplanar",
        "signature": "bmesh.ops.connect_verts_nonplanar(bm,angle_limit=0,faces=[])#",
        "description": "Connect Verts Across non Planer Faces.",
        "parameters": [
            "bm",
            "angle_limit=0",
            "faces=[]"
        ],
        "parameter_descriptions": [
            "bm(bmesh.types.BMesh) – The bmesh to operate on.",
            "angle_limit(float) – total rotation angle (radians)",
            "faces(list of (bmesh.types.BMFace)) – input faces",
            "edges:typelist of (bmesh.types.BMEdge)",
            "faces:typelist of (bmesh.types.BMFace)"
        ]
    },
    {
        "function_id": "bmesh.ops.connect_vert_pair",
        "signature": "bmesh.ops.connect_vert_pair(bm,verts=[],verts_exclude=[],faces_exclude=[])#",
        "description": "Connect Verts.",
        "parameters": [
            "bm",
            "verts=[]",
            "verts_exclude=[]",
            "faces_exclude=[]"
        ],
        "parameter_descriptions": [
            "bm(bmesh.types.BMesh) – The bmesh to operate on.",
            "verts(list of (bmesh.types.BMVert)) – input vertices",
            "verts_exclude(list of (bmesh.types.BMVert)) – input vertices to explicitly exclude from connecting",
            "faces_exclude(list of (bmesh.types.BMFace)) – input faces to explicitly exclude from connecting",
            "edges:typelist of (bmesh.types.BMEdge)"
        ]
    },
    {
        "function_id": "bmesh.ops.extrude_face_region",
        "signature": "bmesh.ops.extrude_face_region(bm,geom=[],edges_exclude=set(),use_keep_orig=False,use_normal_flip=False,use_normal_from_adjacent=False,use_dissolve_ortho_edges=False,use_select_history=False)#",
        "description": "Extrude Faces.",
        "parameters": [
            "bm",
            "geom=[]",
            "edges_exclude=set()",
            "use_keep_orig=False",
            "use_normal_flip=False",
            "use_normal_from_adjacent=False",
            "use_dissolve_ortho_edges=False",
            "use_select_history=False"
        ],
        "parameter_descriptions": [
            "bm(bmesh.types.BMesh) – The bmesh to operate on.",
            "geom(list of (bmesh.types.BMVert,bmesh.types.BMEdge,bmesh.types.BMFace)) – edges and faces",
            "edges_exclude(setofvert/edge/face type) – input edges to explicitly exclude from extrusion",
            "use_keep_orig(bool) – keep original geometry (requiresgeomto include edges).",
            "use_normal_flip(bool) – Create faces with reversed direction.",
            "use_normal_from_adjacent(bool) – Use winding from surrounding faces instead of this region.",
            "use_dissolve_ortho_edges(bool) – Dissolve edges whose faces form a flat surface.",
            "use_select_history(bool) – pass to duplicate",
            "geom:typelist of (bmesh.types.BMVert,bmesh.types.BMEdge,bmesh.types.BMFace)"
        ]
    },
    {
        "function_id": "bmesh.ops.dissolve_verts",
        "signature": "bmesh.ops.dissolve_verts(bm,verts=[],use_face_split=False,use_boundary_tear=False)#",
        "description": "Dissolve Verts.",
        "parameters": [
            "bm",
            "verts=[]",
            "use_face_split=False",
            "use_boundary_tear=False"
        ],
        "parameter_descriptions": [
            "bm(bmesh.types.BMesh) – The bmesh to operate on.",
            "verts(list of (bmesh.types.BMVert)) – input vertices",
            "use_face_split(bool) – split off face corners to maintain surrounding geometry",
            "use_boundary_tear(bool) – split off face corners instead of merging faces"
        ]
    },
    {
        "function_id": "bmesh.ops.dissolve_edges",
        "signature": "bmesh.ops.dissolve_edges(bm,edges=[],use_verts=False,use_face_split=False)#",
        "description": "Dissolve Edges.",
        "parameters": [
            "bm",
            "edges=[]",
            "use_verts=False",
            "use_face_split=False"
        ],
        "parameter_descriptions": [
            "bm(bmesh.types.BMesh) – The bmesh to operate on.",
            "edges(list of (bmesh.types.BMEdge)) – input edges",
            "use_verts(bool) – dissolve verts left between only 2 edges.",
            "use_face_split(bool) – split off face corners to maintain surrounding geometry",
            "region:typelist of (bmesh.types.BMFace)"
        ]
    },
    {
        "function_id": "bmesh.ops.dissolve_faces",
        "signature": "bmesh.ops.dissolve_faces(bm,faces=[],use_verts=False)#",
        "description": "Dissolve Faces.",
        "parameters": [
            "bm",
            "faces=[]",
            "use_verts=False"
        ],
        "parameter_descriptions": [
            "bm(bmesh.types.BMesh) – The bmesh to operate on.",
            "faces(list of (bmesh.types.BMFace)) – input faces",
            "use_verts(bool) – dissolve verts left between only 2 edges.",
            "region:typelist of (bmesh.types.BMFace)"
        ]
    },
    {
        "function_id": "bmesh.ops.dissolve_limit",
        "signature": "bmesh.ops.dissolve_limit(bm,angle_limit=0,use_dissolve_boundaries=False,verts=[],edges=[],delimit=set())#",
        "description": "Limited Dissolve.",
        "parameters": [
            "bm",
            "angle_limit=0",
            "use_dissolve_boundaries=False",
            "verts=[]",
            "edges=[]",
            "delimit=set()"
        ],
        "parameter_descriptions": [
            "bm(bmesh.types.BMesh) – The bmesh to operate on.",
            "angle_limit(float) – total rotation angle (radians)",
            "use_dissolve_boundaries(bool) – dissolve all vertices in between face boundaries",
            "verts(list of (bmesh.types.BMVert)) – input vertices",
            "edges(list of (bmesh.types.BMEdge)) – input edges",
            "delimit(setofflags from['NORMAL','MATERIAL','SEAM','SHARP','UV'],default set()) – delimit dissolve operation",
            "region:typelist of (bmesh.types.BMFace)"
        ]
    },
    {
        "function_id": "bmesh.ops.dissolve_degenerate",
        "signature": "bmesh.ops.dissolve_degenerate(bm,dist=0,edges=[])#",
        "description": "Degenerate Dissolve.",
        "parameters": [
            "bm",
            "dist=0",
            "edges=[]"
        ],
        "parameter_descriptions": [
            "bm(bmesh.types.BMesh) – The bmesh to operate on.",
            "dist(float) – maximum distance to consider degenerate",
            "edges(list of (bmesh.types.BMEdge)) – input edges"
        ]
    },
    {
        "function_id": "bmesh.ops.triangulate",
        "signature": "bmesh.ops.triangulate(bm,faces=[],quad_method='BEAUTY',ngon_method='BEAUTY')#",
        "description": "Triangulate.",
        "parameters": [
            "bm",
            "faces=[]",
            "quad_method='BEAUTY'",
            "ngon_method='BEAUTY'"
        ],
        "parameter_descriptions": [
            "bm(bmesh.types.BMesh) – The bmesh to operate on.",
            "faces(list of (bmesh.types.BMFace)) – input faces",
            "quad_method(enum in['BEAUTY','FIXED','ALTERNATE','SHORT_EDGE','LONG_EDGE'],default 'BEAUTY') – method for splitting the quads into triangles",
            "ngon_method(enum in['BEAUTY','EAR_CLIP'],default 'BEAUTY') – method for splitting the polygons into triangles",
            "edges:typelist of (bmesh.types.BMEdge)",
            "faces:typelist of (bmesh.types.BMFace)",
            "face_map:typedict mapping vert/edge/face types tobmesh.types.BMVert/bmesh.types.BMEdge/bmesh.types.BMFace",
            "face_map_double: duplicate facestypedict mapping vert/edge/face types tobmesh.types.BMVert/bmesh.types.BMEdge/bmesh.types.BMFace"
        ]
    },
    {
        "function_id": "bmesh.ops.unsubdivide",
        "signature": "bmesh.ops.unsubdivide(bm,verts=[],iterations=0)#",
        "description": "Un-Subdivide.",
        "parameters": [
            "bm",
            "verts=[]",
            "iterations=0"
        ],
        "parameter_descriptions": [
            "bm(bmesh.types.BMesh) – The bmesh to operate on.",
            "verts(list of (bmesh.types.BMVert)) – input vertices",
            "iterations(int) – number of times to unsubdivide"
        ]
    },
    {
        "function_id": "bmesh.ops.subdivide_edges",
        "signature": "bmesh.ops.subdivide_edges(bm,edges=[],smooth=0,smooth_falloff='SMOOTH',fractal=0,along_normal=0,cuts=0,seed=0,custom_patterns={},edge_percents={},quad_corner_type='STRAIGHT_CUT',use_grid_fill=False,use_single_edge=False,use_only_quads=False,use_sphere=False,use_smooth_even=False)#",
        "description": "Subdivide Edges.",
        "parameters": [
            "bm",
            "edges=[]",
            "smooth=0",
            "smooth_falloff='SMOOTH'",
            "fractal=0",
            "along_normal=0",
            "cuts=0",
            "seed=0",
            "custom_patterns={}",
            "edge_percents={}",
            "quad_corner_type='STRAIGHT_CUT'",
            "use_grid_fill=False",
            "use_single_edge=False",
            "use_only_quads=False",
            "use_sphere=False",
            "use_smooth_even=False"
        ],
        "parameter_descriptions": [
            "bm(bmesh.types.BMesh) – The bmesh to operate on.",
            "edges(list of (bmesh.types.BMEdge)) – input edges",
            "smooth(float) – smoothness factor",
            "smooth_falloff(enum in['SMOOTH','SPHERE','ROOT','SHARP','LINEAR','INVERSE_SQUARE'],default 'SMOOTH') – smooth falloff type",
            "fractal(float) – fractal randomness factor",
            "along_normal(float) – apply fractal displacement along normal only",
            "cuts(int) – number of cuts",
            "seed(int) – seed for the random number generator",
            "custom_patterns(dict mapping vert/edge/face types to unknown internal data,not compatible with python) – uses custom pointers",
            "edge_percents(dict mapping vert/edge/face types to float) – Undocumented.",
            "quad_corner_type(enum in['STRAIGHT_CUT','INNER_VERT','PATH','FAN'],default 'STRAIGHT_CUT') – quad corner type",
            "use_grid_fill(bool) – fill in fully-selected faces with a grid",
            "use_single_edge(bool) – tessellate the case of one edge selected in a quad or triangle",
            "use_only_quads(bool) – Only subdivide quads (for loop-cut).",
            "use_sphere(bool) – for making new primitives only",
            "use_smooth_even(bool) – maintain even offset when smoothing",
            "geom_inner:typelist of (bmesh.types.BMVert,bmesh.types.BMEdge,bmesh.types.BMFace)",
            "geom_split:typelist of (bmesh.types.BMVert,bmesh.types.BMEdge,bmesh.types.BMFace)",
            "geom: contains all output geometrytypelist of (bmesh.types.BMVert,bmesh.types.BMEdge,bmesh.types.BMFace)"
        ]
    },
    {
        "function_id": "bmesh.ops.subdivide_edgering",
        "signature": "bmesh.ops.subdivide_edgering(bm,edges=[],interp_mode='LINEAR',smooth=0,cuts=0,profile_shape='SMOOTH',profile_shape_factor=0)#",
        "description": "Subdivide Edge-Ring.",
        "parameters": [
            "bm",
            "edges=[]",
            "interp_mode='LINEAR'",
            "smooth=0",
            "cuts=0",
            "profile_shape='SMOOTH'",
            "profile_shape_factor=0"
        ],
        "parameter_descriptions": [
            "bm(bmesh.types.BMesh) – The bmesh to operate on.",
            "edges(list of (bmesh.types.BMEdge)) – input vertices",
            "interp_mode(enum in['LINEAR','PATH','SURFACE'],default 'LINEAR') – interpolation method",
            "smooth(float) – smoothness factor",
            "cuts(int) – number of cuts",
            "profile_shape(enum in['SMOOTH','SPHERE','ROOT','SHARP','LINEAR','INVERSE_SQUARE'],default 'SMOOTH') – profile shape type",
            "profile_shape_factor(float) – how much intermediary new edges are shrunk/expanded",
            "faces: output facestypelist of (bmesh.types.BMFace)"
        ]
    },
    {
        "function_id": "bmesh.ops.bisect_plane",
        "signature": "bmesh.ops.bisect_plane(bm,geom=[],dist=0,plane_co=mathutils.Vector(),plane_no=mathutils.Vector(),use_snap_center=False,clear_outer=False,clear_inner=False)#",
        "description": "Bisect Plane.",
        "parameters": [
            "bm",
            "geom=[]",
            "dist=0",
            "plane_co=mathutils.Vector()",
            "plane_no=mathutils.Vector()",
            "use_snap_center=False",
            "clear_outer=False",
            "clear_inner=False"
        ],
        "parameter_descriptions": [
            "bm(bmesh.types.BMesh) – The bmesh to operate on.",
            "geom(list of (bmesh.types.BMVert,bmesh.types.BMEdge,bmesh.types.BMFace)) – input geometry",
            "dist(float) – minimum distance when testing if a vert is exactly on the plane",
            "plane_co(mathutils.Vectoror any sequence of 3 floats) – point on the plane",
            "plane_no(mathutils.Vectoror any sequence of 3 floats) – direction of the plane",
            "use_snap_center(bool) – snap axis aligned verts to the center",
            "clear_outer(bool) – when enabled. remove all geometry on the positive side of the plane",
            "clear_inner(bool) – when enabled. remove all geometry on the negative side of the plane",
            "geom_cut: output geometry aligned with the plane (new and existing)typelist of (bmesh.types.BMVert,bmesh.types.BMEdge)",
            "geom: input and output geometry (result of cut).typelist of (bmesh.types.BMVert,bmesh.types.BMEdge,bmesh.types.BMFace)"
        ]
    },
    {
        "function_id": "bmesh.ops.delete",
        "signature": "bmesh.ops.delete(bm,geom=[],context='VERTS')#",
        "description": "Delete Geometry.",
        "parameters": [
            "bm",
            "geom=[]",
            "context='VERTS'"
        ],
        "parameter_descriptions": [
            "bm(bmesh.types.BMesh) – The bmesh to operate on.",
            "geom(list of (bmesh.types.BMVert,bmesh.types.BMEdge,bmesh.types.BMFace)) – input geometry",
            "context(enum in['VERTS','EDGES','FACES_ONLY','EDGES_FACES','FACES','FACES_KEEP_BOUNDARY','TAGGED_ONLY'],default 'VERTS') – geometry types to delete"
        ]
    },
    {
        "function_id": "bmesh.ops.duplicate",
        "signature": "bmesh.ops.duplicate(bm,geom=[],dest=None,use_select_history=False,use_edge_flip_from_face=False)#",
        "description": "Duplicate Geometry.",
        "parameters": [
            "bm",
            "geom=[]",
            "dest=None",
            "use_select_history=False",
            "use_edge_flip_from_face=False"
        ],
        "parameter_descriptions": [
            "bm(bmesh.types.BMesh) – The bmesh to operate on.",
            "geom(list of (bmesh.types.BMVert,bmesh.types.BMEdge,bmesh.types.BMFace)) – input geometry",
            "dest(bmesh.types.BMesh) – destination bmesh, if None will use current on",
            "use_select_history(bool) – Undocumented.",
            "use_edge_flip_from_face(bool) – Undocumented.",
            "geom_orig:typelist of (bmesh.types.BMVert,bmesh.types.BMEdge,bmesh.types.BMFace)",
            "geom:typelist of (bmesh.types.BMVert,bmesh.types.BMEdge,bmesh.types.BMFace)",
            "vert_map:typedict mapping vert/edge/face types tobmesh.types.BMVert/bmesh.types.BMEdge/bmesh.types.BMFace",
            "edge_map:typedict mapping vert/edge/face types tobmesh.types.BMVert/bmesh.types.BMEdge/bmesh.types.BMFace",
            "face_map:typedict mapping vert/edge/face types tobmesh.types.BMVert/bmesh.types.BMEdge/bmesh.types.BMFace",
            "boundary_map:typedict mapping vert/edge/face types tobmesh.types.BMVert/bmesh.types.BMEdge/bmesh.types.BMFace",
            "isovert_map:typedict mapping vert/edge/face types tobmesh.types.BMVert/bmesh.types.BMEdge/bmesh.types.BMFace"
        ]
    },
    {
        "function_id": "bmesh.ops.split",
        "signature": "bmesh.ops.split(bm,geom=[],dest=None,use_only_faces=False)#",
        "description": "Split Off Geometry.",
        "parameters": [
            "bm",
            "geom=[]",
            "dest=None",
            "use_only_faces=False"
        ],
        "parameter_descriptions": [
            "bm(bmesh.types.BMesh) – The bmesh to operate on.",
            "geom(list of (bmesh.types.BMVert,bmesh.types.BMEdge,bmesh.types.BMFace)) – input geometry",
            "dest(bmesh.types.BMesh) – destination bmesh, if None will use current one",
            "use_only_faces(bool) – when enabled. don’t duplicate loose verts/edges",
            "geom:typelist of (bmesh.types.BMVert,bmesh.types.BMEdge,bmesh.types.BMFace)",
            "boundary_map:typedict mapping vert/edge/face types tobmesh.types.BMVert/bmesh.types.BMEdge/bmesh.types.BMFace",
            "isovert_map:typedict mapping vert/edge/face types tobmesh.types.BMVert/bmesh.types.BMEdge/bmesh.types.BMFace"
        ]
    },
    {
        "function_id": "bmesh.ops.spin",
        "signature": "bmesh.ops.spin(bm,geom=[],cent=mathutils.Vector(),axis=mathutils.Vector(),dvec=mathutils.Vector(),angle=0,space=mathutils.Matrix.Identity(4),steps=0,use_merge=False,use_normal_flip=False,use_duplicate=False)#",
        "description": "Spin.",
        "parameters": [
            "bm",
            "geom=[]",
            "cent=mathutils.Vector()",
            "axis=mathutils.Vector()",
            "dvec=mathutils.Vector()",
            "angle=0",
            "space=mathutils.Matrix.Identity(4)",
            "steps=0",
            "use_merge=False",
            "use_normal_flip=False",
            "use_duplicate=False"
        ],
        "parameter_descriptions": [
            "bm(bmesh.types.BMesh) – The bmesh to operate on.",
            "geom(list of (bmesh.types.BMVert,bmesh.types.BMEdge,bmesh.types.BMFace)) – input geometry",
            "cent(mathutils.Vectoror any sequence of 3 floats) – rotation center",
            "axis(mathutils.Vectoror any sequence of 3 floats) – rotation axis",
            "dvec(mathutils.Vectoror any sequence of 3 floats) – translation delta per step",
            "angle(float) – total rotation angle (radians)",
            "space(mathutils.Matrix) – matrix to define the space (typically object matrix)",
            "steps(int) – number of steps",
            "use_merge(bool) – Merge first/last when the angle is a full revolution.",
            "use_normal_flip(bool) – Create faces with reversed direction.",
            "use_duplicate(bool) – duplicate or extrude?",
            "geom_last: result of last steptypelist of (bmesh.types.BMVert,bmesh.types.BMEdge,bmesh.types.BMFace)"
        ]
    },
    {
        "function_id": "bmesh.ops.rotate_uvs",
        "signature": "bmesh.ops.rotate_uvs(bm,faces=[],use_ccw=False)#",
        "description": "UV Rotation.",
        "parameters": [
            "bm",
            "faces=[]",
            "use_ccw=False"
        ],
        "parameter_descriptions": [
            "bm(bmesh.types.BMesh) – The bmesh to operate on.",
            "faces(list of (bmesh.types.BMFace)) – input faces",
            "use_ccw(bool) – rotate counter-clockwise if true, otherwise clockwise"
        ]
    },
    {
        "function_id": "bmesh.ops.reverse_uvs",
        "signature": "bmesh.ops.reverse_uvs(bm,faces=[])#",
        "description": "UV Reverse.",
        "parameters": [
            "bm",
            "faces=[]"
        ],
        "parameter_descriptions": [
            "bm(bmesh.types.BMesh) – The bmesh to operate on.",
            "faces(list of (bmesh.types.BMFace)) – input faces"
        ]
    },
    {
        "function_id": "bmesh.ops.rotate_colors",
        "signature": "bmesh.ops.rotate_colors(bm,faces=[],use_ccw=False,color_index=0)#",
        "description": "Color Rotation.",
        "parameters": [
            "bm",
            "faces=[]",
            "use_ccw=False",
            "color_index=0"
        ],
        "parameter_descriptions": [
            "bm(bmesh.types.BMesh) – The bmesh to operate on.",
            "faces(list of (bmesh.types.BMFace)) – input faces",
            "use_ccw(bool) – rotate counter-clockwise if true, otherwise clockwise",
            "color_index(int) – index into color attribute list"
        ]
    },
    {
        "function_id": "bmesh.ops.reverse_colors",
        "signature": "bmesh.ops.reverse_colors(bm,faces=[],color_index=0)#",
        "description": "Color Reverse",
        "parameters": [
            "bm",
            "faces=[]",
            "color_index=0"
        ],
        "parameter_descriptions": [
            "bm(bmesh.types.BMesh) – The bmesh to operate on.",
            "faces(list of (bmesh.types.BMFace)) – input faces",
            "color_index(int) – index into color attribute list"
        ]
    },
    {
        "function_id": "bmesh.ops.split_edges",
        "signature": "bmesh.ops.split_edges(bm,edges=[],verts=[],use_verts=False)#",
        "description": "Edge Split.",
        "parameters": [
            "bm",
            "edges=[]",
            "verts=[]",
            "use_verts=False"
        ],
        "parameter_descriptions": [
            "bm(bmesh.types.BMesh) – The bmesh to operate on.",
            "edges(list of (bmesh.types.BMEdge)) – input edges",
            "verts(list of (bmesh.types.BMVert)) – optional tag verts, use to have greater control of splits",
            "use_verts(bool) – use ‘verts’ for splitting, else just find verts to split from edges",
            "edges: old output disconnected edgestypelist of (bmesh.types.BMEdge)"
        ]
    },
    {
        "function_id": "bmesh.ops.create_grid",
        "signature": "bmesh.ops.create_grid(bm,x_segments=0,y_segments=0,size=0,matrix=mathutils.Matrix.Identity(4),calc_uvs=False)#",
        "description": "Create Grid.",
        "parameters": [
            "bm",
            "x_segments=0",
            "y_segments=0",
            "size=0",
            "matrix=mathutils.Matrix.Identity(4)",
            "calc_uvs=False"
        ],
        "parameter_descriptions": [
            "bm(bmesh.types.BMesh) – The bmesh to operate on.",
            "x_segments(int) – number of x segments",
            "y_segments(int) – number of y segments",
            "size(float) – size of the grid",
            "matrix(mathutils.Matrix) – matrix to multiply the new geometry with",
            "calc_uvs(bool) – calculate default UVs",
            "verts: output vertstypelist of (bmesh.types.BMVert)"
        ]
    },
    {
        "function_id": "bmesh.ops.create_uvsphere",
        "signature": "bmesh.ops.create_uvsphere(bm,u_segments=0,v_segments=0,radius=0,matrix=mathutils.Matrix.Identity(4),calc_uvs=False)#",
        "description": "Create UV Sphere.",
        "parameters": [
            "bm",
            "u_segments=0",
            "v_segments=0",
            "radius=0",
            "matrix=mathutils.Matrix.Identity(4)",
            "calc_uvs=False"
        ],
        "parameter_descriptions": [
            "bm(bmesh.types.BMesh) – The bmesh to operate on.",
            "u_segments(int) – number of u segments",
            "v_segments(int) – number of v segment",
            "radius(float) – radius",
            "matrix(mathutils.Matrix) – matrix to multiply the new geometry with",
            "calc_uvs(bool) – calculate default UVs",
            "verts: output vertstypelist of (bmesh.types.BMVert)"
        ]
    },
    {
        "function_id": "bmesh.ops.create_icosphere",
        "signature": "bmesh.ops.create_icosphere(bm,subdivisions=0,radius=0,matrix=mathutils.Matrix.Identity(4),calc_uvs=False)#",
        "description": "Create Ico-Sphere.",
        "parameters": [
            "bm",
            "subdivisions=0",
            "radius=0",
            "matrix=mathutils.Matrix.Identity(4)",
            "calc_uvs=False"
        ],
        "parameter_descriptions": [
            "bm(bmesh.types.BMesh) – The bmesh to operate on.",
            "subdivisions(int) – how many times to recursively subdivide the sphere",
            "radius(float) – radius",
            "matrix(mathutils.Matrix) – matrix to multiply the new geometry with",
            "calc_uvs(bool) – calculate default UVs",
            "verts: output vertstypelist of (bmesh.types.BMVert)"
        ]
    },
    {
        "function_id": "bmesh.ops.create_monkey",
        "signature": "bmesh.ops.create_monkey(bm,matrix=mathutils.Matrix.Identity(4),calc_uvs=False)#",
        "description": "Create Suzanne.",
        "parameters": [
            "bm",
            "matrix=mathutils.Matrix.Identity(4)",
            "calc_uvs=False"
        ],
        "parameter_descriptions": [
            "bm(bmesh.types.BMesh) – The bmesh to operate on.",
            "matrix(mathutils.Matrix) – matrix to multiply the new geometry with",
            "calc_uvs(bool) – calculate default UVs",
            "verts: output vertstypelist of (bmesh.types.BMVert)"
        ]
    },
    {
        "function_id": "bmesh.ops.create_cone",
        "signature": "bmesh.ops.create_cone(bm,cap_ends=False,cap_tris=False,segments=0,radius1=0,radius2=0,depth=0,matrix=mathutils.Matrix.Identity(4),calc_uvs=False)#",
        "description": "Create Cone.",
        "parameters": [
            "bm",
            "cap_ends=False",
            "cap_tris=False",
            "segments=0",
            "radius1=0",
            "radius2=0",
            "depth=0",
            "matrix=mathutils.Matrix.Identity(4)",
            "calc_uvs=False"
        ],
        "parameter_descriptions": [
            "bm(bmesh.types.BMesh) – The bmesh to operate on.",
            "cap_ends(bool) – whether or not to fill in the ends with faces",
            "cap_tris(bool) – fill ends with triangles instead of ngons",
            "segments(int) – number of vertices in the base circle",
            "radius1(float) – radius of one end",
            "radius2(float) – radius of the opposite",
            "depth(float) – distance between ends",
            "matrix(mathutils.Matrix) – matrix to multiply the new geometry with",
            "calc_uvs(bool) – calculate default UVs",
            "verts: output vertstypelist of (bmesh.types.BMVert)"
        ]
    },
    {
        "function_id": "bmesh.ops.create_circle",
        "signature": "bmesh.ops.create_circle(bm,cap_ends=False,cap_tris=False,segments=0,radius=0,matrix=mathutils.Matrix.Identity(4),calc_uvs=False)#",
        "description": "Creates a Circle.",
        "parameters": [
            "bm",
            "cap_ends=False",
            "cap_tris=False",
            "segments=0",
            "radius=0",
            "matrix=mathutils.Matrix.Identity(4)",
            "calc_uvs=False"
        ],
        "parameter_descriptions": [
            "bm(bmesh.types.BMesh) – The bmesh to operate on.",
            "cap_ends(bool) – whether or not to fill in the ends with faces",
            "cap_tris(bool) – fill ends with triangles instead of ngons",
            "segments(int) – number of vertices in the circle",
            "radius(float) – Radius of the circle.",
            "matrix(mathutils.Matrix) – matrix to multiply the new geometry with",
            "calc_uvs(bool) – calculate default UVs",
            "verts: output vertstypelist of (bmesh.types.BMVert)"
        ]
    },
    {
        "function_id": "bmesh.ops.create_cube",
        "signature": "bmesh.ops.create_cube(bm,size=0,matrix=mathutils.Matrix.Identity(4),calc_uvs=False)#",
        "description": "Create Cube",
        "parameters": [
            "bm",
            "size=0",
            "matrix=mathutils.Matrix.Identity(4)",
            "calc_uvs=False"
        ],
        "parameter_descriptions": [
            "bm(bmesh.types.BMesh) – The bmesh to operate on.",
            "size(float) – size of the cube",
            "matrix(mathutils.Matrix) – matrix to multiply the new geometry with",
            "calc_uvs(bool) – calculate default UVs",
            "verts: output vertstypelist of (bmesh.types.BMVert)"
        ]
    },
    {
        "function_id": "bmesh.ops.bevel",
        "signature": "bmesh.ops.bevel(bm,geom=[],offset=0,offset_type='OFFSET',profile_type='SUPERELLIPSE',segments=0,profile=0,affect='VERTICES',clamp_overlap=False,material=0,loop_slide=False,mark_seam=False,mark_sharp=False,harden_normals=False,face_strength_mode='NONE',miter_outer='SHARP',miter_inner='SHARP',spread=0,custom_profile=None,vmesh_method='ADJ')#",
        "description": "Bevel.",
        "parameters": [
            "bm",
            "geom=[]",
            "offset=0",
            "offset_type='OFFSET'",
            "profile_type='SUPERELLIPSE'",
            "segments=0",
            "profile=0",
            "affect='VERTICES'",
            "clamp_overlap=False",
            "material=0",
            "loop_slide=False",
            "mark_seam=False",
            "mark_sharp=False",
            "harden_normals=False",
            "face_strength_mode='NONE'",
            "miter_outer='SHARP'",
            "miter_inner='SHARP'",
            "spread=0",
            "custom_profile=None",
            "vmesh_method='ADJ'"
        ],
        "parameter_descriptions": [
            "bm(bmesh.types.BMesh) – The bmesh to operate on.",
            "geom(list of (bmesh.types.BMVert,bmesh.types.BMEdge,bmesh.types.BMFace)) – input edges and vertices",
            "offset(float) – amount to offset beveled edge",
            "offset_type(enum in['OFFSET','WIDTH','DEPTH','PERCENT','ABSOLUTE'],default 'OFFSET') – how to measure the offset",
            "profile_type(enum in['SUPERELLIPSE','CUSTOM'],default 'SUPERELLIPSE') – The profile type to use for bevel.",
            "segments(int) – number of segments in bevel",
            "profile(float) – profile shape, 0->1 (.5=>round)",
            "affect(enum in['VERTICES','EDGES'],default 'VERTICES') – Whether to bevel vertices or edges.",
            "clamp_overlap(bool) – do not allow beveled edges/vertices to overlap each other",
            "material(int) – material for bevel faces, -1 means get from adjacent faces",
            "loop_slide(bool) – prefer to slide along edges to having even widths",
            "mark_seam(bool) – extend edge data to allow seams to run across bevels",
            "mark_sharp(bool) – extend edge data to allow sharp edges to run across bevels",
            "harden_normals(bool) – harden normals",
            "face_strength_mode(enum in['NONE','NEW','AFFECTED','ALL'],default 'NONE') – whether to set face strength, and which faces to set if so",
            "miter_outer(enum in['SHARP','PATCH','ARC'],default 'SHARP') – outer miter kind",
            "miter_inner(enum in['SHARP','PATCH','ARC'],default 'SHARP') – outer miter kind",
            "spread(float) – amount to offset beveled edge",
            "custom_profile(bpy.types.bpy_struct) – CurveProfile, if None ignored",
            "vmesh_method(enum in['ADJ','CUTOFF'],default 'ADJ') – The method to use to create meshes at intersections.",
            "faces: output facestypelist of (bmesh.types.BMFace)",
            "edges: output edgestypelist of (bmesh.types.BMEdge)",
            "verts: output vertstypelist of (bmesh.types.BMVert)"
        ]
    },
    {
        "function_id": "bmesh.ops.beautify_fill",
        "signature": "bmesh.ops.beautify_fill(bm,faces=[],edges=[],use_restrict_tag=False,method='AREA')#",
        "description": "Beautify Fill.",
        "parameters": [
            "bm",
            "faces=[]",
            "edges=[]",
            "use_restrict_tag=False",
            "method='AREA'"
        ],
        "parameter_descriptions": [
            "bm(bmesh.types.BMesh) – The bmesh to operate on.",
            "faces(list of (bmesh.types.BMFace)) – input faces",
            "edges(list of (bmesh.types.BMEdge)) – edges that can be flipped",
            "use_restrict_tag(bool) – restrict edge rotation to mixed tagged vertices",
            "method(enum in['AREA','ANGLE'],default 'AREA') – method to define what is beautiful",
            "geom: new flipped faces and edgestypelist of (bmesh.types.BMVert,bmesh.types.BMEdge,bmesh.types.BMFace)"
        ]
    },
    {
        "function_id": "bmesh.ops.triangle_fill",
        "signature": "bmesh.ops.triangle_fill(bm,use_beauty=False,use_dissolve=False,edges=[],normal=mathutils.Vector())#",
        "description": "Triangle Fill.",
        "parameters": [
            "bm",
            "use_beauty=False",
            "use_dissolve=False",
            "edges=[]",
            "normal=mathutils.Vector()"
        ],
        "parameter_descriptions": [
            "bm(bmesh.types.BMesh) – The bmesh to operate on.",
            "use_beauty(bool) – use best triangulation division",
            "use_dissolve(bool) – dissolve resulting faces",
            "edges(list of (bmesh.types.BMEdge)) – input edges",
            "normal(mathutils.Vectoror any sequence of 3 floats) – optionally pass the fill normal to use",
            "geom: new faces and edgestypelist of (bmesh.types.BMVert,bmesh.types.BMEdge,bmesh.types.BMFace)"
        ]
    },
    {
        "function_id": "bmesh.ops.solidify",
        "signature": "bmesh.ops.solidify(bm,geom=[],thickness=0)#",
        "description": "Solidify.",
        "parameters": [
            "bm",
            "geom=[]",
            "thickness=0"
        ],
        "parameter_descriptions": [
            "bm(bmesh.types.BMesh) – The bmesh to operate on.",
            "geom(list of (bmesh.types.BMVert,bmesh.types.BMEdge,bmesh.types.BMFace)) – input geometry",
            "thickness(float) – thickness",
            "geom:typelist of (bmesh.types.BMVert,bmesh.types.BMEdge,bmesh.types.BMFace)"
        ]
    },
    {
        "function_id": "bmesh.ops.inset_individual",
        "signature": "bmesh.ops.inset_individual(bm,faces=[],thickness=0,depth=0,use_even_offset=False,use_interpolate=False,use_relative_offset=False)#",
        "description": "Face Inset (Individual).",
        "parameters": [
            "bm",
            "faces=[]",
            "thickness=0",
            "depth=0",
            "use_even_offset=False",
            "use_interpolate=False",
            "use_relative_offset=False"
        ],
        "parameter_descriptions": [
            "bm(bmesh.types.BMesh) – The bmesh to operate on.",
            "faces(list of (bmesh.types.BMFace)) – input faces",
            "thickness(float) – thickness",
            "depth(float) – depth",
            "use_even_offset(bool) – scale the offset to give more even thickness",
            "use_interpolate(bool) – blend face data across the inset",
            "use_relative_offset(bool) – scale the offset by surrounding geometry",
            "faces: output facestypelist of (bmesh.types.BMFace)"
        ]
    },
    {
        "function_id": "bmesh.ops.inset_region",
        "signature": "bmesh.ops.inset_region(bm,faces=[],faces_exclude=[],use_boundary=False,use_even_offset=False,use_interpolate=False,use_relative_offset=False,use_edge_rail=False,thickness=0,depth=0,use_outset=False)#",
        "description": "Face Inset (Regions).",
        "parameters": [
            "bm",
            "faces=[]",
            "faces_exclude=[]",
            "use_boundary=False",
            "use_even_offset=False",
            "use_interpolate=False",
            "use_relative_offset=False",
            "use_edge_rail=False",
            "thickness=0",
            "depth=0",
            "use_outset=False"
        ],
        "parameter_descriptions": [
            "bm(bmesh.types.BMesh) – The bmesh to operate on.",
            "faces(list of (bmesh.types.BMFace)) – input faces",
            "faces_exclude(list of (bmesh.types.BMFace)) – input faces to explicitly exclude from inset",
            "use_boundary(bool) – inset face boundaries",
            "use_even_offset(bool) – scale the offset to give more even thickness",
            "use_interpolate(bool) – blend face data across the inset",
            "use_relative_offset(bool) – scale the offset by surrounding geometry",
            "use_edge_rail(bool) – inset the region along existing edges",
            "thickness(float) – thickness",
            "depth(float) – depth",
            "use_outset(bool) – outset rather than inset",
            "faces: output facestypelist of (bmesh.types.BMFace)"
        ]
    },
    {
        "function_id": "bmesh.ops.offset_edgeloops",
        "signature": "bmesh.ops.offset_edgeloops(bm,edges=[],use_cap_endpoint=False)#",
        "description": "Edge-loop Offset.",
        "parameters": [
            "bm",
            "edges=[]",
            "use_cap_endpoint=False"
        ],
        "parameter_descriptions": [
            "bm(bmesh.types.BMesh) – The bmesh to operate on.",
            "edges(list of (bmesh.types.BMEdge)) – input edges",
            "use_cap_endpoint(bool) – extend loop around end-points",
            "edges: output edgestypelist of (bmesh.types.BMEdge)"
        ]
    },
    {
        "function_id": "bmesh.ops.wireframe",
        "signature": "bmesh.ops.wireframe(bm,faces=[],thickness=0,offset=0,use_replace=False,use_boundary=False,use_even_offset=False,use_crease=False,crease_weight=0,use_relative_offset=False,material_offset=0)#",
        "description": "Wire Frame.",
        "parameters": [
            "bm",
            "faces=[]",
            "thickness=0",
            "offset=0",
            "use_replace=False",
            "use_boundary=False",
            "use_even_offset=False",
            "use_crease=False",
            "crease_weight=0",
            "use_relative_offset=False",
            "material_offset=0"
        ],
        "parameter_descriptions": [
            "bm(bmesh.types.BMesh) – The bmesh to operate on.",
            "faces(list of (bmesh.types.BMFace)) – input faces",
            "thickness(float) – thickness",
            "offset(float) – offset the thickness from the center",
            "use_replace(bool) – remove original geometry",
            "use_boundary(bool) – inset face boundaries",
            "use_even_offset(bool) – scale the offset to give more even thickness",
            "use_crease(bool) – crease hub edges for improved subdivision surface",
            "crease_weight(float) – the mean crease weight for resulting edges",
            "use_relative_offset(bool) – scale the offset by surrounding geometry",
            "material_offset(int) – offset material index of generated faces",
            "faces: output facestypelist of (bmesh.types.BMFace)"
        ]
    },
    {
        "function_id": "bmesh.ops.poke",
        "signature": "bmesh.ops.poke(bm,faces=[],offset=0,center_mode='MEAN_WEIGHTED',use_relative_offset=False)#",
        "description": "Pokes a face.",
        "parameters": [
            "bm",
            "faces=[]",
            "offset=0",
            "center_mode='MEAN_WEIGHTED'",
            "use_relative_offset=False"
        ],
        "parameter_descriptions": [
            "bm(bmesh.types.BMesh) – The bmesh to operate on.",
            "faces(list of (bmesh.types.BMFace)) – input faces",
            "offset(float) – center vertex offset along normal",
            "center_mode(enum in['MEAN_WEIGHTED','MEAN','BOUNDS'],default 'MEAN_WEIGHTED') – calculation mode for center vertex",
            "use_relative_offset(bool) – apply offset",
            "verts: output vertstypelist of (bmesh.types.BMVert)",
            "faces: output facestypelist of (bmesh.types.BMFace)"
        ]
    },
    {
        "function_id": "bmesh.ops.convex_hull",
        "signature": "bmesh.ops.convex_hull(bm,input=[],use_existing_faces=False)#",
        "description": "Convex Hull",
        "parameters": [
            "bm",
            "input=[]",
            "use_existing_faces=False"
        ],
        "parameter_descriptions": [
            "bm(bmesh.types.BMesh) – The bmesh to operate on.",
            "input(list of (bmesh.types.BMVert,bmesh.types.BMEdge,bmesh.types.BMFace)) – input geometry",
            "use_existing_faces(bool) – skip hull triangles that are covered by a pre-existing face",
            "geom:typelist of (bmesh.types.BMVert,bmesh.types.BMEdge,bmesh.types.BMFace)",
            "geom_interior:typelist of (bmesh.types.BMVert,bmesh.types.BMEdge,bmesh.types.BMFace)",
            "geom_unused:typelist of (bmesh.types.BMVert,bmesh.types.BMEdge,bmesh.types.BMFace)",
            "geom_holes:typelist of (bmesh.types.BMVert,bmesh.types.BMEdge,bmesh.types.BMFace)"
        ]
    },
    {
        "function_id": "bmesh.ops.symmetrize",
        "signature": "bmesh.ops.symmetrize(bm,input=[],direction='-X',dist=0,use_shapekey=False)#",
        "description": "Symmetrize.",
        "parameters": [
            "bm",
            "input=[]",
            "direction='-X'",
            "dist=0",
            "use_shapekey=False"
        ],
        "parameter_descriptions": [
            "bm(bmesh.types.BMesh) – The bmesh to operate on.",
            "input(list of (bmesh.types.BMVert,bmesh.types.BMEdge,bmesh.types.BMFace)) – input geometry",
            "direction(enum in['-X','-Y','-Z','X','Y','Z'],default '-X') – axis to use",
            "dist(float) – minimum distance",
            "use_shapekey(bool) – Transform shape keys too.",
            "geom:typelist of (bmesh.types.BMVert,bmesh.types.BMEdge,bmesh.types.BMFace)"
        ]
    },
    {
        "function_id": "bpy_extras.io_utils.orientation_helper",
        "signature": "bpy_extras.io_utils.orientation_helper(axis_forward='Y',axis_up='Z')#",
        "description": "A decorator for import/export classes, generating properties needed by the axis conversion system and IO helpers,\nwith specified default values (axes).",
        "parameters": [
            "axis_forward='Y'",
            "axis_up='Z'"
        ]
    },
    {
        "function_id": "bpy_extras.io_utils.axis_conversion",
        "signature": "bpy_extras.io_utils.axis_conversion(from_forward='Y',from_up='Z',to_forward='Y',to_up='Z')#",
        "description": "Each argument us an axis in [‘X’, ‘Y’, ‘Z’, ‘-X’, ‘-Y’, ‘-Z’]\nwhere the first 2 are a source and the second 2 are the target.",
        "parameters": [
            "from_forward='Y'",
            "from_up='Z'",
            "to_forward='Y'",
            "to_up='Z'"
        ]
    },
    {
        "function_id": "bpy_extras.io_utils.axis_conversion_ensure",
        "signature": "bpy_extras.io_utils.axis_conversion_ensure(operator,forward_attr,up_attr)#",
        "description": "Function to ensure an operator has valid axis conversion settings, intended\nto be used frombpy.types.Operator.check.",
        "parameters": [
            "operator",
            "forward_attr",
            "up_attr"
        ],
        "parameter_descriptions": [
            "operator(bpy.types.Operator) – the operator to access axis attributes from.",
            "forward_attr(string) – attribute storing the forward axis",
            "up_attr(string) – attribute storing the up axis"
        ]
    },
    {
        "function_id": "bpy_extras.io_utils.create_derived_objects",
        "signature": "bpy_extras.io_utils.create_derived_objects(depsgraph,objects)#",
        "description": "This function takes a sequence of objects, returning their instances.",
        "parameters": [
            "depsgraph",
            "objects"
        ],
        "parameter_descriptions": [
            "depsgraph(bpy.types.Depsgraph) – The evaluated depsgraph.",
            "objects(sequence ofbpy.types.Object) – A sequencer of objects."
        ]
    },
    {
        "function_id": "bpy_extras.io_utils.unpack_list",
        "signature": "bpy_extras.io_utils.unpack_list(list_of_tuples)#",
        "parameters": [
            "list_of_tuples"
        ]
    },
    {
        "function_id": "bpy_extras.io_utils.unpack_face_list",
        "signature": "bpy_extras.io_utils.unpack_face_list(list_of_tuples)#",
        "parameters": [
            "list_of_tuples"
        ]
    },
    {
        "function_id": "bpy_extras.io_utils.path_reference",
        "signature": "bpy_extras.io_utils.path_reference(filepath,base_src,base_dst,mode='AUTO',copy_subdir='',copy_set=None,library=None)#",
        "description": "Return a filepath relative to a destination directory, for use with\nexporters.",
        "parameters": [
            "filepath",
            "base_src",
            "base_dst",
            "mode='AUTO'",
            "copy_subdir=''",
            "copy_set=None",
            "library=None"
        ],
        "parameter_descriptions": [
            "filepath(string) – the file path to return,\nsupporting blenders relative ‘//’ prefix.",
            "base_src(string) – the directory thefilepathis relative too\n(normally the blend file).",
            "base_dst(string) – the directory thefilepathwill be referenced from\n(normally the export path).",
            "mode(string) – the method used get the path in\n[‘AUTO’, ‘ABSOLUTE’, ‘RELATIVE’, ‘MATCH’, ‘STRIP’, ‘COPY’]",
            "copy_subdir(string) – the subdirectory ofbase_dstto use when mode=’COPY’.",
            "copy_set(set) – collect from/to pairs when mode=’COPY’,\npass topath_reference_copywhen exporting is done.",
            "library(bpy.types.Libraryor None) – The library this path is relative to."
        ]
    },
    {
        "function_id": "bpy_extras.io_utils.path_reference_copy",
        "signature": "bpy_extras.io_utils.path_reference_copy(copy_set,report=<built-infunctionprint>)#",
        "description": "Execute copying files of path_reference",
        "parameters": [
            "copy_set",
            "report=<built-infunctionprint>"
        ],
        "parameter_descriptions": [
            "copy_set(set) – set of (from, to) pairs to copy.",
            "report(function) – function used for reporting warnings, takes a string argument."
        ]
    },
    {
        "function_id": "bpy_extras.io_utils.unique_name",
        "signature": "bpy_extras.io_utils.unique_name(key,name,name_dict,name_max=-1,clean_func=None,sep='.')#",
        "description": "Helper function for storing unique names which may have special characters\nstripped and restricted to a maximum length.",
        "parameters": [
            "key",
            "name",
            "name_dict",
            "name_max=-1",
            "clean_func=None",
            "sep='.'"
        ],
        "parameter_descriptions": [
            "key(any hashable object associated with thename.) – unique item this name belongs to, name_dict[key] will be reused\nwhen available.\nThis can be the object, mesh, material, etc instance itself.",
            "name(string) – The name used to create a unique value inname_dict.",
            "name_dict(dict) – This is used to cache namespace to ensure no collisions\noccur, this should be an empty dict initially and only modified by this\nfunction.",
            "clean_func(function) – Function to call onnamebefore creating a unique value.",
            "sep(string) – Separator to use when between the name and a number when a\nduplicate name is found."
        ]
    },
    {
        "function_id": "bpy.ops.mask.add_feather_vertex",
        "signature": "bpy.ops.mask.add_feather_vertex(location=(0.0,0.0))#",
        "description": "Add vertex to feather",
        "parameters": [
            "location=(0.0,0.0)"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.mask.add_feather_vertex_slide",
        "signature": "bpy.ops.mask.add_feather_vertex_slide(MASK_OT_add_feather_vertex=None,MASK_OT_slide_point=None)#",
        "description": "Add new vertex to feather and slide it",
        "parameters": [
            "MASK_OT_add_feather_vertex=None",
            "MASK_OT_slide_point=None"
        ],
        "parameter_descriptions": [
            "MASK_OT_add_feather_vertex(MASK_OT_add_feather_vertex, (optional)) – Add Feather Vertex, Add vertex to feather",
            "MASK_OT_slide_point(MASK_OT_slide_point, (optional)) – Slide Point, Slide control points"
        ]
    },
    {
        "function_id": "bpy.ops.mask.add_vertex",
        "signature": "bpy.ops.mask.add_vertex(location=(0.0,0.0))#",
        "description": "Add vertex to active spline",
        "parameters": [
            "location=(0.0,0.0)"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.mask.add_vertex_slide",
        "signature": "bpy.ops.mask.add_vertex_slide(MASK_OT_add_vertex=None,MASK_OT_slide_point=None)#",
        "description": "Add new vertex and slide it",
        "parameters": [
            "MASK_OT_add_vertex=None",
            "MASK_OT_slide_point=None"
        ],
        "parameter_descriptions": [
            "MASK_OT_add_vertex(MASK_OT_add_vertex, (optional)) – Add Vertex, Add vertex to active spline",
            "MASK_OT_slide_point(MASK_OT_slide_point, (optional)) – Slide Point, Slide control points"
        ]
    },
    {
        "function_id": "bpy.ops.mask.copy_splines",
        "signature": "bpy.ops.mask.copy_splines()#",
        "description": "Copy the selected splines to the internal clipboard",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.mask.cyclic_toggle",
        "signature": "bpy.ops.mask.cyclic_toggle()#",
        "description": "Toggle cyclic for selected splines",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.mask.delete",
        "signature": "bpy.ops.mask.delete(confirm=True)#",
        "description": "Delete selected control points or splines",
        "parameters": [
            "confirm=True"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.mask.duplicate",
        "signature": "bpy.ops.mask.duplicate()#",
        "description": "Duplicate selected control points and segments between them",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.mask.duplicate_move",
        "signature": "bpy.ops.mask.duplicate_move(MASK_OT_duplicate=None,TRANSFORM_OT_translate=None)#",
        "description": "Duplicate mask and move",
        "parameters": [
            "MASK_OT_duplicate=None",
            "TRANSFORM_OT_translate=None"
        ],
        "parameter_descriptions": [
            "MASK_OT_duplicate(MASK_OT_duplicate, (optional)) – Duplicate Mask, Duplicate selected control points and segments between them",
            "TRANSFORM_OT_translate(TRANSFORM_OT_translate, (optional)) – Move, Move selected items"
        ]
    },
    {
        "function_id": "bpy.ops.mask.feather_weight_clear",
        "signature": "bpy.ops.mask.feather_weight_clear()#",
        "description": "Reset the feather weight to zero",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.mask.handle_type_set",
        "signature": "bpy.ops.mask.handle_type_set(type='AUTO')#",
        "description": "Set type of handles for selected control points",
        "parameters": [
            "type='AUTO'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.mask.hide_view_clear",
        "signature": "bpy.ops.mask.hide_view_clear(select=True)#",
        "description": "Reveal temporarily hidden mask layers",
        "parameters": [
            "select=True"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.mask.hide_view_set",
        "signature": "bpy.ops.mask.hide_view_set(unselected=False)#",
        "description": "Temporarily hide mask layers",
        "parameters": [
            "unselected=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.mask.layer_move",
        "signature": "bpy.ops.mask.layer_move(direction='UP')#",
        "description": "Move the active layer up/down in the list",
        "parameters": [
            "direction='UP'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.mask.layer_new",
        "signature": "bpy.ops.mask.layer_new(name='')#",
        "description": "Add new mask layer for masking",
        "parameters": [
            "name=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.mask.layer_remove",
        "signature": "bpy.ops.mask.layer_remove()#",
        "description": "Remove mask layer",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.mask.new",
        "signature": "bpy.ops.mask.new(name='')#",
        "description": "Create new mask",
        "parameters": [
            "name=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.mask.normals_make_consistent",
        "signature": "bpy.ops.mask.normals_make_consistent()#",
        "description": "Recalculate the direction of selected handles",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.mask.parent_clear",
        "signature": "bpy.ops.mask.parent_clear()#",
        "description": "Clear the mask’s parenting",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.mask.parent_set",
        "signature": "bpy.ops.mask.parent_set()#",
        "description": "Set the mask’s parenting",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.mask.paste_splines",
        "signature": "bpy.ops.mask.paste_splines()#",
        "description": "Paste splines from the internal clipboard",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.mask.primitive_circle_add",
        "signature": "bpy.ops.mask.primitive_circle_add(size=100.0,location=(0.0,0.0))#",
        "description": "Add new circle-shaped spline",
        "parameters": [
            "size=100.0",
            "location=(0.0,0.0)"
        ],
        "parameter_descriptions": [
            "size(float in[-inf,inf],(optional)) – Size, Size of new circle",
            "location(mathutils.Vectorof 2 items in [-inf, inf], (optional)) – Location, Location of new circle"
        ]
    },
    {
        "function_id": "bpy.ops.mask.primitive_square_add",
        "signature": "bpy.ops.mask.primitive_square_add(size=100.0,location=(0.0,0.0))#",
        "description": "Add new square-shaped spline",
        "parameters": [
            "size=100.0",
            "location=(0.0,0.0)"
        ],
        "parameter_descriptions": [
            "size(float in[-inf,inf],(optional)) – Size, Size of new circle",
            "location(mathutils.Vectorof 2 items in [-inf, inf], (optional)) – Location, Location of new circle"
        ]
    },
    {
        "function_id": "bpy.ops.mask.select",
        "signature": "bpy.ops.mask.select(extend=False,deselect=False,toggle=False,deselect_all=False,select_passthrough=False,location=(0.0,0.0))#",
        "description": "Select spline points",
        "parameters": [
            "extend=False",
            "deselect=False",
            "toggle=False",
            "deselect_all=False",
            "select_passthrough=False",
            "location=(0.0,0.0)"
        ],
        "parameter_descriptions": [
            "extend(boolean,(optional)) – Extend, Extend selection instead of deselecting everything first",
            "deselect(boolean,(optional)) – Deselect, Remove from selection",
            "toggle(boolean,(optional)) – Toggle Selection, Toggle the selection",
            "deselect_all(boolean,(optional)) – Deselect On Nothing, Deselect all when nothing under the cursor",
            "select_passthrough(boolean,(optional)) – Only Select Unselected, Ignore the select action when the element is already selected",
            "location(mathutils.Vectorof 2 items in [-inf, inf], (optional)) – Location, Location of vertex in normalized space"
        ]
    },
    {
        "function_id": "bpy.ops.mask.select_all",
        "signature": "bpy.ops.mask.select_all(action='TOGGLE')#",
        "description": "Change selection of all curve points",
        "parameters": [
            "action='TOGGLE'"
        ],
        "parameter_descriptions": [
            "TOGGLEToggle – Toggle selection for all elements.",
            "SELECTSelect – Select all elements.",
            "DESELECTDeselect – Deselect all elements.",
            "INVERTInvert – Invert selection of all elements."
        ]
    },
    {
        "function_id": "bpy.ops.mask.select_box",
        "signature": "bpy.ops.mask.select_box(xmin=0,xmax=0,ymin=0,ymax=0,wait_for_input=True,mode='SET')#",
        "description": "Select curve points using box selection",
        "parameters": [
            "xmin=0",
            "xmax=0",
            "ymin=0",
            "ymax=0",
            "wait_for_input=True",
            "mode='SET'"
        ],
        "parameter_descriptions": [
            "xmin(int in[-inf,inf],(optional)) – X Min",
            "xmax(int in[-inf,inf],(optional)) – X Max",
            "ymin(int in[-inf,inf],(optional)) – Y Min",
            "ymax(int in[-inf,inf],(optional)) – Y Max",
            "wait_for_input(boolean,(optional)) – Wait for Input",
            "mode(enum in['SET','ADD','SUB'],(optional)) –ModeSETSet – Set a new selection.ADDExtend – Extend existing selection.SUBSubtract – Subtract existing selection.",
            "SETSet – Set a new selection.",
            "ADDExtend – Extend existing selection.",
            "SUBSubtract – Subtract existing selection."
        ]
    },
    {
        "function_id": "bpy.ops.mask.select_circle",
        "signature": "bpy.ops.mask.select_circle(x=0,y=0,radius=25,wait_for_input=True,mode='SET')#",
        "description": "Select curve points using circle selection",
        "parameters": [
            "x=0",
            "y=0",
            "radius=25",
            "wait_for_input=True",
            "mode='SET'"
        ],
        "parameter_descriptions": [
            "x(int in[-inf,inf],(optional)) – X",
            "y(int in[-inf,inf],(optional)) – Y",
            "radius(int in[1,inf],(optional)) – Radius",
            "wait_for_input(boolean,(optional)) – Wait for Input",
            "mode(enum in['SET','ADD','SUB'],(optional)) –ModeSETSet – Set a new selection.ADDExtend – Extend existing selection.SUBSubtract – Subtract existing selection.",
            "SETSet – Set a new selection.",
            "ADDExtend – Extend existing selection.",
            "SUBSubtract – Subtract existing selection."
        ]
    },
    {
        "function_id": "bpy.ops.mask.select_lasso",
        "signature": "bpy.ops.mask.select_lasso(path=None,mode='SET')#",
        "description": "Select curve points using lasso selection",
        "parameters": [
            "path=None",
            "mode='SET'"
        ],
        "parameter_descriptions": [
            "path(bpy_prop_collectionofOperatorMousePath, (optional)) – Path",
            "mode(enum in['SET','ADD','SUB'],(optional)) –ModeSETSet – Set a new selection.ADDExtend – Extend existing selection.SUBSubtract – Subtract existing selection.",
            "SETSet – Set a new selection.",
            "ADDExtend – Extend existing selection.",
            "SUBSubtract – Subtract existing selection."
        ]
    },
    {
        "function_id": "bpy.ops.mask.select_less",
        "signature": "bpy.ops.mask.select_less()#",
        "description": "Deselect spline points at the boundary of each selection region",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.mask.select_linked",
        "signature": "bpy.ops.mask.select_linked()#",
        "description": "Select all curve points linked to already selected ones",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.mask.select_linked_pick",
        "signature": "bpy.ops.mask.select_linked_pick(deselect=False)#",
        "description": "(De)select all points linked to the curve under the mouse cursor",
        "parameters": [
            "deselect=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.mask.select_more",
        "signature": "bpy.ops.mask.select_more()#",
        "description": "Select more spline points connected to initial selection",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.mask.shape_key_clear",
        "signature": "bpy.ops.mask.shape_key_clear()#",
        "description": "Remove mask shape keyframe for active mask layer at the current frame",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.mask.shape_key_feather_reset",
        "signature": "bpy.ops.mask.shape_key_feather_reset()#",
        "description": "Reset feather weights on all selected points animation values",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.mask.shape_key_insert",
        "signature": "bpy.ops.mask.shape_key_insert()#",
        "description": "Insert mask shape keyframe for active mask layer at the current frame",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.mask.shape_key_rekey",
        "signature": "bpy.ops.mask.shape_key_rekey(location=True,feather=True)#",
        "description": "Recalculate animation data on selected points for frames selected in the dopesheet",
        "parameters": [
            "location=True",
            "feather=True"
        ],
        "parameter_descriptions": [
            "location(boolean,(optional)) – Location",
            "feather(boolean,(optional)) – Feather"
        ]
    },
    {
        "function_id": "bpy.ops.mask.slide_point",
        "signature": "bpy.ops.mask.slide_point(slide_feather=False,is_new_point=False)#",
        "description": "Slide control points",
        "parameters": [
            "slide_feather=False",
            "is_new_point=False"
        ],
        "parameter_descriptions": [
            "slide_feather(boolean,(optional)) – Slide Feather, First try to slide feather instead of vertex",
            "is_new_point(boolean,(optional)) – Slide New Point, Newly created vertex is being slid"
        ]
    },
    {
        "function_id": "bpy.ops.mask.slide_spline_curvature",
        "signature": "bpy.ops.mask.slide_spline_curvature()#",
        "description": "Slide a point on the spline to define its curvature",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.mask.switch_direction",
        "signature": "bpy.ops.mask.switch_direction()#",
        "description": "Switch direction of selected splines",
        "parameters": []
    },
    {
        "function_id": "bpy.props.BoolProperty",
        "signature": "bpy.props.BoolProperty(name='',description='',translation_context='*',default=False,options={'ANIMATABLE'},override=set(),tags=set(),subtype='NONE',update=None,get=None,set=None)#",
        "description": "Returns a new boolean property definition.",
        "parameters": [
            "name=''",
            "description=''",
            "translation_context='*'",
            "default=False",
            "options={'ANIMATABLE'}",
            "override=set()",
            "tags=set()",
            "subtype='NONE'",
            "update=None",
            "get=None",
            "set=None"
        ],
        "parameter_descriptions": [
            "name(string) – Name used in the user interface.",
            "description(string) – Text used for the tooltip and api documentation.",
            "translation_context(string) – Text used as context to disambiguate translations.",
            "options(set) – Enumerator inProperty Flag Items.",
            "override(set) – Enumerator inProperty Override Flag Items.",
            "tags(set) – Enumerator of tags that are defined by parent class.",
            "subtype(string) – Enumerator inProperty Subtype Number Items.",
            "update(function) – Function to be called when this value is modified,\nThis function must take 2 values (self, context) and return None.Warningthere are no safety checks to avoid infinite recursion.",
            "get(function) – Function to be called when this value is ‘read’,\nThis function must take 1 value (self) and return the value of the property.",
            "set(function) – Function to be called when this value is ‘written’,\nThis function must take 2 values (self, value) and return None."
        ]
    },
    {
        "function_id": "bpy.props.BoolVectorProperty",
        "signature": "bpy.props.BoolVectorProperty(name='',description='',translation_context='*',default=(False,False,False),options={'ANIMATABLE'},override=set(),tags=set(),subtype='NONE',size=3,update=None,get=None,set=None)#",
        "description": "Returns a new vector boolean property definition.",
        "parameters": [
            "name=''",
            "description=''",
            "translation_context='*'",
            "default=(False,False,False)",
            "options={'ANIMATABLE'}",
            "override=set()",
            "tags=set()",
            "subtype='NONE'",
            "size=3",
            "update=None",
            "get=None",
            "set=None"
        ],
        "parameter_descriptions": [
            "name(string) – Name used in the user interface.",
            "description(string) – Text used for the tooltip and api documentation.",
            "translation_context(string) – Text used as context to disambiguate translations.",
            "default(sequence) – sequence of booleans the length ofsize.",
            "options(set) – Enumerator inProperty Flag Items.",
            "override(set) – Enumerator inProperty Override Flag Items.",
            "tags(set) – Enumerator of tags that are defined by parent class.",
            "subtype(string) – Enumerator inProperty Subtype Number Array Items.",
            "size(intorint sequence) – Vector dimensions in [1, 32]. An int sequence can be used to define multi-dimension arrays.",
            "update(function) – Function to be called when this value is modified,\nThis function must take 2 values (self, context) and return None.Warningthere are no safety checks to avoid infinite recursion.",
            "get(function) – Function to be called when this value is ‘read’,\nThis function must take 1 value (self) and return the value of the property.",
            "set(function) – Function to be called when this value is ‘written’,\nThis function must take 2 values (self, value) and return None."
        ]
    },
    {
        "function_id": "bpy.props.CollectionProperty",
        "signature": "bpy.props.CollectionProperty(type=None,name='',description='',translation_context='*',options={'ANIMATABLE'},override=set(),tags=set())#",
        "description": "Returns a new collection property definition.",
        "parameters": [
            "type=None",
            "name=''",
            "description=''",
            "translation_context='*'",
            "options={'ANIMATABLE'}",
            "override=set()",
            "tags=set()"
        ],
        "parameter_descriptions": [
            "type(class) – A subclass ofbpy.types.PropertyGroup.",
            "name(string) – Name used in the user interface.",
            "description(string) – Text used for the tooltip and api documentation.",
            "translation_context(string) – Text used as context to disambiguate translations.",
            "options(set) – Enumerator inProperty Flag Items.",
            "override(set) – Enumerator inProperty Override Flag Collection Items.",
            "tags(set) – Enumerator of tags that are defined by parent class."
        ]
    },
    {
        "function_id": "bpy.props.EnumProperty",
        "signature": "bpy.props.EnumProperty(items,name='',description='',translation_context='*',default=None,options={'ANIMATABLE'},override=set(),tags=set(),update=None,get=None,set=None)#",
        "description": "Returns a new enumerator property definition.",
        "parameters": [
            "items",
            "name=''",
            "description=''",
            "translation_context='*'",
            "default=None",
            "options={'ANIMATABLE'}",
            "override=set()",
            "tags=set()",
            "update=None",
            "get=None",
            "set=None"
        ],
        "parameter_descriptions": [
            "items(sequenceofstring tuplesora function) –sequence of enum items formatted:[(identifier,name,description,icon,number),...].The first three elements of the tuples are mandatory.identifier:The identifier is used for Python access.name:Name for the interface.description:Used for documentation and tooltips.icon:An icon string identifier or integer icon value\n(e.g. returned bybpy.types.UILayout.icon)number:Unique value used as the identifier for this item (stored in file data).\nUse when the identifier may need to change. If theENUM_FLAGoption is used,\nthe values are bit-masks and should be powers of two.When an item only contains 4 items they define(identifier,name,description,number).Separators may be added using None instead of a tuple.\nFor dynamic values a callback can be passed which returns a list in\nthe same format as the static list.\nThis function must take 2 arguments(self,context),context may be None.WarningThere is a known bug with using a callback,\nPython must keep a reference to the strings returned by the callback or Blender\nwill misbehave or even crash.",
            "name(string) – Name used in the user interface.",
            "description(string) – Text used for the tooltip and api documentation.",
            "translation_context(string) – Text used as context to disambiguate translations.",
            "default(string,integerorset) – The default value for this enum, a string from the identifiers used initems, or integer matching an item number.\nIf theENUM_FLAGoption is used this must be a set of such string identifiers instead.\nWARNING: Strings cannot be specified for dynamic enums\n(i.e. if a callback function is given asitemsparameter).",
            "options(set) – Enumerator inProperty Flag Enum Items.",
            "override(set) – Enumerator inProperty Override Flag Items.",
            "tags(set) – Enumerator of tags that are defined by parent class.",
            "update(function) – Function to be called when this value is modified,\nThis function must take 2 values (self, context) and return None.Warningthere are no safety checks to avoid infinite recursion.",
            "get(function) – Function to be called when this value is ‘read’,\nThis function must take 1 value (self) and return the value of the property.",
            "set(function) – Function to be called when this value is ‘written’,\nThis function must take 2 values (self, value) and return None."
        ]
    },
    {
        "function_id": "bpy.props.FloatProperty",
        "signature": "bpy.props.FloatProperty(name='',description='',translation_context='*',default=0.0,min=-3.402823e+38,max=3.402823e+38,soft_min=-3.402823e+38,soft_max=3.402823e+38,step=3,precision=2,options={'ANIMATABLE'},override=set(),tags=set(),subtype='NONE',unit='NONE',update=None,get=None,set=None)#",
        "description": "Returns a new float (single precision) property definition.",
        "parameters": [
            "name=''",
            "description=''",
            "translation_context='*'",
            "default=0.0",
            "min=-3.402823e+38",
            "max=3.402823e+38",
            "soft_min=-3.402823e+38",
            "soft_max=3.402823e+38",
            "step=3",
            "precision=2",
            "options={'ANIMATABLE'}",
            "override=set()",
            "tags=set()",
            "subtype='NONE'",
            "unit='NONE'",
            "update=None",
            "get=None",
            "set=None"
        ],
        "parameter_descriptions": [
            "name(string) – Name used in the user interface.",
            "description(string) – Text used for the tooltip and api documentation.",
            "translation_context(string) – Text used as context to disambiguate translations.",
            "min(float) – Hard minimum, trying to assign a value below will silently assign this minimum instead.",
            "max(float) – Hard maximum, trying to assign a value above will silently assign this maximum instead.",
            "soft_min(float) – Soft minimum (>=min), user won’t be able to drag the widget below this value in the UI.",
            "soft_max(float) – Soft maximum (<=max), user won’t be able to drag the widget above this value in the UI.",
            "step(int) – Step of increment/decrement in UI, in [1, 100], defaults to 3 (WARNING: actual value is /100).",
            "precision(int) – Maximum number of decimal digits to display, in [0, 6]. Fraction is automatically hidden for exact integer values of fields with unit ‘NONE’ or ‘TIME’ (frame count) and step divisible by 100.",
            "options(set) – Enumerator inProperty Flag Items.",
            "override(set) – Enumerator inProperty Override Flag Items.",
            "tags(set) – Enumerator of tags that are defined by parent class.",
            "subtype(string) – Enumerator inProperty Subtype Number Items.",
            "unit(string) – Enumerator inProperty Unit Items.",
            "update(function) – Function to be called when this value is modified,\nThis function must take 2 values (self, context) and return None.Warningthere are no safety checks to avoid infinite recursion.",
            "get(function) – Function to be called when this value is ‘read’,\nThis function must take 1 value (self) and return the value of the property.",
            "set(function) – Function to be called when this value is ‘written’,\nThis function must take 2 values (self, value) and return None."
        ]
    },
    {
        "function_id": "bpy.props.FloatVectorProperty",
        "signature": "bpy.props.FloatVectorProperty(name='',description='',translation_context='*',default=(0.0,0.0,0.0),min=sys.float_info.min,max=sys.float_info.max,soft_min=sys.float_info.min,soft_max=sys.float_info.max,step=3,precision=2,options={'ANIMATABLE'},override=set(),tags=set(),subtype='NONE',unit='NONE',size=3,update=None,get=None,set=None)#",
        "description": "Returns a new vector float property definition.",
        "parameters": [
            "name=''",
            "description=''",
            "translation_context='*'",
            "default=(0.0,0.0,0.0)",
            "min=sys.float_info.min",
            "max=sys.float_info.max",
            "soft_min=sys.float_info.min",
            "soft_max=sys.float_info.max",
            "step=3",
            "precision=2",
            "options={'ANIMATABLE'}",
            "override=set()",
            "tags=set()",
            "subtype='NONE'",
            "unit='NONE'",
            "size=3",
            "update=None",
            "get=None",
            "set=None"
        ],
        "parameter_descriptions": [
            "name(string) – Name used in the user interface.",
            "description(string) – Text used for the tooltip and api documentation.",
            "translation_context(string) – Text used as context to disambiguate translations.",
            "default(sequence) – sequence of floats the length ofsize.",
            "min(float) – Hard minimum, trying to assign a value below will silently assign this minimum instead.",
            "max(float) – Hard maximum, trying to assign a value above will silently assign this maximum instead.",
            "soft_min(float) – Soft minimum (>=min), user won’t be able to drag the widget below this value in the UI.",
            "soft_max(float) – Soft maximum (<=max), user won’t be able to drag the widget above this value in the UI.",
            "options(set) – Enumerator inProperty Flag Items.",
            "override(set) – Enumerator inProperty Override Flag Items.",
            "tags(set) – Enumerator of tags that are defined by parent class.",
            "step(int) – Step of increment/decrement in UI, in [1, 100], defaults to 3 (WARNING: actual value is /100).",
            "precision(int) – Maximum number of decimal digits to display, in [0, 6]. Fraction is automatically hidden for exact integer values of fields with unit ‘NONE’ or ‘TIME’ (frame count) and step divisible by 100.",
            "subtype(string) – Enumerator inProperty Subtype Number Array Items.",
            "unit(string) – Enumerator inProperty Unit Items.",
            "size(intorint sequence) – Vector dimensions in [1, 32]. An int sequence can be used to define multi-dimension arrays.",
            "update(function) – Function to be called when this value is modified,\nThis function must take 2 values (self, context) and return None.Warningthere are no safety checks to avoid infinite recursion.",
            "get(function) – Function to be called when this value is ‘read’,\nThis function must take 1 value (self) and return the value of the property.",
            "set(function) – Function to be called when this value is ‘written’,\nThis function must take 2 values (self, value) and return None."
        ]
    },
    {
        "function_id": "bpy.props.IntProperty",
        "signature": "bpy.props.IntProperty(name='',description='',translation_context='*',default=0,min=-2**31,max=2**31-1,soft_min=-2**31,soft_max=2**31-1,step=1,options={'ANIMATABLE'},override=set(),tags=set(),subtype='NONE',update=None,get=None,set=None)#",
        "description": "Returns a new int property definition.",
        "parameters": [
            "name=''",
            "description=''",
            "translation_context='*'",
            "default=0",
            "min=-2**31",
            "max=2**31-1",
            "soft_min=-2**31",
            "soft_max=2**31-1",
            "step=1",
            "options={'ANIMATABLE'}",
            "override=set()",
            "tags=set()",
            "subtype='NONE'",
            "update=None",
            "get=None",
            "set=None"
        ],
        "parameter_descriptions": [
            "name(string) – Name used in the user interface.",
            "description(string) – Text used for the tooltip and api documentation.",
            "translation_context(string) – Text used as context to disambiguate translations.",
            "min(int) – Hard minimum, trying to assign a value below will silently assign this minimum instead.",
            "max(int) – Hard maximum, trying to assign a value above will silently assign this maximum instead.",
            "soft_max(int) – Soft maximum (<=max), user won’t be able to drag the widget above this value in the UI.",
            "soft_min(int) – Soft minimum (>=min), user won’t be able to drag the widget below this value in the UI.",
            "step(int) – Step of increment/decrement in UI, in [1, 100], defaults to 1 (WARNING: unused currently!).",
            "options(set) – Enumerator inProperty Flag Items.",
            "override(set) – Enumerator inProperty Override Flag Items.",
            "tags(set) – Enumerator of tags that are defined by parent class.",
            "subtype(string) – Enumerator inProperty Subtype Number Items.",
            "update(function) – Function to be called when this value is modified,\nThis function must take 2 values (self, context) and return None.Warningthere are no safety checks to avoid infinite recursion.",
            "get(function) – Function to be called when this value is ‘read’,\nThis function must take 1 value (self) and return the value of the property.",
            "set(function) – Function to be called when this value is ‘written’,\nThis function must take 2 values (self, value) and return None."
        ]
    },
    {
        "function_id": "bpy.props.IntVectorProperty",
        "signature": "bpy.props.IntVectorProperty(name='',description='',translation_context='*',default=(0,0,0),min=-2**31,max=2**31-1,soft_min=-2**31,soft_max=2**31-1,step=1,options={'ANIMATABLE'},override=set(),tags=set(),subtype='NONE',size=3,update=None,get=None,set=None)#",
        "description": "Returns a new vector int property definition.",
        "parameters": [
            "name=''",
            "description=''",
            "translation_context='*'",
            "default=(0,0,0)",
            "min=-2**31",
            "max=2**31-1",
            "soft_min=-2**31",
            "soft_max=2**31-1",
            "step=1",
            "options={'ANIMATABLE'}",
            "override=set()",
            "tags=set()",
            "subtype='NONE'",
            "size=3",
            "update=None",
            "get=None",
            "set=None"
        ],
        "parameter_descriptions": [
            "name(string) – Name used in the user interface.",
            "description(string) – Text used for the tooltip and api documentation.",
            "translation_context(string) – Text used as context to disambiguate translations.",
            "default(sequence) – sequence of ints the length ofsize.",
            "min(int) – Hard minimum, trying to assign a value below will silently assign this minimum instead.",
            "max(int) – Hard maximum, trying to assign a value above will silently assign this maximum instead.",
            "soft_min(int) – Soft minimum (>=min), user won’t be able to drag the widget below this value in the UI.",
            "soft_max(int) – Soft maximum (<=max), user won’t be able to drag the widget above this value in the UI.",
            "step(int) – Step of increment/decrement in UI, in [1, 100], defaults to 1 (WARNING: unused currently!).",
            "options(set) – Enumerator inProperty Flag Items.",
            "override(set) – Enumerator inProperty Override Flag Items.",
            "tags(set) – Enumerator of tags that are defined by parent class.",
            "subtype(string) – Enumerator inProperty Subtype Number Array Items.",
            "size(intorint sequence) – Vector dimensions in [1, 32]. An int sequence can be used to define multi-dimension arrays.",
            "update(function) – Function to be called when this value is modified,\nThis function must take 2 values (self, context) and return None.Warningthere are no safety checks to avoid infinite recursion.",
            "get(function) – Function to be called when this value is ‘read’,\nThis function must take 1 value (self) and return the value of the property.",
            "set(function) – Function to be called when this value is ‘written’,\nThis function must take 2 values (self, value) and return None."
        ]
    },
    {
        "function_id": "bpy.props.PointerProperty",
        "signature": "bpy.props.PointerProperty(type=None,name='',description='',translation_context='*',options={'ANIMATABLE'},override=set(),tags=set(),poll=None,update=None)#",
        "description": "Returns a new pointer property definition.",
        "parameters": [
            "type=None",
            "name=''",
            "description=''",
            "translation_context='*'",
            "options={'ANIMATABLE'}",
            "override=set()",
            "tags=set()",
            "poll=None",
            "update=None"
        ],
        "parameter_descriptions": [
            "type(class) – A subclass ofbpy.types.PropertyGrouporbpy.types.ID.",
            "name(string) – Name used in the user interface.",
            "description(string) – Text used for the tooltip and api documentation.",
            "translation_context(string) – Text used as context to disambiguate translations.",
            "options(set) – Enumerator inProperty Flag Items.",
            "override(set) – Enumerator inProperty Override Flag Items.",
            "tags(set) – Enumerator of tags that are defined by parent class.",
            "poll(function) – function to be called to determine whether an item is valid for this property.\nThe function must take 2 values (self, object) and return Bool.",
            "update(function) – Function to be called when this value is modified,\nThis function must take 2 values (self, context) and return None.Warningthere are no safety checks to avoid infinite recursion."
        ]
    },
    {
        "function_id": "bpy.props.RemoveProperty",
        "signature": "bpy.props.RemoveProperty(cls,attr)#",
        "description": "Removes a dynamically defined property.",
        "parameters": [
            "cls",
            "attr"
        ],
        "parameter_descriptions": [
            "cls(type) – The class containing the property (must be a positional argument).",
            "attr(string) – Property name (must be passed as a keyword)."
        ]
    },
    {
        "function_id": "bpy.props.StringProperty",
        "signature": "bpy.props.StringProperty(name='',description='',translation_context='*',default='',maxlen=0,options={'ANIMATABLE'},override=set(),tags=set(),subtype='NONE',update=None,get=None,set=None,search=None,search_options={'SUGGESTION'})#",
        "description": "Returns a new string property definition.",
        "parameters": [
            "name=''",
            "description=''",
            "translation_context='*'",
            "default=''",
            "maxlen=0",
            "options={'ANIMATABLE'}",
            "override=set()",
            "tags=set()",
            "subtype='NONE'",
            "update=None",
            "get=None",
            "set=None",
            "search=None",
            "search_options={'SUGGESTION'}"
        ],
        "parameter_descriptions": [
            "name(string) – Name used in the user interface.",
            "description(string) – Text used for the tooltip and api documentation.",
            "translation_context(string) – Text used as context to disambiguate translations.",
            "default(string) – initializer string.",
            "maxlen(int) – maximum length of the string.",
            "options(set) – Enumerator inProperty Flag Items.",
            "override(set) – Enumerator inProperty Override Flag Items.",
            "tags(set) – Enumerator of tags that are defined by parent class.",
            "subtype(string) – Enumerator inProperty Subtype String Items.",
            "update(function) – Function to be called when this value is modified,\nThis function must take 2 values (self, context) and return None.Warningthere are no safety checks to avoid infinite recursion.",
            "get(function) – Function to be called when this value is ‘read’,\nThis function must take 1 value (self) and return the value of the property.",
            "set(function) – Function to be called when this value is ‘written’,\nThis function must take 2 values (self, value) and return None.",
            "search(function) –Function to be called to show candidates for this string (shown in the UI).\nThis function must take 3 values (self, context, edit_text)\nand return a sequence, iterator or generator where each item must be:A single string (representing a candidate to display).A tuple-pair of strings, where the first is a candidate and the second\nis additional information about the candidate.",
            "A single string (representing a candidate to display).",
            "A tuple-pair of strings, where the first is a candidate and the second\nis additional information about the candidate.",
            "search_options(set) –Set of strings in:’SORT’ sorts the resulting items.’SUGGESTION’ lets the user enter values not found in search candidates.WARNINGdisabling this flag causes the search callback to run on redraw,\nso only disable this flag if it’s not likely to cause performance issues.",
            "’SORT’ sorts the resulting items.",
            "’SUGGESTION’ lets the user enter values not found in search candidates.WARNINGdisabling this flag causes the search callback to run on redraw,\nso only disable this flag if it’s not likely to cause performance issues."
        ]
    },
    {
        "function_id": "gpu_extras.presets.draw_circle_2d",
        "signature": "gpu_extras.presets.draw_circle_2d(position,color,radius,*,segments=None)#",
        "description": "Draw a circle.",
        "parameters": [
            "position",
            "color",
            "radius",
            "*",
            "segments=None"
        ],
        "parameter_descriptions": [
            "position(2D Vector) – Position where the circle will be drawn.",
            "color(tuple containing RGBA values) – Color of the circle. To use transparency GL_BLEND has to be enabled.",
            "radius(float) – Radius of the circle.",
            "segments(intorNone) – How many segments will be used to draw the circle.\nHigher values give better results but the drawing will take longer.\nIf None or not specified, an automatic value will be calculated."
        ]
    },
    {
        "function_id": "gpu_extras.presets.draw_texture_2d",
        "signature": "gpu_extras.presets.draw_texture_2d(texture,position,width,height)#",
        "description": "Draw a 2d texture.",
        "parameters": [
            "texture",
            "position",
            "width",
            "height"
        ],
        "parameter_descriptions": [
            "texture(gpu.types.GPUTexture) – GPUTexture to draw (e.g. gpu.texture.from_image(image) forbpy.types.Image).",
            "position(2D Vector) – Position of the lower left corner.",
            "width(float) – Width of the image when drawn (not necessarily\nthe original width of the texture).",
            "height(float) – Height of the image when drawn."
        ]
    },
    {
        "function_id": "bpy.ops.paintcurve.add_point",
        "signature": "bpy.ops.paintcurve.add_point(location=(0,0))#",
        "description": "Add New Paint Curve Point",
        "parameters": [
            "location=(0,0)"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.paintcurve.add_point_slide",
        "signature": "bpy.ops.paintcurve.add_point_slide(PAINTCURVE_OT_add_point=None,PAINTCURVE_OT_slide=None)#",
        "description": "Add new curve point and slide it",
        "parameters": [
            "PAINTCURVE_OT_add_point=None",
            "PAINTCURVE_OT_slide=None"
        ],
        "parameter_descriptions": [
            "PAINTCURVE_OT_add_point(PAINTCURVE_OT_add_point, (optional)) – Add New Paint Curve Point, Add New Paint Curve Point",
            "PAINTCURVE_OT_slide(PAINTCURVE_OT_slide, (optional)) – Slide Paint Curve Point, Select and slide paint curve point"
        ]
    },
    {
        "function_id": "bpy.ops.paintcurve.cursor",
        "signature": "bpy.ops.paintcurve.cursor()#",
        "description": "Place cursor",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.paintcurve.delete_point",
        "signature": "bpy.ops.paintcurve.delete_point()#",
        "description": "Remove Paint Curve Point",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.paintcurve.draw",
        "signature": "bpy.ops.paintcurve.draw()#",
        "description": "Draw curve",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.paintcurve.new",
        "signature": "bpy.ops.paintcurve.new()#",
        "description": "Add new paint curve",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.paintcurve.select",
        "signature": "bpy.ops.paintcurve.select(location=(0,0),toggle=False,extend=False)#",
        "description": "Select a paint curve point",
        "parameters": [
            "location=(0,0)",
            "toggle=False",
            "extend=False"
        ],
        "parameter_descriptions": [
            "location(int arrayof2 items in[0,32767],(optional)) – Location, Location of vertex in area space",
            "toggle(boolean,(optional)) – Toggle, (De)select all",
            "extend(boolean,(optional)) – Extend, Extend selection"
        ]
    },
    {
        "function_id": "bpy.ops.paintcurve.slide",
        "signature": "bpy.ops.paintcurve.slide(align=False,select=True)#",
        "description": "Select and slide paint curve point",
        "parameters": [
            "align=False",
            "select=True"
        ],
        "parameter_descriptions": [
            "align(boolean,(optional)) – Align Handles, Aligns opposite point handle during transform",
            "select(boolean,(optional)) – Select, Attempt to select a point handle before transform"
        ]
    },
    {
        "function_id": "bpy.app.timers.is_registered",
        "signature": "bpy.app.timers.is_registered(function)#",
        "description": "Check if this function is registered as a timer.",
        "parameters": [
            "function"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.app.timers.register",
        "signature": "bpy.app.timers.register(function,first_interval=0,persistent=False)#",
        "description": "Add a new function that will be called after the specified amount of seconds.\nThe function gets no arguments and is expected to return either None or a float.\nIfNoneis returned, the timer will be unregistered.\nA returned number specifies the delay until the function is called again.functools.partialcan be used to assign some parameters.",
        "parameters": [
            "function",
            "first_interval=0",
            "persistent=False"
        ],
        "parameter_descriptions": [
            "function(Callable[[],Union[float,None]]) – The function that should called.",
            "first_interval(float) – Seconds until the callback should be called the first time.",
            "persistent(bool) – Don’t remove timer when a new file is loaded."
        ]
    },
    {
        "function_id": "bpy.app.timers.unregister",
        "signature": "bpy.app.timers.unregister(function)#",
        "description": "Unregister timer.",
        "parameters": [
            "function"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.view2d.edge_pan",
        "signature": "bpy.ops.view2d.edge_pan(inside_padding=1.0,outside_padding=0.0,speed_ramp=1.0,max_speed=500.0,delay=1.0,zoom_influence=0.0)#",
        "description": "Pan the view when the mouse is held at an edge",
        "parameters": [
            "inside_padding=1.0",
            "outside_padding=0.0",
            "speed_ramp=1.0",
            "max_speed=500.0",
            "delay=1.0",
            "zoom_influence=0.0"
        ],
        "parameter_descriptions": [
            "inside_padding(float in[0,100],(optional)) – Inside Padding, Inside distance in UI units from the edge of the region within which to start panning",
            "outside_padding(float in[0,100],(optional)) – Outside Padding, Outside distance in UI units from the edge of the region at which to stop panning",
            "speed_ramp(float in[0,100],(optional)) – Speed Ramp, Width of the zone in UI units where speed increases with distance from the edge",
            "max_speed(float in[0,10000],(optional)) – Max Speed, Maximum speed in UI units per second",
            "delay(float in[0,10],(optional)) – Delay, Delay in seconds before maximum speed is reached",
            "zoom_influence(float in[0,1],(optional)) – Zoom Influence, Influence of the zoom factor on scroll speed"
        ]
    },
    {
        "function_id": "bpy.ops.view2d.ndof",
        "signature": "bpy.ops.view2d.ndof()#",
        "description": "Use a 3D mouse device to pan/zoom the view",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.view2d.pan",
        "signature": "bpy.ops.view2d.pan(deltax=0,deltay=0)#",
        "description": "Pan the view",
        "parameters": [
            "deltax=0",
            "deltay=0"
        ],
        "parameter_descriptions": [
            "deltax(int in[-inf,inf],(optional)) – Delta X",
            "deltay(int in[-inf,inf],(optional)) – Delta Y"
        ]
    },
    {
        "function_id": "bpy.ops.view2d.reset",
        "signature": "bpy.ops.view2d.reset()#",
        "description": "Reset the view",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.view2d.scroll_down",
        "signature": "bpy.ops.view2d.scroll_down(deltax=0,deltay=0,page=False)#",
        "description": "Scroll the view down",
        "parameters": [
            "deltax=0",
            "deltay=0",
            "page=False"
        ],
        "parameter_descriptions": [
            "deltax(int in[-inf,inf],(optional)) – Delta X",
            "deltay(int in[-inf,inf],(optional)) – Delta Y",
            "page(boolean,(optional)) – Page, Scroll down one page"
        ]
    },
    {
        "function_id": "bpy.ops.view2d.scroll_left",
        "signature": "bpy.ops.view2d.scroll_left(deltax=0,deltay=0)#",
        "description": "Scroll the view left",
        "parameters": [
            "deltax=0",
            "deltay=0"
        ],
        "parameter_descriptions": [
            "deltax(int in[-inf,inf],(optional)) – Delta X",
            "deltay(int in[-inf,inf],(optional)) – Delta Y"
        ]
    },
    {
        "function_id": "bpy.ops.view2d.scroll_right",
        "signature": "bpy.ops.view2d.scroll_right(deltax=0,deltay=0)#",
        "description": "Scroll the view right",
        "parameters": [
            "deltax=0",
            "deltay=0"
        ],
        "parameter_descriptions": [
            "deltax(int in[-inf,inf],(optional)) – Delta X",
            "deltay(int in[-inf,inf],(optional)) – Delta Y"
        ]
    },
    {
        "function_id": "bpy.ops.view2d.scroll_up",
        "signature": "bpy.ops.view2d.scroll_up(deltax=0,deltay=0,page=False)#",
        "description": "Scroll the view up",
        "parameters": [
            "deltax=0",
            "deltay=0",
            "page=False"
        ],
        "parameter_descriptions": [
            "deltax(int in[-inf,inf],(optional)) – Delta X",
            "deltay(int in[-inf,inf],(optional)) – Delta Y",
            "page(boolean,(optional)) – Page, Scroll up one page"
        ]
    },
    {
        "function_id": "bpy.ops.view2d.scroller_activate",
        "signature": "bpy.ops.view2d.scroller_activate()#",
        "description": "Scroll view by mouse click and drag",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.view2d.smoothview",
        "signature": "bpy.ops.view2d.smoothview(xmin=0,xmax=0,ymin=0,ymax=0,wait_for_input=True)#",
        "description": "Undocumented, considercontributing.",
        "parameters": [
            "xmin=0",
            "xmax=0",
            "ymin=0",
            "ymax=0",
            "wait_for_input=True"
        ],
        "parameter_descriptions": [
            "xmin(int in[-inf,inf],(optional)) – X Min",
            "xmax(int in[-inf,inf],(optional)) – X Max",
            "ymin(int in[-inf,inf],(optional)) – Y Min",
            "ymax(int in[-inf,inf],(optional)) – Y Max",
            "wait_for_input(boolean,(optional)) – Wait for Input"
        ]
    },
    {
        "function_id": "bpy.ops.view2d.zoom",
        "signature": "bpy.ops.view2d.zoom(deltax=0.0,deltay=0.0,use_cursor_init=True)#",
        "description": "Zoom in/out the view",
        "parameters": [
            "deltax=0.0",
            "deltay=0.0",
            "use_cursor_init=True"
        ],
        "parameter_descriptions": [
            "deltax(float in[-inf,inf],(optional)) – Delta X",
            "deltay(float in[-inf,inf],(optional)) – Delta Y",
            "use_cursor_init(boolean,(optional)) – Use Mouse Position, Allow the initial mouse position to be used"
        ]
    },
    {
        "function_id": "bpy.ops.view2d.zoom_border",
        "signature": "bpy.ops.view2d.zoom_border(xmin=0,xmax=0,ymin=0,ymax=0,wait_for_input=True,zoom_out=False)#",
        "description": "Zoom in the view to the nearest item contained in the border",
        "parameters": [
            "xmin=0",
            "xmax=0",
            "ymin=0",
            "ymax=0",
            "wait_for_input=True",
            "zoom_out=False"
        ],
        "parameter_descriptions": [
            "xmin(int in[-inf,inf],(optional)) – X Min",
            "xmax(int in[-inf,inf],(optional)) – X Max",
            "ymin(int in[-inf,inf],(optional)) – Y Min",
            "ymax(int in[-inf,inf],(optional)) – Y Max",
            "wait_for_input(boolean,(optional)) – Wait for Input",
            "zoom_out(boolean,(optional)) – Zoom Out"
        ]
    },
    {
        "function_id": "bpy.ops.view2d.zoom_in",
        "signature": "bpy.ops.view2d.zoom_in(zoomfacx=0.0,zoomfacy=0.0)#",
        "description": "Zoom in the view",
        "parameters": [
            "zoomfacx=0.0",
            "zoomfacy=0.0"
        ],
        "parameter_descriptions": [
            "zoomfacx(float in[-inf,inf],(optional)) – Zoom Factor X",
            "zoomfacy(float in[-inf,inf],(optional)) – Zoom Factor Y"
        ]
    },
    {
        "function_id": "bpy.ops.view2d.zoom_out",
        "signature": "bpy.ops.view2d.zoom_out(zoomfacx=0.0,zoomfacy=0.0)#",
        "description": "Zoom out the view",
        "parameters": [
            "zoomfacx=0.0",
            "zoomfacy=0.0"
        ],
        "parameter_descriptions": [
            "zoomfacx(float in[-inf,inf],(optional)) – Zoom Factor X",
            "zoomfacy(float in[-inf,inf],(optional)) – Zoom Factor Y"
        ]
    },
    {
        "function_id": "bpy.ops.text_editor.preset_add",
        "signature": "bpy.ops.text_editor.preset_add(name='',remove_name=False,remove_active=False)#",
        "description": "Add or remove a Text Editor Preset",
        "parameters": [
            "name=''",
            "remove_name=False",
            "remove_active=False"
        ],
        "parameter_descriptions": [
            "name(string,(optional,never None)) – Name, Name of the preset, used to make the path name",
            "remove_name(boolean,(optional)) – remove_name",
            "remove_active(boolean,(optional)) – remove_active"
        ]
    },
    {
        "function_id": "bpy.ops.extensions.dummy_progress",
        "signature": "bpy.ops.extensions.dummy_progress()#",
        "description": "Undocumented, considercontributing.",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.extensions.package_disable",
        "signature": "bpy.ops.extensions.package_disable()#",
        "description": "Turn off this extension",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.extensions.package_enable_not_installed",
        "signature": "bpy.ops.extensions.package_enable_not_installed()#",
        "description": "Turn on this extension",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.extensions.package_install",
        "signature": "bpy.ops.extensions.package_install(repo_directory='',repo_index=-1,pkg_id='',enable_on_install=True,url='',do_legacy_replace=False)#",
        "description": "Download and install the extension",
        "parameters": [
            "repo_directory=''",
            "repo_index=-1",
            "pkg_id=''",
            "enable_on_install=True",
            "url=''",
            "do_legacy_replace=False"
        ],
        "parameter_descriptions": [
            "repo_directory(string,(optional,never None)) – Repo Directory",
            "repo_index(int in[-inf,inf],(optional)) – Repo Index",
            "pkg_id(string,(optional,never None)) – Package ID",
            "enable_on_install(boolean,(optional)) – Enable on Install, Enable after installing",
            "url(string,(optional,never None)) – URL",
            "do_legacy_replace(boolean,(optional)) – Do Legacy Replace"
        ]
    },
    {
        "function_id": "bpy.ops.extensions.package_install_files",
        "signature": "bpy.ops.extensions.package_install_files(filter_glob='*.zip;*.py',directory='',files=None,filepath='',repo='',enable_on_install=True,target='',overwrite=True,url='')#",
        "description": "Install extensions from files into a locally managed repository",
        "parameters": [
            "filter_glob='*.zip;*.py'",
            "directory=''",
            "files=None",
            "filepath=''",
            "repo=''",
            "enable_on_install=True",
            "target=''",
            "overwrite=True",
            "url=''"
        ],
        "parameter_descriptions": [
            "filter_glob(string,(optional,never None)) – filter_glob",
            "directory(string,(optional,never None)) – Directory",
            "files(bpy_prop_collectionofOperatorFileListElement, (optional)) – files",
            "filepath(string,(optional,never None)) – filepath",
            "repo(enum in[],(optional)) – User Repository, The user repository to install extensions into",
            "enable_on_install(boolean,(optional)) – Enable on Install, Enable after installing",
            "target(enum in[],(optional)) – Legacy Target Path, Path to install legacy add-on packages to",
            "overwrite(boolean,(optional)) – Legacy Overwrite, Remove existing add-ons with the same ID",
            "url(string,(optional,never None)) – URL"
        ]
    },
    {
        "function_id": "bpy.ops.extensions.package_install_marked",
        "signature": "bpy.ops.extensions.package_install_marked(enable_on_install=True)#",
        "description": "Undocumented, considercontributing.",
        "parameters": [
            "enable_on_install=True"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.extensions.package_mark_clear",
        "signature": "bpy.ops.extensions.package_mark_clear(pkg_id='',repo_index=-1)#",
        "description": "Undocumented, considercontributing.",
        "parameters": [
            "pkg_id=''",
            "repo_index=-1"
        ],
        "parameter_descriptions": [
            "pkg_id(string,(optional,never None)) – Package ID",
            "repo_index(int in[-inf,inf],(optional)) – Repo Index"
        ]
    },
    {
        "function_id": "bpy.ops.extensions.package_mark_clear_all",
        "signature": "bpy.ops.extensions.package_mark_clear_all()#",
        "description": "Undocumented, considercontributing.",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.extensions.package_mark_set",
        "signature": "bpy.ops.extensions.package_mark_set(pkg_id='',repo_index=-1)#",
        "description": "Undocumented, considercontributing.",
        "parameters": [
            "pkg_id=''",
            "repo_index=-1"
        ],
        "parameter_descriptions": [
            "pkg_id(string,(optional,never None)) – Package ID",
            "repo_index(int in[-inf,inf],(optional)) – Repo Index"
        ]
    },
    {
        "function_id": "bpy.ops.extensions.package_mark_set_all",
        "signature": "bpy.ops.extensions.package_mark_set_all()#",
        "description": "Undocumented, considercontributing.",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.extensions.package_obsolete_marked",
        "signature": "bpy.ops.extensions.package_obsolete_marked()#",
        "description": "Zeroes package versions, useful for development - to test upgrading",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.extensions.package_show_clear",
        "signature": "bpy.ops.extensions.package_show_clear(pkg_id='',repo_index=-1)#",
        "description": "Undocumented, considercontributing.",
        "parameters": [
            "pkg_id=''",
            "repo_index=-1"
        ],
        "parameter_descriptions": [
            "pkg_id(string,(optional,never None)) – Package ID",
            "repo_index(int in[-inf,inf],(optional)) – Repo Index"
        ]
    },
    {
        "function_id": "bpy.ops.extensions.package_show_set",
        "signature": "bpy.ops.extensions.package_show_set(pkg_id='',repo_index=-1)#",
        "description": "Undocumented, considercontributing.",
        "parameters": [
            "pkg_id=''",
            "repo_index=-1"
        ],
        "parameter_descriptions": [
            "pkg_id(string,(optional,never None)) – Package ID",
            "repo_index(int in[-inf,inf],(optional)) – Repo Index"
        ]
    },
    {
        "function_id": "bpy.ops.extensions.package_show_settings",
        "signature": "bpy.ops.extensions.package_show_settings(pkg_id='',repo_index=-1)#",
        "description": "Undocumented, considercontributing.",
        "parameters": [
            "pkg_id=''",
            "repo_index=-1"
        ],
        "parameter_descriptions": [
            "pkg_id(string,(optional,never None)) – Package ID",
            "repo_index(int in[-inf,inf],(optional)) – Repo Index"
        ]
    },
    {
        "function_id": "bpy.ops.extensions.package_theme_disable",
        "signature": "bpy.ops.extensions.package_theme_disable(pkg_id='',repo_index=-1)#",
        "description": "Turn off this theme",
        "parameters": [
            "pkg_id=''",
            "repo_index=-1"
        ],
        "parameter_descriptions": [
            "pkg_id(string,(optional,never None)) – Package ID",
            "repo_index(int in[-inf,inf],(optional)) – Repo Index"
        ]
    },
    {
        "function_id": "bpy.ops.extensions.package_theme_enable",
        "signature": "bpy.ops.extensions.package_theme_enable(pkg_id='',repo_index=-1)#",
        "description": "Turn off this theme",
        "parameters": [
            "pkg_id=''",
            "repo_index=-1"
        ],
        "parameter_descriptions": [
            "pkg_id(string,(optional,never None)) – Package ID",
            "repo_index(int in[-inf,inf],(optional)) – Repo Index"
        ]
    },
    {
        "function_id": "bpy.ops.extensions.package_uninstall",
        "signature": "bpy.ops.extensions.package_uninstall(repo_directory='',repo_index=-1,pkg_id='')#",
        "description": "Disable and uninstall the extension",
        "parameters": [
            "repo_directory=''",
            "repo_index=-1",
            "pkg_id=''"
        ],
        "parameter_descriptions": [
            "repo_directory(string,(optional,never None)) – Repo Directory",
            "repo_index(int in[-inf,inf],(optional)) – Repo Index",
            "pkg_id(string,(optional,never None)) – Package ID"
        ]
    },
    {
        "function_id": "bpy.ops.extensions.package_uninstall_marked",
        "signature": "bpy.ops.extensions.package_uninstall_marked()#",
        "description": "Undocumented, considercontributing.",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.extensions.package_uninstall_system",
        "signature": "bpy.ops.extensions.package_uninstall_system()#",
        "description": "Undocumented, considercontributing.",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.extensions.package_upgrade_all",
        "signature": "bpy.ops.extensions.package_upgrade_all(use_active_only=False)#",
        "description": "Upgrade all the extensions to their latest version for all the remote repositories",
        "parameters": [
            "use_active_only=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.extensions.repo_enable_from_drop",
        "signature": "bpy.ops.extensions.repo_enable_from_drop(repo_index=-1)#",
        "description": "Undocumented, considercontributing.",
        "parameters": [
            "repo_index=-1"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.extensions.repo_lock_all",
        "signature": "bpy.ops.extensions.repo_lock_all()#",
        "description": "Lock repositories - to test locking",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.extensions.repo_refresh_all",
        "signature": "bpy.ops.extensions.repo_refresh_all()#",
        "description": "Scan extension & legacy add-ons for changes to modules & meta-data (similar to restarting). Any issues are reported as warnings",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.extensions.repo_sync",
        "signature": "bpy.ops.extensions.repo_sync(repo_directory='',repo_index=-1)#",
        "description": "Undocumented, considercontributing.",
        "parameters": [
            "repo_directory=''",
            "repo_index=-1"
        ],
        "parameter_descriptions": [
            "repo_directory(string,(optional,never None)) – Repo Directory",
            "repo_index(int in[-inf,inf],(optional)) – Repo Index"
        ]
    },
    {
        "function_id": "bpy.ops.extensions.repo_sync_all",
        "signature": "bpy.ops.extensions.repo_sync_all(use_active_only=False)#",
        "description": "Refresh the list of extensions for all the remote repositories",
        "parameters": [
            "use_active_only=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.extensions.repo_unlock",
        "signature": "bpy.ops.extensions.repo_unlock()#",
        "description": "Remove the repository file-system lock",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.extensions.repo_unlock_all",
        "signature": "bpy.ops.extensions.repo_unlock_all()#",
        "description": "Unlock repositories - to test unlocking",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.extensions.status_clear",
        "signature": "bpy.ops.extensions.status_clear()#",
        "description": "Undocumented, considercontributing.",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.extensions.status_clear_errors",
        "signature": "bpy.ops.extensions.status_clear_errors()#",
        "description": "Undocumented, considercontributing.",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.extensions.userpref_allow_online",
        "signature": "bpy.ops.extensions.userpref_allow_online()#",
        "description": "Allow internet access. Blender may access configured online extension repositories. Installed third party add-ons may access the internet for their own functionality",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.extensions.userpref_allow_online_popup",
        "signature": "bpy.ops.extensions.userpref_allow_online_popup()#",
        "description": "Allow internet access. Blender may access configured online extension repositories. Installed third party add-ons may access the internet for their own functionality",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.extensions.userpref_show_for_update",
        "signature": "bpy.ops.extensions.userpref_show_for_update()#",
        "description": "Open extensions preferences",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.extensions.userpref_show_online",
        "signature": "bpy.ops.extensions.userpref_show_online()#",
        "description": "Show system preferences “Network” panel to allow online access",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.extensions.userpref_tags_set",
        "signature": "bpy.ops.extensions.userpref_tags_set(value=False,data_path='')#",
        "description": "Set the value of all tags",
        "parameters": [
            "value=False",
            "data_path=''"
        ],
        "parameter_descriptions": [
            "value(boolean,(optional)) – Value, Enable or disable all tags",
            "data_path(string,(optional,never None)) – Data Path"
        ]
    },
    {
        "function_id": "imbuf.load",
        "signature": "imbuf.load(filepath)#",
        "description": "Load an image from a file.",
        "parameters": [
            "filepath"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "imbuf.new",
        "signature": "imbuf.new(size)#",
        "description": "Load a new image.",
        "parameters": [
            "size"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "imbuf.write",
        "signature": "imbuf.write(image,filepath=image.filepath)#",
        "description": "Write an image.",
        "parameters": [
            "image",
            "filepath=image.filepath"
        ],
        "parameter_descriptions": [
            "image(ImBuf) – the image to write.",
            "filepath(string,bytesorNoneType) – Optional filepath of the image (fallback to the images file path)."
        ]
    },
    {
        "function_id": "bpy.ops.export_anim.bvh",
        "signature": "bpy.ops.export_anim.bvh(filepath='',check_existing=True,filter_glob='*.bvh',global_scale=1.0,frame_start=0,frame_end=0,rotate_mode='NATIVE',root_transform_only=False)#",
        "description": "Save a BVH motion capture file from an armature",
        "parameters": [
            "filepath=''",
            "check_existing=True",
            "filter_glob='*.bvh'",
            "global_scale=1.0",
            "frame_start=0",
            "frame_end=0",
            "rotate_mode='NATIVE'",
            "root_transform_only=False"
        ],
        "parameter_descriptions": [
            "filepath(string,(optional,never None)) – File Path, Filepath used for exporting the file",
            "check_existing(boolean,(optional)) – Check Existing, Check and warn on overwriting existing files",
            "filter_glob(string,(optional,never None)) – filter_glob",
            "global_scale(float in[0.0001,1e+06],(optional)) – Scale, Scale the BVH by this value",
            "frame_start(int in[-inf,inf],(optional)) – Start Frame, Starting frame to export",
            "frame_end(int in[-inf,inf],(optional)) – End Frame, End frame to export",
            "rotate_mode(enum in['NATIVE','XYZ','XZY','YXZ','YZX','ZXY','ZYX'],(optional)) –Rotation, Rotation conversionNATIVEEuler (Native) – Use the rotation order defined in the BVH file.XYZEuler (XYZ) – Convert rotations to euler XYZ.XZYEuler (XZY) – Convert rotations to euler XZY.YXZEuler (YXZ) – Convert rotations to euler YXZ.YZXEuler (YZX) – Convert rotations to euler YZX.ZXYEuler (ZXY) – Convert rotations to euler ZXY.ZYXEuler (ZYX) – Convert rotations to euler ZYX.",
            "NATIVEEuler (Native) – Use the rotation order defined in the BVH file.",
            "XYZEuler (XYZ) – Convert rotations to euler XYZ.",
            "XZYEuler (XZY) – Convert rotations to euler XZY.",
            "YXZEuler (YXZ) – Convert rotations to euler YXZ.",
            "YZXEuler (YZX) – Convert rotations to euler YZX.",
            "ZXYEuler (ZXY) – Convert rotations to euler ZXY.",
            "ZYXEuler (ZYX) – Convert rotations to euler ZYX.",
            "root_transform_only(boolean,(optional)) – Root Translation Only, Only write out translation channels for the root bone"
        ]
    },
    {
        "function_id": "bpy.ops.particle.brush_edit",
        "signature": "bpy.ops.particle.brush_edit(stroke=None)#",
        "description": "Apply a stroke of brush to the particles",
        "parameters": [
            "stroke=None"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.particle.connect_hair",
        "signature": "bpy.ops.particle.connect_hair(all=False)#",
        "description": "Connect hair to the emitter mesh",
        "parameters": [
            "all=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.particle.copy_particle_systems",
        "signature": "bpy.ops.particle.copy_particle_systems(space='OBJECT',remove_target_particles=True,use_active=False)#",
        "description": "Copy particle systems from the active object to selected objects",
        "parameters": [
            "space='OBJECT'",
            "remove_target_particles=True",
            "use_active=False"
        ],
        "parameter_descriptions": [
            "space(enum in['OBJECT','WORLD'],(optional)) –Space, Space transform for copying from one object to anotherOBJECTObject – Copy inside each object’s local space.WORLDWorld – Copy in world space.",
            "OBJECTObject – Copy inside each object’s local space.",
            "WORLDWorld – Copy in world space.",
            "remove_target_particles(boolean,(optional)) – Remove Target Particles, Remove particle systems on the target objects",
            "use_active(boolean,(optional)) – Use Active, Use the active particle system from the context"
        ]
    },
    {
        "function_id": "bpy.ops.particle.delete",
        "signature": "bpy.ops.particle.delete(type='PARTICLE')#",
        "description": "Delete selected particles or keys",
        "parameters": [
            "type='PARTICLE'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.particle.disconnect_hair",
        "signature": "bpy.ops.particle.disconnect_hair(all=False)#",
        "description": "Disconnect hair from the emitter mesh",
        "parameters": [
            "all=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.particle.duplicate_particle_system",
        "signature": "bpy.ops.particle.duplicate_particle_system(use_duplicate_settings=False)#",
        "description": "Duplicate particle system within the active object",
        "parameters": [
            "use_duplicate_settings=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.particle.dupliob_copy",
        "signature": "bpy.ops.particle.dupliob_copy()#",
        "description": "Duplicate the current instance object",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.particle.dupliob_move_down",
        "signature": "bpy.ops.particle.dupliob_move_down()#",
        "description": "Move instance object down in the list",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.particle.dupliob_move_up",
        "signature": "bpy.ops.particle.dupliob_move_up()#",
        "description": "Move instance object up in the list",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.particle.dupliob_refresh",
        "signature": "bpy.ops.particle.dupliob_refresh()#",
        "description": "Refresh list of instance objects and their weights",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.particle.dupliob_remove",
        "signature": "bpy.ops.particle.dupliob_remove()#",
        "description": "Remove the selected instance object",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.particle.edited_clear",
        "signature": "bpy.ops.particle.edited_clear()#",
        "description": "Undo all edition performed on the particle system",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.particle.hair_dynamics_preset_add",
        "signature": "bpy.ops.particle.hair_dynamics_preset_add(name='',remove_name=False,remove_active=False)#",
        "description": "Add or remove a Hair Dynamics Preset",
        "parameters": [
            "name=''",
            "remove_name=False",
            "remove_active=False"
        ],
        "parameter_descriptions": [
            "name(string,(optional,never None)) – Name, Name of the preset, used to make the path name",
            "remove_name(boolean,(optional)) – remove_name",
            "remove_active(boolean,(optional)) – remove_active"
        ]
    },
    {
        "function_id": "bpy.ops.particle.hide",
        "signature": "bpy.ops.particle.hide(unselected=False)#",
        "description": "Hide selected particles",
        "parameters": [
            "unselected=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.particle.mirror",
        "signature": "bpy.ops.particle.mirror()#",
        "description": "Duplicate and mirror the selected particles along the local X axis",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.particle.new",
        "signature": "bpy.ops.particle.new()#",
        "description": "Add new particle settings",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.particle.new_target",
        "signature": "bpy.ops.particle.new_target()#",
        "description": "Add a new particle target",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.particle.particle_edit_toggle",
        "signature": "bpy.ops.particle.particle_edit_toggle()#",
        "description": "Toggle particle edit mode",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.particle.rekey",
        "signature": "bpy.ops.particle.rekey(keys_number=2)#",
        "description": "Change the number of keys of selected particles (root and tip keys included)",
        "parameters": [
            "keys_number=2"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.particle.remove_doubles",
        "signature": "bpy.ops.particle.remove_doubles(threshold=0.0002)#",
        "description": "Remove selected particles close enough of others",
        "parameters": [
            "threshold=0.0002"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.particle.reveal",
        "signature": "bpy.ops.particle.reveal(select=True)#",
        "description": "Show hidden particles",
        "parameters": [
            "select=True"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.particle.select_all",
        "signature": "bpy.ops.particle.select_all(action='TOGGLE')#",
        "description": "(De)select all particles’ keys",
        "parameters": [
            "action='TOGGLE'"
        ],
        "parameter_descriptions": [
            "TOGGLEToggle – Toggle selection for all elements.",
            "SELECTSelect – Select all elements.",
            "DESELECTDeselect – Deselect all elements.",
            "INVERTInvert – Invert selection of all elements."
        ]
    },
    {
        "function_id": "bpy.ops.particle.select_less",
        "signature": "bpy.ops.particle.select_less()#",
        "description": "Deselect boundary selected keys of each particle",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.particle.select_linked",
        "signature": "bpy.ops.particle.select_linked()#",
        "description": "Select all keys linked to already selected ones",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.particle.select_linked_pick",
        "signature": "bpy.ops.particle.select_linked_pick(deselect=False,location=(0,0))#",
        "description": "Select nearest particle from mouse pointer",
        "parameters": [
            "deselect=False",
            "location=(0,0)"
        ],
        "parameter_descriptions": [
            "deselect(boolean,(optional)) – Deselect, Deselect linked keys rather than selecting them",
            "location(int arrayof2 items in[0,inf],(optional)) – Location"
        ]
    },
    {
        "function_id": "bpy.ops.particle.select_more",
        "signature": "bpy.ops.particle.select_more()#",
        "description": "Select keys linked to boundary selected keys of each particle",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.particle.select_random",
        "signature": "bpy.ops.particle.select_random(ratio=0.5,seed=0,action='SELECT',type='HAIR')#",
        "description": "Select a randomly distributed set of hair or points",
        "parameters": [
            "ratio=0.5",
            "seed=0",
            "action='SELECT'",
            "type='HAIR'"
        ],
        "parameter_descriptions": [
            "ratio(float in[0,1],(optional)) – Ratio, Portion of items to select randomly",
            "seed(int in[0,inf],(optional)) – Random Seed, Seed for the random number generator",
            "action(enum in['SELECT','DESELECT'],(optional)) –Action, Selection action to executeSELECTSelect – Select all elements.DESELECTDeselect – Deselect all elements.",
            "SELECTSelect – Select all elements.",
            "DESELECTDeselect – Deselect all elements.",
            "type(enum in['HAIR','POINTS'],(optional)) – Type, Select either hair or points"
        ]
    },
    {
        "function_id": "bpy.ops.particle.select_roots",
        "signature": "bpy.ops.particle.select_roots(action='SELECT')#",
        "description": "Select roots of all visible particles",
        "parameters": [
            "action='SELECT'"
        ],
        "parameter_descriptions": [
            "TOGGLEToggle – Toggle selection for all elements.",
            "SELECTSelect – Select all elements.",
            "DESELECTDeselect – Deselect all elements.",
            "INVERTInvert – Invert selection of all elements."
        ]
    },
    {
        "function_id": "bpy.ops.particle.select_tips",
        "signature": "bpy.ops.particle.select_tips(action='SELECT')#",
        "description": "Select tips of all visible particles",
        "parameters": [
            "action='SELECT'"
        ],
        "parameter_descriptions": [
            "TOGGLEToggle – Toggle selection for all elements.",
            "SELECTSelect – Select all elements.",
            "DESELECTDeselect – Deselect all elements.",
            "INVERTInvert – Invert selection of all elements."
        ]
    },
    {
        "function_id": "bpy.ops.particle.shape_cut",
        "signature": "bpy.ops.particle.shape_cut()#",
        "description": "Cut hair to conform to the set shape object",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.particle.subdivide",
        "signature": "bpy.ops.particle.subdivide()#",
        "description": "Subdivide selected particles segments (adds keys)",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.particle.target_move_down",
        "signature": "bpy.ops.particle.target_move_down()#",
        "description": "Move particle target down in the list",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.particle.target_move_up",
        "signature": "bpy.ops.particle.target_move_up()#",
        "description": "Move particle target up in the list",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.particle.target_remove",
        "signature": "bpy.ops.particle.target_remove()#",
        "description": "Remove the selected particle target",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.particle.unify_length",
        "signature": "bpy.ops.particle.unify_length()#",
        "description": "Make selected hair the same length",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.particle.weight_set",
        "signature": "bpy.ops.particle.weight_set(factor=1.0)#",
        "description": "Set the weight of selected keys",
        "parameters": [
            "factor=1.0"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.poselib.apply_pose_asset",
        "signature": "bpy.ops.poselib.apply_pose_asset(blend_factor=1.0,flipped=False)#",
        "description": "Apply the given Pose Action to the rig",
        "parameters": [
            "blend_factor=1.0",
            "flipped=False"
        ],
        "parameter_descriptions": [
            "blend_factor(float in[-inf,inf],(optional)) – Blend Factor, Amount that the pose is applied on top of the existing poses. A negative value will subtract the pose instead of adding it",
            "flipped(boolean,(optional)) – Apply Flipped, When enabled, applies the pose flipped over the X-axis"
        ]
    },
    {
        "function_id": "bpy.ops.poselib.blend_pose_asset",
        "signature": "bpy.ops.poselib.blend_pose_asset(blend_factor=0.0,flipped=False,release_confirm=False)#",
        "description": "Blend the given Pose Action to the rig",
        "parameters": [
            "blend_factor=0.0",
            "flipped=False",
            "release_confirm=False"
        ],
        "parameter_descriptions": [
            "blend_factor(float in[-inf,inf],(optional)) – Blend Factor, Amount that the pose is applied on top of the existing poses. A negative value will subtract the pose instead of adding it",
            "flipped(boolean,(optional)) – Apply Flipped, When enabled, applies the pose flipped over the X-axis",
            "release_confirm(boolean,(optional)) – Confirm on Release, Always confirm operation when releasing button"
        ]
    },
    {
        "function_id": "bpy.ops.poselib.convert_old_object_poselib",
        "signature": "bpy.ops.poselib.convert_old_object_poselib()#",
        "description": "Create a pose asset for each pose marker in this legacy pose library data-block",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.poselib.convert_old_poselib",
        "signature": "bpy.ops.poselib.convert_old_poselib()#",
        "description": "Create a pose asset for each pose marker in the current action",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.poselib.copy_as_asset",
        "signature": "bpy.ops.poselib.copy_as_asset()#",
        "description": "Create a new pose asset on the clipboard, to be pasted into an Asset Browser",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.poselib.create_pose_asset",
        "signature": "bpy.ops.poselib.create_pose_asset(pose_name='',activate_new_action=True)#",
        "description": "Create a new Action that contains the pose of the selected bones, and mark it as Asset. The asset will be stored in the current blend file",
        "parameters": [
            "pose_name=''",
            "activate_new_action=True"
        ],
        "parameter_descriptions": [
            "pose_name(string,(optional,never None)) – Pose Name",
            "activate_new_action(boolean,(optional)) – Activate New Action"
        ]
    },
    {
        "function_id": "bpy.ops.poselib.paste_asset",
        "signature": "bpy.ops.poselib.paste_asset()#",
        "description": "Paste the Asset that was previously copied using Copy As Asset",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.poselib.pose_asset_select_bones",
        "signature": "bpy.ops.poselib.pose_asset_select_bones(select=True,flipped=False)#",
        "description": "Select those bones that are used in this pose",
        "parameters": [
            "select=True",
            "flipped=False"
        ],
        "parameter_descriptions": [
            "select(boolean,(optional)) – Select",
            "flipped(boolean,(optional)) – Flipped"
        ]
    },
    {
        "function_id": "bpy.ops.poselib.restore_previous_action",
        "signature": "bpy.ops.poselib.restore_previous_action()#",
        "description": "Switch back to the previous Action, after creating a pose asset",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.surface.primitive_nurbs_surface_circle_add",
        "signature": "bpy.ops.surface.primitive_nurbs_surface_circle_add(radius=1.0,enter_editmode=False,align='WORLD',location=(0.0,0.0,0.0),rotation=(0.0,0.0,0.0),scale=(0.0,0.0,0.0))#",
        "description": "Construct a Nurbs surface Circle",
        "parameters": [
            "radius=1.0",
            "enter_editmode=False",
            "align='WORLD'",
            "location=(0.0,0.0,0.0)",
            "rotation=(0.0,0.0,0.0)",
            "scale=(0.0,0.0,0.0)"
        ],
        "parameter_descriptions": [
            "radius(float in[0,inf],(optional)) – Radius",
            "enter_editmode(boolean,(optional)) – Enter Edit Mode, Enter edit mode when adding this object",
            "align(enum in['WORLD','VIEW','CURSOR'],(optional)) –Align, The alignment of the new objectWORLDWorld – Align the new object to the world.VIEWView – Align the new object to the view.CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "WORLDWorld – Align the new object to the world.",
            "VIEWView – Align the new object to the view.",
            "CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "location(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Location, Location for the newly added object",
            "rotation(mathutils.Eulerrotation of 3 items in [-inf, inf], (optional)) – Rotation, Rotation for the newly added object",
            "scale(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Scale, Scale for the newly added object"
        ]
    },
    {
        "function_id": "bpy.ops.surface.primitive_nurbs_surface_curve_add",
        "signature": "bpy.ops.surface.primitive_nurbs_surface_curve_add(radius=1.0,enter_editmode=False,align='WORLD',location=(0.0,0.0,0.0),rotation=(0.0,0.0,0.0),scale=(0.0,0.0,0.0))#",
        "description": "Construct a Nurbs surface Curve",
        "parameters": [
            "radius=1.0",
            "enter_editmode=False",
            "align='WORLD'",
            "location=(0.0,0.0,0.0)",
            "rotation=(0.0,0.0,0.0)",
            "scale=(0.0,0.0,0.0)"
        ],
        "parameter_descriptions": [
            "radius(float in[0,inf],(optional)) – Radius",
            "enter_editmode(boolean,(optional)) – Enter Edit Mode, Enter edit mode when adding this object",
            "align(enum in['WORLD','VIEW','CURSOR'],(optional)) –Align, The alignment of the new objectWORLDWorld – Align the new object to the world.VIEWView – Align the new object to the view.CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "WORLDWorld – Align the new object to the world.",
            "VIEWView – Align the new object to the view.",
            "CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "location(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Location, Location for the newly added object",
            "rotation(mathutils.Eulerrotation of 3 items in [-inf, inf], (optional)) – Rotation, Rotation for the newly added object",
            "scale(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Scale, Scale for the newly added object"
        ]
    },
    {
        "function_id": "bpy.ops.surface.primitive_nurbs_surface_cylinder_add",
        "signature": "bpy.ops.surface.primitive_nurbs_surface_cylinder_add(radius=1.0,enter_editmode=False,align='WORLD',location=(0.0,0.0,0.0),rotation=(0.0,0.0,0.0),scale=(0.0,0.0,0.0))#",
        "description": "Construct a Nurbs surface Cylinder",
        "parameters": [
            "radius=1.0",
            "enter_editmode=False",
            "align='WORLD'",
            "location=(0.0,0.0,0.0)",
            "rotation=(0.0,0.0,0.0)",
            "scale=(0.0,0.0,0.0)"
        ],
        "parameter_descriptions": [
            "radius(float in[0,inf],(optional)) – Radius",
            "enter_editmode(boolean,(optional)) – Enter Edit Mode, Enter edit mode when adding this object",
            "align(enum in['WORLD','VIEW','CURSOR'],(optional)) –Align, The alignment of the new objectWORLDWorld – Align the new object to the world.VIEWView – Align the new object to the view.CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "WORLDWorld – Align the new object to the world.",
            "VIEWView – Align the new object to the view.",
            "CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "location(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Location, Location for the newly added object",
            "rotation(mathutils.Eulerrotation of 3 items in [-inf, inf], (optional)) – Rotation, Rotation for the newly added object",
            "scale(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Scale, Scale for the newly added object"
        ]
    },
    {
        "function_id": "bpy.ops.surface.primitive_nurbs_surface_sphere_add",
        "signature": "bpy.ops.surface.primitive_nurbs_surface_sphere_add(radius=1.0,enter_editmode=False,align='WORLD',location=(0.0,0.0,0.0),rotation=(0.0,0.0,0.0),scale=(0.0,0.0,0.0))#",
        "description": "Construct a Nurbs surface Sphere",
        "parameters": [
            "radius=1.0",
            "enter_editmode=False",
            "align='WORLD'",
            "location=(0.0,0.0,0.0)",
            "rotation=(0.0,0.0,0.0)",
            "scale=(0.0,0.0,0.0)"
        ],
        "parameter_descriptions": [
            "radius(float in[0,inf],(optional)) – Radius",
            "enter_editmode(boolean,(optional)) – Enter Edit Mode, Enter edit mode when adding this object",
            "align(enum in['WORLD','VIEW','CURSOR'],(optional)) –Align, The alignment of the new objectWORLDWorld – Align the new object to the world.VIEWView – Align the new object to the view.CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "WORLDWorld – Align the new object to the world.",
            "VIEWView – Align the new object to the view.",
            "CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "location(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Location, Location for the newly added object",
            "rotation(mathutils.Eulerrotation of 3 items in [-inf, inf], (optional)) – Rotation, Rotation for the newly added object",
            "scale(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Scale, Scale for the newly added object"
        ]
    },
    {
        "function_id": "bpy.ops.surface.primitive_nurbs_surface_surface_add",
        "signature": "bpy.ops.surface.primitive_nurbs_surface_surface_add(radius=1.0,enter_editmode=False,align='WORLD',location=(0.0,0.0,0.0),rotation=(0.0,0.0,0.0),scale=(0.0,0.0,0.0))#",
        "description": "Construct a Nurbs surface Patch",
        "parameters": [
            "radius=1.0",
            "enter_editmode=False",
            "align='WORLD'",
            "location=(0.0,0.0,0.0)",
            "rotation=(0.0,0.0,0.0)",
            "scale=(0.0,0.0,0.0)"
        ],
        "parameter_descriptions": [
            "radius(float in[0,inf],(optional)) – Radius",
            "enter_editmode(boolean,(optional)) – Enter Edit Mode, Enter edit mode when adding this object",
            "align(enum in['WORLD','VIEW','CURSOR'],(optional)) –Align, The alignment of the new objectWORLDWorld – Align the new object to the world.VIEWView – Align the new object to the view.CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "WORLDWorld – Align the new object to the world.",
            "VIEWView – Align the new object to the view.",
            "CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "location(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Location, Location for the newly added object",
            "rotation(mathutils.Eulerrotation of 3 items in [-inf, inf], (optional)) – Rotation, Rotation for the newly added object",
            "scale(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Scale, Scale for the newly added object"
        ]
    },
    {
        "function_id": "bpy.ops.surface.primitive_nurbs_surface_torus_add",
        "signature": "bpy.ops.surface.primitive_nurbs_surface_torus_add(radius=1.0,enter_editmode=False,align='WORLD',location=(0.0,0.0,0.0),rotation=(0.0,0.0,0.0),scale=(0.0,0.0,0.0))#",
        "description": "Construct a Nurbs surface Torus",
        "parameters": [
            "radius=1.0",
            "enter_editmode=False",
            "align='WORLD'",
            "location=(0.0,0.0,0.0)",
            "rotation=(0.0,0.0,0.0)",
            "scale=(0.0,0.0,0.0)"
        ],
        "parameter_descriptions": [
            "radius(float in[0,inf],(optional)) – Radius",
            "enter_editmode(boolean,(optional)) – Enter Edit Mode, Enter edit mode when adding this object",
            "align(enum in['WORLD','VIEW','CURSOR'],(optional)) –Align, The alignment of the new objectWORLDWorld – Align the new object to the world.VIEWView – Align the new object to the view.CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "WORLDWorld – Align the new object to the world.",
            "VIEWView – Align the new object to the view.",
            "CURSOR3D Cursor – Use the 3D cursor orientation for the new object.",
            "location(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Location, Location for the newly added object",
            "rotation(mathutils.Eulerrotation of 3 items in [-inf, inf], (optional)) – Rotation, Rotation for the newly added object",
            "scale(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Scale, Scale for the newly added object"
        ]
    },
    {
        "function_id": "bpy.ops.geometry.attribute_add",
        "signature": "bpy.ops.geometry.attribute_add(name='',domain='POINT',data_type='FLOAT')#",
        "description": "Add attribute to geometry",
        "parameters": [
            "name=''",
            "domain='POINT'",
            "data_type='FLOAT'"
        ],
        "parameter_descriptions": [
            "name(string,(optional,never None)) – Name, Name of new attribute",
            "domain(enum inAttribute Domain Items, (optional)) – Domain, Type of element that attribute is stored on",
            "data_type(enum inAttribute Type Items, (optional)) – Data Type, Type of data stored in attribute"
        ]
    },
    {
        "function_id": "bpy.ops.geometry.attribute_convert",
        "signature": "bpy.ops.geometry.attribute_convert(mode='GENERIC',domain='POINT',data_type='FLOAT')#",
        "description": "Change how the attribute is stored",
        "parameters": [
            "mode='GENERIC'",
            "domain='POINT'",
            "data_type='FLOAT'"
        ],
        "parameter_descriptions": [
            "mode(enum in['GENERIC','VERTEX_GROUP'],(optional)) – Mode",
            "domain(enum inAttribute Domain Items, (optional)) – Domain, Which geometry element to move the attribute to",
            "data_type(enum inAttribute Type Items, (optional)) – Data Type"
        ]
    },
    {
        "function_id": "bpy.ops.geometry.attribute_remove",
        "signature": "bpy.ops.geometry.attribute_remove()#",
        "description": "Remove attribute from geometry",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.geometry.color_attribute_add",
        "signature": "bpy.ops.geometry.color_attribute_add(name='',domain='POINT',data_type='FLOAT_COLOR',color=(0.0,0.0,0.0,1.0))#",
        "description": "Add color attribute to geometry",
        "parameters": [
            "name=''",
            "domain='POINT'",
            "data_type='FLOAT_COLOR'",
            "color=(0.0,0.0,0.0,1.0)"
        ],
        "parameter_descriptions": [
            "name(string,(optional,never None)) – Name, Name of new color attribute",
            "domain(enum inColor Attribute Domain Items, (optional)) – Domain, Type of element that attribute is stored on",
            "data_type(enum inColor Attribute Type Items, (optional)) – Data Type, Type of data stored in attribute",
            "color(float arrayof4 items in[0,inf],(optional)) – Color, Default fill color"
        ]
    },
    {
        "function_id": "bpy.ops.geometry.color_attribute_convert",
        "signature": "bpy.ops.geometry.color_attribute_convert(domain='POINT',data_type='FLOAT_COLOR')#",
        "description": "Change how the color attribute is stored",
        "parameters": [
            "domain='POINT'",
            "data_type='FLOAT_COLOR'"
        ],
        "parameter_descriptions": [
            "domain(enum inColor Attribute Domain Items, (optional)) – Domain, Type of element that attribute is stored on",
            "data_type(enum inColor Attribute Type Items, (optional)) – Data Type, Type of data stored in attribute"
        ]
    },
    {
        "function_id": "bpy.ops.geometry.color_attribute_duplicate",
        "signature": "bpy.ops.geometry.color_attribute_duplicate()#",
        "description": "Duplicate color attribute",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.geometry.color_attribute_remove",
        "signature": "bpy.ops.geometry.color_attribute_remove()#",
        "description": "Remove color attribute from geometry",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.geometry.color_attribute_render_set",
        "signature": "bpy.ops.geometry.color_attribute_render_set(name='Color')#",
        "description": "Set default color attribute used for rendering",
        "parameters": [
            "name='Color'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.geometry.execute_node_group",
        "signature": "bpy.ops.geometry.execute_node_group(asset_library_type='LOCAL',asset_library_identifier='',relative_asset_identifier='',name='',session_uid=0,mouse_position=(0,0),region_size=(0,0),cursor_position=(0.0,0.0,0.0),cursor_rotation=(0.0,0.0,0.0,0.0),viewport_projection_matrix=(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0),viewport_view_matrix=(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0),viewport_is_perspective=False)#",
        "description": "Execute a node group on geometry",
        "parameters": [
            "asset_library_type='LOCAL'",
            "asset_library_identifier=''",
            "relative_asset_identifier=''",
            "name=''",
            "session_uid=0",
            "mouse_position=(0,0)",
            "region_size=(0,0)",
            "cursor_position=(0.0,0.0,0.0)",
            "cursor_rotation=(0.0,0.0,0.0,0.0)",
            "viewport_projection_matrix=(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0)",
            "viewport_view_matrix=(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0)",
            "viewport_is_perspective=False"
        ],
        "parameter_descriptions": [
            "asset_library_type(enum inAsset Library Type Items, (optional)) – Asset Library Type",
            "asset_library_identifier(string,(optional,never None)) – Asset Library Identifier",
            "relative_asset_identifier(string,(optional,never None)) – Relative Asset Identifier",
            "name(string,(optional,never None)) – Name, Name of the data-block to use by the operator",
            "session_uid(int in[-inf,inf],(optional)) – Session UID, Session UID of the data-block to use by the operator",
            "mouse_position(int arrayof2 items in[-inf,inf],(optional)) – Mouse Position, Mouse coordinates in region space",
            "region_size(int arrayof2 items in[0,inf],(optional)) – Region Size",
            "cursor_position(float arrayof3 items in[1.17549e-38,inf],(optional)) – 3D Cursor Position",
            "cursor_rotation(float arrayof4 items in[1.17549e-38,inf],(optional)) – 3D Cursor Rotation",
            "viewport_projection_matrix(float arrayof16 items in[1.17549e-38,inf],(optional)) – Viewport Projection Transform",
            "viewport_view_matrix(float arrayof16 items in[1.17549e-38,inf],(optional)) – Viewport View Transform",
            "viewport_is_perspective(boolean,(optional)) – Viewport Is Perspective"
        ]
    },
    {
        "function_id": "bpy.ops.geometry.geometry_randomization",
        "signature": "bpy.ops.geometry.geometry_randomization(value=False)#",
        "description": "Toggle geometry randomization for debugging purposes",
        "parameters": [
            "value=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.info.report_copy",
        "signature": "bpy.ops.info.report_copy()#",
        "description": "Copy selected reports to clipboard",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.info.report_delete",
        "signature": "bpy.ops.info.report_delete()#",
        "description": "Delete selected reports",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.info.report_replay",
        "signature": "bpy.ops.info.report_replay()#",
        "description": "Replay selected reports",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.info.reports_display_update",
        "signature": "bpy.ops.info.reports_display_update()#",
        "description": "Update the display of reports in Blender UI (internal use)",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.info.select_all",
        "signature": "bpy.ops.info.select_all(action='SELECT')#",
        "description": "Change selection of all visible reports",
        "parameters": [
            "action='SELECT'"
        ],
        "parameter_descriptions": [
            "TOGGLEToggle – Toggle selection for all elements.",
            "SELECTSelect – Select all elements.",
            "DESELECTDeselect – Deselect all elements.",
            "INVERTInvert – Invert selection of all elements."
        ]
    },
    {
        "function_id": "bpy.ops.info.select_box",
        "signature": "bpy.ops.info.select_box(xmin=0,xmax=0,ymin=0,ymax=0,wait_for_input=True,mode='SET')#",
        "description": "Toggle box selection",
        "parameters": [
            "xmin=0",
            "xmax=0",
            "ymin=0",
            "ymax=0",
            "wait_for_input=True",
            "mode='SET'"
        ],
        "parameter_descriptions": [
            "xmin(int in[-inf,inf],(optional)) – X Min",
            "xmax(int in[-inf,inf],(optional)) – X Max",
            "ymin(int in[-inf,inf],(optional)) – Y Min",
            "ymax(int in[-inf,inf],(optional)) – Y Max",
            "wait_for_input(boolean,(optional)) – Wait for Input",
            "mode(enum in['SET','ADD','SUB'],(optional)) –ModeSETSet – Set a new selection.ADDExtend – Extend existing selection.SUBSubtract – Subtract existing selection.",
            "SETSet – Set a new selection.",
            "ADDExtend – Extend existing selection.",
            "SUBSubtract – Subtract existing selection."
        ]
    },
    {
        "function_id": "bpy.ops.info.select_pick",
        "signature": "bpy.ops.info.select_pick(report_index=0,extend=False)#",
        "description": "Select reports by index",
        "parameters": [
            "report_index=0",
            "extend=False"
        ],
        "parameter_descriptions": [
            "report_index(int in[0,inf],(optional)) – Report, Index of the report",
            "extend(boolean,(optional)) – Extend, Extend report selection"
        ]
    },
    {
        "function_id": "freestyle.utils.ContextFunctions.get_selected_fedge",
        "signature": "freestyle.utils.ContextFunctions.get_selected_fedge()#",
        "description": "Returns the selected FEdge.",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "freestyle.utils.ContextFunctions.get_time_stamp",
        "signature": "freestyle.utils.ContextFunctions.get_time_stamp()#",
        "description": "Returns the system time stamp.",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "freestyle.utils.ContextFunctions.load_map",
        "signature": "freestyle.utils.ContextFunctions.load_map(file_name,map_name,num_levels=4,sigma=1.0)#",
        "description": "Loads an image map for further reading.",
        "parameters": [
            "file_name",
            "map_name",
            "num_levels=4",
            "sigma=1.0"
        ],
        "parameter_descriptions": [
            "file_name(str) – The name of the image file.",
            "map_name(str) – The name that will be used to access this image.",
            "num_levels(int) – The number of levels in the map pyramid\n(default = 4). If num_levels == 0, the complete pyramid is\nbuilt.",
            "sigma(float) – The sigma value of the gaussian function."
        ]
    },
    {
        "function_id": "freestyle.utils.ContextFunctions.read_complete_view_map_pixel",
        "signature": "freestyle.utils.ContextFunctions.read_complete_view_map_pixel(level,x,y)#",
        "description": "Reads a pixel in the complete view map.",
        "parameters": [
            "level",
            "x",
            "y"
        ],
        "parameter_descriptions": [
            "level(int) – The level of the pyramid in which we wish to read the\npixel.",
            "x(int) – The x coordinate of the pixel we wish to read. The origin\nis in the lower-left corner.",
            "y(int) – The y coordinate of the pixel we wish to read. The origin\nis in the lower-left corner."
        ]
    },
    {
        "function_id": "freestyle.utils.ContextFunctions.read_directional_view_map_pixel",
        "signature": "freestyle.utils.ContextFunctions.read_directional_view_map_pixel(orientation,level,x,y)#",
        "description": "Reads a pixel in one of the oriented view map images.",
        "parameters": [
            "orientation",
            "level",
            "x",
            "y"
        ],
        "parameter_descriptions": [
            "orientation(int) – The number telling which orientation we want to\ncheck.",
            "level(int) – The level of the pyramid in which we wish to read the\npixel.",
            "x(int) – The x coordinate of the pixel we wish to read. The origin\nis in the lower-left corner.",
            "y(int) – The y coordinate of the pixel we wish to read. The origin\nis in the lower-left corner."
        ]
    },
    {
        "function_id": "freestyle.utils.ContextFunctions.read_map_pixel",
        "signature": "freestyle.utils.ContextFunctions.read_map_pixel(map_name,level,x,y)#",
        "description": "Reads a pixel in a user-defined map.",
        "parameters": [
            "map_name",
            "level",
            "x",
            "y"
        ],
        "parameter_descriptions": [
            "map_name(str) – The name of the map.",
            "level(int) – The level of the pyramid in which we wish to read the\npixel.",
            "x(int) – The x coordinate of the pixel we wish to read. The origin\nis in the lower-left corner.",
            "y(int) – The y coordinate of the pixel we wish to read. The origin\nis in the lower-left corner."
        ]
    },
    {
        "function_id": "bpy.app.icons.new_triangles",
        "signature": "bpy.app.icons.new_triangles(range,coords,colors)#",
        "description": "Create a new icon from triangle geometry.",
        "parameters": [
            "range",
            "coords",
            "colors"
        ],
        "parameter_descriptions": [
            "range(tuple.) – Pair of ints.",
            "coords(byte sequence.) – Sequence of bytes (6 floats for one triangle) for (X, Y) coordinates.",
            "colors(byte sequence.) – Sequence of ints (12 for one triangles) for RGBA."
        ]
    },
    {
        "function_id": "bpy.app.icons.new_triangles_from_file",
        "signature": "bpy.app.icons.new_triangles_from_file(filepath)#",
        "description": "Create a new icon from triangle geometry.",
        "parameters": [
            "filepath"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.app.icons.release",
        "signature": "bpy.app.icons.release(icon_id)#",
        "description": "Release the icon.",
        "parameters": [
            "icon_id"
        ]
    },
    {
        "function_id": "bpy.ops.font.case_set",
        "signature": "bpy.ops.font.case_set(case='LOWER')#",
        "description": "Set font case",
        "parameters": [
            "case='LOWER'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.font.case_toggle",
        "signature": "bpy.ops.font.case_toggle()#",
        "description": "Toggle font case",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.font.change_character",
        "signature": "bpy.ops.font.change_character(delta=1)#",
        "description": "Change font character code",
        "parameters": [
            "delta=1"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.font.change_spacing",
        "signature": "bpy.ops.font.change_spacing(delta=1.0)#",
        "description": "Change font spacing",
        "parameters": [
            "delta=1.0"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.font.delete",
        "signature": "bpy.ops.font.delete(type='PREVIOUS_CHARACTER')#",
        "description": "Delete text by cursor position",
        "parameters": [
            "type='PREVIOUS_CHARACTER'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.font.line_break",
        "signature": "bpy.ops.font.line_break()#",
        "description": "Insert line break at cursor position",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.font.move",
        "signature": "bpy.ops.font.move(type='LINE_BEGIN')#",
        "description": "Move cursor to position type",
        "parameters": [
            "type='LINE_BEGIN'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.font.move_select",
        "signature": "bpy.ops.font.move_select(type='LINE_BEGIN')#",
        "description": "Move the cursor while selecting",
        "parameters": [
            "type='LINE_BEGIN'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.font.open",
        "signature": "bpy.ops.font.open(filepath='',hide_props_region=True,check_existing=False,filter_blender=False,filter_backup=False,filter_image=False,filter_movie=False,filter_python=False,filter_font=True,filter_sound=False,filter_text=False,filter_archive=False,filter_btx=False,filter_collada=False,filter_alembic=False,filter_usd=False,filter_obj=False,filter_volume=False,filter_folder=True,filter_blenlib=False,filemode=9,relative_path=True,display_type='THUMBNAIL',sort_method='')#",
        "description": "Load a new font from a file",
        "parameters": [
            "filepath=''",
            "hide_props_region=True",
            "check_existing=False",
            "filter_blender=False",
            "filter_backup=False",
            "filter_image=False",
            "filter_movie=False",
            "filter_python=False",
            "filter_font=True",
            "filter_sound=False",
            "filter_text=False",
            "filter_archive=False",
            "filter_btx=False",
            "filter_collada=False",
            "filter_alembic=False",
            "filter_usd=False",
            "filter_obj=False",
            "filter_volume=False",
            "filter_folder=True",
            "filter_blenlib=False",
            "filemode=9",
            "relative_path=True",
            "display_type='THUMBNAIL'",
            "sort_method=''"
        ],
        "parameter_descriptions": [
            "filepath(string,(optional,never None)) – File Path, Path to file",
            "hide_props_region(boolean,(optional)) – Hide Operator Properties, Collapse the region displaying the operator settings",
            "check_existing(boolean,(optional)) – Check Existing, Check and warn on overwriting existing files",
            "filter_blender(boolean,(optional)) – Filter .blend files",
            "filter_backup(boolean,(optional)) – Filter .blend files",
            "filter_image(boolean,(optional)) – Filter image files",
            "filter_movie(boolean,(optional)) – Filter movie files",
            "filter_python(boolean,(optional)) – Filter Python files",
            "filter_font(boolean,(optional)) – Filter font files",
            "filter_sound(boolean,(optional)) – Filter sound files",
            "filter_text(boolean,(optional)) – Filter text files",
            "filter_archive(boolean,(optional)) – Filter archive files",
            "filter_btx(boolean,(optional)) – Filter btx files",
            "filter_collada(boolean,(optional)) – Filter COLLADA files",
            "filter_alembic(boolean,(optional)) – Filter Alembic files",
            "filter_usd(boolean,(optional)) – Filter USD files",
            "filter_obj(boolean,(optional)) – Filter OBJ files",
            "filter_volume(boolean,(optional)) – Filter OpenVDB volume files",
            "filter_folder(boolean,(optional)) – Filter folders",
            "filter_blenlib(boolean,(optional)) – Filter Blender IDs",
            "filemode(int in[1,9],(optional)) – File Browser Mode, The setting for the file browser mode to load a .blend file, a library or a special file",
            "relative_path(boolean,(optional)) – Relative Path, Select the file relative to the blend file",
            "display_type(enum in['DEFAULT','LIST_VERTICAL','LIST_HORIZONTAL','THUMBNAIL'],(optional)) –Display TypeDEFAULTDefault – Automatically determine display type for files.LIST_VERTICALShort List – Display files as short list.LIST_HORIZONTALLong List – Display files as a detailed list.THUMBNAILThumbnails – Display files as thumbnails.",
            "DEFAULTDefault – Automatically determine display type for files.",
            "LIST_VERTICALShort List – Display files as short list.",
            "LIST_HORIZONTALLong List – Display files as a detailed list.",
            "THUMBNAILThumbnails – Display files as thumbnails.",
            "sort_method(enum in[],(optional)) – File sorting mode"
        ]
    },
    {
        "function_id": "bpy.ops.font.select_all",
        "signature": "bpy.ops.font.select_all()#",
        "description": "Select all text",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.font.select_word",
        "signature": "bpy.ops.font.select_word()#",
        "description": "Select word under cursor",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.font.selection_set",
        "signature": "bpy.ops.font.selection_set()#",
        "description": "Set cursor selection",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.font.style_set",
        "signature": "bpy.ops.font.style_set(style='BOLD',clear=False)#",
        "description": "Set font style",
        "parameters": [
            "style='BOLD'",
            "clear=False"
        ],
        "parameter_descriptions": [
            "style(enum in['BOLD','ITALIC','UNDERLINE','SMALL_CAPS'],(optional)) – Style, Style to set selection to",
            "clear(boolean,(optional)) – Clear, Clear style rather than setting it"
        ]
    },
    {
        "function_id": "bpy.ops.font.style_toggle",
        "signature": "bpy.ops.font.style_toggle(style='BOLD')#",
        "description": "Toggle font style",
        "parameters": [
            "style='BOLD'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.font.text_copy",
        "signature": "bpy.ops.font.text_copy()#",
        "description": "Copy selected text to clipboard",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.font.text_cut",
        "signature": "bpy.ops.font.text_cut()#",
        "description": "Cut selected text to clipboard",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.font.text_insert",
        "signature": "bpy.ops.font.text_insert(text='',accent=False)#",
        "description": "Insert text at cursor position",
        "parameters": [
            "text=''",
            "accent=False"
        ],
        "parameter_descriptions": [
            "text(string,(optional,never None)) – Text, Text to insert at the cursor position",
            "accent(boolean,(optional)) – Accent Mode, Next typed character will strike through previous, for special character input"
        ]
    },
    {
        "function_id": "bpy.ops.font.text_insert_unicode",
        "signature": "bpy.ops.font.text_insert_unicode()#",
        "description": "Insert Unicode Character",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.font.text_paste",
        "signature": "bpy.ops.font.text_paste(selection=False)#",
        "description": "Paste text from clipboard",
        "parameters": [
            "selection=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.font.text_paste_from_file",
        "signature": "bpy.ops.font.text_paste_from_file(filepath='',hide_props_region=True,check_existing=False,filter_blender=False,filter_backup=False,filter_image=False,filter_movie=False,filter_python=False,filter_font=False,filter_sound=False,filter_text=True,filter_archive=False,filter_btx=False,filter_collada=False,filter_alembic=False,filter_usd=False,filter_obj=False,filter_volume=False,filter_folder=True,filter_blenlib=False,filemode=9,display_type='DEFAULT',sort_method='')#",
        "description": "Paste contents from file",
        "parameters": [
            "filepath=''",
            "hide_props_region=True",
            "check_existing=False",
            "filter_blender=False",
            "filter_backup=False",
            "filter_image=False",
            "filter_movie=False",
            "filter_python=False",
            "filter_font=False",
            "filter_sound=False",
            "filter_text=True",
            "filter_archive=False",
            "filter_btx=False",
            "filter_collada=False",
            "filter_alembic=False",
            "filter_usd=False",
            "filter_obj=False",
            "filter_volume=False",
            "filter_folder=True",
            "filter_blenlib=False",
            "filemode=9",
            "display_type='DEFAULT'",
            "sort_method=''"
        ],
        "parameter_descriptions": [
            "filepath(string,(optional,never None)) – File Path, Path to file",
            "hide_props_region(boolean,(optional)) – Hide Operator Properties, Collapse the region displaying the operator settings",
            "check_existing(boolean,(optional)) – Check Existing, Check and warn on overwriting existing files",
            "filter_blender(boolean,(optional)) – Filter .blend files",
            "filter_backup(boolean,(optional)) – Filter .blend files",
            "filter_image(boolean,(optional)) – Filter image files",
            "filter_movie(boolean,(optional)) – Filter movie files",
            "filter_python(boolean,(optional)) – Filter Python files",
            "filter_font(boolean,(optional)) – Filter font files",
            "filter_sound(boolean,(optional)) – Filter sound files",
            "filter_text(boolean,(optional)) – Filter text files",
            "filter_archive(boolean,(optional)) – Filter archive files",
            "filter_btx(boolean,(optional)) – Filter btx files",
            "filter_collada(boolean,(optional)) – Filter COLLADA files",
            "filter_alembic(boolean,(optional)) – Filter Alembic files",
            "filter_usd(boolean,(optional)) – Filter USD files",
            "filter_obj(boolean,(optional)) – Filter OBJ files",
            "filter_volume(boolean,(optional)) – Filter OpenVDB volume files",
            "filter_folder(boolean,(optional)) – Filter folders",
            "filter_blenlib(boolean,(optional)) – Filter Blender IDs",
            "filemode(int in[1,9],(optional)) – File Browser Mode, The setting for the file browser mode to load a .blend file, a library or a special file",
            "display_type(enum in['DEFAULT','LIST_VERTICAL','LIST_HORIZONTAL','THUMBNAIL'],(optional)) –Display TypeDEFAULTDefault – Automatically determine display type for files.LIST_VERTICALShort List – Display files as short list.LIST_HORIZONTALLong List – Display files as a detailed list.THUMBNAILThumbnails – Display files as thumbnails.",
            "DEFAULTDefault – Automatically determine display type for files.",
            "LIST_VERTICALShort List – Display files as short list.",
            "LIST_HORIZONTALLong List – Display files as a detailed list.",
            "THUMBNAILThumbnails – Display files as thumbnails.",
            "sort_method(enum in[],(optional)) – File sorting mode"
        ]
    },
    {
        "function_id": "bpy.ops.font.textbox_add",
        "signature": "bpy.ops.font.textbox_add()#",
        "description": "Add a new text box",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.font.textbox_remove",
        "signature": "bpy.ops.font.textbox_remove(index=0)#",
        "description": "Remove the text box",
        "parameters": [
            "index=0"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.font.unlink",
        "signature": "bpy.ops.font.unlink()#",
        "description": "Unlink active font data-block",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.import_scene.fbx",
        "signature": "bpy.ops.import_scene.fbx(filepath='',directory='',filter_glob='*.fbx',files=None,ui_tab='MAIN',use_manual_orientation=False,global_scale=1.0,bake_space_transform=False,use_custom_normals=True,colors_type='SRGB',use_image_search=True,use_alpha_decals=False,decal_offset=0.0,use_anim=True,anim_offset=1.0,use_subsurf=False,use_custom_props=True,use_custom_props_enum_as_string=True,ignore_leaf_bones=False,force_connect_children=False,automatic_bone_orientation=False,primary_bone_axis='Y',secondary_bone_axis='X',use_prepost_rot=True,axis_forward='-Z',axis_up='Y')#",
        "description": "Load a FBX file",
        "parameters": [
            "filepath=''",
            "directory=''",
            "filter_glob='*.fbx'",
            "files=None",
            "ui_tab='MAIN'",
            "use_manual_orientation=False",
            "global_scale=1.0",
            "bake_space_transform=False",
            "use_custom_normals=True",
            "colors_type='SRGB'",
            "use_image_search=True",
            "use_alpha_decals=False",
            "decal_offset=0.0",
            "use_anim=True",
            "anim_offset=1.0",
            "use_subsurf=False",
            "use_custom_props=True",
            "use_custom_props_enum_as_string=True",
            "ignore_leaf_bones=False",
            "force_connect_children=False",
            "automatic_bone_orientation=False",
            "primary_bone_axis='Y'",
            "secondary_bone_axis='X'",
            "use_prepost_rot=True",
            "axis_forward='-Z'",
            "axis_up='Y'"
        ],
        "parameter_descriptions": [
            "filepath(string,(optional,never None)) – File Path, Filepath used for importing the file",
            "directory(string,(optional,never None)) – directory",
            "filter_glob(string,(optional,never None)) – filter_glob",
            "files(bpy_prop_collectionofOperatorFileListElement, (optional)) – File Path",
            "ui_tab(enum in['MAIN','ARMATURE'],(optional)) –ui_tab, Import options categoriesMAINMain – Main basic settings.ARMATUREArmatures – Armature-related settings.",
            "MAINMain – Main basic settings.",
            "ARMATUREArmatures – Armature-related settings.",
            "use_manual_orientation(boolean,(optional)) – Manual Orientation, Specify orientation and scale, instead of using embedded data in FBX file",
            "global_scale(float in[0.001,1000],(optional)) – Scale",
            "bake_space_transform(boolean,(optional)) – Apply Transform, Bake space transform into object data, avoids getting unwanted rotations to objects when target space is not aligned with Blender’s space (WARNING! experimental option, use at own risk, known to be broken with armatures/animations)",
            "use_custom_normals(boolean,(optional)) – Custom Normals, Import custom normals, if available (otherwise Blender will recompute them)",
            "colors_type(enum in['NONE','SRGB','LINEAR'],(optional)) –Vertex Colors, Import vertex color attributesNONENone – Do not import color attributes.SRGBsRGB – Expect file colors in sRGB color space.LINEARLinear – Expect file colors in linear color space.",
            "NONENone – Do not import color attributes.",
            "SRGBsRGB – Expect file colors in sRGB color space.",
            "LINEARLinear – Expect file colors in linear color space.",
            "use_image_search(boolean,(optional)) – Image Search, Search subdirs for any associated images (WARNING: may be slow)",
            "use_alpha_decals(boolean,(optional)) – Alpha Decals, Treat materials with alpha as decals (no shadow casting)",
            "decal_offset(float in[0,1],(optional)) – Decal Offset, Displace geometry of alpha meshes",
            "use_anim(boolean,(optional)) – Import Animation, Import FBX animation",
            "anim_offset(float in[-inf,inf],(optional)) – Animation Offset, Offset to apply to animation during import, in frames",
            "use_subsurf(boolean,(optional)) – Subdivision Data, Import FBX subdivision information as subdivision surface modifiers",
            "use_custom_props(boolean,(optional)) – Custom Properties, Import user properties as custom properties",
            "use_custom_props_enum_as_string(boolean,(optional)) – Import Enums As Strings, Store enumeration values as strings",
            "ignore_leaf_bones(boolean,(optional)) – Ignore Leaf Bones, Ignore the last bone at the end of each chain (used to mark the length of the previous bone)",
            "force_connect_children(boolean,(optional)) – Force Connect Children, Force connection of children bones to their parent, even if their computed head/tail positions do not match (can be useful with pure-joints-type armatures)",
            "automatic_bone_orientation(boolean,(optional)) – Automatic Bone Orientation, Try to align the major bone axis with the bone children",
            "primary_bone_axis(enum in['X','Y','Z','-X','-Y','-Z'],(optional)) – Primary Bone Axis",
            "secondary_bone_axis(enum in['X','Y','Z','-X','-Y','-Z'],(optional)) – Secondary Bone Axis",
            "use_prepost_rot(boolean,(optional)) – Use Pre/Post Rotation, Use pre/post rotation from FBX transform (you may have to disable that in some cases)",
            "axis_forward(enum in['X','Y','Z','-X','-Y','-Z'],(optional)) – Forward",
            "axis_up(enum in['X','Y','Z','-X','-Y','-Z'],(optional)) – Up"
        ]
    },
    {
        "function_id": "bpy.ops.import_scene.gltf",
        "signature": "bpy.ops.import_scene.gltf(filepath='',export_import_convert_lighting_mode='SPEC',filter_glob='*.glb;*.gltf',files=None,loglevel=0,import_pack_images=True,merge_vertices=False,import_shading='NORMALS',bone_heuristic='BLENDER',disable_bone_shape=False,bone_shape_scale_factor=1.0,guess_original_bind_pose=True,import_webp_texture=False)#",
        "description": "Load a glTF 2.0 file",
        "parameters": [
            "filepath=''",
            "export_import_convert_lighting_mode='SPEC'",
            "filter_glob='*.glb;*.gltf'",
            "files=None",
            "loglevel=0",
            "import_pack_images=True",
            "merge_vertices=False",
            "import_shading='NORMALS'",
            "bone_heuristic='BLENDER'",
            "disable_bone_shape=False",
            "bone_shape_scale_factor=1.0",
            "guess_original_bind_pose=True",
            "import_webp_texture=False"
        ],
        "parameter_descriptions": [
            "filepath(string,(optional,never None)) – File Path, Filepath used for importing the file",
            "export_import_convert_lighting_mode(enum in['SPEC','COMPAT','RAW'],(optional)) –Lighting Mode, Optional backwards compatibility for non-standard render engines. Applies to lightsSPECStandard – Physically-based glTF lighting units (cd, lx, nt).COMPATUnitless – Non-physical, unitless lighting. Useful when exposure controls are not available.RAWRaw (Deprecated) – Blender lighting strengths with no conversion.",
            "SPECStandard – Physically-based glTF lighting units (cd, lx, nt).",
            "COMPATUnitless – Non-physical, unitless lighting. Useful when exposure controls are not available.",
            "RAWRaw (Deprecated) – Blender lighting strengths with no conversion.",
            "filter_glob(string,(optional,never None)) – filter_glob",
            "files(bpy_prop_collectionofOperatorFileListElement, (optional)) – File Path",
            "loglevel(int in[-inf,inf],(optional)) – Log Level, Log Level",
            "import_pack_images(boolean,(optional)) – Pack Images, Pack all images into .blend file",
            "merge_vertices(boolean,(optional)) – Merge Vertices, The glTF format requires discontinuous normals, UVs, and other vertex attributes to be stored as separate vertices, as required for rendering on typical graphics hardware. This option attempts to combine co-located vertices where possible. Currently cannot combine verts with different normals",
            "import_shading(enum in['NORMALS','FLAT','SMOOTH'],(optional)) – Shading, How normals are computed during import",
            "bone_heuristic(enum in['BLENDER','TEMPERANCE','FORTUNE'],(optional)) –Bone Dir, Heuristic for placing bones. Tries to make bones prettyBLENDERBlender (best for import/export round trip) – Good for re-importing glTFs exported from Blender, and re-exporting glTFs to glTFs after Blender editing. Bone tips are placed on their local +Y axis (in glTF space).TEMPERANCETemperance (average) – Decent all-around strategy. A bone with one child has its tip placed on the local axis closest to its child.FORTUNEFortune (may look better, less accurate) – Might look better than Temperance, but also might have errors. A bone with one child has its tip placed at its child’s root. Non-uniform scalings may get messed up though, so beware.",
            "BLENDERBlender (best for import/export round trip) – Good for re-importing glTFs exported from Blender, and re-exporting glTFs to glTFs after Blender editing. Bone tips are placed on their local +Y axis (in glTF space).",
            "TEMPERANCETemperance (average) – Decent all-around strategy. A bone with one child has its tip placed on the local axis closest to its child.",
            "FORTUNEFortune (may look better, less accurate) – Might look better than Temperance, but also might have errors. A bone with one child has its tip placed at its child’s root. Non-uniform scalings may get messed up though, so beware.",
            "disable_bone_shape(boolean,(optional)) – Disable Bone Shape, Do not create bone shapes",
            "bone_shape_scale_factor(float in[-inf,inf],(optional)) – Bone Shape Scale, Scale factor for bone shapes",
            "guess_original_bind_pose(boolean,(optional)) – Guess Original Bind Pose, Try to guess the original bind pose for skinned meshes from the inverse bind matrices. When off, use default/rest pose as bind pose",
            "import_webp_texture(boolean,(optional)) – Import WebP textures, If a texture exists in WebP format, loads the WebP texture instead of the fallback PNG/JPEG one"
        ]
    },
    {
        "function_id": "bpy.ops.sculpt.brush_stroke",
        "signature": "bpy.ops.sculpt.brush_stroke(stroke=None,mode='NORMAL',ignore_background_click=False)#",
        "description": "Sculpt a stroke into the geometry",
        "parameters": [
            "stroke=None",
            "mode='NORMAL'",
            "ignore_background_click=False"
        ],
        "parameter_descriptions": [
            "stroke(bpy_prop_collectionofOperatorStrokeElement, (optional)) – Stroke",
            "mode(enum in['NORMAL','INVERT','SMOOTH'],(optional)) –Stroke Mode, Action taken when a paint stroke is madeNORMALRegular – Apply brush normally.INVERTInvert – Invert action of brush for duration of stroke.SMOOTHSmooth – Switch brush to smooth mode for duration of stroke.",
            "NORMALRegular – Apply brush normally.",
            "INVERTInvert – Invert action of brush for duration of stroke.",
            "SMOOTHSmooth – Switch brush to smooth mode for duration of stroke.",
            "ignore_background_click(boolean,(optional)) – Ignore Background Click, Clicks on the background do not start the stroke"
        ]
    },
    {
        "function_id": "bpy.ops.sculpt.cloth_filter",
        "signature": "bpy.ops.sculpt.cloth_filter(start_mouse=(0,0),area_normal_radius=0.25,strength=1.0,iteration_count=1,event_history=None,type='GRAVITY',force_axis={'X','Y','Z'},orientation='LOCAL',cloth_mass=1.0,cloth_damping=0.0,use_face_sets=False,use_collisions=False)#",
        "description": "Applies a cloth simulation deformation to the entire mesh",
        "parameters": [
            "start_mouse=(0,0)",
            "area_normal_radius=0.25",
            "strength=1.0",
            "iteration_count=1",
            "event_history=None",
            "type='GRAVITY'",
            "force_axis={'X','Y','Z'}",
            "orientation='LOCAL'",
            "cloth_mass=1.0",
            "cloth_damping=0.0",
            "use_face_sets=False",
            "use_collisions=False"
        ],
        "parameter_descriptions": [
            "start_mouse(int arrayof2 items in[0,16384],(optional)) – Starting Mouse",
            "area_normal_radius(float in[0.001,5],(optional)) – Normal Radius, Radius used for calculating area normal on initial click,in percentage of brush radius",
            "strength(float in[-10,10],(optional)) – Strength, Filter strength",
            "iteration_count(int in[1,10000],(optional)) – Repeat, How many times to repeat the filter",
            "type(enum in['GRAVITY','INFLATE','EXPAND','PINCH','SCALE'],(optional)) –Filter Type, Operation that is going to be applied to the meshGRAVITYGravity – Applies gravity to the simulation.INFLATEInflate – Inflates the cloth.EXPANDExpand – Expands the cloth’s dimensions.PINCHPinch – Pulls the cloth to the cursor’s start position.SCALEScale – Scales the mesh as a soft body using the origin of the object as scale.",
            "GRAVITYGravity – Applies gravity to the simulation.",
            "INFLATEInflate – Inflates the cloth.",
            "EXPANDExpand – Expands the cloth’s dimensions.",
            "PINCHPinch – Pulls the cloth to the cursor’s start position.",
            "SCALEScale – Scales the mesh as a soft body using the origin of the object as scale.",
            "force_axis(enum set in {'X','Y','Z'},(optional)) –Force Axis, Apply the force in the selected axisXX – Apply force in the X axis.YY – Apply force in the Y axis.ZZ – Apply force in the Z axis.",
            "XX – Apply force in the X axis.",
            "YY – Apply force in the Y axis.",
            "ZZ – Apply force in the Z axis.",
            "orientation(enum in['LOCAL','WORLD','VIEW'],(optional)) –Orientation, Orientation of the axis to limit the filter forceLOCALLocal – Use the local axis to limit the force and set the gravity direction.WORLDWorld – Use the global axis to limit the force and set the gravity direction.VIEWView – Use the view axis to limit the force and set the gravity direction.",
            "LOCALLocal – Use the local axis to limit the force and set the gravity direction.",
            "WORLDWorld – Use the global axis to limit the force and set the gravity direction.",
            "VIEWView – Use the view axis to limit the force and set the gravity direction.",
            "cloth_mass(float in[0,2],(optional)) – Cloth Mass, Mass of each simulation particle",
            "cloth_damping(float in[0,1],(optional)) – Cloth Damping, How much the applied forces are propagated through the cloth",
            "use_face_sets(boolean,(optional)) – Use Face Sets, Apply the filter only to the Face Set under the cursor",
            "use_collisions(boolean,(optional)) – Use Collisions, Collide with other collider objects in the scene"
        ]
    },
    {
        "function_id": "bpy.ops.sculpt.color_filter",
        "signature": "bpy.ops.sculpt.color_filter(start_mouse=(0,0),area_normal_radius=0.25,strength=1.0,iteration_count=1,event_history=None,type='FILL',fill_color=(1.0,1.0,1.0))#",
        "description": "Applies a filter to modify the active color attribute",
        "parameters": [
            "start_mouse=(0,0)",
            "area_normal_radius=0.25",
            "strength=1.0",
            "iteration_count=1",
            "event_history=None",
            "type='FILL'",
            "fill_color=(1.0,1.0,1.0)"
        ],
        "parameter_descriptions": [
            "start_mouse(int arrayof2 items in[0,16384],(optional)) – Starting Mouse",
            "area_normal_radius(float in[0.001,5],(optional)) – Normal Radius, Radius used for calculating area normal on initial click,in percentage of brush radius",
            "strength(float in[-10,10],(optional)) – Strength, Filter strength",
            "iteration_count(int in[1,10000],(optional)) – Repeat, How many times to repeat the filter",
            "type(enum in['FILL','HUE','SATURATION','VALUE','BRIGHTNESS','CONTRAST','SMOOTH','RED','GREEN','BLUE'],(optional)) –Filter TypeFILLFill – Fill with a specific color.HUEHue – Change hue.SATURATIONSaturation – Change saturation.VALUEValue – Change value.BRIGHTNESSBrightness – Change brightness.CONTRASTContrast – Change contrast.SMOOTHSmooth – Smooth colors.REDRed – Change red channel.GREENGreen – Change green channel.BLUEBlue – Change blue channel.",
            "FILLFill – Fill with a specific color.",
            "HUEHue – Change hue.",
            "SATURATIONSaturation – Change saturation.",
            "VALUEValue – Change value.",
            "BRIGHTNESSBrightness – Change brightness.",
            "CONTRASTContrast – Change contrast.",
            "SMOOTHSmooth – Smooth colors.",
            "REDRed – Change red channel.",
            "GREENGreen – Change green channel.",
            "BLUEBlue – Change blue channel.",
            "fill_color(mathutils.Colorof 3 items in [0, inf], (optional)) – Fill Color"
        ]
    },
    {
        "function_id": "bpy.ops.sculpt.detail_flood_fill",
        "signature": "bpy.ops.sculpt.detail_flood_fill()#",
        "description": "Flood fill the mesh with the selected detail setting",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.sculpt.dynamic_topology_toggle",
        "signature": "bpy.ops.sculpt.dynamic_topology_toggle()#",
        "description": "Dynamic topology alters the mesh topology while sculpting",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.sculpt.dyntopo_detail_size_edit",
        "signature": "bpy.ops.sculpt.dyntopo_detail_size_edit()#",
        "description": "Modify the detail size of dyntopo interactively",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.sculpt.expand",
        "signature": "bpy.ops.sculpt.expand(target='MASK',falloff_type='GEODESIC',invert=False,use_mask_preserve=False,use_falloff_gradient=False,use_modify_active=False,use_reposition_pivot=True,max_geodesic_move_preview=10000,use_auto_mask=False,normal_falloff_smooth=2)#",
        "description": "Generic sculpt expand operator",
        "parameters": [
            "target='MASK'",
            "falloff_type='GEODESIC'",
            "invert=False",
            "use_mask_preserve=False",
            "use_falloff_gradient=False",
            "use_modify_active=False",
            "use_reposition_pivot=True",
            "max_geodesic_move_preview=10000",
            "use_auto_mask=False",
            "normal_falloff_smooth=2"
        ],
        "parameter_descriptions": [
            "target(enum in['MASK','FACE_SETS','COLOR'],(optional)) – Data Target, Data that is going to be modified in the expand operation",
            "falloff_type(enum in['GEODESIC','TOPOLOGY','TOPOLOGY_DIAGONALS','NORMALS','SPHERICAL','BOUNDARY_TOPOLOGY','BOUNDARY_FACE_SET','ACTIVE_FACE_SET'],(optional)) – Falloff Type, Initial falloff of the expand operation",
            "invert(boolean,(optional)) – Invert, Invert the expand active elements",
            "use_mask_preserve(boolean,(optional)) – Preserve Previous, Preserve the previous state of the target data",
            "use_falloff_gradient(boolean,(optional)) – Falloff Gradient, Expand Using a linear falloff",
            "use_modify_active(boolean,(optional)) – Modify Active, Modify the active Face Set instead of creating a new one",
            "use_reposition_pivot(boolean,(optional)) – Reposition Pivot, Reposition the sculpt transform pivot to the boundary of the expand active area",
            "max_geodesic_move_preview(int in[0,inf],(optional)) – Max Vertex Count for Geodesic Move Preview, Maximum number of vertices in the mesh for using geodesic falloff when moving the origin of expand. If the total number of vertices is greater than this value, the falloff will be set to spherical when moving",
            "use_auto_mask(boolean,(optional)) – Auto Create, Fill in mask if nothing is already masked",
            "normal_falloff_smooth(int in[0,10],(optional)) – Normal Smooth, Blurring steps for normal falloff"
        ]
    },
    {
        "function_id": "bpy.ops.sculpt.face_set_box_gesture",
        "signature": "bpy.ops.sculpt.face_set_box_gesture(xmin=0,xmax=0,ymin=0,ymax=0,wait_for_input=True,use_front_faces_only=False)#",
        "description": "Add a face set in a rectangle defined by the cursor",
        "parameters": [
            "xmin=0",
            "xmax=0",
            "ymin=0",
            "ymax=0",
            "wait_for_input=True",
            "use_front_faces_only=False"
        ],
        "parameter_descriptions": [
            "xmin(int in[-inf,inf],(optional)) – X Min",
            "xmax(int in[-inf,inf],(optional)) – X Max",
            "ymin(int in[-inf,inf],(optional)) – Y Min",
            "ymax(int in[-inf,inf],(optional)) – Y Max",
            "wait_for_input(boolean,(optional)) – Wait for Input",
            "use_front_faces_only(boolean,(optional)) – Front Faces Only, Affect only faces facing towards the view"
        ]
    },
    {
        "function_id": "bpy.ops.sculpt.face_set_change_visibility",
        "signature": "bpy.ops.sculpt.face_set_change_visibility(mode='TOGGLE')#",
        "description": "Change the visibility of the Face Sets of the sculpt",
        "parameters": [
            "mode='TOGGLE'"
        ],
        "parameter_descriptions": [
            "TOGGLEToggle Visibility – Hide all Face Sets except for the active one.",
            "SHOW_ACTIVEShow Active Face Set – Show Active Face Set.",
            "HIDE_ACTIVEHide Active Face Sets – Hide Active Face Sets."
        ]
    },
    {
        "function_id": "bpy.ops.sculpt.face_set_edit",
        "signature": "bpy.ops.sculpt.face_set_edit(active_face_set=1,mode='GROW',strength=1.0,modify_hidden=False)#",
        "description": "Edits the current active Face Set",
        "parameters": [
            "active_face_set=1",
            "mode='GROW'",
            "strength=1.0",
            "modify_hidden=False"
        ],
        "parameter_descriptions": [
            "active_face_set(int in[0,inf],(optional)) – Active Face Set",
            "mode(enum in['GROW','SHRINK','DELETE_GEOMETRY','FAIR_POSITIONS','FAIR_TANGENCY'],(optional)) –ModeGROWGrow Face Set – Grows the Face Sets boundary by one face based on mesh topology.SHRINKShrink Face Set – Shrinks the Face Sets boundary by one face based on mesh topology.DELETE_GEOMETRYDelete Geometry – Deletes the faces that are assigned to the Face Set.FAIR_POSITIONSFair Positions – Creates a smooth as possible geometry patch from the Face Set minimizing changes in vertex positions.FAIR_TANGENCYFair Tangency – Creates a smooth as possible geometry patch from the Face Set minimizing changes in vertex tangents.",
            "GROWGrow Face Set – Grows the Face Sets boundary by one face based on mesh topology.",
            "SHRINKShrink Face Set – Shrinks the Face Sets boundary by one face based on mesh topology.",
            "DELETE_GEOMETRYDelete Geometry – Deletes the faces that are assigned to the Face Set.",
            "FAIR_POSITIONSFair Positions – Creates a smooth as possible geometry patch from the Face Set minimizing changes in vertex positions.",
            "FAIR_TANGENCYFair Tangency – Creates a smooth as possible geometry patch from the Face Set minimizing changes in vertex tangents.",
            "strength(float in[0,1],(optional)) – Strength",
            "modify_hidden(boolean,(optional)) – Modify Hidden, Apply the edit operation to hidden geometry"
        ]
    },
    {
        "function_id": "bpy.ops.sculpt.face_set_lasso_gesture",
        "signature": "bpy.ops.sculpt.face_set_lasso_gesture(path=None,use_front_faces_only=False)#",
        "description": "Add a face set in a shape defined by the cursor",
        "parameters": [
            "path=None",
            "use_front_faces_only=False"
        ],
        "parameter_descriptions": [
            "path(bpy_prop_collectionofOperatorMousePath, (optional)) – Path",
            "use_front_faces_only(boolean,(optional)) – Front Faces Only, Affect only faces facing towards the view"
        ]
    },
    {
        "function_id": "bpy.ops.sculpt.face_set_line_gesture",
        "signature": "bpy.ops.sculpt.face_set_line_gesture(xstart=0,xend=0,ystart=0,yend=0,flip=False,cursor=5,use_front_faces_only=False,use_limit_to_segment=False)#",
        "description": "Add a face set to one side of a line defined by the cursor",
        "parameters": [
            "xstart=0",
            "xend=0",
            "ystart=0",
            "yend=0",
            "flip=False",
            "cursor=5",
            "use_front_faces_only=False",
            "use_limit_to_segment=False"
        ],
        "parameter_descriptions": [
            "xstart(int in[-inf,inf],(optional)) – X Start",
            "xend(int in[-inf,inf],(optional)) – X End",
            "ystart(int in[-inf,inf],(optional)) – Y Start",
            "yend(int in[-inf,inf],(optional)) – Y End",
            "flip(boolean,(optional)) – Flip",
            "cursor(int in[0,inf],(optional)) – Cursor, Mouse cursor style to use during the modal operator",
            "use_front_faces_only(boolean,(optional)) – Front Faces Only, Affect only faces facing towards the view",
            "use_limit_to_segment(boolean,(optional)) – Limit to Segment, Apply the gesture action only to the area that is contained within the segment without extending its effect to the entire line"
        ]
    },
    {
        "function_id": "bpy.ops.sculpt.face_set_polyline_gesture",
        "signature": "bpy.ops.sculpt.face_set_polyline_gesture(path=None,use_front_faces_only=False)#",
        "description": "Add a face set in a shape defined by the cursor",
        "parameters": [
            "path=None",
            "use_front_faces_only=False"
        ],
        "parameter_descriptions": [
            "path(bpy_prop_collectionofOperatorMousePath, (optional)) – Path",
            "use_front_faces_only(boolean,(optional)) – Front Faces Only, Affect only faces facing towards the view"
        ]
    },
    {
        "function_id": "bpy.ops.sculpt.face_sets_create",
        "signature": "bpy.ops.sculpt.face_sets_create(mode='MASKED')#",
        "description": "Create a new Face Set",
        "parameters": [
            "mode='MASKED'"
        ],
        "parameter_descriptions": [
            "MASKEDFace Set from Masked – Create a new Face Set from the masked faces.",
            "VISIBLEFace Set from Visible – Create a new Face Set from the visible vertices.",
            "ALLFace Set Full Mesh – Create an unique Face Set with all faces in the sculpt.",
            "SELECTIONFace Set from Edit Mode Selection – Create an Face Set corresponding to the Edit Mode face selection."
        ]
    },
    {
        "function_id": "bpy.ops.sculpt.face_sets_init",
        "signature": "bpy.ops.sculpt.face_sets_init(mode='LOOSE_PARTS',threshold=0.5)#",
        "description": "Initializes all Face Sets in the mesh",
        "parameters": [
            "mode='LOOSE_PARTS'",
            "threshold=0.5"
        ],
        "parameter_descriptions": [
            "mode(enum in['LOOSE_PARTS','MATERIALS','NORMALS','UV_SEAMS','CREASES','BEVEL_WEIGHT','SHARP_EDGES','FACE_SET_BOUNDARIES'],(optional)) –ModeLOOSE_PARTSFace Sets from Loose Parts – Create a Face Set per loose part in the mesh.MATERIALSFace Sets from Material Slots – Create a Face Set per Material Slot.NORMALSFace Sets from Mesh Normals – Create Face Sets for Faces that have similar normal.UV_SEAMSFace Sets from UV Seams – Create Face Sets using UV Seams as boundaries.CREASESFace Sets from Edge Creases – Create Face Sets using Edge Creases as boundaries.BEVEL_WEIGHTFace Sets from Bevel Weight – Create Face Sets using Bevel Weights as boundaries.SHARP_EDGESFace Sets from Sharp Edges – Create Face Sets using Sharp Edges as boundaries.FACE_SET_BOUNDARIESFace Sets from Face Set Boundaries – Create a Face Set per isolated Face Set.",
            "LOOSE_PARTSFace Sets from Loose Parts – Create a Face Set per loose part in the mesh.",
            "MATERIALSFace Sets from Material Slots – Create a Face Set per Material Slot.",
            "NORMALSFace Sets from Mesh Normals – Create Face Sets for Faces that have similar normal.",
            "UV_SEAMSFace Sets from UV Seams – Create Face Sets using UV Seams as boundaries.",
            "CREASESFace Sets from Edge Creases – Create Face Sets using Edge Creases as boundaries.",
            "BEVEL_WEIGHTFace Sets from Bevel Weight – Create Face Sets using Bevel Weights as boundaries.",
            "SHARP_EDGESFace Sets from Sharp Edges – Create Face Sets using Sharp Edges as boundaries.",
            "FACE_SET_BOUNDARIESFace Sets from Face Set Boundaries – Create a Face Set per isolated Face Set.",
            "threshold(float in[0,1],(optional)) – Threshold, Minimum value to consider a certain attribute a boundary when creating the Face Sets"
        ]
    },
    {
        "function_id": "bpy.ops.sculpt.face_sets_randomize_colors",
        "signature": "bpy.ops.sculpt.face_sets_randomize_colors()#",
        "description": "Generates a new set of random colors to render the Face Sets in the viewport",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.sculpt.mask_by_color",
        "signature": "bpy.ops.sculpt.mask_by_color(contiguous=False,invert=False,preserve_previous_mask=False,threshold=0.35)#",
        "description": "Creates a mask based on the active color attribute",
        "parameters": [
            "contiguous=False",
            "invert=False",
            "preserve_previous_mask=False",
            "threshold=0.35"
        ],
        "parameter_descriptions": [
            "contiguous(boolean,(optional)) – Contiguous, Mask only contiguous color areas",
            "invert(boolean,(optional)) – Invert, Invert the generated mask",
            "preserve_previous_mask(boolean,(optional)) – Preserve Previous Mask, Preserve the previous mask and add or subtract the new one generated by the colors",
            "threshold(float in[0,1],(optional)) – Threshold, How much changes in color affect the mask generation"
        ]
    },
    {
        "function_id": "bpy.ops.sculpt.mask_filter",
        "signature": "bpy.ops.sculpt.mask_filter(filter_type='SMOOTH',iterations=1,auto_iteration_count=True)#",
        "description": "Applies a filter to modify the current mask",
        "parameters": [
            "filter_type='SMOOTH'",
            "iterations=1",
            "auto_iteration_count=True"
        ],
        "parameter_descriptions": [
            "filter_type(enum in['SMOOTH','SHARPEN','GROW','SHRINK','CONTRAST_INCREASE','CONTRAST_DECREASE'],(optional)) – Type, Filter that is going to be applied to the mask",
            "iterations(int in[1,100],(optional)) – Iterations, Number of times that the filter is going to be applied",
            "auto_iteration_count(boolean,(optional)) – Auto Iteration Count, Use an automatic number of iterations based on the number of vertices of the sculpt"
        ]
    },
    {
        "function_id": "bpy.ops.sculpt.mask_from_cavity",
        "signature": "bpy.ops.sculpt.mask_from_cavity(mix_mode='MIX',mix_factor=1.0,settings_source='OPERATOR',factor=0.5,blur_steps=2,use_curve=False,invert=False)#",
        "description": "Creates a mask based on the curvature of the surface",
        "parameters": [
            "mix_mode='MIX'",
            "mix_factor=1.0",
            "settings_source='OPERATOR'",
            "factor=0.5",
            "blur_steps=2",
            "use_curve=False",
            "invert=False"
        ],
        "parameter_descriptions": [
            "mix_mode(enum in['MIX','MULTIPLY','DIVIDE','ADD','SUBTRACT'],(optional)) – Mode, Mix mode",
            "mix_factor(float in[0,5],(optional)) – Mix Factor",
            "settings_source(enum in['OPERATOR','BRUSH','SCENE'],(optional)) –Settings, Use settings from hereOPERATOROperator – Use settings from operator properties.BRUSHBrush – Use settings from brush.SCENEScene – Use settings from scene.",
            "OPERATOROperator – Use settings from operator properties.",
            "BRUSHBrush – Use settings from brush.",
            "SCENEScene – Use settings from scene.",
            "factor(float in[0,5],(optional)) – Factor, The contrast of the cavity mask",
            "blur_steps(int in[0,25],(optional)) – Blur, The number of times the cavity mask is blurred",
            "use_curve(boolean,(optional)) – Custom Curve",
            "invert(boolean,(optional)) – Cavity (Inverted)"
        ]
    },
    {
        "function_id": "bpy.ops.sculpt.mask_init",
        "signature": "bpy.ops.sculpt.mask_init(mode='RANDOM_PER_VERTEX')#",
        "description": "Creates a new mask for the entire mesh",
        "parameters": [
            "mode='RANDOM_PER_VERTEX'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.sculpt.mesh_filter",
        "signature": "bpy.ops.sculpt.mesh_filter(start_mouse=(0,0),area_normal_radius=0.25,strength=1.0,iteration_count=1,event_history=None,type='INFLATE',deform_axis={'X','Y','Z'},orientation='LOCAL',surface_smooth_shape_preservation=0.5,surface_smooth_current_vertex=0.5,sharpen_smooth_ratio=0.35,sharpen_intensify_detail_strength=0.0,sharpen_curvature_smooth_iterations=0)#",
        "description": "Applies a filter to modify the current mesh",
        "parameters": [
            "start_mouse=(0,0)",
            "area_normal_radius=0.25",
            "strength=1.0",
            "iteration_count=1",
            "event_history=None",
            "type='INFLATE'",
            "deform_axis={'X','Y','Z'}",
            "orientation='LOCAL'",
            "surface_smooth_shape_preservation=0.5",
            "surface_smooth_current_vertex=0.5",
            "sharpen_smooth_ratio=0.35",
            "sharpen_intensify_detail_strength=0.0",
            "sharpen_curvature_smooth_iterations=0"
        ],
        "parameter_descriptions": [
            "start_mouse(int arrayof2 items in[0,16384],(optional)) – Starting Mouse",
            "area_normal_radius(float in[0.001,5],(optional)) – Normal Radius, Radius used for calculating area normal on initial click,in percentage of brush radius",
            "strength(float in[-10,10],(optional)) – Strength, Filter strength",
            "iteration_count(int in[1,10000],(optional)) – Repeat, How many times to repeat the filter",
            "type(enum in['SMOOTH','SCALE','INFLATE','SPHERE','RANDOM','RELAX','RELAX_FACE_SETS','SURFACE_SMOOTH','SHARPEN','ENHANCE_DETAILS','ERASE_DISCPLACEMENT'],(optional)) –Filter Type, Operation that is going to be applied to the meshSMOOTHSmooth – Smooth mesh.SCALEScale – Scale mesh.INFLATEInflate – Inflate mesh.SPHERESphere – Morph into sphere.RANDOMRandom – Randomize vertex positions.RELAXRelax – Relax mesh.RELAX_FACE_SETSRelax Face Sets – Smooth the edges of all the Face Sets.SURFACE_SMOOTHSurface Smooth – Smooth the surface of the mesh, preserving the volume.SHARPENSharpen – Sharpen the cavities of the mesh.ENHANCE_DETAILSEnhance Details – Enhance the high frequency surface detail.ERASE_DISCPLACEMENTErase Displacement – Deletes the displacement of the Multires Modifier.",
            "SMOOTHSmooth – Smooth mesh.",
            "SCALEScale – Scale mesh.",
            "INFLATEInflate – Inflate mesh.",
            "SPHERESphere – Morph into sphere.",
            "RANDOMRandom – Randomize vertex positions.",
            "RELAXRelax – Relax mesh.",
            "RELAX_FACE_SETSRelax Face Sets – Smooth the edges of all the Face Sets.",
            "SURFACE_SMOOTHSurface Smooth – Smooth the surface of the mesh, preserving the volume.",
            "SHARPENSharpen – Sharpen the cavities of the mesh.",
            "ENHANCE_DETAILSEnhance Details – Enhance the high frequency surface detail.",
            "ERASE_DISCPLACEMENTErase Displacement – Deletes the displacement of the Multires Modifier.",
            "deform_axis(enum set in {'X','Y','Z'},(optional)) –Deform Axis, Apply the deformation in the selected axisXX – Deform in the X axis.YY – Deform in the Y axis.ZZ – Deform in the Z axis.",
            "XX – Deform in the X axis.",
            "YY – Deform in the Y axis.",
            "ZZ – Deform in the Z axis.",
            "orientation(enum in['LOCAL','WORLD','VIEW'],(optional)) –Orientation, Orientation of the axis to limit the filter displacementLOCALLocal – Use the local axis to limit the displacement.WORLDWorld – Use the global axis to limit the displacement.VIEWView – Use the view axis to limit the displacement.",
            "LOCALLocal – Use the local axis to limit the displacement.",
            "WORLDWorld – Use the global axis to limit the displacement.",
            "VIEWView – Use the view axis to limit the displacement.",
            "surface_smooth_shape_preservation(float in[0,1],(optional)) – Shape Preservation, How much of the original shape is preserved when smoothing",
            "surface_smooth_current_vertex(float in[0,1],(optional)) – Per Vertex Displacement, How much the position of each individual vertex influences the final result",
            "sharpen_smooth_ratio(float in[0,1],(optional)) – Smooth Ratio, How much smoothing is applied to polished surfaces",
            "sharpen_intensify_detail_strength(float in[0,10],(optional)) – Intensify Details, How much creases and valleys are intensified",
            "sharpen_curvature_smooth_iterations(int in[0,10],(optional)) – Curvature Smooth Iterations, How much smooth the resulting shape is, ignoring high frequency details"
        ]
    },
    {
        "function_id": "bpy.ops.sculpt.optimize",
        "signature": "bpy.ops.sculpt.optimize()#",
        "description": "Recalculate the sculpt BVH to improve performance",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.sculpt.project_line_gesture",
        "signature": "bpy.ops.sculpt.project_line_gesture(xstart=0,xend=0,ystart=0,yend=0,flip=False,cursor=5,use_front_faces_only=False,use_limit_to_segment=False)#",
        "description": "Project the geometry onto a plane defined by a line",
        "parameters": [
            "xstart=0",
            "xend=0",
            "ystart=0",
            "yend=0",
            "flip=False",
            "cursor=5",
            "use_front_faces_only=False",
            "use_limit_to_segment=False"
        ],
        "parameter_descriptions": [
            "xstart(int in[-inf,inf],(optional)) – X Start",
            "xend(int in[-inf,inf],(optional)) – X End",
            "ystart(int in[-inf,inf],(optional)) – Y Start",
            "yend(int in[-inf,inf],(optional)) – Y End",
            "flip(boolean,(optional)) – Flip",
            "cursor(int in[0,inf],(optional)) – Cursor, Mouse cursor style to use during the modal operator",
            "use_front_faces_only(boolean,(optional)) – Front Faces Only, Affect only faces facing towards the view",
            "use_limit_to_segment(boolean,(optional)) – Limit to Segment, Apply the gesture action only to the area that is contained within the segment without extending its effect to the entire line"
        ]
    },
    {
        "function_id": "bpy.ops.sculpt.sample_color",
        "signature": "bpy.ops.sculpt.sample_color()#",
        "description": "Sample the vertex color of the active vertex",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.sculpt.sample_detail_size",
        "signature": "bpy.ops.sculpt.sample_detail_size(location=(0,0),mode='DYNTOPO')#",
        "description": "Sample the mesh detail on clicked point",
        "parameters": [
            "location=(0,0)",
            "mode='DYNTOPO'"
        ],
        "parameter_descriptions": [
            "location(int arrayof2 items in[0,32767],(optional)) – Location, Screen coordinates of sampling",
            "mode(enum in['DYNTOPO','VOXEL'],(optional)) –Detail Mode, Target sculpting workflow that is going to use the sampled sizeDYNTOPODyntopo – Sample dyntopo detail.VOXELVoxel – Sample mesh voxel size.",
            "DYNTOPODyntopo – Sample dyntopo detail.",
            "VOXELVoxel – Sample mesh voxel size."
        ]
    },
    {
        "function_id": "bpy.ops.sculpt.sculptmode_toggle",
        "signature": "bpy.ops.sculpt.sculptmode_toggle()#",
        "description": "Toggle sculpt mode in 3D view",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.sculpt.set_persistent_base",
        "signature": "bpy.ops.sculpt.set_persistent_base()#",
        "description": "Reset the copy of the mesh that is being sculpted on",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.sculpt.set_pivot_position",
        "signature": "bpy.ops.sculpt.set_pivot_position(mode='UNMASKED',mouse_x=0.0,mouse_y=0.0)#",
        "description": "Sets the sculpt transform pivot position",
        "parameters": [
            "mode='UNMASKED'",
            "mouse_x=0.0",
            "mouse_y=0.0"
        ],
        "parameter_descriptions": [
            "mode(enum in['ORIGIN','UNMASKED','BORDER','ACTIVE','SURFACE'],(optional)) –ModeORIGINOrigin – Sets the pivot to the origin of the sculpt.UNMASKEDUnmasked – Sets the pivot position to the average position of the unmasked vertices.BORDERMask Border – Sets the pivot position to the center of the border of the mask.ACTIVEActive Vertex – Sets the pivot position to the active vertex position.SURFACESurface – Sets the pivot position to the surface under the cursor.",
            "ORIGINOrigin – Sets the pivot to the origin of the sculpt.",
            "UNMASKEDUnmasked – Sets the pivot position to the average position of the unmasked vertices.",
            "BORDERMask Border – Sets the pivot position to the center of the border of the mask.",
            "ACTIVEActive Vertex – Sets the pivot position to the active vertex position.",
            "SURFACESurface – Sets the pivot position to the surface under the cursor.",
            "mouse_x(float in[0,inf],(optional)) – Mouse Position X, Position of the mouse used for “Surface” mode",
            "mouse_y(float in[0,inf],(optional)) – Mouse Position Y, Position of the mouse used for “Surface” mode"
        ]
    },
    {
        "function_id": "bpy.ops.sculpt.symmetrize",
        "signature": "bpy.ops.sculpt.symmetrize(merge_tolerance=0.0005)#",
        "description": "Symmetrize the topology modifications",
        "parameters": [
            "merge_tolerance=0.0005"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.sculpt.trim_box_gesture",
        "signature": "bpy.ops.sculpt.trim_box_gesture(xmin=0,xmax=0,ymin=0,ymax=0,wait_for_input=True,use_front_faces_only=False,location=(0,0),trim_mode='DIFFERENCE',use_cursor_depth=False,trim_orientation='VIEW',trim_extrude_mode='FIXED',trim_solver='FAST')#",
        "description": "Execute a boolean operation on the mesh and a rectangle defined by the cursor",
        "parameters": [
            "xmin=0",
            "xmax=0",
            "ymin=0",
            "ymax=0",
            "wait_for_input=True",
            "use_front_faces_only=False",
            "location=(0,0)",
            "trim_mode='DIFFERENCE'",
            "use_cursor_depth=False",
            "trim_orientation='VIEW'",
            "trim_extrude_mode='FIXED'",
            "trim_solver='FAST'"
        ],
        "parameter_descriptions": [
            "xmin(int in[-inf,inf],(optional)) – X Min",
            "xmax(int in[-inf,inf],(optional)) – X Max",
            "ymin(int in[-inf,inf],(optional)) – Y Min",
            "ymax(int in[-inf,inf],(optional)) – Y Max",
            "wait_for_input(boolean,(optional)) – Wait for Input",
            "use_front_faces_only(boolean,(optional)) – Front Faces Only, Affect only faces facing towards the view",
            "location(int arrayof2 items in[-inf,inf],(optional)) – Location, Mouse location",
            "trim_mode(enum in['DIFFERENCE','UNION','JOIN'],(optional)) –Trim ModeDIFFERENCEDifference – Use a difference boolean operation.UNIONUnion – Use a union boolean operation.JOINJoin – Join the new mesh as separate geometry, without performing any boolean operation.",
            "DIFFERENCEDifference – Use a difference boolean operation.",
            "UNIONUnion – Use a union boolean operation.",
            "JOINJoin – Join the new mesh as separate geometry, without performing any boolean operation.",
            "use_cursor_depth(boolean,(optional)) – Use Cursor for Depth, Use cursor location and radius for the dimensions and position of the trimming shape",
            "trim_orientation(enum in['VIEW','SURFACE'],(optional)) –Shape OrientationVIEWView – Use the view to orientate the trimming shape.SURFACESurface – Use the surface normal to orientate the trimming shape.",
            "VIEWView – Use the view to orientate the trimming shape.",
            "SURFACESurface – Use the surface normal to orientate the trimming shape.",
            "trim_extrude_mode(enum in['PROJECT','FIXED'],(optional)) –Extrude ModePROJECTProject – Align trim geometry with the perspective of the current view for a tapered shape.FIXEDFixed – Align trim geometry orthogonally for a shape with 90 degree angles.",
            "PROJECTProject – Align trim geometry with the perspective of the current view for a tapered shape.",
            "FIXEDFixed – Align trim geometry orthogonally for a shape with 90 degree angles.",
            "trim_solver(enum in['EXACT','FAST'],(optional)) –SolverEXACTExact – Use the exact boolean solver.FASTFast – Use the fast float boolean solver.",
            "EXACTExact – Use the exact boolean solver.",
            "FASTFast – Use the fast float boolean solver."
        ]
    },
    {
        "function_id": "bpy.ops.sculpt.trim_lasso_gesture",
        "signature": "bpy.ops.sculpt.trim_lasso_gesture(path=None,use_front_faces_only=False,location=(0,0),trim_mode='DIFFERENCE',use_cursor_depth=False,trim_orientation='VIEW',trim_extrude_mode='FIXED',trim_solver='FAST')#",
        "description": "Execute a boolean operation on the mesh and a shape defined by the cursor",
        "parameters": [
            "path=None",
            "use_front_faces_only=False",
            "location=(0,0)",
            "trim_mode='DIFFERENCE'",
            "use_cursor_depth=False",
            "trim_orientation='VIEW'",
            "trim_extrude_mode='FIXED'",
            "trim_solver='FAST'"
        ],
        "parameter_descriptions": [
            "path(bpy_prop_collectionofOperatorMousePath, (optional)) – Path",
            "use_front_faces_only(boolean,(optional)) – Front Faces Only, Affect only faces facing towards the view",
            "location(int arrayof2 items in[-inf,inf],(optional)) – Location, Mouse location",
            "trim_mode(enum in['DIFFERENCE','UNION','JOIN'],(optional)) –Trim ModeDIFFERENCEDifference – Use a difference boolean operation.UNIONUnion – Use a union boolean operation.JOINJoin – Join the new mesh as separate geometry, without performing any boolean operation.",
            "DIFFERENCEDifference – Use a difference boolean operation.",
            "UNIONUnion – Use a union boolean operation.",
            "JOINJoin – Join the new mesh as separate geometry, without performing any boolean operation.",
            "use_cursor_depth(boolean,(optional)) – Use Cursor for Depth, Use cursor location and radius for the dimensions and position of the trimming shape",
            "trim_orientation(enum in['VIEW','SURFACE'],(optional)) –Shape OrientationVIEWView – Use the view to orientate the trimming shape.SURFACESurface – Use the surface normal to orientate the trimming shape.",
            "VIEWView – Use the view to orientate the trimming shape.",
            "SURFACESurface – Use the surface normal to orientate the trimming shape.",
            "trim_extrude_mode(enum in['PROJECT','FIXED'],(optional)) –Extrude ModePROJECTProject – Align trim geometry with the perspective of the current view for a tapered shape.FIXEDFixed – Align trim geometry orthogonally for a shape with 90 degree angles.",
            "PROJECTProject – Align trim geometry with the perspective of the current view for a tapered shape.",
            "FIXEDFixed – Align trim geometry orthogonally for a shape with 90 degree angles.",
            "trim_solver(enum in['EXACT','FAST'],(optional)) –SolverEXACTExact – Use the exact boolean solver.FASTFast – Use the fast float boolean solver.",
            "EXACTExact – Use the exact boolean solver.",
            "FASTFast – Use the fast float boolean solver."
        ]
    },
    {
        "function_id": "bpy.ops.sculpt.trim_line_gesture",
        "signature": "bpy.ops.sculpt.trim_line_gesture(xstart=0,xend=0,ystart=0,yend=0,flip=False,cursor=5,use_front_faces_only=False,use_limit_to_segment=False,location=(0,0),trim_mode='DIFFERENCE',use_cursor_depth=False,trim_orientation='VIEW',trim_extrude_mode='FIXED',trim_solver='FAST')#",
        "description": "Remove a portion of the mesh on one side of a line",
        "parameters": [
            "xstart=0",
            "xend=0",
            "ystart=0",
            "yend=0",
            "flip=False",
            "cursor=5",
            "use_front_faces_only=False",
            "use_limit_to_segment=False",
            "location=(0,0)",
            "trim_mode='DIFFERENCE'",
            "use_cursor_depth=False",
            "trim_orientation='VIEW'",
            "trim_extrude_mode='FIXED'",
            "trim_solver='FAST'"
        ],
        "parameter_descriptions": [
            "xstart(int in[-inf,inf],(optional)) – X Start",
            "xend(int in[-inf,inf],(optional)) – X End",
            "ystart(int in[-inf,inf],(optional)) – Y Start",
            "yend(int in[-inf,inf],(optional)) – Y End",
            "flip(boolean,(optional)) – Flip",
            "cursor(int in[0,inf],(optional)) – Cursor, Mouse cursor style to use during the modal operator",
            "use_front_faces_only(boolean,(optional)) – Front Faces Only, Affect only faces facing towards the view",
            "use_limit_to_segment(boolean,(optional)) – Limit to Segment, Apply the gesture action only to the area that is contained within the segment without extending its effect to the entire line",
            "location(int arrayof2 items in[-inf,inf],(optional)) – Location, Mouse location",
            "trim_mode(enum in['DIFFERENCE','UNION','JOIN'],(optional)) –Trim ModeDIFFERENCEDifference – Use a difference boolean operation.UNIONUnion – Use a union boolean operation.JOINJoin – Join the new mesh as separate geometry, without performing any boolean operation.",
            "DIFFERENCEDifference – Use a difference boolean operation.",
            "UNIONUnion – Use a union boolean operation.",
            "JOINJoin – Join the new mesh as separate geometry, without performing any boolean operation.",
            "use_cursor_depth(boolean,(optional)) – Use Cursor for Depth, Use cursor location and radius for the dimensions and position of the trimming shape",
            "trim_orientation(enum in['VIEW','SURFACE'],(optional)) –Shape OrientationVIEWView – Use the view to orientate the trimming shape.SURFACESurface – Use the surface normal to orientate the trimming shape.",
            "VIEWView – Use the view to orientate the trimming shape.",
            "SURFACESurface – Use the surface normal to orientate the trimming shape.",
            "trim_extrude_mode(enum in['PROJECT','FIXED'],(optional)) –Extrude ModePROJECTProject – Align trim geometry with the perspective of the current view for a tapered shape.FIXEDFixed – Align trim geometry orthogonally for a shape with 90 degree angles.",
            "PROJECTProject – Align trim geometry with the perspective of the current view for a tapered shape.",
            "FIXEDFixed – Align trim geometry orthogonally for a shape with 90 degree angles.",
            "trim_solver(enum in['EXACT','FAST'],(optional)) –SolverEXACTExact – Use the exact boolean solver.FASTFast – Use the fast float boolean solver.",
            "EXACTExact – Use the exact boolean solver.",
            "FASTFast – Use the fast float boolean solver."
        ]
    },
    {
        "function_id": "bpy.ops.sculpt.trim_polyline_gesture",
        "signature": "bpy.ops.sculpt.trim_polyline_gesture(path=None,use_front_faces_only=False,location=(0,0),trim_mode='DIFFERENCE',use_cursor_depth=False,trim_orientation='VIEW',trim_extrude_mode='FIXED',trim_solver='FAST')#",
        "description": "Execute a boolean operation on the mesh and a polygonal shape defined by the cursor",
        "parameters": [
            "path=None",
            "use_front_faces_only=False",
            "location=(0,0)",
            "trim_mode='DIFFERENCE'",
            "use_cursor_depth=False",
            "trim_orientation='VIEW'",
            "trim_extrude_mode='FIXED'",
            "trim_solver='FAST'"
        ],
        "parameter_descriptions": [
            "path(bpy_prop_collectionofOperatorMousePath, (optional)) – Path",
            "use_front_faces_only(boolean,(optional)) – Front Faces Only, Affect only faces facing towards the view",
            "location(int arrayof2 items in[-inf,inf],(optional)) – Location, Mouse location",
            "trim_mode(enum in['DIFFERENCE','UNION','JOIN'],(optional)) –Trim ModeDIFFERENCEDifference – Use a difference boolean operation.UNIONUnion – Use a union boolean operation.JOINJoin – Join the new mesh as separate geometry, without performing any boolean operation.",
            "DIFFERENCEDifference – Use a difference boolean operation.",
            "UNIONUnion – Use a union boolean operation.",
            "JOINJoin – Join the new mesh as separate geometry, without performing any boolean operation.",
            "use_cursor_depth(boolean,(optional)) – Use Cursor for Depth, Use cursor location and radius for the dimensions and position of the trimming shape",
            "trim_orientation(enum in['VIEW','SURFACE'],(optional)) –Shape OrientationVIEWView – Use the view to orientate the trimming shape.SURFACESurface – Use the surface normal to orientate the trimming shape.",
            "VIEWView – Use the view to orientate the trimming shape.",
            "SURFACESurface – Use the surface normal to orientate the trimming shape.",
            "trim_extrude_mode(enum in['PROJECT','FIXED'],(optional)) –Extrude ModePROJECTProject – Align trim geometry with the perspective of the current view for a tapered shape.FIXEDFixed – Align trim geometry orthogonally for a shape with 90 degree angles.",
            "PROJECTProject – Align trim geometry with the perspective of the current view for a tapered shape.",
            "FIXEDFixed – Align trim geometry orthogonally for a shape with 90 degree angles.",
            "trim_solver(enum in['EXACT','FAST'],(optional)) –SolverEXACTExact – Use the exact boolean solver.FASTFast – Use the fast float boolean solver.",
            "EXACTExact – Use the exact boolean solver.",
            "FASTFast – Use the fast float boolean solver."
        ]
    },
    {
        "function_id": "bpy.ops.sculpt.uv_sculpt_grab",
        "signature": "bpy.ops.sculpt.uv_sculpt_grab(use_invert=False)#",
        "description": "Grab UVs",
        "parameters": [
            "use_invert=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.sculpt.uv_sculpt_pinch",
        "signature": "bpy.ops.sculpt.uv_sculpt_pinch(use_invert=False)#",
        "description": "Pinch UVs",
        "parameters": [
            "use_invert=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.sculpt.uv_sculpt_relax",
        "signature": "bpy.ops.sculpt.uv_sculpt_relax(use_invert=False,relax_method='COTAN')#",
        "description": "Relax UVs",
        "parameters": [
            "use_invert=False",
            "relax_method='COTAN'"
        ],
        "parameter_descriptions": [
            "use_invert(boolean,(optional)) – Invert, Invert action for the duration of the stroke",
            "relax_method(enum in['LAPLACIAN','HC','COTAN'],(optional)) –Relax Method, Algorithm used for UV relaxationLAPLACIANLaplacian – Use Laplacian method for relaxation.HCHC – Use HC method for relaxation.COTANGeometry – Use Geometry (cotangent) relaxation, making UVs follow the underlying 3D geometry.",
            "LAPLACIANLaplacian – Use Laplacian method for relaxation.",
            "HCHC – Use HC method for relaxation.",
            "COTANGeometry – Use Geometry (cotangent) relaxation, making UVs follow the underlying 3D geometry."
        ]
    },
    {
        "function_id": "blf.aspect",
        "signature": "blf.aspect(fontid,aspect)#",
        "description": "Set the aspect for drawing text.",
        "parameters": [
            "fontid",
            "aspect"
        ],
        "parameter_descriptions": [
            "fontid(int) – The id of the typeface as returned byblf.load(), for default font use 0.",
            "aspect(float) – The aspect ratio for text drawing to use."
        ]
    },
    {
        "function_id": "blf.clipping",
        "signature": "blf.clipping(fontid,xmin,ymin,xmax,ymax)#",
        "description": "Set the clipping, enable/disable using CLIPPING.",
        "parameters": [
            "fontid",
            "xmin",
            "ymin",
            "xmax",
            "ymax"
        ],
        "parameter_descriptions": [
            "fontid(int) – The id of the typeface as returned byblf.load(), for default font use 0.",
            "xmin(float) – Clip the drawing area by these bounds.",
            "ymin(float) – Clip the drawing area by these bounds.",
            "xmax(float) – Clip the drawing area by these bounds.",
            "ymax(float) – Clip the drawing area by these bounds."
        ]
    },
    {
        "function_id": "blf.color",
        "signature": "blf.color(fontid,r,g,b,a)#",
        "description": "Set the color for drawing text.",
        "parameters": [
            "fontid",
            "r",
            "g",
            "b",
            "a"
        ],
        "parameter_descriptions": [
            "fontid(int) – The id of the typeface as returned byblf.load(), for default font use 0.",
            "r(float) – red channel 0.0 - 1.0.",
            "g(float) – green channel 0.0 - 1.0.",
            "b(float) – blue channel 0.0 - 1.0.",
            "a(float) – alpha channel 0.0 - 1.0."
        ]
    },
    {
        "function_id": "blf.dimensions",
        "signature": "blf.dimensions(fontid,text)#",
        "description": "Return the width and height of the text.",
        "parameters": [
            "fontid",
            "text"
        ],
        "parameter_descriptions": [
            "fontid(int) – The id of the typeface as returned byblf.load(), for default font use 0.",
            "text(string) – the text to draw."
        ]
    },
    {
        "function_id": "blf.disable",
        "signature": "blf.disable(fontid,option)#",
        "description": "Disable option.",
        "parameters": [
            "fontid",
            "option"
        ],
        "parameter_descriptions": [
            "fontid(int) – The id of the typeface as returned byblf.load(), for default font use 0.",
            "option(int) – One of ROTATION, CLIPPING, SHADOW or KERNING_DEFAULT."
        ]
    },
    {
        "function_id": "blf.draw",
        "signature": "blf.draw(fontid,text)#",
        "description": "Draw text in the current context.",
        "parameters": [
            "fontid",
            "text"
        ],
        "parameter_descriptions": [
            "fontid(int) – The id of the typeface as returned byblf.load(), for default font use 0.",
            "text(string) – the text to draw."
        ]
    },
    {
        "function_id": "blf.enable",
        "signature": "blf.enable(fontid,option)#",
        "description": "Enable option.",
        "parameters": [
            "fontid",
            "option"
        ],
        "parameter_descriptions": [
            "fontid(int) – The id of the typeface as returned byblf.load(), for default font use 0.",
            "option(int) – One of ROTATION, CLIPPING, SHADOW or KERNING_DEFAULT."
        ]
    },
    {
        "function_id": "blf.load",
        "signature": "blf.load(filepath)#",
        "description": "Load a new font.",
        "parameters": [
            "filepath"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "blf.position",
        "signature": "blf.position(fontid,x,y,z)#",
        "description": "Set the position for drawing text.",
        "parameters": [
            "fontid",
            "x",
            "y",
            "z"
        ],
        "parameter_descriptions": [
            "fontid(int) – The id of the typeface as returned byblf.load(), for default font use 0.",
            "x(float) – X axis position to draw the text.",
            "y(float) – Y axis position to draw the text.",
            "z(float) – Z axis position to draw the text."
        ]
    },
    {
        "function_id": "blf.rotation",
        "signature": "blf.rotation(fontid,angle)#",
        "description": "Set the text rotation angle, enable/disable using ROTATION.",
        "parameters": [
            "fontid",
            "angle"
        ],
        "parameter_descriptions": [
            "fontid(int) – The id of the typeface as returned byblf.load(), for default font use 0.",
            "angle(float) – The angle for text drawing to use."
        ]
    },
    {
        "function_id": "blf.shadow",
        "signature": "blf.shadow(fontid,level,r,g,b,a)#",
        "description": "Shadow options, enable/disable using SHADOW .",
        "parameters": [
            "fontid",
            "level",
            "r",
            "g",
            "b",
            "a"
        ],
        "parameter_descriptions": [
            "fontid(int) – The id of the typeface as returned byblf.load(), for default font use 0.",
            "level(int) – The blur level (0, 3, 5) or outline (6).",
            "r(float) – Shadow color (red channel 0.0 - 1.0).",
            "g(float) – Shadow color (green channel 0.0 - 1.0).",
            "b(float) – Shadow color (blue channel 0.0 - 1.0).",
            "a(float) – Shadow color (alpha channel 0.0 - 1.0)."
        ]
    },
    {
        "function_id": "blf.shadow_offset",
        "signature": "blf.shadow_offset(fontid,x,y)#",
        "description": "Set the offset for shadow text.",
        "parameters": [
            "fontid",
            "x",
            "y"
        ],
        "parameter_descriptions": [
            "fontid(int) – The id of the typeface as returned byblf.load(), for default font use 0.",
            "x(float) – Vertical shadow offset value in pixels.",
            "y(float) – Horizontal shadow offset value in pixels."
        ]
    },
    {
        "function_id": "blf.size",
        "signature": "blf.size(fontid,size)#",
        "description": "Set the size for drawing text.",
        "parameters": [
            "fontid",
            "size"
        ],
        "parameter_descriptions": [
            "fontid(int) – The id of the typeface as returned byblf.load(), for default font use 0.",
            "size(float) – Point size of the font."
        ]
    },
    {
        "function_id": "blf.unload",
        "signature": "blf.unload(filepath)#",
        "description": "Unload an existing font.",
        "parameters": [
            "filepath"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "blf.word_wrap",
        "signature": "blf.word_wrap(fontid,wrap_width)#",
        "description": "Set the wrap width, enable/disable using WORD_WRAP.",
        "parameters": [
            "fontid",
            "wrap_width"
        ],
        "parameter_descriptions": [
            "fontid(int) – The id of the typeface as returned byblf.load(), for default font use 0.",
            "wrap_width(int) – The width (in pixels) to wrap words at."
        ]
    },
    {
        "function_id": "bpy.ops.transform.bbone_resize",
        "signature": "bpy.ops.transform.bbone_resize(value=(1.0,1.0,1.0),orient_type='GLOBAL',orient_matrix=((0.0,0.0,0.0),(0.0,0.0,0.0),(0.0,0.0,0.0)),orient_matrix_type='GLOBAL',constraint_axis=(False,False,False),mirror=False,release_confirm=False,use_accurate=False)#",
        "description": "Scale selected bendy bones display size",
        "parameters": [
            "value=(1.0,1.0,1.0)",
            "orient_type='GLOBAL'",
            "orient_matrix=((0.0,0.0,0.0),(0.0,0.0,0.0),(0.0,0.0,0.0))",
            "orient_matrix_type='GLOBAL'",
            "constraint_axis=(False,False,False)",
            "mirror=False",
            "release_confirm=False",
            "use_accurate=False"
        ],
        "parameter_descriptions": [
            "value(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Display Size",
            "orient_type(enum in[],(optional)) – Orientation, Transformation orientation",
            "orient_matrix(mathutils.Matrixof 3 * 3 items in [-inf, inf], (optional)) – Matrix",
            "orient_matrix_type(enum in[],(optional)) – Matrix Orientation",
            "constraint_axis(boolean arrayof3 items,(optional)) – Constraint Axis",
            "mirror(boolean,(optional)) – Mirror Editing",
            "release_confirm(boolean,(optional)) – Confirm on Release, Always confirm operation when releasing button",
            "use_accurate(boolean,(optional)) – Accurate, Use accurate transformation"
        ]
    },
    {
        "function_id": "bpy.ops.transform.bend",
        "signature": "bpy.ops.transform.bend(value=0.0,mirror=False,use_proportional_edit=False,proportional_edit_falloff='SMOOTH',proportional_size=1.0,use_proportional_connected=False,use_proportional_projected=False,snap=False,gpencil_strokes=False,center_override=(0.0,0.0,0.0),release_confirm=False,use_accurate=False)#",
        "description": "Bend selected items between the 3D cursor and the mouse",
        "parameters": [
            "value=0.0",
            "mirror=False",
            "use_proportional_edit=False",
            "proportional_edit_falloff='SMOOTH'",
            "proportional_size=1.0",
            "use_proportional_connected=False",
            "use_proportional_projected=False",
            "snap=False",
            "gpencil_strokes=False",
            "center_override=(0.0,0.0,0.0)",
            "release_confirm=False",
            "use_accurate=False"
        ],
        "parameter_descriptions": [
            "value(float arrayof1 items in[-inf,inf],(optional)) – Angle",
            "mirror(boolean,(optional)) – Mirror Editing",
            "use_proportional_edit(boolean,(optional)) – Proportional Editing",
            "proportional_edit_falloff(enum inProportional Falloff Items, (optional)) – Proportional Falloff, Falloff type for proportional editing mode",
            "proportional_size(float in[1e-06,inf],(optional)) – Proportional Size",
            "use_proportional_connected(boolean,(optional)) – Connected",
            "use_proportional_projected(boolean,(optional)) – Projected (2D)",
            "snap(boolean,(optional)) – Use Snapping Options",
            "gpencil_strokes(boolean,(optional)) – Edit Grease Pencil, Edit selected Grease Pencil strokes",
            "center_override(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Center Override, Force using this center value (when set)",
            "release_confirm(boolean,(optional)) – Confirm on Release, Always confirm operation when releasing button",
            "use_accurate(boolean,(optional)) – Accurate, Use accurate transformation"
        ]
    },
    {
        "function_id": "bpy.ops.transform.create_orientation",
        "signature": "bpy.ops.transform.create_orientation(name='',use_view=False,use=False,overwrite=False)#",
        "description": "Create transformation orientation from selection",
        "parameters": [
            "name=''",
            "use_view=False",
            "use=False",
            "overwrite=False"
        ],
        "parameter_descriptions": [
            "name(string,(optional,never None)) – Name, Name of the new custom orientation",
            "use_view(boolean,(optional)) – Use View, Use the current view instead of the active object to create the new orientation",
            "use(boolean,(optional)) – Use After Creation, Select orientation after its creation",
            "overwrite(boolean,(optional)) – Overwrite Previous, Overwrite previously created orientation with same name"
        ]
    },
    {
        "function_id": "bpy.ops.transform.delete_orientation",
        "signature": "bpy.ops.transform.delete_orientation()#",
        "description": "Delete transformation orientation",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.transform.edge_bevelweight",
        "signature": "bpy.ops.transform.edge_bevelweight(value=0.0,snap=False,release_confirm=False,use_accurate=False)#",
        "description": "Change the bevel weight of edges",
        "parameters": [
            "value=0.0",
            "snap=False",
            "release_confirm=False",
            "use_accurate=False"
        ],
        "parameter_descriptions": [
            "value(float in[-1,1],(optional)) – Factor",
            "snap(boolean,(optional)) – Use Snapping Options",
            "release_confirm(boolean,(optional)) – Confirm on Release, Always confirm operation when releasing button",
            "use_accurate(boolean,(optional)) – Accurate, Use accurate transformation"
        ]
    },
    {
        "function_id": "bpy.ops.transform.edge_crease",
        "signature": "bpy.ops.transform.edge_crease(value=0.0,snap=False,release_confirm=False,use_accurate=False)#",
        "description": "Change the crease of edges",
        "parameters": [
            "value=0.0",
            "snap=False",
            "release_confirm=False",
            "use_accurate=False"
        ],
        "parameter_descriptions": [
            "value(float in[-1,1],(optional)) – Factor",
            "snap(boolean,(optional)) – Use Snapping Options",
            "release_confirm(boolean,(optional)) – Confirm on Release, Always confirm operation when releasing button",
            "use_accurate(boolean,(optional)) – Accurate, Use accurate transformation"
        ]
    },
    {
        "function_id": "bpy.ops.transform.edge_slide",
        "signature": "bpy.ops.transform.edge_slide(value=0.0,single_side=False,use_even=False,flipped=False,use_clamp=True,mirror=False,snap=False,snap_elements={'INCREMENT'},use_snap_project=False,snap_target='CLOSEST',use_snap_self=True,use_snap_edit=True,use_snap_nonedit=True,use_snap_selectable=False,snap_point=(0.0,0.0,0.0),correct_uv=True,release_confirm=False,use_accurate=False)#",
        "description": "Slide an edge loop along a mesh",
        "parameters": [
            "value=0.0",
            "single_side=False",
            "use_even=False",
            "flipped=False",
            "use_clamp=True",
            "mirror=False",
            "snap=False",
            "snap_elements={'INCREMENT'}",
            "use_snap_project=False",
            "snap_target='CLOSEST'",
            "use_snap_self=True",
            "use_snap_edit=True",
            "use_snap_nonedit=True",
            "use_snap_selectable=False",
            "snap_point=(0.0,0.0,0.0)",
            "correct_uv=True",
            "release_confirm=False",
            "use_accurate=False"
        ],
        "parameter_descriptions": [
            "value(float in[-10,10],(optional)) – Factor",
            "single_side(boolean,(optional)) – Single Side",
            "use_even(boolean,(optional)) – Even, Make the edge loop match the shape of the adjacent edge loop",
            "flipped(boolean,(optional)) – Flipped, When Even mode is active, flips between the two adjacent edge loops",
            "use_clamp(boolean,(optional)) – Clamp, Clamp within the edge extents",
            "mirror(boolean,(optional)) – Mirror Editing",
            "snap(boolean,(optional)) – Use Snapping Options",
            "snap_elements(enum set inSnap Element Items, (optional)) – Snap to Elements",
            "use_snap_project(boolean,(optional)) – Project Individual Elements",
            "snap_target(enum inSnap Source Items, (optional)) – Snap Base, Point on source that will snap to target",
            "use_snap_self(boolean,(optional)) – Target: Include Active",
            "use_snap_edit(boolean,(optional)) – Target: Include Edit",
            "use_snap_nonedit(boolean,(optional)) – Target: Include Non-Edited",
            "use_snap_selectable(boolean,(optional)) – Target: Exclude Non-Selectable",
            "snap_point(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Point",
            "correct_uv(boolean,(optional)) – Correct UVs, Correct UV coordinates when transforming",
            "release_confirm(boolean,(optional)) – Confirm on Release, Always confirm operation when releasing button",
            "use_accurate(boolean,(optional)) – Accurate, Use accurate transformation"
        ]
    },
    {
        "function_id": "bpy.ops.transform.from_gizmo",
        "signature": "bpy.ops.transform.from_gizmo()#",
        "description": "Transform selected items by mode type",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.transform.mirror",
        "signature": "bpy.ops.transform.mirror(orient_type='GLOBAL',orient_matrix=((0.0,0.0,0.0),(0.0,0.0,0.0),(0.0,0.0,0.0)),orient_matrix_type='GLOBAL',constraint_axis=(False,False,False),gpencil_strokes=False,center_override=(0.0,0.0,0.0),release_confirm=False,use_accurate=False)#",
        "description": "Mirror selected items around one or more axes",
        "parameters": [
            "orient_type='GLOBAL'",
            "orient_matrix=((0.0,0.0,0.0),(0.0,0.0,0.0),(0.0,0.0,0.0))",
            "orient_matrix_type='GLOBAL'",
            "constraint_axis=(False,False,False)",
            "gpencil_strokes=False",
            "center_override=(0.0,0.0,0.0)",
            "release_confirm=False",
            "use_accurate=False"
        ],
        "parameter_descriptions": [
            "orient_type(enum in[],(optional)) – Orientation, Transformation orientation",
            "orient_matrix(mathutils.Matrixof 3 * 3 items in [-inf, inf], (optional)) – Matrix",
            "orient_matrix_type(enum in[],(optional)) – Matrix Orientation",
            "constraint_axis(boolean arrayof3 items,(optional)) – Constraint Axis",
            "gpencil_strokes(boolean,(optional)) – Edit Grease Pencil, Edit selected Grease Pencil strokes",
            "center_override(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Center Override, Force using this center value (when set)",
            "release_confirm(boolean,(optional)) – Confirm on Release, Always confirm operation when releasing button",
            "use_accurate(boolean,(optional)) – Accurate, Use accurate transformation"
        ]
    },
    {
        "function_id": "bpy.ops.transform.push_pull",
        "signature": "bpy.ops.transform.push_pull(value=0.0,mirror=False,use_proportional_edit=False,proportional_edit_falloff='SMOOTH',proportional_size=1.0,use_proportional_connected=False,use_proportional_projected=False,snap=False,center_override=(0.0,0.0,0.0),release_confirm=False,use_accurate=False)#",
        "description": "Push/Pull selected items",
        "parameters": [
            "value=0.0",
            "mirror=False",
            "use_proportional_edit=False",
            "proportional_edit_falloff='SMOOTH'",
            "proportional_size=1.0",
            "use_proportional_connected=False",
            "use_proportional_projected=False",
            "snap=False",
            "center_override=(0.0,0.0,0.0)",
            "release_confirm=False",
            "use_accurate=False"
        ],
        "parameter_descriptions": [
            "value(float in[-inf,inf],(optional)) – Distance",
            "mirror(boolean,(optional)) – Mirror Editing",
            "use_proportional_edit(boolean,(optional)) – Proportional Editing",
            "proportional_edit_falloff(enum inProportional Falloff Items, (optional)) – Proportional Falloff, Falloff type for proportional editing mode",
            "proportional_size(float in[1e-06,inf],(optional)) – Proportional Size",
            "use_proportional_connected(boolean,(optional)) – Connected",
            "use_proportional_projected(boolean,(optional)) – Projected (2D)",
            "snap(boolean,(optional)) – Use Snapping Options",
            "center_override(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Center Override, Force using this center value (when set)",
            "release_confirm(boolean,(optional)) – Confirm on Release, Always confirm operation when releasing button",
            "use_accurate(boolean,(optional)) – Accurate, Use accurate transformation"
        ]
    },
    {
        "function_id": "bpy.ops.transform.resize",
        "signature": "bpy.ops.transform.resize(value=(1.0,1.0,1.0),mouse_dir_constraint=(0.0,0.0,0.0),orient_type='GLOBAL',orient_matrix=((0.0,0.0,0.0),(0.0,0.0,0.0),(0.0,0.0,0.0)),orient_matrix_type='GLOBAL',constraint_axis=(False,False,False),mirror=False,use_proportional_edit=False,proportional_edit_falloff='SMOOTH',proportional_size=1.0,use_proportional_connected=False,use_proportional_projected=False,snap=False,snap_elements={'INCREMENT'},use_snap_project=False,snap_target='CLOSEST',use_snap_self=True,use_snap_edit=True,use_snap_nonedit=True,use_snap_selectable=False,snap_point=(0.0,0.0,0.0),gpencil_strokes=False,texture_space=False,remove_on_cancel=False,use_duplicated_keyframes=False,center_override=(0.0,0.0,0.0),release_confirm=False,use_accurate=False)#",
        "description": "Scale (resize) selected items",
        "parameters": [
            "value=(1.0,1.0,1.0)",
            "mouse_dir_constraint=(0.0,0.0,0.0)",
            "orient_type='GLOBAL'",
            "orient_matrix=((0.0,0.0,0.0),(0.0,0.0,0.0),(0.0,0.0,0.0))",
            "orient_matrix_type='GLOBAL'",
            "constraint_axis=(False,False,False)",
            "mirror=False",
            "use_proportional_edit=False",
            "proportional_edit_falloff='SMOOTH'",
            "proportional_size=1.0",
            "use_proportional_connected=False",
            "use_proportional_projected=False",
            "snap=False",
            "snap_elements={'INCREMENT'}",
            "use_snap_project=False",
            "snap_target='CLOSEST'",
            "use_snap_self=True",
            "use_snap_edit=True",
            "use_snap_nonedit=True",
            "use_snap_selectable=False",
            "snap_point=(0.0,0.0,0.0)",
            "gpencil_strokes=False",
            "texture_space=False",
            "remove_on_cancel=False",
            "use_duplicated_keyframes=False",
            "center_override=(0.0,0.0,0.0)",
            "release_confirm=False",
            "use_accurate=False"
        ],
        "parameter_descriptions": [
            "value(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Scale",
            "mouse_dir_constraint(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Mouse Directional Constraint",
            "orient_type(enum in[],(optional)) – Orientation, Transformation orientation",
            "orient_matrix(mathutils.Matrixof 3 * 3 items in [-inf, inf], (optional)) – Matrix",
            "orient_matrix_type(enum in[],(optional)) – Matrix Orientation",
            "constraint_axis(boolean arrayof3 items,(optional)) – Constraint Axis",
            "mirror(boolean,(optional)) – Mirror Editing",
            "use_proportional_edit(boolean,(optional)) – Proportional Editing",
            "proportional_edit_falloff(enum inProportional Falloff Items, (optional)) – Proportional Falloff, Falloff type for proportional editing mode",
            "proportional_size(float in[1e-06,inf],(optional)) – Proportional Size",
            "use_proportional_connected(boolean,(optional)) – Connected",
            "use_proportional_projected(boolean,(optional)) – Projected (2D)",
            "snap(boolean,(optional)) – Use Snapping Options",
            "snap_elements(enum set inSnap Element Items, (optional)) – Snap to Elements",
            "use_snap_project(boolean,(optional)) – Project Individual Elements",
            "snap_target(enum inSnap Source Items, (optional)) – Snap Base, Point on source that will snap to target",
            "use_snap_self(boolean,(optional)) – Target: Include Active",
            "use_snap_edit(boolean,(optional)) – Target: Include Edit",
            "use_snap_nonedit(boolean,(optional)) – Target: Include Non-Edited",
            "use_snap_selectable(boolean,(optional)) – Target: Exclude Non-Selectable",
            "snap_point(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Point",
            "gpencil_strokes(boolean,(optional)) – Edit Grease Pencil, Edit selected Grease Pencil strokes",
            "texture_space(boolean,(optional)) – Edit Texture Space, Edit object data texture space",
            "remove_on_cancel(boolean,(optional)) – Remove on Cancel, Remove elements on cancel",
            "use_duplicated_keyframes(boolean,(optional)) – Duplicated Keyframes, Transform duplicated keyframes",
            "center_override(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Center Override, Force using this center value (when set)",
            "release_confirm(boolean,(optional)) – Confirm on Release, Always confirm operation when releasing button",
            "use_accurate(boolean,(optional)) – Accurate, Use accurate transformation"
        ]
    },
    {
        "function_id": "bpy.ops.transform.rotate",
        "signature": "bpy.ops.transform.rotate(value=0.0,orient_axis='Z',orient_type='GLOBAL',orient_matrix=((0.0,0.0,0.0),(0.0,0.0,0.0),(0.0,0.0,0.0)),orient_matrix_type='GLOBAL',constraint_axis=(False,False,False),mirror=False,use_proportional_edit=False,proportional_edit_falloff='SMOOTH',proportional_size=1.0,use_proportional_connected=False,use_proportional_projected=False,snap=False,snap_elements={'INCREMENT'},use_snap_project=False,snap_target='CLOSEST',use_snap_self=True,use_snap_edit=True,use_snap_nonedit=True,use_snap_selectable=False,snap_point=(0.0,0.0,0.0),gpencil_strokes=False,center_override=(0.0,0.0,0.0),release_confirm=False,use_accurate=False)#",
        "description": "Rotate selected items",
        "parameters": [
            "value=0.0",
            "orient_axis='Z'",
            "orient_type='GLOBAL'",
            "orient_matrix=((0.0,0.0,0.0),(0.0,0.0,0.0),(0.0,0.0,0.0))",
            "orient_matrix_type='GLOBAL'",
            "constraint_axis=(False,False,False)",
            "mirror=False",
            "use_proportional_edit=False",
            "proportional_edit_falloff='SMOOTH'",
            "proportional_size=1.0",
            "use_proportional_connected=False",
            "use_proportional_projected=False",
            "snap=False",
            "snap_elements={'INCREMENT'}",
            "use_snap_project=False",
            "snap_target='CLOSEST'",
            "use_snap_self=True",
            "use_snap_edit=True",
            "use_snap_nonedit=True",
            "use_snap_selectable=False",
            "snap_point=(0.0,0.0,0.0)",
            "gpencil_strokes=False",
            "center_override=(0.0,0.0,0.0)",
            "release_confirm=False",
            "use_accurate=False"
        ],
        "parameter_descriptions": [
            "value(float in[-inf,inf],(optional)) – Angle",
            "orient_axis(enum inAxis Xyz Items, (optional)) – Axis",
            "orient_type(enum in[],(optional)) – Orientation, Transformation orientation",
            "orient_matrix(mathutils.Matrixof 3 * 3 items in [-inf, inf], (optional)) – Matrix",
            "orient_matrix_type(enum in[],(optional)) – Matrix Orientation",
            "constraint_axis(boolean arrayof3 items,(optional)) – Constraint Axis",
            "mirror(boolean,(optional)) – Mirror Editing",
            "use_proportional_edit(boolean,(optional)) – Proportional Editing",
            "proportional_edit_falloff(enum inProportional Falloff Items, (optional)) – Proportional Falloff, Falloff type for proportional editing mode",
            "proportional_size(float in[1e-06,inf],(optional)) – Proportional Size",
            "use_proportional_connected(boolean,(optional)) – Connected",
            "use_proportional_projected(boolean,(optional)) – Projected (2D)",
            "snap(boolean,(optional)) – Use Snapping Options",
            "snap_elements(enum set inSnap Element Items, (optional)) – Snap to Elements",
            "use_snap_project(boolean,(optional)) – Project Individual Elements",
            "snap_target(enum inSnap Source Items, (optional)) – Snap Base, Point on source that will snap to target",
            "use_snap_self(boolean,(optional)) – Target: Include Active",
            "use_snap_edit(boolean,(optional)) – Target: Include Edit",
            "use_snap_nonedit(boolean,(optional)) – Target: Include Non-Edited",
            "use_snap_selectable(boolean,(optional)) – Target: Exclude Non-Selectable",
            "snap_point(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Point",
            "gpencil_strokes(boolean,(optional)) – Edit Grease Pencil, Edit selected Grease Pencil strokes",
            "center_override(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Center Override, Force using this center value (when set)",
            "release_confirm(boolean,(optional)) – Confirm on Release, Always confirm operation when releasing button",
            "use_accurate(boolean,(optional)) – Accurate, Use accurate transformation"
        ]
    },
    {
        "function_id": "bpy.ops.transform.rotate_normal",
        "signature": "bpy.ops.transform.rotate_normal(value=0.0,orient_axis='Z',orient_type='GLOBAL',orient_matrix=((0.0,0.0,0.0),(0.0,0.0,0.0),(0.0,0.0,0.0)),orient_matrix_type='GLOBAL',constraint_axis=(False,False,False),mirror=False,release_confirm=False,use_accurate=False)#",
        "description": "Rotate split normal of selected items",
        "parameters": [
            "value=0.0",
            "orient_axis='Z'",
            "orient_type='GLOBAL'",
            "orient_matrix=((0.0,0.0,0.0),(0.0,0.0,0.0),(0.0,0.0,0.0))",
            "orient_matrix_type='GLOBAL'",
            "constraint_axis=(False,False,False)",
            "mirror=False",
            "release_confirm=False",
            "use_accurate=False"
        ],
        "parameter_descriptions": [
            "value(float in[-inf,inf],(optional)) – Angle",
            "orient_axis(enum inAxis Xyz Items, (optional)) – Axis",
            "orient_type(enum in[],(optional)) – Orientation, Transformation orientation",
            "orient_matrix(mathutils.Matrixof 3 * 3 items in [-inf, inf], (optional)) – Matrix",
            "orient_matrix_type(enum in[],(optional)) – Matrix Orientation",
            "constraint_axis(boolean arrayof3 items,(optional)) – Constraint Axis",
            "mirror(boolean,(optional)) – Mirror Editing",
            "release_confirm(boolean,(optional)) – Confirm on Release, Always confirm operation when releasing button",
            "use_accurate(boolean,(optional)) – Accurate, Use accurate transformation"
        ]
    },
    {
        "function_id": "bpy.ops.transform.select_orientation",
        "signature": "bpy.ops.transform.select_orientation(orientation='GLOBAL')#",
        "description": "Select transformation orientation",
        "parameters": [
            "orientation='GLOBAL'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.transform.seq_slide",
        "signature": "bpy.ops.transform.seq_slide(value=(0.0,0.0),use_restore_handle_selection=False,snap=False,view2d_edge_pan=False,release_confirm=False,use_accurate=False)#",
        "description": "Slide a sequence strip in time",
        "parameters": [
            "value=(0.0,0.0)",
            "use_restore_handle_selection=False",
            "snap=False",
            "view2d_edge_pan=False",
            "release_confirm=False",
            "use_accurate=False"
        ],
        "parameter_descriptions": [
            "value(mathutils.Vectorof 2 items in [-inf, inf], (optional)) – Offset",
            "use_restore_handle_selection(boolean,(optional)) – Restore Handle Selection, Restore handle selection after tweaking",
            "snap(boolean,(optional)) – Use Snapping Options",
            "view2d_edge_pan(boolean,(optional)) – Edge Pan, Enable edge panning in 2D view",
            "release_confirm(boolean,(optional)) – Confirm on Release, Always confirm operation when releasing button",
            "use_accurate(boolean,(optional)) – Accurate, Use accurate transformation"
        ]
    },
    {
        "function_id": "bpy.ops.transform.shear",
        "signature": "bpy.ops.transform.shear(value=0.0,orient_axis='Z',orient_axis_ortho='X',orient_type='GLOBAL',orient_matrix=((0.0,0.0,0.0),(0.0,0.0,0.0),(0.0,0.0,0.0)),orient_matrix_type='GLOBAL',mirror=False,use_proportional_edit=False,proportional_edit_falloff='SMOOTH',proportional_size=1.0,use_proportional_connected=False,use_proportional_projected=False,snap=False,gpencil_strokes=False,release_confirm=False,use_accurate=False)#",
        "description": "Shear selected items along the given axis",
        "parameters": [
            "value=0.0",
            "orient_axis='Z'",
            "orient_axis_ortho='X'",
            "orient_type='GLOBAL'",
            "orient_matrix=((0.0,0.0,0.0),(0.0,0.0,0.0),(0.0,0.0,0.0))",
            "orient_matrix_type='GLOBAL'",
            "mirror=False",
            "use_proportional_edit=False",
            "proportional_edit_falloff='SMOOTH'",
            "proportional_size=1.0",
            "use_proportional_connected=False",
            "use_proportional_projected=False",
            "snap=False",
            "gpencil_strokes=False",
            "release_confirm=False",
            "use_accurate=False"
        ],
        "parameter_descriptions": [
            "value(float in[-inf,inf],(optional)) – Offset",
            "orient_axis(enum inAxis Xyz Items, (optional)) – Axis",
            "orient_axis_ortho(enum inAxis Xyz Items, (optional)) – Axis Ortho",
            "orient_type(enum in[],(optional)) – Orientation, Transformation orientation",
            "orient_matrix(mathutils.Matrixof 3 * 3 items in [-inf, inf], (optional)) – Matrix",
            "orient_matrix_type(enum in[],(optional)) – Matrix Orientation",
            "mirror(boolean,(optional)) – Mirror Editing",
            "use_proportional_edit(boolean,(optional)) – Proportional Editing",
            "proportional_edit_falloff(enum inProportional Falloff Items, (optional)) – Proportional Falloff, Falloff type for proportional editing mode",
            "proportional_size(float in[1e-06,inf],(optional)) – Proportional Size",
            "use_proportional_connected(boolean,(optional)) – Connected",
            "use_proportional_projected(boolean,(optional)) – Projected (2D)",
            "snap(boolean,(optional)) – Use Snapping Options",
            "gpencil_strokes(boolean,(optional)) – Edit Grease Pencil, Edit selected Grease Pencil strokes",
            "release_confirm(boolean,(optional)) – Confirm on Release, Always confirm operation when releasing button",
            "use_accurate(boolean,(optional)) – Accurate, Use accurate transformation"
        ]
    },
    {
        "function_id": "bpy.ops.transform.shrink_fatten",
        "signature": "bpy.ops.transform.shrink_fatten(value=0.0,use_even_offset=False,mirror=False,use_proportional_edit=False,proportional_edit_falloff='SMOOTH',proportional_size=1.0,use_proportional_connected=False,use_proportional_projected=False,snap=False,release_confirm=False,use_accurate=False)#",
        "description": "Shrink/fatten selected vertices along normals",
        "parameters": [
            "value=0.0",
            "use_even_offset=False",
            "mirror=False",
            "use_proportional_edit=False",
            "proportional_edit_falloff='SMOOTH'",
            "proportional_size=1.0",
            "use_proportional_connected=False",
            "use_proportional_projected=False",
            "snap=False",
            "release_confirm=False",
            "use_accurate=False"
        ],
        "parameter_descriptions": [
            "value(float in[-inf,inf],(optional)) – Offset",
            "use_even_offset(boolean,(optional)) – Offset Even, Scale the offset to give more even thickness",
            "mirror(boolean,(optional)) – Mirror Editing",
            "use_proportional_edit(boolean,(optional)) – Proportional Editing",
            "proportional_edit_falloff(enum inProportional Falloff Items, (optional)) – Proportional Falloff, Falloff type for proportional editing mode",
            "proportional_size(float in[1e-06,inf],(optional)) – Proportional Size",
            "use_proportional_connected(boolean,(optional)) – Connected",
            "use_proportional_projected(boolean,(optional)) – Projected (2D)",
            "snap(boolean,(optional)) – Use Snapping Options",
            "release_confirm(boolean,(optional)) – Confirm on Release, Always confirm operation when releasing button",
            "use_accurate(boolean,(optional)) – Accurate, Use accurate transformation"
        ]
    },
    {
        "function_id": "bpy.ops.transform.skin_resize",
        "signature": "bpy.ops.transform.skin_resize(value=(1.0,1.0,1.0),orient_type='GLOBAL',orient_matrix=((0.0,0.0,0.0),(0.0,0.0,0.0),(0.0,0.0,0.0)),orient_matrix_type='GLOBAL',constraint_axis=(False,False,False),mirror=False,use_proportional_edit=False,proportional_edit_falloff='SMOOTH',proportional_size=1.0,use_proportional_connected=False,use_proportional_projected=False,snap=False,snap_elements={'INCREMENT'},use_snap_project=False,snap_target='CLOSEST',use_snap_self=True,use_snap_edit=True,use_snap_nonedit=True,use_snap_selectable=False,snap_point=(0.0,0.0,0.0),release_confirm=False,use_accurate=False)#",
        "description": "Scale selected vertices’ skin radii",
        "parameters": [
            "value=(1.0,1.0,1.0)",
            "orient_type='GLOBAL'",
            "orient_matrix=((0.0,0.0,0.0),(0.0,0.0,0.0),(0.0,0.0,0.0))",
            "orient_matrix_type='GLOBAL'",
            "constraint_axis=(False,False,False)",
            "mirror=False",
            "use_proportional_edit=False",
            "proportional_edit_falloff='SMOOTH'",
            "proportional_size=1.0",
            "use_proportional_connected=False",
            "use_proportional_projected=False",
            "snap=False",
            "snap_elements={'INCREMENT'}",
            "use_snap_project=False",
            "snap_target='CLOSEST'",
            "use_snap_self=True",
            "use_snap_edit=True",
            "use_snap_nonedit=True",
            "use_snap_selectable=False",
            "snap_point=(0.0,0.0,0.0)",
            "release_confirm=False",
            "use_accurate=False"
        ],
        "parameter_descriptions": [
            "value(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Scale",
            "orient_type(enum in[],(optional)) – Orientation, Transformation orientation",
            "orient_matrix(mathutils.Matrixof 3 * 3 items in [-inf, inf], (optional)) – Matrix",
            "orient_matrix_type(enum in[],(optional)) – Matrix Orientation",
            "constraint_axis(boolean arrayof3 items,(optional)) – Constraint Axis",
            "mirror(boolean,(optional)) – Mirror Editing",
            "use_proportional_edit(boolean,(optional)) – Proportional Editing",
            "proportional_edit_falloff(enum inProportional Falloff Items, (optional)) – Proportional Falloff, Falloff type for proportional editing mode",
            "proportional_size(float in[1e-06,inf],(optional)) – Proportional Size",
            "use_proportional_connected(boolean,(optional)) – Connected",
            "use_proportional_projected(boolean,(optional)) – Projected (2D)",
            "snap(boolean,(optional)) – Use Snapping Options",
            "snap_elements(enum set inSnap Element Items, (optional)) – Snap to Elements",
            "use_snap_project(boolean,(optional)) – Project Individual Elements",
            "snap_target(enum inSnap Source Items, (optional)) – Snap Base, Point on source that will snap to target",
            "use_snap_self(boolean,(optional)) – Target: Include Active",
            "use_snap_edit(boolean,(optional)) – Target: Include Edit",
            "use_snap_nonedit(boolean,(optional)) – Target: Include Non-Edited",
            "use_snap_selectable(boolean,(optional)) – Target: Exclude Non-Selectable",
            "snap_point(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Point",
            "release_confirm(boolean,(optional)) – Confirm on Release, Always confirm operation when releasing button",
            "use_accurate(boolean,(optional)) – Accurate, Use accurate transformation"
        ]
    },
    {
        "function_id": "bpy.ops.transform.tilt",
        "signature": "bpy.ops.transform.tilt(value=0.0,mirror=False,use_proportional_edit=False,proportional_edit_falloff='SMOOTH',proportional_size=1.0,use_proportional_connected=False,use_proportional_projected=False,snap=False,release_confirm=False,use_accurate=False)#",
        "description": "Tilt selected control vertices of 3D curve",
        "parameters": [
            "value=0.0",
            "mirror=False",
            "use_proportional_edit=False",
            "proportional_edit_falloff='SMOOTH'",
            "proportional_size=1.0",
            "use_proportional_connected=False",
            "use_proportional_projected=False",
            "snap=False",
            "release_confirm=False",
            "use_accurate=False"
        ],
        "parameter_descriptions": [
            "value(float in[-inf,inf],(optional)) – Angle",
            "mirror(boolean,(optional)) – Mirror Editing",
            "use_proportional_edit(boolean,(optional)) – Proportional Editing",
            "proportional_edit_falloff(enum inProportional Falloff Items, (optional)) – Proportional Falloff, Falloff type for proportional editing mode",
            "proportional_size(float in[1e-06,inf],(optional)) – Proportional Size",
            "use_proportional_connected(boolean,(optional)) – Connected",
            "use_proportional_projected(boolean,(optional)) – Projected (2D)",
            "snap(boolean,(optional)) – Use Snapping Options",
            "release_confirm(boolean,(optional)) – Confirm on Release, Always confirm operation when releasing button",
            "use_accurate(boolean,(optional)) – Accurate, Use accurate transformation"
        ]
    },
    {
        "function_id": "bpy.ops.transform.tosphere",
        "signature": "bpy.ops.transform.tosphere(value=0.0,mirror=False,use_proportional_edit=False,proportional_edit_falloff='SMOOTH',proportional_size=1.0,use_proportional_connected=False,use_proportional_projected=False,snap=False,gpencil_strokes=False,center_override=(0.0,0.0,0.0),release_confirm=False,use_accurate=False)#",
        "description": "Move selected items outward in a spherical shape around geometric center",
        "parameters": [
            "value=0.0",
            "mirror=False",
            "use_proportional_edit=False",
            "proportional_edit_falloff='SMOOTH'",
            "proportional_size=1.0",
            "use_proportional_connected=False",
            "use_proportional_projected=False",
            "snap=False",
            "gpencil_strokes=False",
            "center_override=(0.0,0.0,0.0)",
            "release_confirm=False",
            "use_accurate=False"
        ],
        "parameter_descriptions": [
            "value(float in[0,1],(optional)) – Factor",
            "mirror(boolean,(optional)) – Mirror Editing",
            "use_proportional_edit(boolean,(optional)) – Proportional Editing",
            "proportional_edit_falloff(enum inProportional Falloff Items, (optional)) – Proportional Falloff, Falloff type for proportional editing mode",
            "proportional_size(float in[1e-06,inf],(optional)) – Proportional Size",
            "use_proportional_connected(boolean,(optional)) – Connected",
            "use_proportional_projected(boolean,(optional)) – Projected (2D)",
            "snap(boolean,(optional)) – Use Snapping Options",
            "gpencil_strokes(boolean,(optional)) – Edit Grease Pencil, Edit selected Grease Pencil strokes",
            "center_override(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Center Override, Force using this center value (when set)",
            "release_confirm(boolean,(optional)) – Confirm on Release, Always confirm operation when releasing button",
            "use_accurate(boolean,(optional)) – Accurate, Use accurate transformation"
        ]
    },
    {
        "function_id": "bpy.ops.transform.trackball",
        "signature": "bpy.ops.transform.trackball(value=(0.0,0.0),mirror=False,use_proportional_edit=False,proportional_edit_falloff='SMOOTH',proportional_size=1.0,use_proportional_connected=False,use_proportional_projected=False,snap=False,gpencil_strokes=False,center_override=(0.0,0.0,0.0),release_confirm=False,use_accurate=False)#",
        "description": "Trackball style rotation of selected items",
        "parameters": [
            "value=(0.0,0.0)",
            "mirror=False",
            "use_proportional_edit=False",
            "proportional_edit_falloff='SMOOTH'",
            "proportional_size=1.0",
            "use_proportional_connected=False",
            "use_proportional_projected=False",
            "snap=False",
            "gpencil_strokes=False",
            "center_override=(0.0,0.0,0.0)",
            "release_confirm=False",
            "use_accurate=False"
        ],
        "parameter_descriptions": [
            "value(float arrayof2 items in[-inf,inf],(optional)) – Angle",
            "mirror(boolean,(optional)) – Mirror Editing",
            "use_proportional_edit(boolean,(optional)) – Proportional Editing",
            "proportional_edit_falloff(enum inProportional Falloff Items, (optional)) – Proportional Falloff, Falloff type for proportional editing mode",
            "proportional_size(float in[1e-06,inf],(optional)) – Proportional Size",
            "use_proportional_connected(boolean,(optional)) – Connected",
            "use_proportional_projected(boolean,(optional)) – Projected (2D)",
            "snap(boolean,(optional)) – Use Snapping Options",
            "gpencil_strokes(boolean,(optional)) – Edit Grease Pencil, Edit selected Grease Pencil strokes",
            "center_override(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Center Override, Force using this center value (when set)",
            "release_confirm(boolean,(optional)) – Confirm on Release, Always confirm operation when releasing button",
            "use_accurate(boolean,(optional)) – Accurate, Use accurate transformation"
        ]
    },
    {
        "function_id": "bpy.ops.transform.transform",
        "signature": "bpy.ops.transform.transform(mode='TRANSLATION',value=(0.0,0.0,0.0,0.0),orient_axis='Z',orient_type='GLOBAL',orient_matrix=((0.0,0.0,0.0),(0.0,0.0,0.0),(0.0,0.0,0.0)),orient_matrix_type='GLOBAL',constraint_axis=(False,False,False),mirror=False,use_proportional_edit=False,proportional_edit_falloff='SMOOTH',proportional_size=1.0,use_proportional_connected=False,use_proportional_projected=False,snap=False,snap_elements={'INCREMENT'},use_snap_project=False,snap_target='CLOSEST',use_snap_self=True,use_snap_edit=True,use_snap_nonedit=True,use_snap_selectable=False,snap_point=(0.0,0.0,0.0),snap_align=False,snap_normal=(0.0,0.0,0.0),gpencil_strokes=False,texture_space=False,remove_on_cancel=False,use_duplicated_keyframes=False,center_override=(0.0,0.0,0.0),release_confirm=False,use_accurate=False,use_automerge_and_split=False)#",
        "description": "Transform selected items by mode type",
        "parameters": [
            "mode='TRANSLATION'",
            "value=(0.0,0.0,0.0,0.0)",
            "orient_axis='Z'",
            "orient_type='GLOBAL'",
            "orient_matrix=((0.0,0.0,0.0),(0.0,0.0,0.0),(0.0,0.0,0.0))",
            "orient_matrix_type='GLOBAL'",
            "constraint_axis=(False,False,False)",
            "mirror=False",
            "use_proportional_edit=False",
            "proportional_edit_falloff='SMOOTH'",
            "proportional_size=1.0",
            "use_proportional_connected=False",
            "use_proportional_projected=False",
            "snap=False",
            "snap_elements={'INCREMENT'}",
            "use_snap_project=False",
            "snap_target='CLOSEST'",
            "use_snap_self=True",
            "use_snap_edit=True",
            "use_snap_nonedit=True",
            "use_snap_selectable=False",
            "snap_point=(0.0,0.0,0.0)",
            "snap_align=False",
            "snap_normal=(0.0,0.0,0.0)",
            "gpencil_strokes=False",
            "texture_space=False",
            "remove_on_cancel=False",
            "use_duplicated_keyframes=False",
            "center_override=(0.0,0.0,0.0)",
            "release_confirm=False",
            "use_accurate=False",
            "use_automerge_and_split=False"
        ],
        "parameter_descriptions": [
            "mode(enum inTransform Mode Type Items, (optional)) – Mode",
            "value(mathutils.Vectorof 4 items in [-inf, inf], (optional)) – Values",
            "orient_axis(enum inAxis Xyz Items, (optional)) – Axis",
            "orient_type(enum inTransform Orientation Items, (optional)) – Orientation, Transformation orientation",
            "orient_matrix(mathutils.Matrixof 3 * 3 items in [-inf, inf], (optional)) – Matrix",
            "orient_matrix_type(enum inTransform Orientation Items, (optional)) – Matrix Orientation",
            "constraint_axis(boolean arrayof3 items,(optional)) – Constraint Axis",
            "mirror(boolean,(optional)) – Mirror Editing",
            "use_proportional_edit(boolean,(optional)) – Proportional Editing",
            "proportional_edit_falloff(enum inProportional Falloff Items, (optional)) – Proportional Falloff, Falloff type for proportional editing mode",
            "proportional_size(float in[1e-06,inf],(optional)) – Proportional Size",
            "use_proportional_connected(boolean,(optional)) – Connected",
            "use_proportional_projected(boolean,(optional)) – Projected (2D)",
            "snap(boolean,(optional)) – Use Snapping Options",
            "snap_elements(enum set inSnap Element Items, (optional)) – Snap to Elements",
            "use_snap_project(boolean,(optional)) – Project Individual Elements",
            "snap_target(enum inSnap Source Items, (optional)) – Snap Base, Point on source that will snap to target",
            "use_snap_self(boolean,(optional)) – Target: Include Active",
            "use_snap_edit(boolean,(optional)) – Target: Include Edit",
            "use_snap_nonedit(boolean,(optional)) – Target: Include Non-Edited",
            "use_snap_selectable(boolean,(optional)) – Target: Exclude Non-Selectable",
            "snap_point(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Point",
            "snap_align(boolean,(optional)) – Align with Point Normal",
            "snap_normal(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Normal",
            "gpencil_strokes(boolean,(optional)) – Edit Grease Pencil, Edit selected Grease Pencil strokes",
            "texture_space(boolean,(optional)) – Edit Texture Space, Edit object data texture space",
            "remove_on_cancel(boolean,(optional)) – Remove on Cancel, Remove elements on cancel",
            "use_duplicated_keyframes(boolean,(optional)) – Duplicated Keyframes, Transform duplicated keyframes",
            "center_override(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Center Override, Force using this center value (when set)",
            "release_confirm(boolean,(optional)) – Confirm on Release, Always confirm operation when releasing button",
            "use_accurate(boolean,(optional)) – Accurate, Use accurate transformation",
            "use_automerge_and_split(boolean,(optional)) – Auto Merge & Split, Forces the use of Auto Merge and Split"
        ]
    },
    {
        "function_id": "bpy.ops.transform.translate",
        "signature": "bpy.ops.transform.translate(value=(0.0,0.0,0.0),orient_type='GLOBAL',orient_matrix=((0.0,0.0,0.0),(0.0,0.0,0.0),(0.0,0.0,0.0)),orient_matrix_type='GLOBAL',constraint_axis=(False,False,False),mirror=False,use_proportional_edit=False,proportional_edit_falloff='SMOOTH',proportional_size=1.0,use_proportional_connected=False,use_proportional_projected=False,snap=False,snap_elements={'INCREMENT'},use_snap_project=False,snap_target='CLOSEST',use_snap_self=True,use_snap_edit=True,use_snap_nonedit=True,use_snap_selectable=False,snap_point=(0.0,0.0,0.0),snap_align=False,snap_normal=(0.0,0.0,0.0),gpencil_strokes=False,cursor_transform=False,texture_space=False,remove_on_cancel=False,use_duplicated_keyframes=False,view2d_edge_pan=False,release_confirm=False,use_accurate=False,use_automerge_and_split=False)#",
        "description": "Move selected items",
        "parameters": [
            "value=(0.0,0.0,0.0)",
            "orient_type='GLOBAL'",
            "orient_matrix=((0.0,0.0,0.0),(0.0,0.0,0.0),(0.0,0.0,0.0))",
            "orient_matrix_type='GLOBAL'",
            "constraint_axis=(False,False,False)",
            "mirror=False",
            "use_proportional_edit=False",
            "proportional_edit_falloff='SMOOTH'",
            "proportional_size=1.0",
            "use_proportional_connected=False",
            "use_proportional_projected=False",
            "snap=False",
            "snap_elements={'INCREMENT'}",
            "use_snap_project=False",
            "snap_target='CLOSEST'",
            "use_snap_self=True",
            "use_snap_edit=True",
            "use_snap_nonedit=True",
            "use_snap_selectable=False",
            "snap_point=(0.0,0.0,0.0)",
            "snap_align=False",
            "snap_normal=(0.0,0.0,0.0)",
            "gpencil_strokes=False",
            "cursor_transform=False",
            "texture_space=False",
            "remove_on_cancel=False",
            "use_duplicated_keyframes=False",
            "view2d_edge_pan=False",
            "release_confirm=False",
            "use_accurate=False",
            "use_automerge_and_split=False"
        ],
        "parameter_descriptions": [
            "value(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Move",
            "orient_type(enum inTransform Orientation Items, (optional)) – Orientation, Transformation orientation",
            "orient_matrix(mathutils.Matrixof 3 * 3 items in [-inf, inf], (optional)) – Matrix",
            "orient_matrix_type(enum inTransform Orientation Items, (optional)) – Matrix Orientation",
            "constraint_axis(boolean arrayof3 items,(optional)) – Constraint Axis",
            "mirror(boolean,(optional)) – Mirror Editing",
            "use_proportional_edit(boolean,(optional)) – Proportional Editing",
            "proportional_edit_falloff(enum inProportional Falloff Items, (optional)) – Proportional Falloff, Falloff type for proportional editing mode",
            "proportional_size(float in[1e-06,inf],(optional)) – Proportional Size",
            "use_proportional_connected(boolean,(optional)) – Connected",
            "use_proportional_projected(boolean,(optional)) – Projected (2D)",
            "snap(boolean,(optional)) – Use Snapping Options",
            "snap_elements(enum set inSnap Element Items, (optional)) – Snap to Elements",
            "use_snap_project(boolean,(optional)) – Project Individual Elements",
            "snap_target(enum inSnap Source Items, (optional)) – Snap Base, Point on source that will snap to target",
            "use_snap_self(boolean,(optional)) – Target: Include Active",
            "use_snap_edit(boolean,(optional)) – Target: Include Edit",
            "use_snap_nonedit(boolean,(optional)) – Target: Include Non-Edited",
            "use_snap_selectable(boolean,(optional)) – Target: Exclude Non-Selectable",
            "snap_point(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Point",
            "snap_align(boolean,(optional)) – Align with Point Normal",
            "snap_normal(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Normal",
            "gpencil_strokes(boolean,(optional)) – Edit Grease Pencil, Edit selected Grease Pencil strokes",
            "cursor_transform(boolean,(optional)) – Transform Cursor",
            "texture_space(boolean,(optional)) – Edit Texture Space, Edit object data texture space",
            "remove_on_cancel(boolean,(optional)) – Remove on Cancel, Remove elements on cancel",
            "use_duplicated_keyframes(boolean,(optional)) – Duplicated Keyframes, Transform duplicated keyframes",
            "view2d_edge_pan(boolean,(optional)) – Edge Pan, Enable edge panning in 2D view",
            "release_confirm(boolean,(optional)) – Confirm on Release, Always confirm operation when releasing button",
            "use_accurate(boolean,(optional)) – Accurate, Use accurate transformation",
            "use_automerge_and_split(boolean,(optional)) – Auto Merge & Split, Forces the use of Auto Merge and Split"
        ]
    },
    {
        "function_id": "bpy.ops.transform.vert_crease",
        "signature": "bpy.ops.transform.vert_crease(value=0.0,snap=False,release_confirm=False,use_accurate=False)#",
        "description": "Change the crease of vertices",
        "parameters": [
            "value=0.0",
            "snap=False",
            "release_confirm=False",
            "use_accurate=False"
        ],
        "parameter_descriptions": [
            "value(float in[-1,1],(optional)) – Factor",
            "snap(boolean,(optional)) – Use Snapping Options",
            "release_confirm(boolean,(optional)) – Confirm on Release, Always confirm operation when releasing button",
            "use_accurate(boolean,(optional)) – Accurate, Use accurate transformation"
        ]
    },
    {
        "function_id": "bpy.ops.transform.vert_slide",
        "signature": "bpy.ops.transform.vert_slide(value=0.0,use_even=False,flipped=False,use_clamp=True,mirror=False,snap=False,snap_elements={'INCREMENT'},use_snap_project=False,snap_target='CLOSEST',use_snap_self=True,use_snap_edit=True,use_snap_nonedit=True,use_snap_selectable=False,snap_point=(0.0,0.0,0.0),correct_uv=True,release_confirm=False,use_accurate=False)#",
        "description": "Slide a vertex along a mesh",
        "parameters": [
            "value=0.0",
            "use_even=False",
            "flipped=False",
            "use_clamp=True",
            "mirror=False",
            "snap=False",
            "snap_elements={'INCREMENT'}",
            "use_snap_project=False",
            "snap_target='CLOSEST'",
            "use_snap_self=True",
            "use_snap_edit=True",
            "use_snap_nonedit=True",
            "use_snap_selectable=False",
            "snap_point=(0.0,0.0,0.0)",
            "correct_uv=True",
            "release_confirm=False",
            "use_accurate=False"
        ],
        "parameter_descriptions": [
            "value(float in[-10,10],(optional)) – Factor",
            "use_even(boolean,(optional)) – Even, Make the edge loop match the shape of the adjacent edge loop",
            "flipped(boolean,(optional)) – Flipped, When Even mode is active, flips between the two adjacent edge loops",
            "use_clamp(boolean,(optional)) – Clamp, Clamp within the edge extents",
            "mirror(boolean,(optional)) – Mirror Editing",
            "snap(boolean,(optional)) – Use Snapping Options",
            "snap_elements(enum set inSnap Element Items, (optional)) – Snap to Elements",
            "use_snap_project(boolean,(optional)) – Project Individual Elements",
            "snap_target(enum inSnap Source Items, (optional)) – Snap Base, Point on source that will snap to target",
            "use_snap_self(boolean,(optional)) – Target: Include Active",
            "use_snap_edit(boolean,(optional)) – Target: Include Edit",
            "use_snap_nonedit(boolean,(optional)) – Target: Include Non-Edited",
            "use_snap_selectable(boolean,(optional)) – Target: Exclude Non-Selectable",
            "snap_point(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Point",
            "correct_uv(boolean,(optional)) – Correct UVs, Correct UV coordinates when transforming",
            "release_confirm(boolean,(optional)) – Confirm on Release, Always confirm operation when releasing button",
            "use_accurate(boolean,(optional)) – Accurate, Use accurate transformation"
        ]
    },
    {
        "function_id": "bpy.ops.transform.vertex_random",
        "signature": "bpy.ops.transform.vertex_random(offset=0.0,uniform=0.0,normal=0.0,seed=0,wait_for_input=True)#",
        "description": "Randomize vertices",
        "parameters": [
            "offset=0.0",
            "uniform=0.0",
            "normal=0.0",
            "seed=0",
            "wait_for_input=True"
        ],
        "parameter_descriptions": [
            "offset(float in[-inf,inf],(optional)) – Amount, Distance to offset",
            "uniform(float in[0,1],(optional)) – Uniform, Increase for uniform offset distance",
            "normal(float in[0,1],(optional)) – Normal, Align offset direction to normals",
            "seed(int in[0,10000],(optional)) – Random Seed, Seed for the random number generator",
            "wait_for_input(boolean,(optional)) – Wait for Input"
        ]
    },
    {
        "function_id": "bpy.ops.transform.vertex_warp",
        "signature": "bpy.ops.transform.vertex_warp(warp_angle=6.28319,offset_angle=0.0,min=-1.0,max=1.0,viewmat=((0.0,0.0,0.0,0.0),(0.0,0.0,0.0,0.0),(0.0,0.0,0.0,0.0),(0.0,0.0,0.0,0.0)),center=(0.0,0.0,0.0))#",
        "description": "Warp vertices around the cursor",
        "parameters": [
            "warp_angle=6.28319",
            "offset_angle=0.0",
            "min=-1.0",
            "max=1.0",
            "viewmat=((0.0,0.0,0.0,0.0),(0.0,0.0,0.0,0.0),(0.0,0.0,0.0,0.0),(0.0,0.0,0.0,0.0))",
            "center=(0.0,0.0,0.0)"
        ],
        "parameter_descriptions": [
            "warp_angle(float in[-inf,inf],(optional)) – Warp Angle, Amount to warp about the cursor",
            "offset_angle(float in[-inf,inf],(optional)) – Offset Angle, Angle to use as the basis for warping",
            "min(float in[-inf,inf],(optional)) – Min",
            "max(float in[-inf,inf],(optional)) – Max",
            "viewmat(mathutils.Matrixof 4 * 4 items in [-inf, inf], (optional)) – Matrix",
            "center(mathutils.Vectorof 3 items in [-inf, inf], (optional)) – Center"
        ]
    },
    {
        "function_id": "bpy.ops.scene.delete",
        "signature": "bpy.ops.scene.delete()#",
        "description": "Delete active scene",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.scene.freestyle_add_edge_marks_to_keying_set",
        "signature": "bpy.ops.scene.freestyle_add_edge_marks_to_keying_set()#",
        "description": "Add the data paths to the Freestyle Edge Mark property of selected edges to the active keying set",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.scene.freestyle_add_face_marks_to_keying_set",
        "signature": "bpy.ops.scene.freestyle_add_face_marks_to_keying_set()#",
        "description": "Add the data paths to the Freestyle Face Mark property of selected polygons to the active keying set",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.scene.freestyle_alpha_modifier_add",
        "signature": "bpy.ops.scene.freestyle_alpha_modifier_add(type='ALONG_STROKE')#",
        "description": "Add an alpha transparency modifier to the line style associated with the active lineset",
        "parameters": [
            "type='ALONG_STROKE'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.scene.freestyle_color_modifier_add",
        "signature": "bpy.ops.scene.freestyle_color_modifier_add(type='ALONG_STROKE')#",
        "description": "Add a line color modifier to the line style associated with the active lineset",
        "parameters": [
            "type='ALONG_STROKE'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.scene.freestyle_fill_range_by_selection",
        "signature": "bpy.ops.scene.freestyle_fill_range_by_selection(type='COLOR',name='')#",
        "description": "Fill the Range Min/Max entries by the min/max distance between selected mesh objects and the source object (either a user-specified object or the active camera)",
        "parameters": [
            "type='COLOR'",
            "name=''"
        ],
        "parameter_descriptions": [
            "type(enum in['COLOR','ALPHA','THICKNESS'],(optional)) –Type, Type of the modifier to work onCOLORColor – Color modifier type.ALPHAAlpha – Alpha modifier type.THICKNESSThickness – Thickness modifier type.",
            "COLORColor – Color modifier type.",
            "ALPHAAlpha – Alpha modifier type.",
            "THICKNESSThickness – Thickness modifier type.",
            "name(string,(optional,never None)) – Name, Name of the modifier to work on"
        ]
    },
    {
        "function_id": "bpy.ops.scene.freestyle_geometry_modifier_add",
        "signature": "bpy.ops.scene.freestyle_geometry_modifier_add(type='2D_OFFSET')#",
        "description": "Add a stroke geometry modifier to the line style associated with the active lineset",
        "parameters": [
            "type='2D_OFFSET'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.scene.freestyle_lineset_add",
        "signature": "bpy.ops.scene.freestyle_lineset_add()#",
        "description": "Add a line set into the list of line sets",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.scene.freestyle_lineset_copy",
        "signature": "bpy.ops.scene.freestyle_lineset_copy()#",
        "description": "Copy the active line set to the internal clipboard",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.scene.freestyle_lineset_move",
        "signature": "bpy.ops.scene.freestyle_lineset_move(direction='UP')#",
        "description": "Change the position of the active line set within the list of line sets",
        "parameters": [
            "direction='UP'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.scene.freestyle_lineset_paste",
        "signature": "bpy.ops.scene.freestyle_lineset_paste()#",
        "description": "Paste the internal clipboard content to the active line set",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.scene.freestyle_lineset_remove",
        "signature": "bpy.ops.scene.freestyle_lineset_remove()#",
        "description": "Remove the active line set from the list of line sets",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.scene.freestyle_linestyle_new",
        "signature": "bpy.ops.scene.freestyle_linestyle_new()#",
        "description": "Create a new line style, reusable by multiple line sets",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.scene.freestyle_modifier_copy",
        "signature": "bpy.ops.scene.freestyle_modifier_copy()#",
        "description": "Duplicate the modifier within the list of modifiers",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.scene.freestyle_modifier_move",
        "signature": "bpy.ops.scene.freestyle_modifier_move(direction='UP')#",
        "description": "Move the modifier within the list of modifiers",
        "parameters": [
            "direction='UP'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.scene.freestyle_modifier_remove",
        "signature": "bpy.ops.scene.freestyle_modifier_remove()#",
        "description": "Remove the modifier from the list of modifiers",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.scene.freestyle_module_add",
        "signature": "bpy.ops.scene.freestyle_module_add()#",
        "description": "Add a style module into the list of modules",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.scene.freestyle_module_move",
        "signature": "bpy.ops.scene.freestyle_module_move(direction='UP')#",
        "description": "Change the position of the style module within in the list of style modules",
        "parameters": [
            "direction='UP'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.scene.freestyle_module_open",
        "signature": "bpy.ops.scene.freestyle_module_open(filepath='',make_internal=True)#",
        "description": "Open a style module file",
        "parameters": [
            "filepath=''",
            "make_internal=True"
        ],
        "parameter_descriptions": [
            "filepath(string,(optional,never None)) – filepath",
            "make_internal(boolean,(optional)) – Make internal, Make module file internal after loading"
        ]
    },
    {
        "function_id": "bpy.ops.scene.freestyle_module_remove",
        "signature": "bpy.ops.scene.freestyle_module_remove()#",
        "description": "Remove the style module from the stack",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.scene.freestyle_stroke_material_create",
        "signature": "bpy.ops.scene.freestyle_stroke_material_create()#",
        "description": "Create Freestyle stroke material for testing",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.scene.freestyle_thickness_modifier_add",
        "signature": "bpy.ops.scene.freestyle_thickness_modifier_add(type='ALONG_STROKE')#",
        "description": "Add a line thickness modifier to the line style associated with the active lineset",
        "parameters": [
            "type='ALONG_STROKE'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.scene.gltf2_action_filter_refresh",
        "signature": "bpy.ops.scene.gltf2_action_filter_refresh()#",
        "description": "Refresh list of actions",
        "parameters": [],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.scene.gpencil_brush_preset_add",
        "signature": "bpy.ops.scene.gpencil_brush_preset_add(name='',remove_name=False,remove_active=False)#",
        "description": "Add or remove grease pencil brush preset",
        "parameters": [
            "name=''",
            "remove_name=False",
            "remove_active=False"
        ],
        "parameter_descriptions": [
            "name(string,(optional,never None)) – Name, Name of the preset, used to make the path name",
            "remove_name(boolean,(optional)) – remove_name",
            "remove_active(boolean,(optional)) – remove_active"
        ]
    },
    {
        "function_id": "bpy.ops.scene.gpencil_material_preset_add",
        "signature": "bpy.ops.scene.gpencil_material_preset_add(name='',remove_name=False,remove_active=False)#",
        "description": "Add or remove grease pencil material preset",
        "parameters": [
            "name=''",
            "remove_name=False",
            "remove_active=False"
        ],
        "parameter_descriptions": [
            "name(string,(optional,never None)) – Name, Name of the preset, used to make the path name",
            "remove_name(boolean,(optional)) – remove_name",
            "remove_active(boolean,(optional)) – remove_active"
        ]
    },
    {
        "function_id": "bpy.ops.scene.new",
        "signature": "bpy.ops.scene.new(type='NEW')#",
        "description": "Add new scene by type",
        "parameters": [
            "type='NEW'"
        ],
        "parameter_descriptions": [
            "NEWNew – Add a new, empty scene with default settings.",
            "EMPTYCopy Settings – Add a new, empty scene, and copy settings from the current scene.",
            "LINK_COPYLinked Copy – Link in the collections from the current scene (shallow copy).",
            "FULL_COPYFull Copy – Make a full copy of the current scene."
        ]
    },
    {
        "function_id": "bpy.ops.scene.new_sequencer",
        "signature": "bpy.ops.scene.new_sequencer(type='NEW')#",
        "description": "Add new scene by type in the sequence editor and assign to active strip",
        "parameters": [
            "type='NEW'"
        ],
        "parameter_descriptions": [
            "NEWNew – Add a new, empty scene with default settings.",
            "EMPTYCopy Settings – Add a new, empty scene, and copy settings from the current scene.",
            "LINK_COPYLinked Copy – Link in the collections from the current scene (shallow copy).",
            "FULL_COPYFull Copy – Make a full copy of the current scene."
        ]
    },
    {
        "function_id": "bpy.ops.scene.render_view_add",
        "signature": "bpy.ops.scene.render_view_add()#",
        "description": "Add a render view",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.scene.render_view_remove",
        "signature": "bpy.ops.scene.render_view_remove()#",
        "description": "Remove the selected render view",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.scene.view_layer_add",
        "signature": "bpy.ops.scene.view_layer_add(type='NEW')#",
        "description": "Add a view layer",
        "parameters": [
            "type='NEW'"
        ],
        "parameter_descriptions": [
            "NEWNew – Add a new view layer.",
            "COPYCopy Settings – Copy settings of current view layer.",
            "EMPTYBlank – Add a new view layer with all collections disabled."
        ]
    },
    {
        "function_id": "bpy.ops.scene.view_layer_add_aov",
        "signature": "bpy.ops.scene.view_layer_add_aov()#",
        "description": "Add a Shader AOV",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.scene.view_layer_add_lightgroup",
        "signature": "bpy.ops.scene.view_layer_add_lightgroup(name='')#",
        "description": "Add a Light Group",
        "parameters": [
            "name=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.scene.view_layer_add_used_lightgroups",
        "signature": "bpy.ops.scene.view_layer_add_used_lightgroups()#",
        "description": "Add all used Light Groups",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.scene.view_layer_remove",
        "signature": "bpy.ops.scene.view_layer_remove()#",
        "description": "Remove the selected view layer",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.scene.view_layer_remove_aov",
        "signature": "bpy.ops.scene.view_layer_remove_aov()#",
        "description": "Remove Active AOV",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.scene.view_layer_remove_lightgroup",
        "signature": "bpy.ops.scene.view_layer_remove_lightgroup()#",
        "description": "Remove Active Lightgroup",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.scene.view_layer_remove_unused_lightgroups",
        "signature": "bpy.ops.scene.view_layer_remove_unused_lightgroups()#",
        "description": "Remove all unused Light Groups",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.grease_pencil.brush_stroke",
        "signature": "bpy.ops.grease_pencil.brush_stroke(stroke=None,mode='NORMAL')#",
        "description": "Draw a new stroke in the active Grease Pencil object",
        "parameters": [
            "stroke=None",
            "mode='NORMAL'"
        ],
        "parameter_descriptions": [
            "stroke(bpy_prop_collectionofOperatorStrokeElement, (optional)) – Stroke",
            "mode(enum in['NORMAL','INVERT','SMOOTH'],(optional)) –Stroke Mode, Action taken when a paint stroke is madeNORMALRegular – Apply brush normally.INVERTInvert – Invert action of brush for duration of stroke.SMOOTHSmooth – Switch brush to smooth mode for duration of stroke.",
            "NORMALRegular – Apply brush normally.",
            "INVERTInvert – Invert action of brush for duration of stroke.",
            "SMOOTHSmooth – Switch brush to smooth mode for duration of stroke."
        ]
    },
    {
        "function_id": "bpy.ops.grease_pencil.caps_set",
        "signature": "bpy.ops.grease_pencil.caps_set(type='ROUND')#",
        "description": "Change curve caps mode (rounded or flat)",
        "parameters": [
            "type='ROUND'"
        ],
        "parameter_descriptions": [
            "ROUNDRounded – Set as default rounded.",
            "FLATFlat.",
            "STARTToggle Start.",
            "ENDToggle End."
        ]
    },
    {
        "function_id": "bpy.ops.grease_pencil.clean_loose",
        "signature": "bpy.ops.grease_pencil.clean_loose(limit=1)#",
        "description": "Remove loose points",
        "parameters": [
            "limit=1"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.grease_pencil.copy",
        "signature": "bpy.ops.grease_pencil.copy()#",
        "description": "Copy the selected Grease Pencil points or strokes to the internal clipboard",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.grease_pencil.cyclical_set",
        "signature": "bpy.ops.grease_pencil.cyclical_set(type='TOGGLE')#",
        "description": "Close or open the selected stroke adding a segment from last to first point",
        "parameters": [
            "type='TOGGLE'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.grease_pencil.delete",
        "signature": "bpy.ops.grease_pencil.delete()#",
        "description": "Delete selected strokes or points",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.grease_pencil.delete_frame",
        "signature": "bpy.ops.grease_pencil.delete_frame(type='ACTIVE_FRAME')#",
        "description": "Delete Grease Pencil Frame(s)",
        "parameters": [
            "type='ACTIVE_FRAME'"
        ],
        "parameter_descriptions": [
            "ACTIVE_FRAMEActive Frame – Deletes current frame in the active layer.",
            "ALL_FRAMESAll Active Frames – Delete active frames for all layers."
        ]
    },
    {
        "function_id": "bpy.ops.grease_pencil.dissolve",
        "signature": "bpy.ops.grease_pencil.dissolve(type='POINTS')#",
        "description": "Delete selected points without splitting strokes",
        "parameters": [
            "type='POINTS'"
        ],
        "parameter_descriptions": [
            "POINTSDissolve – Dissolve selected points.",
            "BETWEENDissolve Between – Dissolve points between selected points.",
            "UNSELECTDissolve Unselect – Dissolve all unselected points."
        ]
    },
    {
        "function_id": "bpy.ops.grease_pencil.duplicate",
        "signature": "bpy.ops.grease_pencil.duplicate()#",
        "description": "Duplicate the selected points",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.grease_pencil.duplicate_move",
        "signature": "bpy.ops.grease_pencil.duplicate_move(GREASE_PENCIL_OT_duplicate=None,TRANSFORM_OT_translate=None)#",
        "description": "Make copies of the selected Grease Pencil strokes and move them",
        "parameters": [
            "GREASE_PENCIL_OT_duplicate=None",
            "TRANSFORM_OT_translate=None"
        ],
        "parameter_descriptions": [
            "GREASE_PENCIL_OT_duplicate(GREASE_PENCIL_OT_duplicate, (optional)) – Duplicate, Duplicate the selected points",
            "TRANSFORM_OT_translate(TRANSFORM_OT_translate, (optional)) – Move, Move selected items"
        ]
    },
    {
        "function_id": "bpy.ops.grease_pencil.extrude",
        "signature": "bpy.ops.grease_pencil.extrude()#",
        "description": "Extrude the selected points",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.grease_pencil.extrude_move",
        "signature": "bpy.ops.grease_pencil.extrude_move(GREASE_PENCIL_OT_extrude=None,TRANSFORM_OT_translate=None)#",
        "description": "Extrude selected points and move them",
        "parameters": [
            "GREASE_PENCIL_OT_extrude=None",
            "TRANSFORM_OT_translate=None"
        ],
        "parameter_descriptions": [
            "GREASE_PENCIL_OT_extrude(GREASE_PENCIL_OT_extrude, (optional)) – Extrude Stroke Points, Extrude the selected points",
            "TRANSFORM_OT_translate(TRANSFORM_OT_translate, (optional)) – Move, Move selected items"
        ]
    },
    {
        "function_id": "bpy.ops.grease_pencil.fill",
        "signature": "bpy.ops.grease_pencil.fill(on_back=False,invert=False,precision=False)#",
        "description": "Fill with color the shape formed by strokes",
        "parameters": [
            "on_back=False",
            "invert=False",
            "precision=False"
        ],
        "parameter_descriptions": [
            "on_back(boolean,(optional)) – Draw on Back, Send new stroke to back",
            "invert(boolean,(optional)) – Invert, Find boundary of unfilled instead of filled regions",
            "precision(boolean,(optional)) – Precision, Use precision movement for extension lines"
        ]
    },
    {
        "function_id": "bpy.ops.grease_pencil.insert_blank_frame",
        "signature": "bpy.ops.grease_pencil.insert_blank_frame(all_layers=False,duration=0)#",
        "description": "Insert a blank frame on the current scene frame",
        "parameters": [
            "all_layers=False",
            "duration=0"
        ],
        "parameter_descriptions": [
            "all_layers(boolean,(optional)) – All Layers, Insert a blank frame in all editable layers",
            "duration(int in[0,1048574],(optional)) – Duration"
        ]
    },
    {
        "function_id": "bpy.ops.grease_pencil.layer_active",
        "signature": "bpy.ops.grease_pencil.layer_active(layer=0)#",
        "description": "Set the active Grease Pencil layer",
        "parameters": [
            "layer=0"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.grease_pencil.layer_add",
        "signature": "bpy.ops.grease_pencil.layer_add(new_layer_name='Layer')#",
        "description": "Add a new Grease Pencil layer in the active object",
        "parameters": [
            "new_layer_name='Layer'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.grease_pencil.layer_duplicate",
        "signature": "bpy.ops.grease_pencil.layer_duplicate(empty_keyframes=False)#",
        "description": "Make a copy of the active Grease Pencil layer",
        "parameters": [
            "empty_keyframes=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.grease_pencil.layer_group_add",
        "signature": "bpy.ops.grease_pencil.layer_group_add(new_layer_group_name='')#",
        "description": "Add a new Grease Pencil layer group in the active object",
        "parameters": [
            "new_layer_group_name=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.grease_pencil.layer_group_remove",
        "signature": "bpy.ops.grease_pencil.layer_group_remove(keep_children=False)#",
        "description": "Remove Grease Pencil layer group in the active object",
        "parameters": [
            "keep_children=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.grease_pencil.layer_hide",
        "signature": "bpy.ops.grease_pencil.layer_hide(unselected=False)#",
        "description": "Hide selected/unselected Grease Pencil layers",
        "parameters": [
            "unselected=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.grease_pencil.layer_isolate",
        "signature": "bpy.ops.grease_pencil.layer_isolate(affect_visibility=False)#",
        "description": "Make only active layer visible/editable",
        "parameters": [
            "affect_visibility=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.grease_pencil.layer_lock_all",
        "signature": "bpy.ops.grease_pencil.layer_lock_all(lock=True)#",
        "description": "Lock all Grease Pencil layers to prevent them from being accidentally modified",
        "parameters": [
            "lock=True"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.grease_pencil.layer_mask_add",
        "signature": "bpy.ops.grease_pencil.layer_mask_add(name='')#",
        "description": "Add new layer as masking",
        "parameters": [
            "name=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.grease_pencil.layer_mask_remove",
        "signature": "bpy.ops.grease_pencil.layer_mask_remove()#",
        "description": "Remove Layer Mask",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.grease_pencil.layer_mask_reorder",
        "signature": "bpy.ops.grease_pencil.layer_mask_reorder(direction='UP')#",
        "description": "Reorder the active Grease Pencil mask layer up/down in the list",
        "parameters": [
            "direction='UP'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.grease_pencil.layer_remove",
        "signature": "bpy.ops.grease_pencil.layer_remove()#",
        "description": "Remove the active Grease Pencil layer",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.grease_pencil.layer_reorder",
        "signature": "bpy.ops.grease_pencil.layer_reorder(target_layer_name='Layer',location='ABOVE')#",
        "description": "Reorder the active Grease Pencil layer",
        "parameters": [
            "target_layer_name='Layer'",
            "location='ABOVE'"
        ],
        "parameter_descriptions": [
            "target_layer_name(string,(optional,never None)) – Target Name, Name of the target layer",
            "location(enum in['ABOVE','BELOW'],(optional)) – Location"
        ]
    },
    {
        "function_id": "bpy.ops.grease_pencil.layer_reveal",
        "signature": "bpy.ops.grease_pencil.layer_reveal()#",
        "description": "Show all Grease Pencil layers",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.grease_pencil.material_copy_to_object",
        "signature": "bpy.ops.grease_pencil.material_copy_to_object(only_active=True)#",
        "description": "Append Materials of the active Grease Pencil to other object",
        "parameters": [
            "only_active=True"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.grease_pencil.material_hide",
        "signature": "bpy.ops.grease_pencil.material_hide(invert=False)#",
        "description": "Hide active/inactive Grease Pencil material(s)",
        "parameters": [
            "invert=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.grease_pencil.material_lock_all",
        "signature": "bpy.ops.grease_pencil.material_lock_all()#",
        "description": "Lock all Grease Pencil materials to prevent them from being accidentally modified",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.grease_pencil.material_lock_unselected",
        "signature": "bpy.ops.grease_pencil.material_lock_unselected()#",
        "description": "Lock any material not used in any selected stroke",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.grease_pencil.material_lock_unused",
        "signature": "bpy.ops.grease_pencil.material_lock_unused()#",
        "description": "Lock and hide any material not used",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.grease_pencil.material_reveal",
        "signature": "bpy.ops.grease_pencil.material_reveal()#",
        "description": "Unhide all hidden Grease Pencil materials",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.grease_pencil.material_select",
        "signature": "bpy.ops.grease_pencil.material_select(deselect=False)#",
        "description": "Select/Deselect all Grease Pencil strokes using current material",
        "parameters": [
            "deselect=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.grease_pencil.material_unlock_all",
        "signature": "bpy.ops.grease_pencil.material_unlock_all()#",
        "description": "Unlock all Grease Pencil materials so that they can be edited",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.grease_pencil.move_to_layer",
        "signature": "bpy.ops.grease_pencil.move_to_layer(target_layer_name='Layer',add_new_layer=False)#",
        "description": "Move selected strokes to another layer",
        "parameters": [
            "target_layer_name='Layer'",
            "add_new_layer=False"
        ],
        "parameter_descriptions": [
            "target_layer_name(string,(optional,never None)) – Name, Target Grease Pencil Layer",
            "add_new_layer(boolean,(optional)) – New Layer, Move selection to a new layer"
        ]
    },
    {
        "function_id": "bpy.ops.grease_pencil.paste",
        "signature": "bpy.ops.grease_pencil.paste(paste_back=False)#",
        "description": "Paste Grease Pencil points or strokes from the internal clipboard to the active layer",
        "parameters": [
            "paste_back=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.grease_pencil.primitive_arc",
        "signature": "bpy.ops.grease_pencil.primitive_arc(subdivision=62,type='ARC')#",
        "description": "Create predefined grease pencil stroke arcs",
        "parameters": [
            "subdivision=62",
            "type='ARC'"
        ],
        "parameter_descriptions": [
            "subdivision(int in[0,inf],(optional)) – Subdivisions, Number of subdivisions per segment",
            "type(enum in['BOX','LINE','POLYLINE','CIRCLE','ARC','CURVE'],(optional)) – Type, Type of shape"
        ]
    },
    {
        "function_id": "bpy.ops.grease_pencil.primitive_box",
        "signature": "bpy.ops.grease_pencil.primitive_box(subdivision=3,type='BOX')#",
        "description": "Create predefined grease pencil stroke boxes",
        "parameters": [
            "subdivision=3",
            "type='BOX'"
        ],
        "parameter_descriptions": [
            "subdivision(int in[0,inf],(optional)) – Subdivisions, Number of subdivisions per segment",
            "type(enum in['BOX','LINE','POLYLINE','CIRCLE','ARC','CURVE'],(optional)) – Type, Type of shape"
        ]
    },
    {
        "function_id": "bpy.ops.grease_pencil.primitive_circle",
        "signature": "bpy.ops.grease_pencil.primitive_circle(subdivision=94,type='CIRCLE')#",
        "description": "Create predefined grease pencil stroke circles",
        "parameters": [
            "subdivision=94",
            "type='CIRCLE'"
        ],
        "parameter_descriptions": [
            "subdivision(int in[0,inf],(optional)) – Subdivisions, Number of subdivisions per segment",
            "type(enum in['BOX','LINE','POLYLINE','CIRCLE','ARC','CURVE'],(optional)) – Type, Type of shape"
        ]
    },
    {
        "function_id": "bpy.ops.grease_pencil.primitive_curve",
        "signature": "bpy.ops.grease_pencil.primitive_curve(subdivision=62,type='CURVE')#",
        "description": "Create predefined grease pencil stroke curve shapes",
        "parameters": [
            "subdivision=62",
            "type='CURVE'"
        ],
        "parameter_descriptions": [
            "subdivision(int in[0,inf],(optional)) – Subdivisions, Number of subdivisions per segment",
            "type(enum in['BOX','LINE','POLYLINE','CIRCLE','ARC','CURVE'],(optional)) – Type, Type of shape"
        ]
    },
    {
        "function_id": "bpy.ops.grease_pencil.primitive_line",
        "signature": "bpy.ops.grease_pencil.primitive_line(subdivision=6,type='LINE')#",
        "description": "Create predefined grease pencil stroke lines",
        "parameters": [
            "subdivision=6",
            "type='LINE'"
        ],
        "parameter_descriptions": [
            "subdivision(int in[0,inf],(optional)) – Subdivisions, Number of subdivisions per segment",
            "type(enum in['BOX','LINE','POLYLINE','CIRCLE','ARC','CURVE'],(optional)) – Type, Type of shape"
        ]
    },
    {
        "function_id": "bpy.ops.grease_pencil.primitive_polyline",
        "signature": "bpy.ops.grease_pencil.primitive_polyline(subdivision=6,type='POLYLINE')#",
        "description": "Create predefined grease pencil stroke polylines",
        "parameters": [
            "subdivision=6",
            "type='POLYLINE'"
        ],
        "parameter_descriptions": [
            "subdivision(int in[0,inf],(optional)) – Subdivisions, Number of subdivisions per segment",
            "type(enum in['BOX','LINE','POLYLINE','CIRCLE','ARC','CURVE'],(optional)) – Type, Type of shape"
        ]
    },
    {
        "function_id": "bpy.ops.grease_pencil.reorder",
        "signature": "bpy.ops.grease_pencil.reorder(direction='TOP')#",
        "description": "Change the display order of the selected strokes",
        "parameters": [
            "direction='TOP'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.grease_pencil.sculpt_paint",
        "signature": "bpy.ops.grease_pencil.sculpt_paint(stroke=None,mode='NORMAL')#",
        "description": "Draw a new stroke in the active Grease Pencil object",
        "parameters": [
            "stroke=None",
            "mode='NORMAL'"
        ],
        "parameter_descriptions": [
            "stroke(bpy_prop_collectionofOperatorStrokeElement, (optional)) – Stroke",
            "mode(enum in['NORMAL','INVERT','SMOOTH'],(optional)) –Stroke Mode, Action taken when a paint stroke is madeNORMALRegular – Apply brush normally.INVERTInvert – Invert action of brush for duration of stroke.SMOOTHSmooth – Switch brush to smooth mode for duration of stroke.",
            "NORMALRegular – Apply brush normally.",
            "INVERTInvert – Invert action of brush for duration of stroke.",
            "SMOOTHSmooth – Switch brush to smooth mode for duration of stroke."
        ]
    },
    {
        "function_id": "bpy.ops.grease_pencil.select_all",
        "signature": "bpy.ops.grease_pencil.select_all(action='TOGGLE')#",
        "description": "(De)select all visible strokes",
        "parameters": [
            "action='TOGGLE'"
        ],
        "parameter_descriptions": [
            "TOGGLEToggle – Toggle selection for all elements.",
            "SELECTSelect – Select all elements.",
            "DESELECTDeselect – Deselect all elements.",
            "INVERTInvert – Invert selection of all elements."
        ]
    },
    {
        "function_id": "bpy.ops.grease_pencil.select_alternate",
        "signature": "bpy.ops.grease_pencil.select_alternate(deselect_ends=False)#",
        "description": "Select alternated points in strokes with already selected points",
        "parameters": [
            "deselect_ends=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.grease_pencil.select_ends",
        "signature": "bpy.ops.grease_pencil.select_ends(amount_start=0,amount_end=1)#",
        "description": "Select end points of strokes",
        "parameters": [
            "amount_start=0",
            "amount_end=1"
        ],
        "parameter_descriptions": [
            "amount_start(int in[0,inf],(optional)) – Amount Start, Number of points to select from the start",
            "amount_end(int in[0,inf],(optional)) – Amount End, Number of points to select from the end"
        ]
    },
    {
        "function_id": "bpy.ops.grease_pencil.select_less",
        "signature": "bpy.ops.grease_pencil.select_less()#",
        "description": "Shrink the selection by one point",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.grease_pencil.select_linked",
        "signature": "bpy.ops.grease_pencil.select_linked()#",
        "description": "Select all points in curves with any point selection",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.grease_pencil.select_more",
        "signature": "bpy.ops.grease_pencil.select_more()#",
        "description": "Grow the selection by one point",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.grease_pencil.select_random",
        "signature": "bpy.ops.grease_pencil.select_random(ratio=0.5,seed=0,action='SELECT')#",
        "description": "Selects random points from the current strokes selection",
        "parameters": [
            "ratio=0.5",
            "seed=0",
            "action='SELECT'"
        ],
        "parameter_descriptions": [
            "ratio(float in[0,1],(optional)) – Ratio, Portion of items to select randomly",
            "seed(int in[0,inf],(optional)) – Random Seed, Seed for the random number generator",
            "action(enum in['SELECT','DESELECT'],(optional)) –Action, Selection action to executeSELECTSelect – Select all elements.DESELECTDeselect – Deselect all elements.",
            "SELECTSelect – Select all elements.",
            "DESELECTDeselect – Deselect all elements."
        ]
    },
    {
        "function_id": "bpy.ops.grease_pencil.separate",
        "signature": "bpy.ops.grease_pencil.separate(mode='SELECTED')#",
        "description": "Separate the selected geometry into a new grease pencil object",
        "parameters": [
            "mode='SELECTED'"
        ],
        "parameter_descriptions": [
            "SELECTEDSelection – Separate selected geometry.",
            "MATERIALBy Material – Separate by material.",
            "LAYERBy Layer – Separate by layer."
        ]
    },
    {
        "function_id": "bpy.ops.grease_pencil.set_active_material",
        "signature": "bpy.ops.grease_pencil.set_active_material()#",
        "description": "Set the selected stroke material as the active material",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.grease_pencil.set_material",
        "signature": "bpy.ops.grease_pencil.set_material(slot='DEFAULT')#",
        "description": "Set active material",
        "parameters": [
            "slot='DEFAULT'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.grease_pencil.set_selection_mode",
        "signature": "bpy.ops.grease_pencil.set_selection_mode(mode='POINT')#",
        "description": "Change the selection mode for Grease Pencil strokes",
        "parameters": [
            "mode='POINT'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.grease_pencil.set_uniform_opacity",
        "signature": "bpy.ops.grease_pencil.set_uniform_opacity(opacity=1.0)#",
        "description": "Set all stroke points to same opacity",
        "parameters": [
            "opacity=1.0"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.grease_pencil.set_uniform_thickness",
        "signature": "bpy.ops.grease_pencil.set_uniform_thickness(thickness=0.1)#",
        "description": "Set all stroke points to same thickness",
        "parameters": [
            "thickness=0.1"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.grease_pencil.snap_cursor_to_selected",
        "signature": "bpy.ops.grease_pencil.snap_cursor_to_selected()#",
        "description": "Snap cursor to center of selected points",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.grease_pencil.snap_to_cursor",
        "signature": "bpy.ops.grease_pencil.snap_to_cursor(use_offset=True)#",
        "description": "Snap selected points/strokes to the cursor",
        "parameters": [
            "use_offset=True"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.grease_pencil.snap_to_grid",
        "signature": "bpy.ops.grease_pencil.snap_to_grid()#",
        "description": "Snap selected points to the nearest grid points",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.grease_pencil.stroke_cutter",
        "signature": "bpy.ops.grease_pencil.stroke_cutter(path=None)#",
        "description": "Delete stroke points in between intersecting strokes",
        "parameters": [
            "path=None"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.grease_pencil.stroke_material_set",
        "signature": "bpy.ops.grease_pencil.stroke_material_set(material='')#",
        "description": "Assign the active material slot to the selected strokes",
        "parameters": [
            "material=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.grease_pencil.stroke_merge_by_distance",
        "signature": "bpy.ops.grease_pencil.stroke_merge_by_distance(threshold=0.001,use_unselected=False)#",
        "description": "Merge points by distance",
        "parameters": [
            "threshold=0.001",
            "use_unselected=False"
        ],
        "parameter_descriptions": [
            "threshold(float in[0,100],(optional)) – Threshold",
            "use_unselected(boolean,(optional)) – Unselected, Use whole stroke, not only selected points"
        ]
    },
    {
        "function_id": "bpy.ops.grease_pencil.stroke_simplify",
        "signature": "bpy.ops.grease_pencil.stroke_simplify(factor=0.01)#",
        "description": "Simplify selected strokes",
        "parameters": [
            "factor=0.01"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.grease_pencil.stroke_smooth",
        "signature": "bpy.ops.grease_pencil.stroke_smooth(iterations=10,factor=1.0,smooth_ends=False,keep_shape=False,smooth_position=True,smooth_radius=True,smooth_opacity=False)#",
        "description": "Smooth selected strokes",
        "parameters": [
            "iterations=10",
            "factor=1.0",
            "smooth_ends=False",
            "keep_shape=False",
            "smooth_position=True",
            "smooth_radius=True",
            "smooth_opacity=False"
        ],
        "parameter_descriptions": [
            "iterations(int in[1,100],(optional)) – Iterations",
            "factor(float in[0,1],(optional)) – Factor",
            "smooth_ends(boolean,(optional)) – Smooth Endpoints",
            "keep_shape(boolean,(optional)) – Keep Shape",
            "smooth_position(boolean,(optional)) – Position",
            "smooth_radius(boolean,(optional)) – Radius",
            "smooth_opacity(boolean,(optional)) – Opacity"
        ]
    },
    {
        "function_id": "bpy.ops.grease_pencil.stroke_subdivide",
        "signature": "bpy.ops.grease_pencil.stroke_subdivide(number_cuts=1,only_selected=True)#",
        "description": "Subdivide between continuous selected points of the stroke adding a point half way between them",
        "parameters": [
            "number_cuts=1",
            "only_selected=True"
        ],
        "parameter_descriptions": [
            "number_cuts(int in[1,32],(optional)) – Number of Cuts",
            "only_selected(boolean,(optional)) – Selected Points, Smooth only selected points in the stroke"
        ]
    },
    {
        "function_id": "bpy.ops.grease_pencil.stroke_subdivide_smooth",
        "signature": "bpy.ops.grease_pencil.stroke_subdivide_smooth(GREASE_PENCIL_OT_stroke_subdivide=None,GREASE_PENCIL_OT_stroke_smooth=None)#",
        "description": "Subdivide strokes and smooth them",
        "parameters": [
            "GREASE_PENCIL_OT_stroke_subdivide=None",
            "GREASE_PENCIL_OT_stroke_smooth=None"
        ],
        "parameter_descriptions": [
            "GREASE_PENCIL_OT_stroke_subdivide(GREASE_PENCIL_OT_stroke_subdivide, (optional)) – Subdivide Stroke, Subdivide between continuous selected points of the stroke adding a point half way between them",
            "GREASE_PENCIL_OT_stroke_smooth(GREASE_PENCIL_OT_stroke_smooth, (optional)) – Smooth Stroke, Smooth selected strokes"
        ]
    },
    {
        "function_id": "bpy.ops.grease_pencil.stroke_switch_direction",
        "signature": "bpy.ops.grease_pencil.stroke_switch_direction()#",
        "description": "Change direction of the points of the selected strokes",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.grease_pencil.weight_brush_stroke",
        "signature": "bpy.ops.grease_pencil.weight_brush_stroke(stroke=None,mode='NORMAL')#",
        "description": "Draw weight on stroke points in the active Grease Pencil object",
        "parameters": [
            "stroke=None",
            "mode='NORMAL'"
        ],
        "parameter_descriptions": [
            "stroke(bpy_prop_collectionofOperatorStrokeElement, (optional)) – Stroke",
            "mode(enum in['NORMAL','INVERT','SMOOTH'],(optional)) –Stroke Mode, Action taken when a paint stroke is madeNORMALRegular – Apply brush normally.INVERTInvert – Invert action of brush for duration of stroke.SMOOTHSmooth – Switch brush to smooth mode for duration of stroke.",
            "NORMALRegular – Apply brush normally.",
            "INVERTInvert – Invert action of brush for duration of stroke.",
            "SMOOTHSmooth – Switch brush to smooth mode for duration of stroke."
        ]
    },
    {
        "function_id": "bpy.ops.grease_pencil.weight_sample",
        "signature": "bpy.ops.grease_pencil.weight_sample()#",
        "description": "Set the weight of the Draw tool to the weight of the vertex under the mouse cursor",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.grease_pencil.weight_toggle_direction",
        "signature": "bpy.ops.grease_pencil.weight_toggle_direction()#",
        "description": "Toggle Add/Subtract for the weight paint draw tool",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.ui.assign_default_button",
        "signature": "bpy.ops.ui.assign_default_button()#",
        "description": "Set this property’s current value as the new default",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.ui.button_execute",
        "signature": "bpy.ops.ui.button_execute(skip_depressed=False)#",
        "description": "Presses active button",
        "parameters": [
            "skip_depressed=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.ui.button_string_clear",
        "signature": "bpy.ops.ui.button_string_clear()#",
        "description": "Unsets the text of the active button",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.ui.copy_as_driver_button",
        "signature": "bpy.ops.ui.copy_as_driver_button()#",
        "description": "Create a new driver with this property as input, and copy it to the internal clipboard. Use Paste Driver to add it to the target property, or Paste Driver Variables to extend an existing driver",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.ui.copy_data_path_button",
        "signature": "bpy.ops.ui.copy_data_path_button(full_path=False)#",
        "description": "Copy the RNA data path for this property to the clipboard",
        "parameters": [
            "full_path=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.ui.copy_driver_to_selected_button",
        "signature": "bpy.ops.ui.copy_driver_to_selected_button(all=False)#",
        "description": "Copy the property’s driver from the active item to the same property of all selected items, if the same property exists",
        "parameters": [
            "all=False"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.ui.copy_python_command_button",
        "signature": "bpy.ops.ui.copy_python_command_button()#",
        "description": "Copy the Python command matching this button",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.ui.copy_to_selected_button",
        "signature": "bpy.ops.ui.copy_to_selected_button(all=True)#",
        "description": "Copy the property’s value from the active item to the same property of all selected items if the same property exists",
        "parameters": [
            "all=True"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.ui.drop_color",
        "signature": "bpy.ops.ui.drop_color(color=(0.0,0.0,0.0),gamma=False)#",
        "description": "Drop colors to buttons",
        "parameters": [
            "color=(0.0,0.0,0.0)",
            "gamma=False"
        ],
        "parameter_descriptions": [
            "color(mathutils.Colorof 3 items in [0, inf], (optional)) – Color, Source color",
            "gamma(boolean,(optional)) – Gamma Corrected, The source color is gamma corrected"
        ]
    },
    {
        "function_id": "bpy.ops.ui.drop_material",
        "signature": "bpy.ops.ui.drop_material(session_uid=0)#",
        "description": "Drag material to Material slots in Properties",
        "parameters": [
            "session_uid=0"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.ui.drop_name",
        "signature": "bpy.ops.ui.drop_name(string='')#",
        "description": "Drop name to button",
        "parameters": [
            "string=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.ui.editsource",
        "signature": "bpy.ops.ui.editsource()#",
        "description": "Edit UI source code of the active button",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.ui.eyedropper_color",
        "signature": "bpy.ops.ui.eyedropper_color()#",
        "description": "Sample a color from the Blender window to store in a property",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.ui.eyedropper_colorramp",
        "signature": "bpy.ops.ui.eyedropper_colorramp()#",
        "description": "Sample a color band",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.ui.eyedropper_colorramp_point",
        "signature": "bpy.ops.ui.eyedropper_colorramp_point()#",
        "description": "Point-sample a color band",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.ui.eyedropper_depth",
        "signature": "bpy.ops.ui.eyedropper_depth(prop_data_path='')#",
        "description": "Sample depth from the 3D view",
        "parameters": [
            "prop_data_path=''"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.ui.eyedropper_driver",
        "signature": "bpy.ops.ui.eyedropper_driver(mapping_type='SINGLE_MANY')#",
        "description": "Pick a property to use as a driver target",
        "parameters": [
            "mapping_type='SINGLE_MANY'"
        ],
        "parameter_descriptions": [
            "SINGLE_MANYAll from Target – Drive all components of this property using the target picked.",
            "DIRECTSingle from Target – Drive this component of this property using the target picked.",
            "MATCHMatch Indices – Create drivers for each pair of corresponding elements.",
            "NONE_ALLManually Create Later – Create drivers for all properties without assigning any targets yet.",
            "NONE_SINGLEManually Create Later (Single) – Create driver for this property only and without assigning any targets yet."
        ]
    },
    {
        "function_id": "bpy.ops.ui.eyedropper_gpencil_color",
        "signature": "bpy.ops.ui.eyedropper_gpencil_color(mode='MATERIAL')#",
        "description": "Sample a color from the Blender Window and create Grease Pencil material",
        "parameters": [
            "mode='MATERIAL'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.ui.eyedropper_id",
        "signature": "bpy.ops.ui.eyedropper_id()#",
        "description": "Sample a data-block from the 3D View to store in a property",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.ui.jump_to_target_button",
        "signature": "bpy.ops.ui.jump_to_target_button()#",
        "description": "Switch to the target object or bone",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.ui.list_start_filter",
        "signature": "bpy.ops.ui.list_start_filter()#",
        "description": "Start entering filter text for the list in focus",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.ui.override_idtemplate_clear",
        "signature": "bpy.ops.ui.override_idtemplate_clear()#",
        "description": "Delete the selected local override and relink its usages to the linked data-block if possible, else reset it and mark it as non editable",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.ui.override_idtemplate_make",
        "signature": "bpy.ops.ui.override_idtemplate_make()#",
        "description": "Create a local override of the selected linked data-block, and its hierarchy of dependencies",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.ui.override_idtemplate_reset",
        "signature": "bpy.ops.ui.override_idtemplate_reset()#",
        "description": "Reset the selected local override to its linked reference values",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.ui.override_remove_button",
        "signature": "bpy.ops.ui.override_remove_button(all=True)#",
        "description": "Remove an override operation",
        "parameters": [
            "all=True"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.ui.override_type_set_button",
        "signature": "bpy.ops.ui.override_type_set_button(all=True,type='REPLACE')#",
        "description": "Create an override operation, or set the type of an existing one",
        "parameters": [
            "all=True",
            "type='REPLACE'"
        ],
        "parameter_descriptions": [
            "all(boolean,(optional)) – All, Reset to default values all elements of the array",
            "type(enum in['NOOP','REPLACE','DIFFERENCE','FACTOR'],(optional)) –Type, Type of override operationNOOPNoOp – ‘No-Operation’, place holder preventing automatic override to ever affect the property.REPLACEReplace – Completely replace value from linked data by local one.DIFFERENCEDifference – Store difference to linked data value.FACTORFactor – Store factor to linked data value (useful e.g. for scale).",
            "NOOPNoOp – ‘No-Operation’, place holder preventing automatic override to ever affect the property.",
            "REPLACEReplace – Completely replace value from linked data by local one.",
            "DIFFERENCEDifference – Store difference to linked data value.",
            "FACTORFactor – Store factor to linked data value (useful e.g. for scale)."
        ]
    },
    {
        "function_id": "bpy.ops.ui.reloadtranslation",
        "signature": "bpy.ops.ui.reloadtranslation()#",
        "description": "Force a full reload of UI translation",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.ui.reset_default_button",
        "signature": "bpy.ops.ui.reset_default_button(all=True)#",
        "description": "Reset this property’s value to its default value",
        "parameters": [
            "all=True"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.ui.unset_property_button",
        "signature": "bpy.ops.ui.unset_property_button()#",
        "description": "Clear the property and use default or generated value in operators",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.ui.view_drop",
        "signature": "bpy.ops.ui.view_drop()#",
        "description": "Drag and drop onto a data-set or item within the data-set",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.ui.view_item_rename",
        "signature": "bpy.ops.ui.view_item_rename()#",
        "description": "Rename the active item in the data-set view",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.ui.view_start_filter",
        "signature": "bpy.ops.ui.view_start_filter()#",
        "description": "Start entering filter text for the data-set in focus",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.boid.rule_add",
        "signature": "bpy.ops.boid.rule_add(type='GOAL')#",
        "description": "Add a boid rule to the current boid state",
        "parameters": [
            "type='GOAL'"
        ],
        "parameter_descriptions": []
    },
    {
        "function_id": "bpy.ops.boid.rule_del",
        "signature": "bpy.ops.boid.rule_del()#",
        "description": "Delete current boid rule",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.boid.rule_move_down",
        "signature": "bpy.ops.boid.rule_move_down()#",
        "description": "Move boid rule down in the list",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.boid.rule_move_up",
        "signature": "bpy.ops.boid.rule_move_up()#",
        "description": "Move boid rule up in the list",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.boid.state_add",
        "signature": "bpy.ops.boid.state_add()#",
        "description": "Add a boid state to the particle system",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.boid.state_del",
        "signature": "bpy.ops.boid.state_del()#",
        "description": "Delete current boid state",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.boid.state_move_down",
        "signature": "bpy.ops.boid.state_move_down()#",
        "description": "Move boid state down in the list",
        "parameters": []
    },
    {
        "function_id": "bpy.ops.boid.state_move_up",
        "signature": "bpy.ops.boid.state_move_up()#",
        "description": "Move boid state up in the list",
        "parameters": []
    }
]